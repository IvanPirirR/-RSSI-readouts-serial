
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20003fc0 	.word	0x20003fc0
}
   4:	00011959 	.word	0x00011959
   8:	0001d673 	.word	0x0001d673
   c:	0001192d 	.word	0x0001192d
  10:	0001192d 	.word	0x0001192d
  14:	0001192d 	.word	0x0001192d
  18:	0001192d 	.word	0x0001192d
	...
  2c:	0001157d 	.word	0x0001157d
  30:	0001192d 	.word	0x0001192d
  34:	00000000 	.word	0x00000000
  38:	00011529 	.word	0x00011529
  3c:	000177d5 	.word	0x000177d5

00000040 <_irq_vector_table>:
  40:	00011635 0001fc65 00011635 00011635     5...e...5...5...
  50:	00011635 00011635 00011635 00011635     5...5...5...5...
  60:	0001fc2d 00011635 00011635 0001fc4b     -...5...5...K...
  70:	00011635 00011635 00011635 00011635     5...5...5...5...
  80:	00011635 00011635 00011635 00011635     5...5...5...5...
  90:	00011635 00011635 00011635 00011635     5...5...5...5...
  a0:	00011635 00011635 00011635 00011635     5...5...5...5...
  b0:	00011635 00011635 00011635 00011635     5...5...5...5...
  c0:	00011635 00011635 00011635 00011635     5...5...5...5...
  d0:	00011635 00011635 00011635 00011635     5...5...5...5...
  e0:	00011635 00011635 00011635 00011635     5...5...5...5...
  f0:	00011635 00011635 00011635 00011635     5...5...5...5...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_FLASH_SIZE+0x46>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_FLASH_SIZE+0x82>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_FLASH_SIZE+0x12>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_FLASH_SIZE+0x1e0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_FLASH_SIZE+0x3a>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_FLASH_SIZE+0x1e8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_FLASH_SIZE+0x5c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_FLASH_SIZE+0x1ae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_FLASH_SIZE+0xfc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_FLASH_SIZE+0x6e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_FLASH_SIZE+0x1dc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_FLASH_SIZE+0x1d8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_FLASH_SIZE+0x1d8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_FLASH_SIZE+0xf4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_FLASH_SIZE+0x1d0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_FLASH_SIZE+0x1d0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_FLASH_SIZE+0x14e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_FLASH_SIZE+0x1d4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_FLASH_SIZE+0x1d4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_FLASH_SIZE+0x178>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_FLASH_SIZE+0x1cc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_FLASH_SIZE+0x1cc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     38c:	d016      	beq.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_FLASH_SIZE+0x1a8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_FLASH_SIZE+0x18e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_FLASH_SIZE+0x18e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_FLASH_SIZE+0x178>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_FLASH_SIZE+0xf4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_FLASH_SIZE+0x14e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_FLASH_SIZE+0x3c>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_BT_RX_STACK_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_BT_RX_STACK_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00b fefa 	bl	c20c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000

00000428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     428:	4801      	ldr	r0, [pc, #4]	; (430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     42a:	7800      	ldrb	r0, [r0, #0]
     42c:	4770      	bx	lr
     42e:	0000      	.short	0x0000
     430:	20000008 	.word	0x20000008

00000434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     434:	4905      	ldr	r1, [pc, #20]	; (44c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     436:	780a      	ldrb	r2, [r1, #0]
     438:	4290      	cmp	r0, r2
     43a:	d301      	bcc.n	440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     43c:	2000      	movs	r0, #0
     43e:	4770      	bx	lr
     440:	6849      	ldr	r1, [r1, #4]
     442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     44a:	4770      	bx	lr
     44c:	20000008 	.word	0x20000008
     450:	b570      	push	{r4, r5, r6, lr}
     452:	4605      	mov	r5, r0
     454:	2a20      	cmp	r2, #32
     456:	d027      	beq.n	4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     458:	4819      	ldr	r0, [pc, #100]	; (4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>)
     45a:	4c1a      	ldr	r4, [pc, #104]	; (4c4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>)
     45c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     468:	2920      	cmp	r1, #32
     46a:	d022      	beq.n	4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     46c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     470:	7840      	ldrb	r0, [r0, #1]
     472:	784c      	ldrb	r4, [r1, #1]
     474:	7048      	strb	r0, [r1, #1]
     476:	4620      	mov	r0, r4
     478:	4601      	mov	r1, r0
     47a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     47e:	4291      	cmp	r1, r2
     480:	7005      	strb	r5, [r0, #0]
     482:	7840      	ldrb	r0, [r0, #1]
     484:	d1f8      	bne.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     48a:	2a20      	cmp	r2, #32
     48c:	bf1a      	itte	ne
     48e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     492:	7054      	strbne	r4, [r2, #1]
     494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     498:	2220      	movs	r2, #32
     49a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     49e:	f88c 2001 	strb.w	r2, [ip, #1]
     4a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     4a6:	bd70      	pop	{r4, r5, r6, pc}
     4a8:	f240 217e 	movw	r1, #638	; 0x27e
     4ac:	2070      	movs	r0, #112	; 0x70
     4ae:	f003 f957 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4b2:	f893 4020 	ldrb.w	r4, [r3, #32]
     4b6:	7840      	ldrb	r0, [r0, #1]
     4b8:	f883 0020 	strb.w	r0, [r3, #32]
     4bc:	e7db      	b.n	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     4be:	0000      	.short	0x0000
     4c0:	20000c24 	.word	0x20000c24
     4c4:	20000ca4 	.word	0x20000ca4
     4c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	b085      	sub	sp, #20
     4ce:	4615      	mov	r5, r2
     4d0:	460c      	mov	r4, r1
     4d2:	f002 f91b 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     4d6:	4428      	add	r0, r5
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4dc:	9002      	str	r0, [sp, #8]
     4de:	6821      	ldr	r1, [r4, #0]
     4e0:	1a08      	subs	r0, r1, r0
     4e2:	0200      	lsls	r0, r0, #8
     4e4:	17c1      	asrs	r1, r0, #31
     4e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4ea:	1200      	asrs	r0, r0, #8
     4ec:	2800      	cmp	r0, #0
     4ee:	f300 80d5 	bgt.w	69c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     4f2:	48ac      	ldr	r0, [pc, #688]	; (7a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a4>)
     4f4:	9f08      	ldr	r7, [sp, #32]
     4f6:	4eac      	ldr	r6, [pc, #688]	; (7a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a8>)
     4f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4fc:	9003      	str	r0, [sp, #12]
     4fe:	f890 5020 	ldrb.w	r5, [r0, #32]
     502:	2020      	movs	r0, #32
     504:	46e9      	mov	r9, sp
     506:	f10d 0804 	add.w	r8, sp, #4
     50a:	f88d 0000 	strb.w	r0, [sp]
     50e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     512:	2d20      	cmp	r5, #32
     514:	bf18      	it	ne
     516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     51a:	d025      	beq.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     51c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     524:	6822      	ldr	r2, [r4, #0]
     526:	68c1      	ldr	r1, [r0, #12]
     528:	1a51      	subs	r1, r2, r1
     52a:	0209      	lsls	r1, r1, #8
     52c:	17ca      	asrs	r2, r1, #31
     52e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     532:	3008      	adds	r0, #8
     534:	1209      	asrs	r1, r1, #8
     536:	d417      	bmi.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     538:	8961      	ldrh	r1, [r4, #10]
     53a:	b171      	cbz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     53c:	8941      	ldrh	r1, [r0, #10]
     53e:	b961      	cbnz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     540:	f000 fdba 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     544:	f002 f8e2 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     548:	6821      	ldr	r1, [r4, #0]
     54a:	1a08      	subs	r0, r1, r0
     54c:	0200      	lsls	r0, r0, #8
     54e:	17c1      	asrs	r1, r0, #31
     550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     554:	1200      	asrs	r0, r0, #8
     556:	2833      	cmp	r0, #51	; 0x33
     558:	db06      	blt.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     55a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     55e:	f889 5000 	strb.w	r5, [r9]
     562:	7845      	ldrb	r5, [r0, #1]
     564:	2d20      	cmp	r5, #32
     566:	d1d9      	bne.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     568:	f899 0000 	ldrb.w	r0, [r9]
     56c:	f888 0000 	strb.w	r0, [r8]
     570:	46a1      	mov	r9, r4
     572:	2d20      	cmp	r5, #32
     574:	bf1c      	itt	ne
     576:	488d      	ldrne	r0, [pc, #564]	; (7ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ac>)
     578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     57c:	f000 810e 	beq.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     588:	f8d9 2004 	ldr.w	r2, [r9, #4]
     58c:	f8da 1008 	ldr.w	r1, [sl, #8]
     590:	4648      	mov	r0, r9
     592:	1a89      	subs	r1, r1, r2
     594:	0209      	lsls	r1, r1, #8
     596:	17ca      	asrs	r2, r1, #31
     598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     59c:	f10a 0708 	add.w	r7, sl, #8
     5a0:	1209      	asrs	r1, r1, #8
     5a2:	d415      	bmi.n	5d0 <__data_size+0xd>
     5a4:	8979      	ldrh	r1, [r7, #10]
     5a6:	2900      	cmp	r1, #0
     5a8:	f000 80f8 	beq.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     5ac:	8941      	ldrh	r1, [r0, #10]
     5ae:	2900      	cmp	r1, #0
     5b0:	f040 80f4 	bne.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     5b4:	f000 fd80 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     5b8:	f002 f8a8 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5bc:	6839      	ldr	r1, [r7, #0]
     5be:	1a08      	subs	r0, r1, r0
     5c0:	0200      	lsls	r0, r0, #8
     5c2:	17c1      	asrs	r1, r0, #31
     5c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5c8:	1200      	asrs	r0, r0, #8
     5ca:	2833      	cmp	r0, #51	; 0x33
     5cc:	f280 80e6 	bge.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     5d0:	f888 5000 	strb.w	r5, [r8]
     5d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5d8:	f899 000c 	ldrb.w	r0, [r9, #12]
     5dc:	4281      	cmp	r1, r0
     5de:	d906      	bls.n	5ee <__data_size+0x2b>
     5e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5e4:	7845      	ldrb	r5, [r0, #1]
     5e6:	2d20      	cmp	r5, #32
     5e8:	d1ca      	bne.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     5ea:	f000 b8d7 	b.w	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     5ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5fa:	8a68      	ldrh	r0, [r5, #18]
     5fc:	68ef      	ldr	r7, [r5, #12]
     5fe:	2800      	cmp	r0, #0
     600:	d143      	bne.n	68a <CONFIG_BT_HCI_TX_STACK_SIZE+0x8a>
     602:	8960      	ldrh	r0, [r4, #10]
     604:	b3e8      	cbz	r0, 682 <CONFIG_BT_HCI_TX_STACK_SIZE+0x82>
     606:	68a8      	ldr	r0, [r5, #8]
     608:	f00b fe20 	bl	c24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     60c:	8a69      	ldrh	r1, [r5, #18]
     60e:	7c2a      	ldrb	r2, [r5, #16]
     610:	4b67      	ldr	r3, [pc, #412]	; (7b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b0>)
     612:	4411      	add	r1, r2
     614:	1c49      	adds	r1, r1, #1
     616:	1842      	adds	r2, r0, r1
     618:	4298      	cmp	r0, r3
     61a:	d904      	bls.n	626 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     61c:	f240 6109 	movw	r1, #1545	; 0x609
     620:	2070      	movs	r0, #112	; 0x70
     622:	f003 f89d 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     626:	4863      	ldr	r0, [pc, #396]	; (7b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b4>)
     628:	4281      	cmp	r1, r0
     62a:	dd04      	ble.n	636 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     62c:	f240 610a 	movw	r1, #1546	; 0x60a
     630:	2070      	movs	r0, #112	; 0x70
     632:	f003 f895 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     636:	4860      	ldr	r0, [pc, #384]	; (7b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b8>)
     638:	4281      	cmp	r1, r0
     63a:	da04      	bge.n	646 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     63c:	f240 610b 	movw	r1, #1547	; 0x60b
     640:	2070      	movs	r0, #112	; 0x70
     642:	f003 f88d 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     646:	485d      	ldr	r0, [pc, #372]	; (7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>)
     648:	4290      	cmp	r0, r2
     64a:	bfdc      	itt	le
     64c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     654:	dd05      	ble.n	662 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     656:	2a00      	cmp	r2, #0
     658:	bfbc      	itt	lt
     65a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     65e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     662:	4610      	mov	r0, r2
     664:	f002 f852 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     66c:	1a78      	subs	r0, r7, r1
     66e:	0200      	lsls	r0, r0, #8
     670:	17c2      	asrs	r2, r0, #31
     672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     676:	1200      	asrs	r0, r0, #8
     678:	2833      	cmp	r0, #51	; 0x33
     67a:	bfb8      	it	lt
     67c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     680:	e000      	b.n	684 <CONFIG_BT_HCI_TX_STACK_SIZE+0x84>
     682:	e002      	b.n	68a <CONFIG_BT_HCI_TX_STACK_SIZE+0x8a>
     684:	bfb8      	it	lt
     686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     68a:	9802      	ldr	r0, [sp, #8]
     68c:	1a38      	subs	r0, r7, r0
     68e:	0200      	lsls	r0, r0, #8
     690:	17c1      	asrs	r1, r0, #31
     692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     696:	1200      	asrs	r0, r0, #8
     698:	2800      	cmp	r0, #0
     69a:	dd03      	ble.n	6a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa4>
     69c:	b009      	add	sp, #36	; 0x24
     69e:	2000      	movs	r0, #0
     6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6a4:	e9d4 1000 	ldrd	r1, r0, [r4]
     6a8:	1a40      	subs	r0, r0, r1
     6aa:	4438      	add	r0, r7
     6ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     6b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6b4:	e9c4 1000 	strd	r1, r0, [r4]
     6b8:	9803      	ldr	r0, [sp, #12]
     6ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6be:	466f      	mov	r7, sp
     6c0:	f890 5020 	ldrb.w	r5, [r0, #32]
     6c4:	2020      	movs	r0, #32
     6c6:	f10d 0a04 	add.w	sl, sp, #4
     6ca:	f88d 0000 	strb.w	r0, [sp]
     6ce:	2d20      	cmp	r5, #32
     6d0:	bf1c      	itt	ne
     6d2:	4836      	ldrne	r0, [pc, #216]	; (7ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ac>)
     6d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6d8:	d025      	beq.n	726 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     6da:	bf00      	nop
     6dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6e4:	6822      	ldr	r2, [r4, #0]
     6e6:	68c1      	ldr	r1, [r0, #12]
     6e8:	1a51      	subs	r1, r2, r1
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	17ca      	asrs	r2, r1, #31
     6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6f2:	3008      	adds	r0, #8
     6f4:	1209      	asrs	r1, r1, #8
     6f6:	d416      	bmi.n	726 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     6f8:	8961      	ldrh	r1, [r4, #10]
     6fa:	b171      	cbz	r1, 71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     6fc:	8941      	ldrh	r1, [r0, #10]
     6fe:	b961      	cbnz	r1, 71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     700:	f000 fcda 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     704:	f002 f802 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     708:	6821      	ldr	r1, [r4, #0]
     70a:	1a08      	subs	r0, r1, r0
     70c:	0200      	lsls	r0, r0, #8
     70e:	17c1      	asrs	r1, r0, #31
     710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     714:	1200      	asrs	r0, r0, #8
     716:	2833      	cmp	r0, #51	; 0x33
     718:	db05      	blt.n	726 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     71a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     71e:	703d      	strb	r5, [r7, #0]
     720:	7845      	ldrb	r5, [r0, #1]
     722:	2d20      	cmp	r5, #32
     724:	d1da      	bne.n	6dc <CONFIG_BT_HCI_TX_STACK_SIZE+0xdc>
     726:	7838      	ldrb	r0, [r7, #0]
     728:	f88a 0000 	strb.w	r0, [sl]
     72c:	4627      	mov	r7, r4
     72e:	2d20      	cmp	r5, #32
     730:	bf1c      	itt	ne
     732:	481e      	ldrne	r0, [pc, #120]	; (7ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ac>)
     734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     738:	d030      	beq.n	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     73a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     73e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     742:	6879      	ldr	r1, [r7, #4]
     744:	f8d9 2008 	ldr.w	r2, [r9, #8]
     748:	4638      	mov	r0, r7
     74a:	1a51      	subs	r1, r2, r1
     74c:	0209      	lsls	r1, r1, #8
     74e:	17ca      	asrs	r2, r1, #31
     750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     754:	f109 0808 	add.w	r8, r9, #8
     758:	1209      	asrs	r1, r1, #8
     75a:	d412      	bmi.n	782 <CONFIG_BT_HCI_TX_STACK_SIZE+0x182>
     75c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     760:	b1e1      	cbz	r1, 79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     762:	8941      	ldrh	r1, [r0, #10]
     764:	b9d1      	cbnz	r1, 79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     766:	f000 fca7 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     76a:	f001 ffcf 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     76e:	f8d8 1000 	ldr.w	r1, [r8]
     772:	1a08      	subs	r0, r1, r0
     774:	0200      	lsls	r0, r0, #8
     776:	17c1      	asrs	r1, r0, #31
     778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     77c:	1200      	asrs	r0, r0, #8
     77e:	2833      	cmp	r0, #51	; 0x33
     780:	da0c      	bge.n	79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>
     782:	f88a 5000 	strb.w	r5, [sl]
     786:	f899 0014 	ldrb.w	r0, [r9, #20]
     78a:	7b39      	ldrb	r1, [r7, #12]
     78c:	4288      	cmp	r0, r1
     78e:	f67f af2e 	bls.w	5ee <__data_size+0x2b>
     792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     796:	7845      	ldrb	r5, [r0, #1]
     798:	2d20      	cmp	r5, #32
     79a:	d1ce      	bne.n	73a <CONFIG_BT_HCI_TX_STACK_SIZE+0x13a>
     79c:	b009      	add	sp, #36	; 0x24
     79e:	2001      	movs	r0, #1
     7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a4:	20000ca4 	.word	0x20000ca4
     7a8:	20000924 	.word	0x20000924
     7ac:	20000c24 	.word	0x20000c24
     7b0:	1e847fff 	.word	0x1e847fff
     7b4:	07a12000 	.word	0x07a12000
     7b8:	f85ee000 	.word	0xf85ee000
     7bc:	1e848000 	.word	0x1e848000
     7c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7c4:	4604      	mov	r4, r0
     7c6:	483c      	ldr	r0, [pc, #240]	; (8b8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb8>)
     7c8:	460e      	mov	r6, r1
     7ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7ce:	4f3b      	ldr	r7, [pc, #236]	; (8bc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xbc>)
     7d0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7d4:	2020      	movs	r0, #32
     7d6:	4698      	mov	r8, r3
     7d8:	4692      	mov	sl, r2
     7da:	7010      	strb	r0, [r2, #0]
     7dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7e0:	2d20      	cmp	r5, #32
     7e2:	bf18      	it	ne
     7e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7e8:	d028      	beq.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     7ea:	bf00      	nop
     7ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7f4:	f100 0108 	add.w	r1, r0, #8
     7f8:	68c0      	ldr	r0, [r0, #12]
     7fa:	6822      	ldr	r2, [r4, #0]
     7fc:	1a10      	subs	r0, r2, r0
     7fe:	0200      	lsls	r0, r0, #8
     800:	17c2      	asrs	r2, r0, #31
     802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     806:	1200      	asrs	r0, r0, #8
     808:	d418      	bmi.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     80a:	8960      	ldrh	r0, [r4, #10]
     80c:	b178      	cbz	r0, 82e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e>
     80e:	8948      	ldrh	r0, [r1, #10]
     810:	b968      	cbnz	r0, 82e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e>
     812:	4608      	mov	r0, r1
     814:	f000 fc50 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     818:	f001 ff78 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     81c:	6821      	ldr	r1, [r4, #0]
     81e:	1a08      	subs	r0, r1, r0
     820:	0200      	lsls	r0, r0, #8
     822:	17c1      	asrs	r1, r0, #31
     824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     828:	1200      	asrs	r0, r0, #8
     82a:	2833      	cmp	r0, #51	; 0x33
     82c:	db06      	blt.n	83c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3c>
     82e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     832:	f88a 5000 	strb.w	r5, [sl]
     836:	7845      	ldrb	r5, [r0, #1]
     838:	2d20      	cmp	r5, #32
     83a:	d1d7      	bne.n	7ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ec>
     83c:	f89a 0000 	ldrb.w	r0, [sl]
     840:	f888 0000 	strb.w	r0, [r8]
     844:	2d20      	cmp	r5, #32
     846:	bf18      	it	ne
     848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     84c:	d030      	beq.n	8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     84e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     856:	6861      	ldr	r1, [r4, #4]
     858:	f8d9 2008 	ldr.w	r2, [r9, #8]
     85c:	4620      	mov	r0, r4
     85e:	1a51      	subs	r1, r2, r1
     860:	0209      	lsls	r1, r1, #8
     862:	17ca      	asrs	r2, r1, #31
     864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     868:	f109 0608 	add.w	r6, r9, #8
     86c:	1209      	asrs	r1, r1, #8
     86e:	d410      	bmi.n	892 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x92>
     870:	8971      	ldrh	r1, [r6, #10]
     872:	b1e9      	cbz	r1, 8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     874:	8941      	ldrh	r1, [r0, #10]
     876:	b9d9      	cbnz	r1, 8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     878:	f000 fc1e 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     87c:	f001 ff46 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     880:	6831      	ldr	r1, [r6, #0]
     882:	1a08      	subs	r0, r1, r0
     884:	0200      	lsls	r0, r0, #8
     886:	17c1      	asrs	r1, r0, #31
     888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     88c:	1200      	asrs	r0, r0, #8
     88e:	2833      	cmp	r0, #51	; 0x33
     890:	da0e      	bge.n	8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     892:	f888 5000 	strb.w	r5, [r8]
     896:	f899 0014 	ldrb.w	r0, [r9, #20]
     89a:	7b21      	ldrb	r1, [r4, #12]
     89c:	4288      	cmp	r0, r1
     89e:	d802      	bhi.n	8a6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa6>
     8a0:	2000      	movs	r0, #0
     8a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     8aa:	7845      	ldrb	r5, [r0, #1]
     8ac:	2d20      	cmp	r5, #32
     8ae:	d1ce      	bne.n	84e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e>
     8b0:	2001      	movs	r0, #1
     8b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8b6:	0000      	.short	0x0000
     8b8:	20000ca4 	.word	0x20000ca4
     8bc:	20000924 	.word	0x20000924
     8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8c4:	f04f 0800 	mov.w	r8, #0
     8c8:	b098      	sub	sp, #96	; 0x60
     8ca:	4616      	mov	r6, r2
     8cc:	460d      	mov	r5, r1
     8ce:	46c3      	mov	fp, r8
     8d0:	f002 f994 	bl	2bfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8d4:	4604      	mov	r4, r0
     8d6:	2d01      	cmp	r5, #1
     8d8:	bf18      	it	ne
     8da:	2d02      	cmpne	r5, #2
     8dc:	d005      	beq.n	8ea <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xea>
     8de:	f640 1194 	movw	r1, #2452	; 0x994
     8e2:	f04f 0070 	mov.w	r0, #112	; 0x70
     8e6:	f002 ff3b 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8ea:	49fd      	ldr	r1, [pc, #1012]	; (ce0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e0>)
     8ec:	2001      	movs	r0, #1
     8ee:	6008      	str	r0, [r1, #0]
     8f0:	49fc      	ldr	r1, [pc, #1008]	; (ce4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e4>)
     8f2:	6889      	ldr	r1, [r1, #8]
     8f4:	6008      	str	r0, [r1, #0]
     8f6:	2000      	movs	r0, #0
     8f8:	900c      	str	r0, [sp, #48]	; 0x30
     8fa:	1e40      	subs	r0, r0, #1
     8fc:	900e      	str	r0, [sp, #56]	; 0x38
     8fe:	49fa      	ldr	r1, [pc, #1000]	; (ce8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e8>)
     900:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     904:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     908:	3308      	adds	r3, #8
     90a:	af0f      	add	r7, sp, #60	; 0x3c
     90c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     90e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     912:	a80f      	add	r0, sp, #60	; 0x3c
     914:	f000 fbd0 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     918:	900d      	str	r0, [sp, #52]	; 0x34
     91a:	48f3      	ldr	r0, [pc, #972]	; (ce8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4e8>)
     91c:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     920:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     924:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     928:	f1b9 0f00 	cmp.w	r9, #0
     92c:	bf14      	ite	ne
     92e:	f04f 0a01 	movne.w	sl, #1
     932:	f04f 0a00 	moveq.w	sl, #0
     936:	980f      	ldr	r0, [sp, #60]	; 0x3c
     938:	9014      	str	r0, [sp, #80]	; 0x50
     93a:	f1ba 0f00 	cmp.w	sl, #0
     93e:	d009      	beq.n	954 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x154>
     940:	48ea      	ldr	r0, [pc, #936]	; (cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>)
     942:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     946:	b928      	cbnz	r0, 954 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x154>
     948:	f002 fea6 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     94c:	2800      	cmp	r0, #0
     94e:	bf08      	it	eq
     950:	2701      	moveq	r7, #1
     952:	d000      	beq.n	956 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x156>
     954:	2700      	movs	r7, #0
     956:	48e6      	ldr	r0, [pc, #920]	; (cf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f0>)
     958:	2200      	movs	r2, #0
     95a:	9215      	str	r2, [sp, #84]	; 0x54
     95c:	7800      	ldrb	r0, [r0, #0]
     95e:	4616      	mov	r6, r2
     960:	2801      	cmp	r0, #1
     962:	bf18      	it	ne
     964:	2803      	cmpne	r0, #3
     966:	d140      	bne.n	9ea <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1ea>
     968:	48e1      	ldr	r0, [pc, #900]	; (cf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f0>)
     96a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     96e:	eba8 0009 	sub.w	r0, r8, r9
     972:	9015      	str	r0, [sp, #84]	; 0x54
     974:	45c8      	cmp	r8, r9
     976:	d938      	bls.n	9ea <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1ea>
     978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     97a:	ea6f 0108 	mvn.w	r1, r8
     97e:	f8df e374 	ldr.w	lr, [pc, #884]	; cf4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f4>
     982:	1858      	adds	r0, r3, r1
     984:	f10d 0c0c 	add.w	ip, sp, #12
     988:	aa17      	add	r2, sp, #92	; 0x5c
     98a:	4573      	cmp	r3, lr
     98c:	d904      	bls.n	998 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x198>
     98e:	f240 6109 	movw	r1, #1545	; 0x609
     992:	2070      	movs	r0, #112	; 0x70
     994:	f002 fee4 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     998:	4bd7      	ldr	r3, [pc, #860]	; (cf8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f8>)
     99a:	4299      	cmp	r1, r3
     99c:	dd04      	ble.n	9a8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1a8>
     99e:	f240 610a 	movw	r1, #1546	; 0x60a
     9a2:	2070      	movs	r0, #112	; 0x70
     9a4:	f002 fedc 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9a8:	4bd4      	ldr	r3, [pc, #848]	; (cfc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4fc>)
     9aa:	4299      	cmp	r1, r3
     9ac:	da04      	bge.n	9b8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1b8>
     9ae:	f240 610b 	movw	r1, #1547	; 0x60b
     9b2:	2070      	movs	r0, #112	; 0x70
     9b4:	f002 fed4 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9b8:	49d1      	ldr	r1, [pc, #836]	; (d00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x500>)
     9ba:	4281      	cmp	r1, r0
     9bc:	bfdc      	itt	le
     9be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     9c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9c6:	dd05      	ble.n	9d4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d4>
     9c8:	2800      	cmp	r0, #0
     9ca:	bfbc      	itt	lt
     9cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9d4:	4661      	mov	r1, ip
     9d6:	f001 feb5 	bl	2744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9da:	9803      	ldr	r0, [sp, #12]
     9dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9e2:	9003      	str	r0, [sp, #12]
     9e4:	1a08      	subs	r0, r1, r0
     9e6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9ea:	2f00      	cmp	r7, #0
     9ec:	bf18      	it	ne
     9ee:	2632      	movne	r6, #50	; 0x32
     9f0:	d104      	bne.n	9fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1fc>
     9f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9f6:	2800      	cmp	r0, #0
     9f8:	bf18      	it	ne
     9fa:	2602      	movne	r6, #2
     9fc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a00:	d008      	beq.n	a14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x214>
     a02:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a04:	1b00      	subs	r0, r0, r4
     a06:	0200      	lsls	r0, r0, #8
     a08:	17c1      	asrs	r1, r0, #31
     a0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a0e:	1200      	asrs	r0, r0, #8
     a10:	2801      	cmp	r0, #1
     a12:	da02      	bge.n	a1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x21a>
     a14:	2104      	movs	r1, #4
     a16:	9818      	ldr	r0, [sp, #96]	; 0x60
     a18:	e00b      	b.n	a32 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x232>
     a1a:	b147      	cbz	r7, a2e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x22e>
     a1c:	48b3      	ldr	r0, [pc, #716]	; (cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>)
     a1e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a22:	b120      	cbz	r0, a2e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x22e>
     a24:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a28:	1c06      	adds	r6, r0, #0
     a2a:	bf18      	it	ne
     a2c:	2602      	movne	r6, #2
     a2e:	4620      	mov	r0, r4
     a30:	2101      	movs	r1, #1
     a32:	f1b9 0f00 	cmp.w	r9, #0
     a36:	d002      	beq.n	a3e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x23e>
     a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a3a:	2b1e      	cmp	r3, #30
     a3c:	da02      	bge.n	a44 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x244>
     a3e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a42:	b113      	cbz	r3, a4a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x24a>
     a44:	f04f 0b01 	mov.w	fp, #1
     a48:	1e49      	subs	r1, r1, #1
     a4a:	198b      	adds	r3, r1, r6
     a4c:	49a8      	ldr	r1, [pc, #672]	; (cf0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f0>)
     a4e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a52:	7809      	ldrb	r1, [r1, #0]
     a54:	9115      	str	r1, [sp, #84]	; 0x54
     a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
     a58:	1a89      	subs	r1, r1, r2
     a5a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     a5e:	ebac 0100 	sub.w	r1, ip, r0
     a62:	0209      	lsls	r1, r1, #8
     a64:	17ce      	asrs	r6, r1, #31
     a66:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     a6a:	1209      	asrs	r1, r1, #8
     a6c:	4299      	cmp	r1, r3
     a6e:	db18      	blt.n	aa2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2a2>
     a70:	2a00      	cmp	r2, #0
     a72:	bf18      	it	ne
     a74:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a7a:	9705      	str	r7, [sp, #20]
     a7c:	2700      	movs	r7, #0
     a7e:	f001 ffb7 	bl	29f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a82:	1a30      	subs	r0, r6, r0
     a84:	0200      	lsls	r0, r0, #8
     a86:	17c1      	asrs	r1, r0, #31
     a88:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a8c:	1200      	asrs	r0, r0, #8
     a8e:	283e      	cmp	r0, #62	; 0x3e
     a90:	da3f      	bge.n	b12 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x312>
     a92:	2d01      	cmp	r5, #1
     a94:	d020      	beq.n	ad8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2d8>
     a96:	1e70      	subs	r0, r6, #1
     a98:	9905      	ldr	r1, [sp, #20]
     a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a9e:	b319      	cbz	r1, ae8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2e8>
     aa0:	e02d      	b.n	afe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fe>
     aa2:	b182      	cbz	r2, ac6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c6>
     aa4:	f1be 0f00 	cmp.w	lr, #0
     aa8:	bf04      	itt	eq
     aaa:	9915      	ldreq	r1, [sp, #84]	; 0x54
     aac:	2903      	cmpeq	r1, #3
     aae:	d00a      	beq.n	ac6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2c6>
     ab0:	b927      	cbnz	r7, abc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2bc>
     ab2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     ab6:	2900      	cmp	r1, #0
     ab8:	bf18      	it	ne
     aba:	1e9b      	subne	r3, r3, #2
     abc:	2200      	movs	r2, #0
     abe:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     ac2:	4690      	mov	r8, r2
     ac4:	e7c7      	b.n	a56 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x256>
     ac6:	bb07      	cbnz	r7, b0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30a>
     ac8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     acc:	b1e9      	cbz	r1, b0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30a>
     ace:	2100      	movs	r1, #0
     ad0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     ad4:	1e9b      	subs	r3, r3, #2
     ad6:	e7be      	b.n	a56 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x256>
     ad8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     adc:	d120      	bne.n	b20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x320>
     ade:	f640 110d 	movw	r1, #2317	; 0x90d
     ae2:	2070      	movs	r0, #112	; 0x70
     ae4:	f002 fe3c 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ae8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     aec:	d007      	beq.n	afe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fe>
     aee:	1a21      	subs	r1, r4, r0
     af0:	0209      	lsls	r1, r1, #8
     af2:	17ca      	asrs	r2, r1, #31
     af4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     af8:	1209      	asrs	r1, r1, #8
     afa:	2904      	cmp	r1, #4
     afc:	dd03      	ble.n	b06 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x306>
     afe:	4604      	mov	r4, r0
     b00:	f001 ff7c 	bl	29fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b04:	e00c      	b.n	b20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x320>
     b06:	2900      	cmp	r1, #0
     b08:	dd0a      	ble.n	b20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x320>
     b0a:	b01b      	add	sp, #108	; 0x6c
     b0c:	2000      	movs	r0, #0
     b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b12:	1e70      	subs	r0, r6, #1
     b14:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b18:	4620      	mov	r0, r4
     b1a:	f001 ff6f 	bl	29fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b1e:	4657      	mov	r7, sl
     b20:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b24:	d028      	beq.n	b78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x378>
     b26:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b28:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     b2c:	1b00      	subs	r0, r0, r4
     b2e:	f08b 0301 	eor.w	r3, fp, #1
     b32:	4a74      	ldr	r2, [pc, #464]	; (d04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x504>)
     b34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b38:	ebac 0c04 	sub.w	ip, ip, r4
     b3c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     b40:	4283      	cmp	r3, r0
     b42:	bf98      	it	ls
     b44:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b48:	d2df      	bcs.n	b0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30a>
     b4a:	4562      	cmp	r2, ip
     b4c:	d3dd      	bcc.n	b0a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x30a>
     b4e:	4620      	mov	r0, r4
     b50:	f00b fb7c 	bl	c24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b54:	4967      	ldr	r1, [pc, #412]	; (cf4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4f4>)
     b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b58:	1c4b      	adds	r3, r1, #1
     b5a:	1a16      	subs	r6, r2, r0
     b5c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b60:	bf24      	itt	cs
     b62:	eba0 0c02 	subcs.w	ip, r0, r2
     b66:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b6a:	d310      	bcc.n	b8e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38e>
     b6c:	42b1      	cmp	r1, r6
     b6e:	d208      	bcs.n	b82 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x382>
     b70:	1a08      	subs	r0, r1, r0
     b72:	4410      	add	r0, r2
     b74:	1c46      	adds	r6, r0, #1
     b76:	e00a      	b.n	b8e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38e>
     b78:	f640 212c 	movw	r1, #2604	; 0xa2c
     b7c:	2070      	movs	r0, #112	; 0x70
     b7e:	f002 fdef 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b82:	4561      	cmp	r1, ip
     b84:	d22c      	bcs.n	be0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e0>
     b86:	1a89      	subs	r1, r1, r2
     b88:	4408      	add	r0, r1
     b8a:	1c40      	adds	r0, r0, #1
     b8c:	4246      	negs	r6, r0
     b8e:	4857      	ldr	r0, [pc, #348]	; (cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>)
     b90:	7f80      	ldrb	r0, [r0, #30]
     b92:	b350      	cbz	r0, bea <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3ea>
     b94:	4628      	mov	r0, r5
     b96:	4645      	mov	r5, r8
     b98:	f04f 0b00 	mov.w	fp, #0
     b9c:	46d8      	mov	r8, fp
     b9e:	2801      	cmp	r0, #1
     ba0:	d005      	beq.n	bae <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3ae>
     ba2:	2002      	movs	r0, #2
     ba4:	f002 f972 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ba8:	2001      	movs	r0, #1
     baa:	f002 f96f 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     bae:	45a9      	cmp	r9, r5
     bb0:	d22c      	bcs.n	c0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40c>
     bb2:	eba6 0105 	sub.w	r1, r6, r5
     bb6:	f04f 0301 	mov.w	r3, #1
     bba:	f04f 0203 	mov.w	r2, #3
     bbe:	f04f 0002 	mov.w	r0, #2
     bc2:	f002 f89b 	bl	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bc6:	2800      	cmp	r0, #0
     bc8:	bf08      	it	eq
     bca:	f04f 0801 	moveq.w	r8, #1
     bce:	f1b9 0f00 	cmp.w	r9, #0
     bd2:	d035      	beq.n	c40 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x440>
     bd4:	2301      	movs	r3, #1
     bd6:	eba6 0109 	sub.w	r1, r6, r9
     bda:	2203      	movs	r2, #3
     bdc:	4618      	mov	r0, r3
     bde:	e023      	b.n	c28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x428>
     be0:	f640 310c 	movw	r1, #2828	; 0xb0c
     be4:	2070      	movs	r0, #112	; 0x70
     be6:	f002 fdbb 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bea:	45c1      	cmp	r9, r8
     bec:	bf34      	ite	cc
     bee:	4640      	movcc	r0, r8
     bf0:	4648      	movcs	r0, r9
     bf2:	f1bb 0f00 	cmp.w	fp, #0
     bf6:	bf14      	ite	ne
     bf8:	2100      	movne	r1, #0
     bfa:	211e      	moveq	r1, #30
     bfc:	4408      	add	r0, r1
     bfe:	42b0      	cmp	r0, r6
     c00:	dbc8      	blt.n	b94 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x394>
     c02:	f640 213f 	movw	r1, #2623	; 0xa3f
     c06:	2070      	movs	r0, #112	; 0x70
     c08:	f002 fdaa 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c0c:	d910      	bls.n	c30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x430>
     c0e:	2301      	movs	r3, #1
     c10:	eba6 0109 	sub.w	r1, r6, r9
     c14:	2203      	movs	r2, #3
     c16:	4618      	mov	r0, r3
     c18:	f002 f870 	bl	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c1c:	b328      	cbz	r0, c6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x46a>
     c1e:	b17d      	cbz	r5, c40 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x440>
     c20:	1b71      	subs	r1, r6, r5
     c22:	2301      	movs	r3, #1
     c24:	2203      	movs	r2, #3
     c26:	2002      	movs	r0, #2
     c28:	f002 f868 	bl	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c2c:	b1e8      	cbz	r0, c6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x46a>
     c2e:	e007      	b.n	c40 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x440>
     c30:	ea55 0009 	orrs.w	r0, r5, r9
     c34:	d004      	beq.n	c40 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x440>
     c36:	f640 1177 	movw	r1, #2423	; 0x977
     c3a:	2070      	movs	r0, #112	; 0x70
     c3c:	f002 fd90 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c40:	2301      	movs	r3, #1
     c42:	2203      	movs	r2, #3
     c44:	4631      	mov	r1, r6
     c46:	2000      	movs	r0, #0
     c48:	f002 f858 	bl	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c4c:	b168      	cbz	r0, c6a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x46a>
     c4e:	2501      	movs	r5, #1
     c50:	f1b8 0f00 	cmp.w	r8, #0
     c54:	d003      	beq.n	c5e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x45e>
     c56:	9814      	ldr	r0, [sp, #80]	; 0x50
     c58:	900f      	str	r0, [sp, #60]	; 0x3c
     c5a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c5e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x508>
     c62:	f1ba 0f00 	cmp.w	sl, #0
     c66:	d10e      	bne.n	c86 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x486>
     c68:	e009      	b.n	c7e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x47e>
     c6a:	2002      	movs	r0, #2
     c6c:	f002 f90e 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c70:	2001      	movs	r0, #1
     c72:	f002 f90b 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c76:	b01b      	add	sp, #108	; 0x6c
     c78:	2000      	movs	r0, #0
     c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c7e:	481b      	ldr	r0, [pc, #108]	; (cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>)
     c80:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c84:	b100      	cbz	r0, c88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x488>
     c86:	b34f      	cbz	r7, cdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4dc>
     c88:	f8df a060 	ldr.w	sl, [pc, #96]	; cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>
     c8c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c90:	b118      	cbz	r0, c9a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x49a>
     c92:	f002 fbc9 	bl	3428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c96:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c9a:	b307      	cbz	r7, cde <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4de>
     c9c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     ca0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ca4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     ca8:	f8c8 0000 	str.w	r0, [r8]
     cac:	2300      	movs	r3, #0
     cae:	2203      	movs	r2, #3
     cb0:	2005      	movs	r0, #5
     cb2:	f002 f823 	bl	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cb6:	b368      	cbz	r0, d14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x514>
     cb8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     cbc:	2005      	movs	r0, #5
     cbe:	f002 f9ab 	bl	3018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     cc2:	4912      	ldr	r1, [pc, #72]	; (d0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x50c>)
     cc4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     cc8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     ccc:	4910      	ldr	r1, [pc, #64]	; (d10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x510>)
     cce:	12e0      	asrs	r0, r4, #11
     cd0:	6008      	str	r0, [r1, #0]
     cd2:	4c06      	ldr	r4, [pc, #24]	; (cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>)
     cd4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     cd8:	b3f0      	cbz	r0, d58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x558>
     cda:	e05b      	b.n	d94 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x594>
     cdc:	e01b      	b.n	d16 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x516>
     cde:	e01f      	b.n	d20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x520>
     ce0:	40000508 	.word	0x40000508
     ce4:	20000010 	.word	0x20000010
     ce8:	20000924 	.word	0x20000924
     cec:	20000ca4 	.word	0x20000ca4
     cf0:	20000012 	.word	0x20000012
     cf4:	1e847fff 	.word	0x1e847fff
     cf8:	07a12000 	.word	0x07a12000
     cfc:	f85ee000 	.word	0xf85ee000
     d00:	1e848000 	.word	0x1e848000
     d04:	003fffff 	.word	0x003fffff
     d08:	4001f508 	.word	0x4001f508
     d0c:	4001f098 	.word	0x4001f098
     d10:	4001f504 	.word	0x4001f504
     d14:	e035      	b.n	d82 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x582>
     d16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>
     d1a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d1e:	b358      	cbz	r0, d78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x578>
     d20:	4c2b      	ldr	r4, [pc, #172]	; (dd0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d0>)
     d22:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d26:	b150      	cbz	r0, d3e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x53e>
     d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d2c:	f8c8 0000 	str.w	r0, [r8]
     d30:	2005      	movs	r0, #5
     d32:	f002 f8ab 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d36:	f002 fbdf 	bl	34f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d3a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d3e:	ac0c      	add	r4, sp, #48	; 0x30
     d40:	4824      	ldr	r0, [pc, #144]	; (dd4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d4>)
     d42:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d46:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d4a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d4e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d52:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d56:	e000      	b.n	d5a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x55a>
     d58:	e018      	b.n	d8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x58c>
     d5a:	ac10      	add	r4, sp, #64	; 0x40
     d5c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d60:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     d64:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     d68:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     d6c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     d70:	b01b      	add	sp, #108	; 0x6c
     d72:	2001      	movs	r0, #1
     d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d78:	f002 fb72 	bl	3460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d7c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d80:	e78b      	b.n	c9a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x49a>
     d82:	f240 313e 	movw	r1, #830	; 0x33e
     d86:	2070      	movs	r0, #112	; 0x70
     d88:	f002 fcea 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d8c:	f002 fba6 	bl	34dc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d90:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d94:	eba6 0009 	sub.w	r0, r6, r9
     d98:	f1a0 0119 	sub.w	r1, r0, #25
     d9c:	2900      	cmp	r1, #0
     d9e:	dc04      	bgt.n	daa <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5aa>
     da0:	f640 2169 	movw	r1, #2665	; 0xa69
     da4:	2070      	movs	r0, #112	; 0x70
     da6:	f002 fcdb 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     daa:	2203      	movs	r2, #3
     dac:	2301      	movs	r3, #1
     dae:	4610      	mov	r0, r2
     db0:	f001 ffa4 	bl	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     db4:	b138      	cbz	r0, dc6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5c6>
     db6:	4808      	ldr	r0, [pc, #32]	; (dd8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5d8>)
     db8:	6880      	ldr	r0, [r0, #8]
     dba:	f8c0 b000 	str.w	fp, [r0]
     dbe:	4807      	ldr	r0, [pc, #28]	; (ddc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5dc>)
     dc0:	f8c0 b000 	str.w	fp, [r0]
     dc4:	e7bb      	b.n	d3e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x53e>
     dc6:	f640 2174 	movw	r1, #2676	; 0xa74
     dca:	2070      	movs	r0, #112	; 0x70
     dcc:	f002 fcc8 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dd0:	20000ca4 	.word	0x20000ca4
     dd4:	20000924 	.word	0x20000924
     dd8:	20000010 	.word	0x20000010
     ddc:	40000508 	.word	0x40000508
     de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     de4:	4606      	mov	r6, r0
     de6:	b083      	sub	sp, #12
     de8:	7808      	ldrb	r0, [r1, #0]
     dea:	7390      	strb	r0, [r2, #14]
     dec:	7acf      	ldrb	r7, [r1, #11]
     dee:	7357      	strb	r7, [r2, #13]
     df0:	7a88      	ldrb	r0, [r1, #10]
     df2:	7310      	strb	r0, [r2, #12]
     df4:	8908      	ldrh	r0, [r1, #8]
     df6:	4614      	mov	r4, r2
     df8:	8150      	strh	r0, [r2, #10]
     dfa:	460d      	mov	r5, r1
     dfc:	780a      	ldrb	r2, [r1, #0]
     dfe:	495f      	ldr	r1, [pc, #380]	; (f7c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x77c>)
     e00:	4699      	mov	r9, r3
     e02:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     e06:	424b      	negs	r3, r1
     e08:	f1ac 0801 	sub.w	r8, ip, #1
     e0c:	b15a      	cbz	r2, e26 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x626>
     e0e:	43c0      	mvns	r0, r0
     e10:	f8d5 8004 	ldr.w	r8, [r5, #4]
     e14:	f104 0208 	add.w	r2, r4, #8
     e18:	4288      	cmp	r0, r1
     e1a:	dd3d      	ble.n	e98 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x698>
     e1c:	f240 610a 	movw	r1, #1546	; 0x60a
     e20:	2070      	movs	r0, #112	; 0x70
     e22:	f002 fc9d 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e26:	68ee      	ldr	r6, [r5, #12]
     e28:	686d      	ldr	r5, [r5, #4]
     e2a:	ea6f 0900 	mvn.w	r9, r0
     e2e:	f104 0208 	add.w	r2, r4, #8
     e32:	eb06 0009 	add.w	r0, r6, r9
     e36:	4546      	cmp	r6, r8
     e38:	d904      	bls.n	e44 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x644>
     e3a:	f240 6109 	movw	r1, #1545	; 0x609
     e3e:	2070      	movs	r0, #112	; 0x70
     e40:	f002 fc8e 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e44:	4589      	cmp	r9, r1
     e46:	dce9      	bgt.n	e1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x61c>
     e48:	4599      	cmp	r9, r3
     e4a:	db28      	blt.n	e9e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x69e>
     e4c:	4584      	cmp	ip, r0
     e4e:	bfdc      	itt	le
     e50:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e54:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e58:	dd05      	ble.n	e66 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x666>
     e5a:	2800      	cmp	r0, #0
     e5c:	bfbc      	itt	lt
     e5e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e62:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e66:	4621      	mov	r1, r4
     e68:	f001 fc6c 	bl	2744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e6c:	6820      	ldr	r0, [r4, #0]
     e6e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e72:	1970      	adds	r0, r6, r5
     e74:	1c40      	adds	r0, r0, #1
     e76:	6021      	str	r1, [r4, #0]
     e78:	2f00      	cmp	r7, #0
     e7a:	bf08      	it	eq
     e7c:	307a      	addeq	r0, #122	; 0x7a
     e7e:	d003      	beq.n	e88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x688>
     e80:	2f01      	cmp	r7, #1
     e82:	bf08      	it	eq
     e84:	3044      	addeq	r0, #68	; 0x44
     e86:	d12d      	bne.n	ee4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6e4>
     e88:	f001 fc40 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e90:	6060      	str	r0, [r4, #4]
     e92:	b003      	add	sp, #12
     e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e98:	4601      	mov	r1, r0
     e9a:	4298      	cmp	r0, r3
     e9c:	da04      	bge.n	ea8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6a8>
     e9e:	f240 610b 	movw	r1, #1547	; 0x60b
     ea2:	2070      	movs	r0, #112	; 0x70
     ea4:	f002 fc5c 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ea8:	4584      	cmp	ip, r0
     eaa:	bfdc      	itt	le
     eac:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     eb0:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     eb4:	dd05      	ble.n	ec2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6c2>
     eb6:	2800      	cmp	r0, #0
     eb8:	bfbc      	itt	lt
     eba:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     ebe:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     ec2:	4621      	mov	r1, r4
     ec4:	f001 fc3e 	bl	2744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ec8:	6820      	ldr	r0, [r4, #0]
     eca:	2f00      	cmp	r7, #0
     ecc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ed0:	f108 0001 	add.w	r0, r8, #1
     ed4:	6021      	str	r1, [r4, #0]
     ed6:	bf08      	it	eq
     ed8:	307a      	addeq	r0, #122	; 0x7a
     eda:	d008      	beq.n	eee <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6ee>
     edc:	2f01      	cmp	r7, #1
     ede:	bf08      	it	eq
     ee0:	3044      	addeq	r0, #68	; 0x44
     ee2:	d004      	beq.n	eee <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6ee>
     ee4:	f240 61b1 	movw	r1, #1713	; 0x6b1
     ee8:	2070      	movs	r0, #112	; 0x70
     eea:	f002 fc39 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eee:	f001 fc0d 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ef2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ef6:	6061      	str	r1, [r4, #4]
     ef8:	8960      	ldrh	r0, [r4, #10]
     efa:	aa01      	add	r2, sp, #4
     efc:	4669      	mov	r1, sp
     efe:	f001 fc21 	bl	2744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f02:	481f      	ldr	r0, [pc, #124]	; (f80 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x780>)
     f04:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     f08:	2920      	cmp	r1, #32
     f0a:	d023      	beq.n	f54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x754>
     f0c:	6900      	ldr	r0, [r0, #16]
     f0e:	1d40      	adds	r0, r0, #5
     f10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f14:	e9d4 2100 	ldrd	r2, r1, [r4]
     f18:	1a89      	subs	r1, r1, r2
     f1a:	6020      	str	r0, [r4, #0]
     f1c:	4408      	add	r0, r1
     f1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f22:	6060      	str	r0, [r4, #4]
     f24:	464b      	mov	r3, r9
     f26:	4632      	mov	r2, r6
     f28:	4621      	mov	r1, r4
     f2a:	68e8      	ldr	r0, [r5, #12]
     f2c:	f7ff facc 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
     f30:	2800      	cmp	r0, #0
     f32:	bf1c      	itt	ne
     f34:	b003      	addne	sp, #12
     f36:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f3a:	e9d4 1000 	ldrd	r1, r0, [r4]
     f3e:	1a40      	subs	r0, r0, r1
     f40:	4430      	add	r0, r6
     f42:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f4a:	e9c4 1000 	strd	r1, r0, [r4]
     f4e:	b003      	add	sp, #12
     f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f54:	8960      	ldrh	r0, [r4, #10]
     f56:	f106 0709 	add.w	r7, r6, #9
     f5a:	b120      	cbz	r0, f66 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x766>
     f5c:	f002 fb9c 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f60:	2800      	cmp	r0, #0
     f62:	bf08      	it	eq
     f64:	3732      	addeq	r7, #50	; 0x32
     f66:	4807      	ldr	r0, [pc, #28]	; (f84 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x784>)
     f68:	7841      	ldrb	r1, [r0, #1]
     f6a:	9800      	ldr	r0, [sp, #0]
     f6c:	4281      	cmp	r1, r0
     f6e:	bf84      	itt	hi
     f70:	1a08      	subhi	r0, r1, r0
     f72:	4407      	addhi	r7, r0
     f74:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f78:	e7cc      	b.n	f14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x714>
     f7a:	0000      	.short	0x0000
     f7c:	07a12000 	.word	0x07a12000
     f80:	20000ca4 	.word	0x20000ca4
     f84:	20000012 	.word	0x20000012
     f88:	b510      	push	{r4, lr}
     f8a:	4c15      	ldr	r4, [pc, #84]	; (fe0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7e0>)
     f8c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f90:	2820      	cmp	r0, #32
     f92:	bf18      	it	ne
     f94:	bd10      	popne	{r4, pc}
     f96:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f9a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f9e:	f890 1020 	ldrb.w	r1, [r0, #32]
     fa2:	2920      	cmp	r1, #32
     fa4:	d017      	beq.n	fd6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7d6>
     fa6:	f8df c03c 	ldr.w	ip, [pc, #60]	; fe4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7e4>
     faa:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     fae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     fb2:	785b      	ldrb	r3, [r3, #1]
     fb4:	f880 3020 	strb.w	r3, [r0, #32]
     fb8:	2301      	movs	r3, #1
     fba:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     fbe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     fc2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     fc6:	2002      	movs	r0, #2
     fc8:	f000 f8b0 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
     fcc:	2000      	movs	r0, #0
     fce:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fd2:	77a0      	strb	r0, [r4, #30]
     fd4:	bd10      	pop	{r4, pc}
     fd6:	f240 318b 	movw	r1, #907	; 0x38b
     fda:	2070      	movs	r0, #112	; 0x70
     fdc:	f002 fbc0 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fe0:	20000ca4 	.word	0x20000ca4
     fe4:	20000c24 	.word	0x20000c24
     fe8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
     ff0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     ff4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     ff8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     ffc:	2c20      	cmp	r4, #32
     ffe:	bf08      	it	eq
    1000:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1004:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1008:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    100c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1010:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1014:	2607      	movs	r6, #7
    1016:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    101a:	2801      	cmp	r0, #1
    101c:	d00e      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    101e:	2804      	cmp	r0, #4
    1020:	bf08      	it	eq
    1022:	2602      	moveq	r6, #2
    1024:	d00a      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1026:	2805      	cmp	r0, #5
    1028:	bf0c      	ite	eq
    102a:	2603      	moveq	r6, #3
    102c:	2806      	cmpne	r0, #6
    102e:	d005      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1030:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1034:	f04f 0070 	mov.w	r0, #112	; 0x70
    1038:	f002 fb92 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    103c:	f1bb 0f00 	cmp.w	fp, #0
    1040:	bf18      	it	ne
    1042:	f3af 8000 	nopne.w
    1046:	f3ef 8010 	mrs	r0, PRIMASK
    104a:	b672      	cpsid	i
    104c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1050:	784a      	ldrb	r2, [r1, #1]
    1052:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1056:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    105a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    105e:	42a2      	cmp	r2, r4
    1060:	bf04      	itt	eq
    1062:	2220      	moveq	r2, #32
    1064:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1068:	b1b8      	cbz	r0, 109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    106a:	462a      	mov	r2, r5
    106c:	4621      	mov	r1, r4
    106e:	2001      	movs	r0, #1
    1070:	f000 f85c 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1074:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1078:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    107c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1080:	6840      	ldr	r0, [r0, #4]
    1082:	4631      	mov	r1, r6
    1084:	4790      	blx	r2
    1086:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    108a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    108e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1092:	2c20      	cmp	r4, #32
    1094:	d1bc      	bne.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    1096:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    109a:	4806      	ldr	r0, [pc, #24]	; (10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    109c:	2800      	cmp	r0, #0
    109e:	bf18      	it	ne
    10a0:	f3af 8000 	nopne.w
    10a4:	b662      	cpsie	i
    10a6:	e7e0      	b.n	106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    10a8:	20000ca4 	.word	0x20000ca4
    10ac:	00000000 	.word	0x00000000
    10b0:	20000c24 	.word	0x20000c24
    10b4:	00000000 	.word	0x00000000
    10b8:	b510      	push	{r4, lr}
    10ba:	4604      	mov	r4, r0
    10bc:	6800      	ldr	r0, [r0, #0]
    10be:	f00b f8c5 	bl	c24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    10c2:	4602      	mov	r2, r0
    10c4:	8960      	ldrh	r0, [r4, #10]
    10c6:	7a21      	ldrb	r1, [r4, #8]
    10c8:	4b14      	ldr	r3, [pc, #80]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    10ca:	4408      	add	r0, r1
    10cc:	1c41      	adds	r1, r0, #1
    10ce:	1850      	adds	r0, r2, r1
    10d0:	429a      	cmp	r2, r3
    10d2:	d904      	bls.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
    10d4:	f240 6109 	movw	r1, #1545	; 0x609
    10d8:	2070      	movs	r0, #112	; 0x70
    10da:	f002 fb41 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10de:	4a10      	ldr	r2, [pc, #64]	; (1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    10e0:	4291      	cmp	r1, r2
    10e2:	dd04      	ble.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
    10e4:	f240 610a 	movw	r1, #1546	; 0x60a
    10e8:	2070      	movs	r0, #112	; 0x70
    10ea:	f002 fb39 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ee:	4a0d      	ldr	r2, [pc, #52]	; (1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>)
    10f0:	4291      	cmp	r1, r2
    10f2:	da04      	bge.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
    10f4:	f240 610b 	movw	r1, #1547	; 0x60b
    10f8:	2070      	movs	r0, #112	; 0x70
    10fa:	f002 fb31 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10fe:	490a      	ldr	r1, [pc, #40]	; (1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
    1100:	4281      	cmp	r1, r0
    1102:	bfde      	ittt	le
    1104:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1108:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    110c:	bd10      	pople	{r4, pc}
    110e:	2800      	cmp	r0, #0
    1110:	bfbc      	itt	lt
    1112:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1116:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    111a:	bd10      	pop	{r4, pc}
    111c:	1e847fff 	.word	0x1e847fff
    1120:	07a12000 	.word	0x07a12000
    1124:	f85ee000 	.word	0xf85ee000
    1128:	1e848000 	.word	0x1e848000
    112c:	f8df c054 	ldr.w	ip, [pc, #84]	; 1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
    1130:	b510      	push	{r4, lr}
    1132:	2300      	movs	r3, #0
    1134:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1138:	2807      	cmp	r0, #7
    113a:	d21e      	bcs.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    113c:	e8df f000 	tbb	[pc, r0]
    1140:	05050505 	.word	0x05050505
    1144:	00040404 	.word	0x00040404
    1148:	2301      	movs	r3, #1
    114a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    114e:	2b00      	cmp	r3, #0
    1150:	bf08      	it	eq
    1152:	bd10      	popeq	{r4, pc}
    1154:	480c      	ldr	r0, [pc, #48]	; (1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>)
    1156:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    115a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    115e:	2820      	cmp	r0, #32
    1160:	bf0e      	itee	eq
    1162:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1166:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    116a:	7041      	strbne	r1, [r0, #1]
    116c:	2020      	movs	r0, #32
    116e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1172:	7058      	strb	r0, [r3, #1]
    1174:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1178:	bd10      	pop	{r4, pc}
    117a:	f44f 7115 	mov.w	r1, #596	; 0x254
    117e:	2070      	movs	r0, #112	; 0x70
    1180:	f002 faee 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1184:	20000c24 	.word	0x20000c24
    1188:	20000ca4 	.word	0x20000ca4
    118c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1190:	b083      	sub	sp, #12
    1192:	485c      	ldr	r0, [pc, #368]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    1194:	9904      	ldr	r1, [sp, #16]
    1196:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    119a:	9001      	str	r0, [sp, #4]
    119c:	f890 4020 	ldrb.w	r4, [r0, #32]
    11a0:	9803      	ldr	r0, [sp, #12]
    11a2:	4625      	mov	r5, r4
    11a4:	2801      	cmp	r0, #1
    11a6:	bf18      	it	ne
    11a8:	2802      	cmpne	r0, #2
    11aa:	d005      	beq.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    11ac:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    11b0:	f04f 0070 	mov.w	r0, #112	; 0x70
    11b4:	f002 fad4 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11b8:	2700      	movs	r7, #0
    11ba:	2d20      	cmp	r5, #32
    11bc:	d04a      	beq.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    11be:	4851      	ldr	r0, [pc, #324]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    11c0:	9100      	str	r1, [sp, #0]
    11c2:	2600      	movs	r6, #0
    11c4:	7f80      	ldrb	r0, [r0, #30]
    11c6:	2800      	cmp	r0, #0
    11c8:	bf08      	it	eq
    11ca:	2602      	moveq	r6, #2
    11cc:	f001 fc10 	bl	29f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11d0:	f8df a138 	ldr.w	sl, [pc, #312]	; 130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    11d4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11d8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11dc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    11e0:	688a      	ldr	r2, [r1, #8]
    11e2:	68c9      	ldr	r1, [r1, #12]
    11e4:	1a12      	subs	r2, r2, r0
    11e6:	1a09      	subs	r1, r1, r0
    11e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11f0:	4296      	cmp	r6, r2
    11f2:	bf98      	it	ls
    11f4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11f8:	d201      	bcs.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
    11fa:	4589      	cmp	r9, r1
    11fc:	d228      	bcs.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    11fe:	4a44      	ldr	r2, [pc, #272]	; (1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>)
    1200:	9900      	ldr	r1, [sp, #0]
    1202:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1206:	4622      	mov	r2, r4
    1208:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    120c:	784c      	ldrb	r4, [r1, #1]
    120e:	2c20      	cmp	r4, #32
    1210:	d016      	beq.n	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
    1212:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1216:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    121a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    121e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1222:	eba8 0800 	sub.w	r8, r8, r0
    1226:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    122a:	ebac 0100 	sub.w	r1, ip, r0
    122e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1232:	4546      	cmp	r6, r8
    1234:	bf98      	it	ls
    1236:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    123a:	d2e4      	bcs.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
    123c:	4589      	cmp	r9, r1
    123e:	d3e2      	bcc.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
    1240:	2a20      	cmp	r2, #32
    1242:	d005      	beq.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    1244:	2120      	movs	r1, #32
    1246:	2004      	movs	r0, #4
    1248:	9b00      	ldr	r3, [sp, #0]
    124a:	f7ff f901 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    124e:	4604      	mov	r4, r0
    1250:	42ac      	cmp	r4, r5
    1252:	d115      	bne.n	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
    1254:	482f      	ldr	r0, [pc, #188]	; (1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>)
    1256:	2800      	cmp	r0, #0
    1258:	bf18      	it	ne
    125a:	f3af 8000 	nopne.w
    125e:	f001 fbc7 	bl	29f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1262:	4c28      	ldr	r4, [pc, #160]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    1264:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1268:	2920      	cmp	r1, #32
    126a:	d00d      	beq.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    126c:	68e1      	ldr	r1, [r4, #12]
    126e:	1c82      	adds	r2, r0, #2
    1270:	1a51      	subs	r1, r2, r1
    1272:	0209      	lsls	r1, r1, #8
    1274:	17ca      	asrs	r2, r1, #31
    1276:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    127a:	1209      	asrs	r1, r1, #8
    127c:	2900      	cmp	r1, #0
    127e:	dd03      	ble.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    1280:	b005      	add	sp, #20
    1282:	2000      	movs	r0, #0
    1284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1288:	2d20      	cmp	r5, #32
    128a:	d00d      	beq.n	12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>
    128c:	462a      	mov	r2, r5
    128e:	9903      	ldr	r1, [sp, #12]
    1290:	f7ff fb16 	bl	8c0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc0>
    1294:	b358      	cbz	r0, 12ee <CONFIG_FPROTECT_BLOCK_SIZE+0x2ee>
    1296:	9801      	ldr	r0, [sp, #4]
    1298:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    129c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    12a0:	b005      	add	sp, #20
    12a2:	2001      	movs	r0, #1
    12a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12a8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    12ac:	b118      	cbz	r0, 12b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b6>
    12ae:	f002 f8bb 	bl	3428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    12b2:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    12b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    12ba:	b150      	cbz	r0, 12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    12bc:	4916      	ldr	r1, [pc, #88]	; (1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>)
    12be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    12c2:	6008      	str	r0, [r1, #0]
    12c4:	2005      	movs	r0, #5
    12c6:	f001 fde1 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12ca:	f002 f915 	bl	34f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12ce:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12d2:	2004      	movs	r0, #4
    12d4:	f001 fdda 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12d8:	f001 fe40 	bl	2f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12dc:	2020      	movs	r0, #32
    12de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12e2:	480e      	ldr	r0, [pc, #56]	; (131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>)
    12e4:	6880      	ldr	r0, [r0, #8]
    12e6:	6007      	str	r7, [r0, #0]
    12e8:	480d      	ldr	r0, [pc, #52]	; (1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>)
    12ea:	6007      	str	r7, [r0, #0]
    12ec:	e7d8      	b.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    12ee:	462a      	mov	r2, r5
    12f0:	2120      	movs	r1, #32
    12f2:	2004      	movs	r0, #4
    12f4:	9b04      	ldr	r3, [sp, #16]
    12f6:	f7ff f8ab 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12fa:	b005      	add	sp, #20
    12fc:	2000      	movs	r0, #0
    12fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1302:	0000      	.short	0x0000
    1304:	20000ca4 	.word	0x20000ca4
    1308:	003fffff 	.word	0x003fffff
    130c:	20000924 	.word	0x20000924
    1310:	20000c24 	.word	0x20000c24
    1314:	00000000 	.word	0x00000000
    1318:	4001f508 	.word	0x4001f508
    131c:	20000010 	.word	0x20000010
    1320:	40000508 	.word	0x40000508

00001324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1324:	4906      	ldr	r1, [pc, #24]	; (1340 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1326:	b510      	push	{r4, lr}
    1328:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    132c:	2a20      	cmp	r2, #32
    132e:	bf1c      	itt	ne
    1330:	7788      	strbne	r0, [r1, #30]
    1332:	bd10      	popne	{r4, pc}
    1334:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1338:	2070      	movs	r0, #112	; 0x70
    133a:	f002 fa11 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    133e:	0000      	.short	0x0000
    1340:	20000ca4 	.word	0x20000ca4

00001344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1348:	4e5b      	ldr	r6, [pc, #364]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    134a:	4681      	mov	r9, r0
    134c:	b085      	sub	sp, #20
    134e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1352:	468a      	mov	sl, r1
    1354:	2820      	cmp	r0, #32
    1356:	d04d      	beq.n	13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>
    1358:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    135c:	f106 040c 	add.w	r4, r6, #12
    1360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1364:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1368:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    136c:	2020      	movs	r0, #32
    136e:	f88d 0000 	strb.w	r0, [sp]
    1372:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1376:	aa03      	add	r2, sp, #12
    1378:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    137c:	a901      	add	r1, sp, #4
    137e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1382:	6930      	ldr	r0, [r6, #16]
    1384:	9002      	str	r0, [sp, #8]
    1386:	6830      	ldr	r0, [r6, #0]
    1388:	4448      	add	r0, r9
    138a:	f001 f9db 	bl	2744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    138e:	68f8      	ldr	r0, [r7, #12]
    1390:	9901      	ldr	r1, [sp, #4]
    1392:	4a4a      	ldr	r2, [pc, #296]	; (14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>)
    1394:	4408      	add	r0, r1
    1396:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    139a:	4291      	cmp	r1, r2
    139c:	d82f      	bhi.n	13fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76>
    139e:	68b9      	ldr	r1, [r7, #8]
    13a0:	1a41      	subs	r1, r0, r1
    13a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    13a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    13aa:	d228      	bcs.n	13fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76>
    13ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13b0:	6060      	str	r0, [r4, #4]
    13b2:	4630      	mov	r0, r6
    13b4:	f884 a00c 	strb.w	sl, [r4, #12]
    13b8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    13bc:	46ea      	mov	sl, sp
    13be:	2d20      	cmp	r5, #32
    13c0:	bf1c      	itt	ne
    13c2:	493f      	ldrne	r1, [pc, #252]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    13c4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13c8:	d03c      	beq.n	1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    13ca:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    13ce:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13d2:	6860      	ldr	r0, [r4, #4]
    13d4:	68ba      	ldr	r2, [r7, #8]
    13d6:	4621      	mov	r1, r4
    13d8:	1a10      	subs	r0, r2, r0
    13da:	0200      	lsls	r0, r0, #8
    13dc:	17c2      	asrs	r2, r0, #31
    13de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13e2:	f107 0608 	add.w	r6, r7, #8
    13e6:	1200      	asrs	r0, r0, #8
    13e8:	d41b      	bmi.n	1422 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a>
    13ea:	8970      	ldrh	r0, [r6, #10]
    13ec:	b350      	cbz	r0, 1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    13ee:	8948      	ldrh	r0, [r1, #10]
    13f0:	b148      	cbz	r0, 1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13f2:	e027      	b.n	1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    13f4:	f640 317b 	movw	r1, #2939	; 0xb7b
    13f8:	2070      	movs	r0, #112	; 0x70
    13fa:	f002 f9b1 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13fe:	b005      	add	sp, #20
    1400:	2001      	movs	r0, #1
    1402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1406:	4620      	mov	r0, r4
    1408:	f7ff fe56 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
    140c:	f001 f97e 	bl	270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1410:	6831      	ldr	r1, [r6, #0]
    1412:	1a08      	subs	r0, r1, r0
    1414:	0200      	lsls	r0, r0, #8
    1416:	17c1      	asrs	r1, r0, #31
    1418:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    141c:	1200      	asrs	r0, r0, #8
    141e:	2833      	cmp	r0, #51	; 0x33
    1420:	da10      	bge.n	1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    1422:	f88a 5000 	strb.w	r5, [sl]
    1426:	7d39      	ldrb	r1, [r7, #20]
    1428:	7b20      	ldrb	r0, [r4, #12]
    142a:	4281      	cmp	r1, r0
    142c:	d805      	bhi.n	143a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb2>
    142e:	9802      	ldr	r0, [sp, #8]
    1430:	6060      	str	r0, [r4, #4]
    1432:	b005      	add	sp, #20
    1434:	2002      	movs	r0, #2
    1436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    143a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    143e:	7845      	ldrb	r5, [r0, #1]
    1440:	2d20      	cmp	r5, #32
    1442:	d1c2      	bne.n	13ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42>
    1444:	2005      	movs	r0, #5
    1446:	f001 fd21 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    144a:	4c1b      	ldr	r4, [pc, #108]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    144c:	f04f 30ff 	mov.w	r0, #4294967295
    1450:	60a0      	str	r0, [r4, #8]
    1452:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1456:	f89d 2000 	ldrb.w	r2, [sp]
    145a:	2120      	movs	r1, #32
    145c:	2a20      	cmp	r2, #32
    145e:	bf13      	iteet	ne
    1460:	2005      	movne	r0, #5
    1462:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1466:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    146a:	f7fe fff1 	blne	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    146e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1472:	4913      	ldr	r1, [pc, #76]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    1474:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1478:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    147c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1480:	7048      	strb	r0, [r1, #1]
    1482:	6820      	ldr	r0, [r4, #0]
    1484:	4448      	add	r0, r9
    1486:	6020      	str	r0, [r4, #0]
    1488:	2001      	movs	r0, #1
    148a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    148e:	7e60      	ldrb	r0, [r4, #25]
    1490:	2801      	cmp	r0, #1
    1492:	d105      	bne.n	14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>
    1494:	6920      	ldr	r0, [r4, #16]
    1496:	1e40      	subs	r0, r0, #1
    1498:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    149c:	f001 fb48 	bl	2b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    14a0:	f89d 0000 	ldrb.w	r0, [sp]
    14a4:	2820      	cmp	r0, #32
    14a6:	d003      	beq.n	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
    14a8:	4806      	ldr	r0, [pc, #24]	; (14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>)
    14aa:	7840      	ldrb	r0, [r0, #1]
    14ac:	f002 fa28 	bl	3900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14b0:	b005      	add	sp, #20
    14b2:	2000      	movs	r0, #0
    14b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14b8:	20000ca4 	.word	0x20000ca4
    14bc:	07a11f9c 	.word	0x07a11f9c
    14c0:	20000c24 	.word	0x20000c24
    14c4:	20000010 	.word	0x20000010

000014c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    14c8:	b570      	push	{r4, r5, r6, lr}
    14ca:	4a23      	ldr	r2, [pc, #140]	; (1558 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    14cc:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14d0:	2920      	cmp	r1, #32
    14d2:	d039      	beq.n	1548 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    14d4:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    14d8:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    14dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    14e0:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    14e4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    14e8:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    14ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    14f0:	f891 1020 	ldrb.w	r1, [r1, #32]
    14f4:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    14f8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    14fc:	2920      	cmp	r1, #32
    14fe:	d028      	beq.n	1552 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    1500:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    1504:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    1508:	7d2d      	ldrb	r5, [r5, #20]
    150a:	4285      	cmp	r5, r0
    150c:	bf84      	itt	hi
    150e:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1512:	7849      	ldrbhi	r1, [r1, #1]
    1514:	d8f2      	bhi.n	14fc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    1516:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    151a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    151e:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1522:	6889      	ldr	r1, [r1, #8]
    1524:	6814      	ldr	r4, [r2, #0]
    1526:	1a08      	subs	r0, r1, r0
    1528:	0200      	lsls	r0, r0, #8
    152a:	17c1      	asrs	r1, r0, #31
    152c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1530:	1200      	asrs	r0, r0, #8
    1532:	d407      	bmi.n	1544 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1534:	f00a fe8a 	bl	c24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1538:	f104 0164 	add.w	r1, r4, #100	; 0x64
    153c:	4288      	cmp	r0, r1
    153e:	bf24      	itt	cs
    1540:	1b00      	subcs	r0, r0, r4
    1542:	bd70      	popcs	{r4, r5, r6, pc}
    1544:	2000      	movs	r0, #0
    1546:	bd70      	pop	{r4, r5, r6, pc}
    1548:	f640 314d 	movw	r1, #2893	; 0xb4d
    154c:	2070      	movs	r0, #112	; 0x70
    154e:	f002 f907 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1552:	f04f 30ff 	mov.w	r0, #4294967295
    1556:	bd70      	pop	{r4, r5, r6, pc}
    1558:	20000ca4 	.word	0x20000ca4

0000155c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    155c:	4806      	ldr	r0, [pc, #24]	; (1578 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    155e:	b510      	push	{r4, lr}
    1560:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1564:	2920      	cmp	r1, #32
    1566:	bf1c      	itt	ne
    1568:	7e00      	ldrbne	r0, [r0, #24]
    156a:	bd10      	popne	{r4, pc}
    156c:	f640 3174 	movw	r1, #2932	; 0xb74
    1570:	2070      	movs	r0, #112	; 0x70
    1572:	f002 f8f5 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1576:	0000      	.short	0x0000
    1578:	20000ca4 	.word	0x20000ca4

0000157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    157c:	4602      	mov	r2, r0
    157e:	4b14      	ldr	r3, [pc, #80]	; (15d0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    1580:	b510      	push	{r4, lr}
    1582:	4408      	add	r0, r1
    1584:	429a      	cmp	r2, r3
    1586:	d904      	bls.n	1592 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    1588:	f240 6109 	movw	r1, #1545	; 0x609
    158c:	2070      	movs	r0, #112	; 0x70
    158e:	f002 f8e7 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1592:	4a10      	ldr	r2, [pc, #64]	; (15d4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1594:	4291      	cmp	r1, r2
    1596:	dd04      	ble.n	15a2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1598:	f240 610a 	movw	r1, #1546	; 0x60a
    159c:	2070      	movs	r0, #112	; 0x70
    159e:	f002 f8df 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15a2:	4a0d      	ldr	r2, [pc, #52]	; (15d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    15a4:	4291      	cmp	r1, r2
    15a6:	da04      	bge.n	15b2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    15a8:	f240 610b 	movw	r1, #1547	; 0x60b
    15ac:	2070      	movs	r0, #112	; 0x70
    15ae:	f002 f8d7 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15b2:	490a      	ldr	r1, [pc, #40]	; (15dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    15b4:	4281      	cmp	r1, r0
    15b6:	bfde      	ittt	le
    15b8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    15bc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    15c0:	bd10      	pople	{r4, pc}
    15c2:	2800      	cmp	r0, #0
    15c4:	bfbc      	itt	lt
    15c6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    15ca:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    15ce:	bd10      	pop	{r4, pc}
    15d0:	1e847fff 	.word	0x1e847fff
    15d4:	07a12000 	.word	0x07a12000
    15d8:	f85ee000 	.word	0xf85ee000
    15dc:	1e848000 	.word	0x1e848000

000015e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    15e0:	4a10      	ldr	r2, [pc, #64]	; (1624 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    15e2:	1a0b      	subs	r3, r1, r0
    15e4:	f102 0c01 	add.w	ip, r2, #1
    15e8:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    15ec:	bf3c      	itt	cc
    15ee:	4618      	movcc	r0, r3
    15f0:	4770      	bxcc	lr
    15f2:	b510      	push	{r4, lr}
    15f4:	1a44      	subs	r4, r0, r1
    15f6:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    15fa:	bf3c      	itt	cc
    15fc:	4618      	movcc	r0, r3
    15fe:	bd10      	popcc	{r4, pc}
    1600:	429a      	cmp	r2, r3
    1602:	d203      	bcs.n	160c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1604:	1a10      	subs	r0, r2, r0
    1606:	4408      	add	r0, r1
    1608:	1c40      	adds	r0, r0, #1
    160a:	bd10      	pop	{r4, pc}
    160c:	42a2      	cmp	r2, r4
    160e:	d204      	bcs.n	161a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1610:	1a51      	subs	r1, r2, r1
    1612:	4408      	add	r0, r1
    1614:	1c40      	adds	r0, r0, #1
    1616:	4240      	negs	r0, r0
    1618:	bd10      	pop	{r4, pc}
    161a:	f640 310c 	movw	r1, #2828	; 0xb0c
    161e:	2070      	movs	r0, #112	; 0x70
    1620:	f002 f89e 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1624:	1e847fff 	.word	0x1e847fff

00001628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1628:	4907      	ldr	r1, [pc, #28]	; (1648 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    162a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    162e:	4282      	cmp	r2, r0
    1630:	bf04      	itt	eq
    1632:	6848      	ldreq	r0, [r1, #4]
    1634:	4770      	bxeq	lr
    1636:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    163a:	4904      	ldr	r1, [pc, #16]	; (164c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    163c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1640:	3008      	adds	r0, #8
    1642:	f7ff bd39 	b.w	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
    1646:	0000      	.short	0x0000
    1648:	20000ca4 	.word	0x20000ca4
    164c:	20000924 	.word	0x20000924

00001650 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1650:	490e      	ldr	r1, [pc, #56]	; (168c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1652:	b510      	push	{r4, lr}
    1654:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1658:	2820      	cmp	r0, #32
    165a:	d012      	beq.n	1682 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    165c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1660:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1664:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1668:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    166c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1670:	6840      	ldr	r0, [r0, #4]
    1672:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1676:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    167a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    167e:	2104      	movs	r1, #4
    1680:	4710      	bx	r2
    1682:	f640 01bc 	movw	r1, #2236	; 0x8bc
    1686:	2070      	movs	r0, #112	; 0x70
    1688:	f002 f86a 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    168c:	20000ca4 	.word	0x20000ca4

00001690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1692:	4d6d      	ldr	r5, [pc, #436]	; (1848 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1694:	496d      	ldr	r1, [pc, #436]	; (184c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1696:	2601      	movs	r6, #1
    1698:	f505 7460 	add.w	r4, r5, #896	; 0x380
    169c:	2808      	cmp	r0, #8
    169e:	d273      	bcs.n	1788 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    16a0:	e8df f000 	tbb	[pc, r0]
    16a4:	af9d6704 	.word	0xaf9d6704
    16a8:	b9b444cd 	.word	0xb9b444cd
    16ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    16b0:	b918      	cbnz	r0, 16ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    16b2:	f001 fed5 	bl	3460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16b6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    16ba:	8ae0      	ldrh	r0, [r4, #22]
    16bc:	b110      	cbz	r0, 16c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    16be:	f001 ffeb 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16c2:	b188      	cbz	r0, 16e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    16c4:	f7ff fc60 	bl	f88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x788>
    16c8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    16cc:	68a1      	ldr	r1, [r4, #8]
    16ce:	f1b1 3fff 	cmp.w	r1, #4294967295
    16d2:	d005      	beq.n	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    16d4:	2301      	movs	r3, #1
    16d6:	2203      	movs	r2, #3
    16d8:	2005      	movs	r0, #5
    16da:	f001 fb0f 	bl	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    16de:	b140      	cbz	r0, 16f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    16e0:	7e60      	ldrb	r0, [r4, #25]
    16e2:	2801      	cmp	r0, #1
    16e4:	d110      	bne.n	1708 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    16e6:	e009      	b.n	16fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    16e8:	f44f 6107 	mov.w	r1, #2160	; 0x870
    16ec:	2070      	movs	r0, #112	; 0x70
    16ee:	f002 f837 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16f2:	f640 0175 	movw	r1, #2165	; 0x875
    16f6:	2070      	movs	r0, #112	; 0x70
    16f8:	f002 f832 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16fc:	6920      	ldr	r0, [r4, #16]
    16fe:	1e40      	subs	r0, r0, #1
    1700:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1704:	f001 fa14 	bl	2b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1708:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    170c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1714:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1718:	6840      	ldr	r0, [r0, #4]
    171a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    171e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1722:	b001      	add	sp, #4
    1724:	2101      	movs	r1, #1
    1726:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    172a:	4710      	bx	r2
    172c:	f7ff fc2c 	bl	f88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x788>
    1730:	f04f 30ff 	mov.w	r0, #4294967295
    1734:	60a0      	str	r0, [r4, #8]
    1736:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    173a:	f88d 0000 	strb.w	r0, [sp]
    173e:	f89d 0000 	ldrb.w	r0, [sp]
    1742:	b188      	cbz	r0, 1768 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1744:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1748:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    174c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1750:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1754:	6840      	ldr	r0, [r0, #4]
    1756:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    175a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    175e:	b001      	add	sp, #4
    1760:	2106      	movs	r1, #6
    1762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1766:	4710      	bx	r2
    1768:	f640 0186 	movw	r1, #2182	; 0x886
    176c:	2070      	movs	r0, #112	; 0x70
    176e:	f001 fff7 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1772:	f7ff fc09 	bl	f88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x788>
    1776:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    177a:	f001 ff8d 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    177e:	b120      	cbz	r0, 178a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    1780:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1784:	b130      	cbz	r0, 1794 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    1786:	e009      	b.n	179c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    1788:	e059      	b.n	183e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    178a:	f640 0196 	movw	r1, #2198	; 0x896
    178e:	2070      	movs	r0, #112	; 0x70
    1790:	f001 ffe6 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1794:	f001 fe64 	bl	3460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1798:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    179c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    17a0:	b158      	cbz	r0, 17ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    17a2:	492b      	ldr	r1, [pc, #172]	; (1850 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    17a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    17a8:	6008      	str	r0, [r1, #0]
    17aa:	2005      	movs	r0, #5
    17ac:	f001 fb6e 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    17b0:	f001 fea2 	bl	34f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    17b4:	2000      	movs	r0, #0
    17b6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    17ba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17be:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17c6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17ca:	6840      	ldr	r0, [r0, #4]
    17cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17d0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17d4:	b001      	add	sp, #4
    17d6:	2100      	movs	r1, #0
    17d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17dc:	4710      	bx	r2
    17de:	f001 fc07 	bl	2ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    17e2:	8ae0      	ldrh	r0, [r4, #22]
    17e4:	b110      	cbz	r0, 17ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    17e6:	f001 ff57 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17ea:	b128      	cbz	r0, 17f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    17ec:	4819      	ldr	r0, [pc, #100]	; (1854 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    17ee:	7800      	ldrb	r0, [r0, #0]
    17f0:	2803      	cmp	r0, #3
    17f2:	bf08      	it	eq
    17f4:	7766      	strbeq	r6, [r4, #29]
    17f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17f8:	f640 01a1 	movw	r1, #2209	; 0x8a1
    17fc:	2070      	movs	r0, #112	; 0x70
    17fe:	f001 ffaf 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1802:	4815      	ldr	r0, [pc, #84]	; (1858 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1804:	6006      	str	r6, [r0, #0]
    1806:	6888      	ldr	r0, [r1, #8]
    1808:	6006      	str	r6, [r0, #0]
    180a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    180c:	7808      	ldrb	r0, [r1, #0]
    180e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1812:	f002 b875 	b.w	3900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1816:	f7ff fbb7 	bl	f88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x788>
    181a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    181e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1822:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1826:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    182a:	6840      	ldr	r0, [r0, #4]
    182c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1830:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1834:	b001      	add	sp, #4
    1836:	2105      	movs	r1, #5
    1838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    183c:	4710      	bx	r2
    183e:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1842:	2070      	movs	r0, #112	; 0x70
    1844:	f001 ff8c 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1848:	20000924 	.word	0x20000924
    184c:	20000010 	.word	0x20000010
    1850:	4001f508 	.word	0x4001f508
    1854:	20000012 	.word	0x20000012
    1858:	40000508 	.word	0x40000508

0000185c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    185c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1860:	4682      	mov	sl, r0
    1862:	48dc      	ldr	r0, [pc, #880]	; (1bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    1864:	b08b      	sub	sp, #44	; 0x2c
    1866:	6800      	ldr	r0, [r0, #0]
    1868:	4ddb      	ldr	r5, [pc, #876]	; (1bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    186a:	05c0      	lsls	r0, r0, #23
    186c:	0dc0      	lsrs	r0, r0, #23
    186e:	d00e      	beq.n	188e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1870:	3810      	subs	r0, #16
    1872:	b240      	sxtb	r0, r0
    1874:	2800      	cmp	r0, #0
    1876:	bfb8      	it	lt
    1878:	f000 000f 	andlt.w	r0, r0, #15
    187c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1880:	bfac      	ite	ge
    1882:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1886:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    188a:	0940      	lsrs	r0, r0, #5
    188c:	d00d      	beq.n	18aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    188e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1890:	f04f 0b00 	mov.w	fp, #0
    1894:	7800      	ldrb	r0, [r0, #0]
    1896:	2800      	cmp	r0, #0
    1898:	bf18      	it	ne
    189a:	2801      	cmpne	r0, #1
    189c:	d018      	beq.n	18d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    189e:	f240 714f 	movw	r1, #1871	; 0x74f
    18a2:	f04f 0070 	mov.w	r0, #112	; 0x70
    18a6:	f001 ff5b 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18aa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    18ae:	f04f 0b01 	mov.w	fp, #1
    18b2:	2820      	cmp	r0, #32
    18b4:	d007      	beq.n	18c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    18b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    18b8:	7800      	ldrb	r0, [r0, #0]
    18ba:	b148      	cbz	r0, 18d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    18bc:	f240 714b 	movw	r1, #1867	; 0x74b
    18c0:	2070      	movs	r0, #112	; 0x70
    18c2:	f001 ff4d 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18c6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    18ca:	2070      	movs	r0, #112	; 0x70
    18cc:	f001 ff48 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18d0:	4cc2      	ldr	r4, [pc, #776]	; (1bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    18d2:	b124      	cbz	r4, 18de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    18d4:	2100      	movs	r1, #0
    18d6:	f240 7052 	movw	r0, #1874	; 0x752
    18da:	f3af 8000 	nop.w
    18de:	49c0      	ldr	r1, [pc, #768]	; (1be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    18e0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    18e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    18e8:	f04f 0801 	mov.w	r8, #1
    18ec:	9000      	str	r0, [sp, #0]
    18ee:	b124      	cbz	r4, 18fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    18f0:	2100      	movs	r1, #0
    18f2:	f240 705a 	movw	r0, #1882	; 0x75a
    18f6:	f3af 8000 	nop.w
    18fa:	f1b8 0f00 	cmp.w	r8, #0
    18fe:	d009      	beq.n	1914 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1900:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1904:	f04f 0900 	mov.w	r9, #0
    1908:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    190c:	f1bb 0f00 	cmp.w	fp, #0
    1910:	d007      	beq.n	1922 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    1912:	e032      	b.n	197a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    1914:	48b3      	ldr	r0, [pc, #716]	; (1be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1916:	2800      	cmp	r0, #0
    1918:	bf18      	it	ne
    191a:	f3af 8000 	nopne.w
    191e:	b662      	cpsie	i
    1920:	e7ee      	b.n	1900 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1922:	4637      	mov	r7, r6
    1924:	2001      	movs	r0, #1
    1926:	ea20 0607 	bic.w	r6, r0, r7
    192a:	48af      	ldr	r0, [pc, #700]	; (1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    192c:	2240      	movs	r2, #64	; 0x40
    192e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1932:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1936:	f00a fdf7 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    193a:	b124      	cbz	r4, 1946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    193c:	2100      	movs	r1, #0
    193e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1942:	f3af 8000 	nop.w
    1946:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    194a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    194e:	6a09      	ldr	r1, [r1, #32]
    1950:	6201      	str	r1, [r0, #32]
    1952:	b124      	cbz	r4, 195e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1954:	2100      	movs	r1, #0
    1956:	f240 50d1 	movw	r0, #1489	; 0x5d1
    195a:	f3af 8000 	nop.w
    195e:	b124      	cbz	r4, 196a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    1960:	2100      	movs	r1, #0
    1962:	f240 7064 	movw	r0, #1892	; 0x764
    1966:	f3af 8000 	nop.w
    196a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    196e:	f88d 0004 	strb.w	r0, [sp, #4]
    1972:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1976:	2800      	cmp	r0, #0
    1978:	d1b9      	bne.n	18ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    197a:	b124      	cbz	r4, 1986 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    197c:	2100      	movs	r1, #0
    197e:	f240 706e 	movw	r0, #1902	; 0x76e
    1982:	f3af 8000 	nop.w
    1986:	f001 f833 	bl	29f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    198a:	4680      	mov	r8, r0
    198c:	4633      	mov	r3, r6
    198e:	aa06      	add	r2, sp, #24
    1990:	990c      	ldr	r1, [sp, #48]	; 0x30
    1992:	f7ff fa25 	bl	de0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5e0>
    1996:	b124      	cbz	r4, 19a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    1998:	2100      	movs	r1, #0
    199a:	f240 7075 	movw	r0, #1909	; 0x775
    199e:	f3af 8000 	nop.w
    19a2:	4991      	ldr	r1, [pc, #580]	; (1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    19a4:	a806      	add	r0, sp, #24
    19a6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    19aa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    19ae:	2901      	cmp	r1, #1
    19b0:	bf18      	it	ne
    19b2:	2902      	cmpne	r1, #2
    19b4:	d13c      	bne.n	1a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    19b6:	9906      	ldr	r1, [sp, #24]
    19b8:	9b07      	ldr	r3, [sp, #28]
    19ba:	eba1 0108 	sub.w	r1, r1, r8
    19be:	4a8b      	ldr	r2, [pc, #556]	; (1bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    19c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    19c4:	eba3 0308 	sub.w	r3, r3, r8
    19c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    19cc:	2902      	cmp	r1, #2
    19ce:	d371      	bcc.n	1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19d0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    19d4:	d26e      	bcs.n	1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19d6:	429a      	cmp	r2, r3
    19d8:	d36c      	bcc.n	1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    19da:	f04f 0901 	mov.w	r9, #1
    19de:	ab01      	add	r3, sp, #4
    19e0:	aa05      	add	r2, sp, #20
    19e2:	4631      	mov	r1, r6
    19e4:	f7fe feec 	bl	7c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1c0>
    19e8:	2800      	cmp	r0, #0
    19ea:	d06b      	beq.n	1ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    19ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
    19f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    19f4:	4633      	mov	r3, r6
    19f6:	428a      	cmp	r2, r1
    19f8:	d068      	beq.n	1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    19fa:	2005      	movs	r0, #5
    19fc:	f7fe fd28 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a00:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1a04:	7048      	strb	r0, [r1, #1]
    1a06:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1a0a:	2820      	cmp	r0, #32
    1a0c:	bf03      	ittte	eq
    1a0e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a12:	f880 a020 	strbeq.w	sl, [r0, #32]
    1a16:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1a1a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1a1e:	bf18      	it	ne
    1a20:	f880 a001 	strbne.w	sl, [r0, #1]
    1a24:	4632      	mov	r2, r6
    1a26:	4651      	mov	r1, sl
    1a28:	f05f 0003 	movs.w	r0, #3
    1a2c:	f7ff fb7e 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1a30:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a34:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1a38:	f88d 0004 	strb.w	r0, [sp, #4]
    1a3c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1a40:	b124      	cbz	r4, 1a4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1a42:	2100      	movs	r1, #0
    1a44:	f240 707c 	movw	r0, #1916	; 0x77c
    1a48:	f3af 8000 	nop.w
    1a4c:	4868      	ldr	r0, [pc, #416]	; (1bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1a4e:	2800      	cmp	r0, #0
    1a50:	bf18      	it	ne
    1a52:	f3af 8000 	nopne.w
    1a56:	f3ef 8810 	mrs	r8, PRIMASK
    1a5a:	b672      	cpsid	i
    1a5c:	b124      	cbz	r4, 1a68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1a5e:	2100      	movs	r1, #0
    1a60:	f240 7082 	movw	r0, #1922	; 0x782
    1a64:	f3af 8000 	nop.w
    1a68:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1a6c:	f88d 0004 	strb.w	r0, [sp, #4]
    1a70:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1a74:	2800      	cmp	r0, #0
    1a76:	f47f af3a 	bne.w	18ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1a7a:	b124      	cbz	r4, 1a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1a7c:	2100      	movs	r1, #0
    1a7e:	f240 708a 	movw	r0, #1930	; 0x78a
    1a82:	f3af 8000 	nop.w
    1a86:	f10d 0e18 	add.w	lr, sp, #24
    1a8a:	9800      	ldr	r0, [sp, #0]
    1a8c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1a90:	f100 0008 	add.w	r0, r0, #8
    1a94:	f1b9 0f00 	cmp.w	r9, #0
    1a98:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1a9c:	d044      	beq.n	1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1a9e:	b124      	cbz	r4, 1aaa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1aa0:	2100      	movs	r1, #0
    1aa2:	f240 7097 	movw	r0, #1943	; 0x797
    1aa6:	f3af 8000 	nop.w
    1aaa:	f1bb 0f00 	cmp.w	fp, #0
    1aae:	d12c      	bne.n	1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1ab0:	e016      	b.n	1ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1ab2:	e7ff      	b.n	1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1ab4:	4632      	mov	r2, r6
    1ab6:	4651      	mov	r1, sl
    1ab8:	2004      	movs	r0, #4
    1aba:	f7ff fb37 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1abe:	f04f 0901 	mov.w	r9, #1
    1ac2:	e7b5      	b.n	1a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1ac4:	4632      	mov	r2, r6
    1ac6:	4651      	mov	r1, sl
    1ac8:	2004      	movs	r0, #4
    1aca:	e7af      	b.n	1a2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1acc:	2920      	cmp	r1, #32
    1ace:	bf19      	ittee	ne
    1ad0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1ad4:	7840      	ldrbne	r0, [r0, #1]
    1ad6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1ada:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1ade:	e78f      	b.n	1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1ae0:	b19f      	cbz	r7, 1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1ae2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1ae6:	2820      	cmp	r0, #32
    1ae8:	d10f      	bne.n	1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1aea:	b124      	cbz	r4, 1af6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1aec:	2100      	movs	r1, #0
    1aee:	f240 709c 	movw	r0, #1948	; 0x79c
    1af2:	f3af 8000 	nop.w
    1af6:	4631      	mov	r1, r6
    1af8:	2002      	movs	r0, #2
    1afa:	f7ff fb47 	bl	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    1afe:	b920      	cbnz	r0, 1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b00:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b02:	7800      	ldrb	r0, [r0, #0]
    1b04:	b3f0      	cbz	r0, 1b84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1b06:	2801      	cmp	r0, #1
    1b08:	d04c      	beq.n	1ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1b0a:	b124      	cbz	r4, 1b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1b0c:	2100      	movs	r1, #0
    1b0e:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1b12:	f3af 8000 	nop.w
    1b16:	f1bb 0f00 	cmp.w	fp, #0
    1b1a:	bf18      	it	ne
    1b1c:	2001      	movne	r0, #1
    1b1e:	d04a      	beq.n	1bb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1b20:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1b24:	f04f 0901 	mov.w	r9, #1
    1b28:	b124      	cbz	r4, 1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1b2a:	2100      	movs	r1, #0
    1b2c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1b30:	f3af 8000 	nop.w
    1b34:	f1b8 0f00 	cmp.w	r8, #0
    1b38:	d045      	beq.n	1bc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1b3a:	b124      	cbz	r4, 1b46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1b3c:	2100      	movs	r1, #0
    1b3e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1b42:	f3af 8000 	nop.w
    1b46:	f1b9 0f00 	cmp.w	r9, #0
    1b4a:	d011      	beq.n	1b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b4c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1b50:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1b54:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1b58:	2820      	cmp	r0, #32
    1b5a:	d009      	beq.n	1b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1b5c:	b124      	cbz	r4, 1b68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1b5e:	2100      	movs	r1, #0
    1b60:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1b64:	f3af 8000 	nop.w
    1b68:	4822      	ldr	r0, [pc, #136]	; (1bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1b6a:	7840      	ldrb	r0, [r0, #1]
    1b6c:	f001 fec8 	bl	3900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1b70:	b124      	cbz	r4, 1b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1b72:	2100      	movs	r1, #0
    1b74:	f240 70da 	movw	r0, #2010	; 0x7da
    1b78:	f3af 8000 	nop.w
    1b7c:	b00d      	add	sp, #52	; 0x34
    1b7e:	4648      	mov	r0, r9
    1b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b84:	e7ff      	b.n	1b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1b86:	b124      	cbz	r4, 1b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1b88:	2100      	movs	r1, #0
    1b8a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1b8e:	f3af 8000 	nop.w
    1b92:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1b96:	4651      	mov	r1, sl
    1b98:	2004      	movs	r0, #4
    1b9a:	f7ff fac7 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1b9e:	f04f 0901 	mov.w	r9, #1
    1ba2:	e7c1      	b.n	1b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1ba4:	2c00      	cmp	r4, #0
    1ba6:	f43f aea2 	beq.w	18ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1baa:	2100      	movs	r1, #0
    1bac:	f240 70af 	movw	r0, #1967	; 0x7af
    1bb0:	f3af 8000 	nop.w
    1bb4:	e69b      	b.n	18ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1bb6:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1bba:	2001      	movs	r0, #1
    1bbc:	ea20 0101 	bic.w	r1, r0, r1
    1bc0:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1bc4:	e7ac      	b.n	1b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1bc6:	4807      	ldr	r0, [pc, #28]	; (1be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1bc8:	2800      	cmp	r0, #0
    1bca:	bf18      	it	ne
    1bcc:	f3af 8000 	nopne.w
    1bd0:	b662      	cpsie	i
    1bd2:	e7b2      	b.n	1b3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1bd4:	e000ed04 	.word	0xe000ed04
    1bd8:	20000ca4 	.word	0x20000ca4
    1bdc:	00000000 	.word	0x00000000
    1be0:	20000924 	.word	0x20000924
    1be4:	00000000 	.word	0x00000000
    1be8:	20000c24 	.word	0x20000c24
    1bec:	003fffff 	.word	0x003fffff
    1bf0:	00000000 	.word	0x00000000
    1bf4:	20000010 	.word	0x20000010

00001bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1bf8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bfc:	48a5      	ldr	r0, [pc, #660]	; (1e94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>)
    1bfe:	b08c      	sub	sp, #48	; 0x30
    1c00:	6800      	ldr	r0, [r0, #0]
    1c02:	05c0      	lsls	r0, r0, #23
    1c04:	0dc0      	lsrs	r0, r0, #23
    1c06:	d011      	beq.n	1c2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1c08:	3810      	subs	r0, #16
    1c0a:	b240      	sxtb	r0, r0
    1c0c:	2800      	cmp	r0, #0
    1c0e:	bfb8      	it	lt
    1c10:	f000 000f 	andlt.w	r0, r0, #15
    1c14:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c18:	bfac      	ite	ge
    1c1a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1c1e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1c22:	0940      	lsrs	r0, r0, #5
    1c24:	bf08      	it	eq
    1c26:	f04f 0901 	moveq.w	r9, #1
    1c2a:	d001      	beq.n	1c30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1c2c:	f04f 0900 	mov.w	r9, #0
    1c30:	980c      	ldr	r0, [sp, #48]	; 0x30
    1c32:	7800      	ldrb	r0, [r0, #0]
    1c34:	2800      	cmp	r0, #0
    1c36:	f04f 0000 	mov.w	r0, #0
    1c3a:	bf1c      	itt	ne
    1c3c:	b00d      	addne	sp, #52	; 0x34
    1c3e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c42:	f8df a254 	ldr.w	sl, [pc, #596]	; 1e98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1c46:	4d95      	ldr	r5, [pc, #596]	; (1e9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>)
    1c48:	4c95      	ldr	r4, [pc, #596]	; (1ea0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>)
    1c4a:	f04f 0b00 	mov.w	fp, #0
    1c4e:	900b      	str	r0, [sp, #44]	; 0x2c
    1c50:	b125      	cbz	r5, 1c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1c52:	2100      	movs	r1, #0
    1c54:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1c58:	f3af 8000 	nop.w
    1c5c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1c60:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1c64:	f04f 0800 	mov.w	r8, #0
    1c68:	b125      	cbz	r5, 1c74 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1c6a:	2100      	movs	r1, #0
    1c6c:	f240 605d 	movw	r0, #1629	; 0x65d
    1c70:	f3af 8000 	nop.w
    1c74:	f1b9 0f00 	cmp.w	r9, #0
    1c78:	d11d      	bne.n	1cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c7a:	4637      	mov	r7, r6
    1c7c:	2001      	movs	r0, #1
    1c7e:	ea20 0607 	bic.w	r6, r0, r7
    1c82:	4888      	ldr	r0, [pc, #544]	; (1ea4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1c84:	2240      	movs	r2, #64	; 0x40
    1c86:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1c8a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1c8e:	f00a fc4b 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1c92:	b125      	cbz	r5, 1c9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1c94:	2100      	movs	r1, #0
    1c96:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1c9a:	f3af 8000 	nop.w
    1c9e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1ca2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1ca6:	6a09      	ldr	r1, [r1, #32]
    1ca8:	6201      	str	r1, [r0, #32]
    1caa:	b125      	cbz	r5, 1cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1cac:	2100      	movs	r1, #0
    1cae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1cb2:	f3af 8000 	nop.w
    1cb6:	b125      	cbz	r5, 1cc2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1cb8:	2100      	movs	r1, #0
    1cba:	f240 6065 	movw	r0, #1637	; 0x665
    1cbe:	f3af 8000 	nop.w
    1cc2:	f000 fe95 	bl	29f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1cc6:	4607      	mov	r7, r0
    1cc8:	4633      	mov	r3, r6
    1cca:	466a      	mov	r2, sp
    1ccc:	990c      	ldr	r1, [sp, #48]	; 0x30
    1cce:	f7ff f887 	bl	de0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5e0>
    1cd2:	b125      	cbz	r5, 1cde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1cd4:	2100      	movs	r1, #0
    1cd6:	f240 606b 	movw	r0, #1643	; 0x66b
    1cda:	f3af 8000 	nop.w
    1cde:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1ce2:	2820      	cmp	r0, #32
    1ce4:	d014      	beq.n	1d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1ce6:	6920      	ldr	r0, [r4, #16]
    1ce8:	9900      	ldr	r1, [sp, #0]
    1cea:	1a09      	subs	r1, r1, r0
    1cec:	0209      	lsls	r1, r1, #8
    1cee:	17ca      	asrs	r2, r1, #31
    1cf0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1cf4:	1209      	asrs	r1, r1, #8
    1cf6:	d50b      	bpl.n	1d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1cf8:	e9dd 2100 	ldrd	r2, r1, [sp]
    1cfc:	1a89      	subs	r1, r1, r2
    1cfe:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d02:	4408      	add	r0, r1
    1d04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d08:	e9cd 2000 	strd	r2, r0, [sp]
    1d0c:	f04f 0801 	mov.w	r8, #1
    1d10:	b14d      	cbz	r5, 1d26 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1d12:	2100      	movs	r1, #0
    1d14:	f240 6075 	movw	r0, #1653	; 0x675
    1d18:	f3af 8000 	nop.w
    1d1c:	2100      	movs	r1, #0
    1d1e:	f240 607b 	movw	r0, #1659	; 0x67b
    1d22:	f3af 8000 	nop.w
    1d26:	9800      	ldr	r0, [sp, #0]
    1d28:	9901      	ldr	r1, [sp, #4]
    1d2a:	1bc0      	subs	r0, r0, r7
    1d2c:	1bc9      	subs	r1, r1, r7
    1d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d36:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1d3a:	d205      	bcs.n	1d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1d3c:	458a      	cmp	sl, r1
    1d3e:	d303      	bcc.n	1d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1d40:	f1b9 0f00 	cmp.w	r9, #0
    1d44:	d10c      	bne.n	1d60 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>
    1d46:	e003      	b.n	1d50 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d48:	f1b9 0f00 	cmp.w	r9, #0
    1d4c:	d038      	beq.n	1dc0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>
    1d4e:	e094      	b.n	1e7a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1d50:	4633      	mov	r3, r6
    1d52:	463a      	mov	r2, r7
    1d54:	4669      	mov	r1, sp
    1d56:	4854      	ldr	r0, [pc, #336]	; (1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>)
    1d58:	f7fe fbb6 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
    1d5c:	ea48 0800 	orr.w	r8, r8, r0
    1d60:	f1b8 0f00 	cmp.w	r8, #0
    1d64:	d022      	beq.n	1dac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1d66:	9800      	ldr	r0, [sp, #0]
    1d68:	f00a fa70 	bl	c24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d6c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d70:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1d74:	4b4d      	ldr	r3, [pc, #308]	; (1eac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>)
    1d76:	4411      	add	r1, r2
    1d78:	1c49      	adds	r1, r1, #1
    1d7a:	1842      	adds	r2, r0, r1
    1d7c:	4298      	cmp	r0, r3
    1d7e:	d841      	bhi.n	1e04 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>
    1d80:	4849      	ldr	r0, [pc, #292]	; (1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>)
    1d82:	4281      	cmp	r1, r0
    1d84:	dc5a      	bgt.n	1e3c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1d86:	4240      	negs	r0, r0
    1d88:	4281      	cmp	r1, r0
    1d8a:	db5f      	blt.n	1e4c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1d8c:	1c58      	adds	r0, r3, #1
    1d8e:	4290      	cmp	r0, r2
    1d90:	bfdc      	itt	le
    1d92:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d96:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d9a:	dd05      	ble.n	1da8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c>
    1d9c:	2a00      	cmp	r2, #0
    1d9e:	bfbc      	itt	lt
    1da0:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1da4:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1da8:	980c      	ldr	r0, [sp, #48]	; 0x30
    1daa:	60c2      	str	r2, [r0, #12]
    1dac:	2001      	movs	r0, #1
    1dae:	900b      	str	r0, [sp, #44]	; 0x2c
    1db0:	2d00      	cmp	r5, #0
    1db2:	d062      	beq.n	1e7a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1db4:	2100      	movs	r1, #0
    1db6:	f240 608e 	movw	r0, #1678	; 0x68e
    1dba:	f3af 8000 	nop.w
    1dbe:	e05c      	b.n	1e7a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1dc0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1dc4:	aa08      	add	r2, sp, #32
    1dc6:	a907      	add	r1, sp, #28
    1dc8:	f000 fcbc 	bl	2744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1dcc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1dd0:	2820      	cmp	r0, #32
    1dd2:	d01c      	beq.n	1e0e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc2>
    1dd4:	6920      	ldr	r0, [r4, #16]
    1dd6:	1d40      	adds	r0, r0, #5
    1dd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ddc:	e9dd 2100 	ldrd	r2, r1, [sp]
    1de0:	1a89      	subs	r1, r1, r2
    1de2:	4401      	add	r1, r0
    1de4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1de8:	e9cd 0100 	strd	r0, r1, [sp]
    1dec:	f00a fa2e 	bl	c24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1df0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1df4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1df8:	4b2c      	ldr	r3, [pc, #176]	; (1eac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>)
    1dfa:	4411      	add	r1, r2
    1dfc:	1c4a      	adds	r2, r1, #1
    1dfe:	1881      	adds	r1, r0, r2
    1e00:	4298      	cmp	r0, r3
    1e02:	d918      	bls.n	1e36 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xea>
    1e04:	f240 6109 	movw	r1, #1545	; 0x609
    1e08:	2070      	movs	r0, #112	; 0x70
    1e0a:	f001 fca9 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e0e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e12:	f107 0609 	add.w	r6, r7, #9
    1e16:	b120      	cbz	r0, 1e22 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd6>
    1e18:	f001 fc3e 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1e1c:	2800      	cmp	r0, #0
    1e1e:	bf08      	it	eq
    1e20:	3632      	addeq	r6, #50	; 0x32
    1e22:	4823      	ldr	r0, [pc, #140]	; (1eb0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>)
    1e24:	7841      	ldrb	r1, [r0, #1]
    1e26:	9807      	ldr	r0, [sp, #28]
    1e28:	4281      	cmp	r1, r0
    1e2a:	bf84      	itt	hi
    1e2c:	1a08      	subhi	r0, r1, r0
    1e2e:	4406      	addhi	r6, r0
    1e30:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1e34:	e7d2      	b.n	1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>
    1e36:	481c      	ldr	r0, [pc, #112]	; (1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>)
    1e38:	4282      	cmp	r2, r0
    1e3a:	dd04      	ble.n	1e46 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1e3c:	f240 610a 	movw	r1, #1546	; 0x60a
    1e40:	2070      	movs	r0, #112	; 0x70
    1e42:	f001 fc8d 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e46:	481b      	ldr	r0, [pc, #108]	; (1eb4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>)
    1e48:	4282      	cmp	r2, r0
    1e4a:	da04      	bge.n	1e56 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10a>
    1e4c:	f240 610b 	movw	r1, #1547	; 0x60b
    1e50:	2070      	movs	r0, #112	; 0x70
    1e52:	f001 fc85 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e56:	4818      	ldr	r0, [pc, #96]	; (1eb8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>)
    1e58:	4288      	cmp	r0, r1
    1e5a:	bfdc      	itt	le
    1e5c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1e60:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1e64:	dd05      	ble.n	1e72 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e66:	2900      	cmp	r1, #0
    1e68:	bfbc      	itt	lt
    1e6a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1e6e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1e72:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e74:	60c1      	str	r1, [r0, #12]
    1e76:	2001      	movs	r0, #1
    1e78:	900b      	str	r0, [sp, #44]	; 0x2c
    1e7a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1e7e:	f88d 0010 	strb.w	r0, [sp, #16]
    1e82:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1e86:	2800      	cmp	r0, #0
    1e88:	f47f aee2 	bne.w	1c50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1e8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e8e:	b00d      	add	sp, #52	; 0x34
    1e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e94:	e000ed04 	.word	0xe000ed04
    1e98:	003fffff 	.word	0x003fffff
    1e9c:	00000000 	.word	0x00000000
    1ea0:	20000ca4 	.word	0x20000ca4
    1ea4:	20000c24 	.word	0x20000c24
    1ea8:	07a12000 	.word	0x07a12000
    1eac:	1e847fff 	.word	0x1e847fff
    1eb0:	20000012 	.word	0x20000012
    1eb4:	f85ee000 	.word	0xf85ee000
    1eb8:	1e848000 	.word	0x1e848000

00001ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ebc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ec0:	4d88      	ldr	r5, [pc, #544]	; (20e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1ec2:	b08c      	sub	sp, #48	; 0x30
    1ec4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1ec8:	2000      	movs	r0, #0
    1eca:	9009      	str	r0, [sp, #36]	; 0x24
    1ecc:	2001      	movs	r0, #1
    1ece:	4c86      	ldr	r4, [pc, #536]	; (20e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    1ed0:	f04f 0900 	mov.w	r9, #0
    1ed4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1ed8:	4680      	mov	r8, r0
    1eda:	9008      	str	r0, [sp, #32]
    1edc:	b124      	cbz	r4, 1ee8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1ede:	2100      	movs	r1, #0
    1ee0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1ee4:	f3af 8000 	nop.w
    1ee8:	9808      	ldr	r0, [sp, #32]
    1eea:	2800      	cmp	r0, #0
    1eec:	d037      	beq.n	1f5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1eee:	bf00      	nop
    1ef0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1ef4:	b124      	cbz	r4, 1f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1ef6:	2100      	movs	r1, #0
    1ef8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1efc:	f3af 8000 	nop.w
    1f00:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1f04:	2240      	movs	r2, #64	; 0x40
    1f06:	ea28 060a 	bic.w	r6, r8, sl
    1f0a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f0e:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1f12:	4683      	mov	fp, r0
    1f14:	f00a fb08 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f18:	b124      	cbz	r4, 1f24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1f1a:	2100      	movs	r1, #0
    1f1c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1f20:	f3af 8000 	nop.w
    1f24:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1f28:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1f2c:	9000      	str	r0, [sp, #0]
    1f2e:	6a09      	ldr	r1, [r1, #32]
    1f30:	6201      	str	r1, [r0, #32]
    1f32:	b124      	cbz	r4, 1f3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1f34:	2100      	movs	r1, #0
    1f36:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1f3a:	f3af 8000 	nop.w
    1f3e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f42:	f88d 0008 	strb.w	r0, [sp, #8]
    1f46:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1f4a:	b178      	cbz	r0, 1f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1f4c:	2c00      	cmp	r4, #0
    1f4e:	bf1c      	itt	ne
    1f50:	2100      	movne	r1, #0
    1f52:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1f56:	d0c1      	beq.n	1edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f58:	f3af 8000 	nop.w
    1f5c:	e7be      	b.n	1edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f5e:	4863      	ldr	r0, [pc, #396]	; (20ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    1f60:	2800      	cmp	r0, #0
    1f62:	bf18      	it	ne
    1f64:	f3af 8000 	nopne.w
    1f68:	b662      	cpsie	i
    1f6a:	e7c1      	b.n	1ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1f6c:	b124      	cbz	r4, 1f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1f6e:	2100      	movs	r1, #0
    1f70:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1f74:	f3af 8000 	nop.w
    1f78:	980c      	ldr	r0, [sp, #48]	; 0x30
    1f7a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1f7e:	2803      	cmp	r0, #3
    1f80:	d172      	bne.n	2068 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    1f82:	f8dd a000 	ldr.w	sl, [sp]
    1f86:	f8cd a018 	str.w	sl, [sp, #24]
    1f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f8c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    1f90:	4288      	cmp	r0, r1
    1f92:	bf14      	ite	ne
    1f94:	f04f 0b00 	movne.w	fp, #0
    1f98:	f04f 0b01 	moveq.w	fp, #1
    1f9c:	f10a 0c20 	add.w	ip, sl, #32
    1fa0:	4686      	mov	lr, r0
    1fa2:	2220      	movs	r2, #32
    1fa4:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1fa8:	e003      	b.n	1fb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1faa:	4602      	mov	r2, r0
    1fac:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1fb0:	7840      	ldrb	r0, [r0, #1]
    1fb2:	4288      	cmp	r0, r1
    1fb4:	d002      	beq.n	1fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    1fb6:	2820      	cmp	r0, #32
    1fb8:	d00a      	beq.n	1fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1fba:	e7f6      	b.n	1faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    1fbc:	2820      	cmp	r0, #32
    1fbe:	d007      	beq.n	1fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1fc0:	4586      	cmp	lr, r0
    1fc2:	d107      	bne.n	1fd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    1fc4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1fc8:	7840      	ldrb	r0, [r0, #1]
    1fca:	f88c 0000 	strb.w	r0, [ip]
    1fce:	e007      	b.n	1fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    1fd0:	4648      	mov	r0, r9
    1fd2:	e00c      	b.n	1fee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    1fd4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1fd8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1fdc:	7840      	ldrb	r0, [r0, #1]
    1fde:	7048      	strb	r0, [r1, #1]
    1fe0:	b124      	cbz	r4, 1fec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    1fe2:	2100      	movs	r1, #0
    1fe4:	f240 5037 	movw	r0, #1335	; 0x537
    1fe8:	f3af 8000 	nop.w
    1fec:	4640      	mov	r0, r8
    1fee:	ea10 0f0b 	tst.w	r0, fp
    1ff2:	bf18      	it	ne
    1ff4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d052      	beq.n	20a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    1ffc:	b124      	cbz	r4, 2008 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    1ffe:	2100      	movs	r1, #0
    2000:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2004:	f3af 8000 	nop.w
    2008:	4632      	mov	r2, r6
    200a:	2001      	movs	r0, #1
    200c:	990c      	ldr	r1, [sp, #48]	; 0x30
    200e:	f7ff f88d 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    2012:	9806      	ldr	r0, [sp, #24]
    2014:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2018:	f88d 0008 	strb.w	r0, [sp, #8]
    201c:	f89d a008 	ldrb.w	sl, [sp, #8]
    2020:	b124      	cbz	r4, 202c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2022:	2100      	movs	r1, #0
    2024:	f640 0008 	movw	r0, #2056	; 0x808
    2028:	f3af 8000 	nop.w
    202c:	4830      	ldr	r0, [pc, #192]	; (20f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    202e:	2800      	cmp	r0, #0
    2030:	bf18      	it	ne
    2032:	f3af 8000 	nopne.w
    2036:	f3ef 8010 	mrs	r0, PRIMASK
    203a:	b672      	cpsid	i
    203c:	9008      	str	r0, [sp, #32]
    203e:	b124      	cbz	r4, 204a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2040:	2100      	movs	r1, #0
    2042:	f640 000d 	movw	r0, #2061	; 0x80d
    2046:	f3af 8000 	nop.w
    204a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    204e:	f88d 0008 	strb.w	r0, [sp, #8]
    2052:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2056:	b140      	cbz	r0, 206a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2058:	2c00      	cmp	r4, #0
    205a:	bf1c      	itt	ne
    205c:	2100      	movne	r1, #0
    205e:	f640 0011 	movwne	r0, #2065	; 0x811
    2062:	f43f af3b 	beq.w	1edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2066:	e777      	b.n	1f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2068:	e01b      	b.n	20a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    206a:	f1ba 0f00 	cmp.w	sl, #0
    206e:	d008      	beq.n	2082 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2070:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2074:	2820      	cmp	r0, #32
    2076:	d104      	bne.n	2082 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2078:	4631      	mov	r1, r6
    207a:	2002      	movs	r0, #2
    207c:	f7ff f886 	bl	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    2080:	b308      	cbz	r0, 20c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2082:	b124      	cbz	r4, 208e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2084:	2100      	movs	r1, #0
    2086:	f640 0025 	movw	r0, #2085	; 0x825
    208a:	f3af 8000 	nop.w
    208e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2092:	ea28 0000 	bic.w	r0, r8, r0
    2096:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    209a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    209e:	2001      	movs	r0, #1
    20a0:	9009      	str	r0, [sp, #36]	; 0x24
    20a2:	b124      	cbz	r4, 20ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    20a4:	2100      	movs	r1, #0
    20a6:	f640 002e 	movw	r0, #2094	; 0x82e
    20aa:	f3af 8000 	nop.w
    20ae:	9808      	ldr	r0, [sp, #32]
    20b0:	b188      	cbz	r0, 20d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    20b2:	b124      	cbz	r4, 20be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    20b4:	2100      	movs	r1, #0
    20b6:	f640 0032 	movw	r0, #2098	; 0x832
    20ba:	f3af 8000 	nop.w
    20be:	9809      	ldr	r0, [sp, #36]	; 0x24
    20c0:	b00d      	add	sp, #52	; 0x34
    20c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20c6:	2c00      	cmp	r4, #0
    20c8:	d0f1      	beq.n	20ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    20ca:	2100      	movs	r1, #0
    20cc:	f44f 6002 	mov.w	r0, #2080	; 0x820
    20d0:	f3af 8000 	nop.w
    20d4:	e7e6      	b.n	20a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    20d6:	4805      	ldr	r0, [pc, #20]	; (20ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    20d8:	2800      	cmp	r0, #0
    20da:	bf18      	it	ne
    20dc:	f3af 8000 	nopne.w
    20e0:	b662      	cpsie	i
    20e2:	e7e6      	b.n	20b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    20e4:	20000ca4 	.word	0x20000ca4
	...

000020f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    20f4:	b510      	push	{r4, lr}
    20f6:	2820      	cmp	r0, #32
    20f8:	d211      	bcs.n	211e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    20fa:	490e      	ldr	r1, [pc, #56]	; (2134 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    20fc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2100:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2104:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2108:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    210c:	b13b      	cbz	r3, 211e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    210e:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2112:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2116:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    211a:	2a01      	cmp	r2, #1
    211c:	d001      	beq.n	2122 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    211e:	2000      	movs	r0, #0
    2120:	bd10      	pop	{r4, pc}
    2122:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2126:	4601      	mov	r1, r0
    2128:	2000      	movs	r0, #0
    212a:	f7fe ffff 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    212e:	2001      	movs	r0, #1
    2130:	bd10      	pop	{r4, pc}
    2132:	0000      	.short	0x0000
    2134:	20000ca4 	.word	0x20000ca4

00002138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    213c:	4e80      	ldr	r6, [pc, #512]	; (2340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    213e:	4680      	mov	r8, r0
    2140:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2144:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2148:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    214c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2150:	2800      	cmp	r0, #0
    2152:	d068      	beq.n	2226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2154:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2158:	4d7a      	ldr	r5, [pc, #488]	; (2344 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    215a:	b125      	cbz	r5, 2166 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    215c:	2100      	movs	r1, #0
    215e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2162:	f3af 8000 	nop.w
    2166:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    216a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    216e:	2801      	cmp	r0, #1
    2170:	d018      	beq.n	21a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2172:	b2c0      	uxtb	r0, r0
    2174:	2804      	cmp	r0, #4
    2176:	bf1c      	itt	ne
    2178:	2805      	cmpne	r0, #5
    217a:	2806      	cmpne	r0, #6
    217c:	d058      	beq.n	2230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    217e:	b12d      	cbz	r5, 218c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2180:	f04f 0100 	mov.w	r1, #0
    2184:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2188:	f3af 8000 	nop.w
    218c:	f001 fc0e 	bl	39ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2190:	b125      	cbz	r5, 219c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2192:	2100      	movs	r1, #0
    2194:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2198:	f3af 8000 	nop.w
    219c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    21a0:	2801      	cmp	r0, #1
    21a2:	d1e6      	bne.n	2172 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    21a4:	2401      	movs	r4, #1
    21a6:	b125      	cbz	r5, 21b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    21a8:	2100      	movs	r1, #0
    21aa:	f640 30d8 	movw	r0, #3032	; 0xbd8
    21ae:	f3af 8000 	nop.w
    21b2:	2c00      	cmp	r4, #0
    21b4:	d042      	beq.n	223c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    21b6:	2000      	movs	r0, #0
    21b8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    21bc:	b125      	cbz	r5, 21c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    21be:	2100      	movs	r1, #0
    21c0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    21c4:	f3af 8000 	nop.w
    21c8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    21cc:	2001      	movs	r0, #1
    21ce:	ea20 090b 	bic.w	r9, r0, fp
    21d2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    21d6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21da:	2240      	movs	r2, #64	; 0x40
    21dc:	f00a f9a4 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21e0:	b125      	cbz	r5, 21ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    21e2:	2100      	movs	r1, #0
    21e4:	f240 50cd 	movw	r0, #1485	; 0x5cd
    21e8:	f3af 8000 	nop.w
    21ec:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    21f0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    21f4:	6a00      	ldr	r0, [r0, #32]
    21f6:	f8ca 0020 	str.w	r0, [sl, #32]
    21fa:	b125      	cbz	r5, 2206 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    21fc:	2100      	movs	r1, #0
    21fe:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2202:	f3af 8000 	nop.w
    2206:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    220a:	f88d 0000 	strb.w	r0, [sp]
    220e:	f89d 0000 	ldrb.w	r0, [sp]
    2212:	b1d0      	cbz	r0, 224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    2214:	2d00      	cmp	r5, #0
    2216:	bf1c      	itt	ne
    2218:	2100      	movne	r1, #0
    221a:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    221e:	d0c2      	beq.n	21a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2220:	f3af 8000 	nop.w
    2224:	e7bf      	b.n	21a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2226:	f640 31b8 	movw	r1, #3000	; 0xbb8
    222a:	2070      	movs	r0, #112	; 0x70
    222c:	f001 fa98 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2230:	464a      	mov	r2, r9
    2232:	4641      	mov	r1, r8
    2234:	2001      	movs	r0, #1
    2236:	f7fe ff79 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    223a:	e7a9      	b.n	2190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    223c:	4842      	ldr	r0, [pc, #264]	; (2348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    223e:	2800      	cmp	r0, #0
    2240:	bf18      	it	ne
    2242:	f3af 8000 	nopne.w
    2246:	b662      	cpsie	i
    2248:	e7b5      	b.n	21b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    224a:	b125      	cbz	r5, 2256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    224c:	2100      	movs	r1, #0
    224e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2252:	f3af 8000 	nop.w
    2256:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    225a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    225e:	4614      	mov	r4, r2
    2260:	f04f 0b20 	mov.w	fp, #32
    2264:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2268:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    226c:	e003      	b.n	2276 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    226e:	46a3      	mov	fp, r4
    2270:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2274:	785c      	ldrb	r4, [r3, #1]
    2276:	4544      	cmp	r4, r8
    2278:	d002      	beq.n	2280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    227a:	2c20      	cmp	r4, #32
    227c:	d02b      	beq.n	22d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    227e:	e7f6      	b.n	226e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2280:	2c20      	cmp	r4, #32
    2282:	d028      	beq.n	22d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2284:	42a2      	cmp	r2, r4
    2286:	d104      	bne.n	2292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2288:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    228c:	7840      	ldrb	r0, [r0, #1]
    228e:	7008      	strb	r0, [r1, #0]
    2290:	e005      	b.n	229e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2292:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2296:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    229a:	7849      	ldrb	r1, [r1, #1]
    229c:	7041      	strb	r1, [r0, #1]
    229e:	f1ba 0f00 	cmp.w	sl, #0
    22a2:	d011      	beq.n	22c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    22a4:	b125      	cbz	r5, 22b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    22a6:	2100      	movs	r1, #0
    22a8:	f240 502f 	movw	r0, #1327	; 0x52f
    22ac:	f3af 8000 	nop.w
    22b0:	f89a 0000 	ldrb.w	r0, [sl]
    22b4:	42a0      	cmp	r0, r4
    22b6:	d107      	bne.n	22c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    22b8:	b125      	cbz	r5, 22c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    22ba:	2100      	movs	r1, #0
    22bc:	f240 5032 	movw	r0, #1330	; 0x532
    22c0:	f3af 8000 	nop.w
    22c4:	f88a b000 	strb.w	fp, [sl]
    22c8:	b15d      	cbz	r5, 22e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22ca:	2100      	movs	r1, #0
    22cc:	f240 5037 	movw	r0, #1335	; 0x537
    22d0:	f3af 8000 	nop.w
    22d4:	e000      	b.n	22d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    22d6:	b125      	cbz	r5, 22e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    22d8:	2100      	movs	r1, #0
    22da:	f640 30eb 	movw	r0, #3051	; 0xbeb
    22de:	f3af 8000 	nop.w
    22e2:	481a      	ldr	r0, [pc, #104]	; (234c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    22e4:	2800      	cmp	r0, #0
    22e6:	bf18      	it	ne
    22e8:	f3af 8000 	nopne.w
    22ec:	f3ef 8410 	mrs	r4, PRIMASK
    22f0:	b672      	cpsid	i
    22f2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22f6:	f88d 0000 	strb.w	r0, [sp]
    22fa:	f89d 0000 	ldrb.w	r0, [sp]
    22fe:	b138      	cbz	r0, 2310 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2300:	2d00      	cmp	r5, #0
    2302:	bf1c      	itt	ne
    2304:	2100      	movne	r1, #0
    2306:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    230a:	f43f af4c 	beq.w	21a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    230e:	e787      	b.n	2220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2310:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2314:	2001      	movs	r0, #1
    2316:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    231a:	b154      	cbz	r4, 2332 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    231c:	2d00      	cmp	r5, #0
    231e:	bf08      	it	eq
    2320:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2324:	2100      	movs	r1, #0
    2326:	f640 30fe 	movw	r0, #3070	; 0xbfe
    232a:	f3af 8000 	nop.w
    232e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2332:	4805      	ldr	r0, [pc, #20]	; (2348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2334:	2800      	cmp	r0, #0
    2336:	bf18      	it	ne
    2338:	f3af 8000 	nopne.w
    233c:	b662      	cpsie	i
    233e:	e7ed      	b.n	231c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2340:	20000ca4 	.word	0x20000ca4
	...

00002350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	460d      	mov	r5, r1
    2354:	4606      	mov	r6, r0
    2356:	f001 f98d 	bl	3674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    235a:	480f      	ldr	r0, [pc, #60]	; (2398 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    235c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2360:	2400      	movs	r4, #0
    2362:	3880      	subs	r0, #128	; 0x80
    2364:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    2368:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    236c:	b129      	cbz	r1, 237a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    236e:	1c61      	adds	r1, r4, #1
    2370:	b2cc      	uxtb	r4, r1
    2372:	2c20      	cmp	r4, #32
    2374:	d3f8      	bcc.n	2368 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    2376:	2020      	movs	r0, #32
    2378:	bd70      	pop	{r4, r5, r6, pc}
    237a:	4808      	ldr	r0, [pc, #32]	; (239c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    237c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2380:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2384:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2388:	4621      	mov	r1, r4
    238a:	6045      	str	r5, [r0, #4]
    238c:	2001      	movs	r0, #1
    238e:	f7fe fecd 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    2392:	4620      	mov	r0, r4
    2394:	bd70      	pop	{r4, r5, r6, pc}
    2396:	0000      	.short	0x0000
    2398:	20000ca4 	.word	0x20000ca4
    239c:	20000924 	.word	0x20000924

000023a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    23a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23a4:	b083      	sub	sp, #12
    23a6:	f000 fb23 	bl	29f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    23aa:	4605      	mov	r5, r0
    23ac:	f000 fdd6 	bl	2f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23b0:	4c67      	ldr	r4, [pc, #412]	; (2550 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    23b2:	68a0      	ldr	r0, [r4, #8]
    23b4:	f1b0 3fff 	cmp.w	r0, #4294967295
    23b8:	bf1c      	itt	ne
    23ba:	f04f 30ff 	movne.w	r0, #4294967295
    23be:	60a0      	strne	r0, [r4, #8]
    23c0:	7fa0      	ldrb	r0, [r4, #30]
    23c2:	f8df b190 	ldr.w	fp, [pc, #400]	; 2554 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    23c6:	b9a8      	cbnz	r0, 23f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    23c8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    23cc:	1a08      	subs	r0, r1, r0
    23ce:	0200      	lsls	r0, r0, #8
    23d0:	17c1      	asrs	r1, r0, #31
    23d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23d6:	1200      	asrs	r0, r0, #8
    23d8:	f44f 710c 	mov.w	r1, #560	; 0x230
    23dc:	f009 ff63 	bl	c2a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    23e0:	6921      	ldr	r1, [r4, #16]
    23e2:	4408      	add	r0, r1
    23e4:	1a28      	subs	r0, r5, r0
    23e6:	0200      	lsls	r0, r0, #8
    23e8:	17c1      	asrs	r1, r0, #31
    23ea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23ee:	1200      	asrs	r0, r0, #8
    23f0:	0fc0      	lsrs	r0, r0, #31
    23f2:	d013      	beq.n	241c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    23f4:	7e60      	ldrb	r0, [r4, #25]
    23f6:	b328      	cbz	r0, 2444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    23f8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    23fc:	f88d 0000 	strb.w	r0, [sp]
    2400:	f89d 0000 	ldrb.w	r0, [sp]
    2404:	b1f0      	cbz	r0, 2444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2406:	f000 fbff 	bl	2c08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    240a:	bf00      	nop
    240c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2410:	b1f0      	cbz	r0, 2450 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2412:	f240 4147 	movw	r1, #1095	; 0x447
    2416:	2070      	movs	r0, #112	; 0x70
    2418:	f001 f9a2 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    241c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2420:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2424:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2428:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    242c:	6840      	ldr	r0, [r0, #4]
    242e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2432:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    2436:	2108      	movs	r1, #8
    2438:	4790      	blx	r2
    243a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    243e:	2070      	movs	r0, #112	; 0x70
    2440:	f001 f98e 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2444:	1ce8      	adds	r0, r5, #3
    2446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    244a:	f000 fad7 	bl	29fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    244e:	e7dd      	b.n	240c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2450:	f04f 0a01 	mov.w	sl, #1
    2454:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    2458:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    245c:	2820      	cmp	r0, #32
    245e:	d024      	beq.n	24aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2460:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2464:	2020      	movs	r0, #32
    2466:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    246a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    246e:	2600      	movs	r6, #0
    2470:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2474:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2478:	4837      	ldr	r0, [pc, #220]	; (2558 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    247a:	6026      	str	r6, [r4, #0]
    247c:	7800      	ldrb	r0, [r0, #0]
    247e:	2802      	cmp	r0, #2
    2480:	bf16      	itet	ne
    2482:	2803      	cmpne	r0, #3
    2484:	2001      	moveq	r0, #1
    2486:	2000      	movne	r0, #0
    2488:	7720      	strb	r0, [r4, #28]
    248a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    248e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2492:	f899 0020 	ldrb.w	r0, [r9, #32]
    2496:	2820      	cmp	r0, #32
    2498:	d031      	beq.n	24fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    249a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    249e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    24a2:	7d81      	ldrb	r1, [r0, #22]
    24a4:	2901      	cmp	r1, #1
    24a6:	d005      	beq.n	24b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    24a8:	e029      	b.n	24fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    24aa:	f240 414a 	movw	r1, #1098	; 0x44a
    24ae:	2070      	movs	r0, #112	; 0x70
    24b0:	f001 f956 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24b4:	46ab      	mov	fp, r5
    24b6:	f100 0508 	add.w	r5, r0, #8
    24ba:	8a40      	ldrh	r0, [r0, #18]
    24bc:	aa01      	add	r2, sp, #4
    24be:	4669      	mov	r1, sp
    24c0:	f000 f940 	bl	2744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24c4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24c8:	2820      	cmp	r0, #32
    24ca:	d004      	beq.n	24d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    24cc:	6920      	ldr	r0, [r4, #16]
    24ce:	1d40      	adds	r0, r0, #5
    24d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24d4:	e00b      	b.n	24ee <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    24d6:	8968      	ldrh	r0, [r5, #10]
    24d8:	f10b 0b09 	add.w	fp, fp, #9
    24dc:	b128      	cbz	r0, 24ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    24de:	f001 f8db 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    24e2:	2800      	cmp	r0, #0
    24e4:	bf08      	it	eq
    24e6:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    24ea:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    24ee:	e9d5 2100 	ldrd	r2, r1, [r5]
    24f2:	1a89      	subs	r1, r1, r2
    24f4:	6028      	str	r0, [r5, #0]
    24f6:	4408      	add	r0, r1
    24f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24fc:	6068      	str	r0, [r5, #4]
    24fe:	4639      	mov	r1, r7
    2500:	2001      	movs	r0, #1
    2502:	f7fe fe43 	bl	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    2506:	2800      	cmp	r0, #0
    2508:	d0f9      	beq.n	24fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    250a:	4814      	ldr	r0, [pc, #80]	; (255c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    250c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2510:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2514:	2802      	cmp	r0, #2
    2516:	d104      	bne.n	2522 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2518:	463a      	mov	r2, r7
    251a:	4641      	mov	r1, r8
    251c:	2006      	movs	r0, #6
    251e:	f7fe fe05 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    2522:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2526:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    252a:	2820      	cmp	r0, #32
    252c:	d003      	beq.n	2536 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    252e:	480c      	ldr	r0, [pc, #48]	; (2560 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2530:	7840      	ldrb	r0, [r0, #1]
    2532:	f001 f9e5 	bl	3900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2536:	7f20      	ldrb	r0, [r4, #28]
    2538:	2800      	cmp	r0, #0
    253a:	bf04      	itt	eq
    253c:	b003      	addeq	sp, #12
    253e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2542:	f000 fd55 	bl	2ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2546:	7726      	strb	r6, [r4, #28]
    2548:	7766      	strb	r6, [r4, #29]
    254a:	b003      	add	sp, #12
    254c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2550:	20000ca4 	.word	0x20000ca4
    2554:	20000924 	.word	0x20000924
    2558:	20000012 	.word	0x20000012
    255c:	20000c24 	.word	0x20000c24
    2560:	20000010 	.word	0x20000010

00002564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2564:	b510      	push	{r4, lr}
    2566:	4c32      	ldr	r4, [pc, #200]	; (2630 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    2568:	b082      	sub	sp, #8
    256a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    256e:	2920      	cmp	r1, #32
    2570:	d008      	beq.n	2584 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2572:	68a1      	ldr	r1, [r4, #8]
    2574:	f1b1 3fff 	cmp.w	r1, #4294967295
    2578:	d009      	beq.n	258e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    257a:	f640 21e9 	movw	r1, #2793	; 0xae9
    257e:	2070      	movs	r0, #112	; 0x70
    2580:	f001 f8ee 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2584:	f640 21e8 	movw	r1, #2792	; 0xae8
    2588:	2070      	movs	r0, #112	; 0x70
    258a:	f001 f8e9 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    258e:	6862      	ldr	r2, [r4, #4]
    2590:	4601      	mov	r1, r0
    2592:	4b28      	ldr	r3, [pc, #160]	; (2634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2594:	1850      	adds	r0, r2, r1
    2596:	429a      	cmp	r2, r3
    2598:	d904      	bls.n	25a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    259a:	f240 6109 	movw	r1, #1545	; 0x609
    259e:	2070      	movs	r0, #112	; 0x70
    25a0:	f001 f8de 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a4:	4a24      	ldr	r2, [pc, #144]	; (2638 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    25a6:	4291      	cmp	r1, r2
    25a8:	dd04      	ble.n	25b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    25aa:	f240 610a 	movw	r1, #1546	; 0x60a
    25ae:	2070      	movs	r0, #112	; 0x70
    25b0:	f001 f8d6 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b4:	4a21      	ldr	r2, [pc, #132]	; (263c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    25b6:	4291      	cmp	r1, r2
    25b8:	da04      	bge.n	25c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    25ba:	f240 610b 	movw	r1, #1547	; 0x60b
    25be:	2070      	movs	r0, #112	; 0x70
    25c0:	f001 f8ce 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25c4:	491e      	ldr	r1, [pc, #120]	; (2640 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    25c6:	4281      	cmp	r1, r0
    25c8:	bfdc      	itt	le
    25ca:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25ce:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25d2:	dd05      	ble.n	25e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    25d4:	2800      	cmp	r0, #0
    25d6:	bfbc      	itt	lt
    25d8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25dc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25e0:	aa01      	add	r2, sp, #4
    25e2:	4669      	mov	r1, sp
    25e4:	f000 f8ae 	bl	2744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    25ec:	280f      	cmp	r0, #15
    25ee:	bf8c      	ite	hi
    25f0:	2001      	movhi	r0, #1
    25f2:	2000      	movls	r0, #0
    25f4:	9900      	ldr	r1, [sp, #0]
    25f6:	4408      	add	r0, r1
    25f8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    25fc:	60a1      	str	r1, [r4, #8]
    25fe:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2602:	f88d 0000 	strb.w	r0, [sp]
    2606:	f89d 0000 	ldrb.w	r0, [sp]
    260a:	2800      	cmp	r0, #0
    260c:	bf04      	itt	eq
    260e:	b002      	addeq	sp, #8
    2610:	bd10      	popeq	{r4, pc}
    2612:	2301      	movs	r3, #1
    2614:	2203      	movs	r2, #3
    2616:	2005      	movs	r0, #5
    2618:	f000 fb70 	bl	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    261c:	2800      	cmp	r0, #0
    261e:	bf1c      	itt	ne
    2620:	b002      	addne	sp, #8
    2622:	bd10      	popne	{r4, pc}
    2624:	f640 21f1 	movw	r1, #2801	; 0xaf1
    2628:	2070      	movs	r0, #112	; 0x70
    262a:	f001 f899 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    262e:	0000      	.short	0x0000
    2630:	20000ca4 	.word	0x20000ca4
    2634:	1e847fff 	.word	0x1e847fff
    2638:	07a12000 	.word	0x07a12000
    263c:	f85ee000 	.word	0xf85ee000
    2640:	1e848000 	.word	0x1e848000

00002644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2644:	b570      	push	{r4, r5, r6, lr}
    2646:	4c1e      	ldr	r4, [pc, #120]	; (26c0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2648:	2120      	movs	r1, #32
    264a:	f884 1020 	strb.w	r1, [r4, #32]
    264e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2652:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2656:	2000      	movs	r0, #0
    2658:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    265c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2660:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2664:	1e42      	subs	r2, r0, #1
    2666:	60a2      	str	r2, [r4, #8]
    2668:	6020      	str	r0, [r4, #0]
    266a:	77a0      	strb	r0, [r4, #30]
    266c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2670:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2674:	7720      	strb	r0, [r4, #28]
    2676:	7760      	strb	r0, [r4, #29]
    2678:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    267c:	4911      	ldr	r1, [pc, #68]	; (26c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    267e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2682:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2686:	7008      	strb	r0, [r1, #0]
    2688:	7048      	strb	r0, [r1, #1]
    268a:	8048      	strh	r0, [r1, #2]
    268c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2690:	2210      	movs	r2, #16
    2692:	7088      	strb	r0, [r1, #2]
    2694:	f801 0f04 	strb.w	r0, [r1, #4]!
    2698:	1e52      	subs	r2, r2, #1
    269a:	d1fa      	bne.n	2692 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    269c:	4d0a      	ldr	r5, [pc, #40]	; (26c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    269e:	2601      	movs	r6, #1
    26a0:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    26a4:	20ff      	movs	r0, #255	; 0xff
    26a6:	7028      	strb	r0, [r5, #0]
    26a8:	4808      	ldr	r0, [pc, #32]	; (26cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    26aa:	f001 f90b 	bl	38c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    26ae:	7068      	strb	r0, [r5, #1]
    26b0:	f001 f966 	bl	3980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    26b4:	60a8      	str	r0, [r5, #8]
    26b6:	f000 fcc9 	bl	304c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    26ba:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    26be:	bd70      	pop	{r4, r5, r6, pc}
    26c0:	20000ca4 	.word	0x20000ca4
    26c4:	20000012 	.word	0x20000012
    26c8:	20000010 	.word	0x20000010
    26cc:	00000fe9 	.word	0x00000fe9

000026d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    26d0:	b570      	push	{r4, r5, r6, lr}
    26d2:	4605      	mov	r5, r0
    26d4:	2001      	movs	r0, #1
    26d6:	fa00 f405 	lsl.w	r4, r0, r5
    26da:	460e      	mov	r6, r1
    26dc:	2a00      	cmp	r2, #0
    26de:	bf08      	it	eq
    26e0:	4808      	ldreq	r0, [pc, #32]	; (2704 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    26e2:	d00c      	beq.n	26fe <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    26e4:	2000      	movs	r0, #0
    26e6:	f000 fc97 	bl	3018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    26ea:	00e9      	lsls	r1, r5, #3
    26ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    26f0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    26f4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    26f8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    26fc:	4802      	ldr	r0, [pc, #8]	; (2708 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    26fe:	6004      	str	r4, [r0, #0]
    2700:	bd70      	pop	{r4, r5, r6, pc}
    2702:	0000      	.short	0x0000
    2704:	4001f508 	.word	0x4001f508
    2708:	4001f504 	.word	0x4001f504

0000270c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    270c:	0b41      	lsrs	r1, r0, #13
    270e:	f248 6237 	movw	r2, #34359	; 0x8637
    2712:	4351      	muls	r1, r2
    2714:	0c0a      	lsrs	r2, r1, #16
    2716:	4b09      	ldr	r3, [pc, #36]	; (273c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    2718:	0251      	lsls	r1, r2, #9
    271a:	fb02 0203 	mla	r2, r2, r3, r0
    271e:	4808      	ldr	r0, [pc, #32]	; (2740 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2720:	4350      	muls	r0, r2
    2722:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2726:	306e      	adds	r0, #110	; 0x6e
    2728:	0d40      	lsrs	r0, r0, #21
    272a:	425b      	negs	r3, r3
    272c:	fb10 f303 	smulbb	r3, r0, r3
    2730:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2734:	bf88      	it	hi
    2736:	1c49      	addhi	r1, r1, #1
    2738:	4408      	add	r0, r1
    273a:	4770      	bx	lr
    273c:	ffffc2f7 	.word	0xffffc2f7
    2740:	00010c6f 	.word	0x00010c6f

00002744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2744:	0b43      	lsrs	r3, r0, #13
    2746:	f248 6c37 	movw	ip, #34359	; 0x8637
    274a:	fb03 f30c 	mul.w	r3, r3, ip
    274e:	b430      	push	{r4, r5}
    2750:	0c1b      	lsrs	r3, r3, #16
    2752:	f8df c044 	ldr.w	ip, [pc, #68]	; 2798 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2756:	025c      	lsls	r4, r3, #9
    2758:	fb03 030c 	mla	r3, r3, ip, r0
    275c:	480f      	ldr	r0, [pc, #60]	; (279c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    275e:	4358      	muls	r0, r3
    2760:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2764:	eb04 000c 	add.w	r0, r4, ip
    2768:	f643 5409 	movw	r4, #15625	; 0x3d09
    276c:	fb1c f404 	smulbb	r4, ip, r4
    2770:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2774:	f643 5508 	movw	r5, #15624	; 0x3d08
    2778:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    277c:	442c      	add	r4, r5
    277e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2782:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2786:	bf84      	itt	hi
    2788:	f04f 0c00 	movhi.w	ip, #0
    278c:	1c40      	addhi	r0, r0, #1
    278e:	6008      	str	r0, [r1, #0]
    2790:	f882 c000 	strb.w	ip, [r2]
    2794:	bc30      	pop	{r4, r5}
    2796:	4770      	bx	lr
    2798:	ffffc2f7 	.word	0xffffc2f7
    279c:	00010c6f 	.word	0x00010c6f

000027a0 <MPSL_IRQ_RTC0_Handler>:
    27a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27a4:	4c38      	ldr	r4, [pc, #224]	; (2888 <MPSL_IRQ_RTC0_Handler+0xe8>)
    27a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27aa:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 288c <MPSL_IRQ_RTC0_Handler+0xec>
    27ae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    27b2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    27b6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27ba:	f04f 0500 	mov.w	r5, #0
    27be:	bf1c      	itt	ne
    27c0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    27c4:	2800      	cmpne	r0, #0
    27c6:	d017      	beq.n	27f8 <MPSL_IRQ_RTC0_Handler+0x58>
    27c8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    27cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d0:	482f      	ldr	r0, [pc, #188]	; (2890 <MPSL_IRQ_RTC0_Handler+0xf0>)
    27d2:	6800      	ldr	r0, [r0, #0]
    27d4:	f8d8 1000 	ldr.w	r1, [r8]
    27d8:	eba0 0001 	sub.w	r0, r0, r1
    27dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27e0:	2802      	cmp	r0, #2
    27e2:	d302      	bcc.n	27ea <MPSL_IRQ_RTC0_Handler+0x4a>
    27e4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27e8:	d306      	bcc.n	27f8 <MPSL_IRQ_RTC0_Handler+0x58>
    27ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    27ee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27f2:	2004      	movs	r0, #4
    27f4:	f7fe ff4c 	bl	1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27f8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27fc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2800:	bf1c      	itt	ne
    2802:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2806:	2800      	cmpne	r0, #0
    2808:	d017      	beq.n	283a <MPSL_IRQ_RTC0_Handler+0x9a>
    280a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    280e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2812:	4820      	ldr	r0, [pc, #128]	; (2894 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2814:	6800      	ldr	r0, [r0, #0]
    2816:	f8d8 1000 	ldr.w	r1, [r8]
    281a:	eba0 0001 	sub.w	r0, r0, r1
    281e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2822:	2802      	cmp	r0, #2
    2824:	d302      	bcc.n	282c <MPSL_IRQ_RTC0_Handler+0x8c>
    2826:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    282a:	d306      	bcc.n	283a <MPSL_IRQ_RTC0_Handler+0x9a>
    282c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2830:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2834:	2005      	movs	r0, #5
    2836:	f7fe ff2b 	bl	1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    283a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    283e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2842:	bf1a      	itte	ne
    2844:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2848:	2800      	cmpne	r0, #0
    284a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    284e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2852:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2856:	4810      	ldr	r0, [pc, #64]	; (2898 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2858:	6800      	ldr	r0, [r0, #0]
    285a:	f8d8 1000 	ldr.w	r1, [r8]
    285e:	eba0 0001 	sub.w	r0, r0, r1
    2862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2866:	2802      	cmp	r0, #2
    2868:	d304      	bcc.n	2874 <MPSL_IRQ_RTC0_Handler+0xd4>
    286a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    286e:	bf38      	it	cc
    2870:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2874:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2878:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    287c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2880:	2006      	movs	r0, #6
    2882:	f7fe bf05 	b.w	1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2886:	0000      	.short	0x0000
    2888:	4000b000 	.word	0x4000b000
    288c:	4000b504 	.word	0x4000b504
    2890:	4000b540 	.word	0x4000b540
    2894:	4000b544 	.word	0x4000b544
    2898:	4000b548 	.word	0x4000b548

0000289c <MPSL_IRQ_TIMER0_Handler>:
    289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28a0:	4d3a      	ldr	r5, [pc, #232]	; (298c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    28a2:	7828      	ldrb	r0, [r5, #0]
    28a4:	2804      	cmp	r0, #4
    28a6:	d06c      	beq.n	2982 <MPSL_IRQ_TIMER0_Handler+0xe6>
    28a8:	1ce8      	adds	r0, r5, #3
    28aa:	2201      	movs	r2, #1
    28ac:	7801      	ldrb	r1, [r0, #0]
    28ae:	b159      	cbz	r1, 28c8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    28b0:	2901      	cmp	r1, #1
    28b2:	bf08      	it	eq
    28b4:	706a      	strbeq	r2, [r5, #1]
    28b6:	d002      	beq.n	28be <MPSL_IRQ_TIMER0_Handler+0x22>
    28b8:	7869      	ldrb	r1, [r5, #1]
    28ba:	2900      	cmp	r1, #0
    28bc:	d05c      	beq.n	2978 <MPSL_IRQ_TIMER0_Handler+0xdc>
    28be:	2102      	movs	r1, #2
    28c0:	7001      	strb	r1, [r0, #0]
    28c2:	7840      	ldrb	r0, [r0, #1]
    28c4:	f000 fae2 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28c8:	4c31      	ldr	r4, [pc, #196]	; (2990 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    28ca:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ce:	f04f 0800 	mov.w	r8, #0
    28d2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    28d6:	f44f 7680 	mov.w	r6, #256	; 0x100
    28da:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    28de:	bf1c      	itt	ne
    28e0:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    28e4:	2800      	cmpne	r0, #0
    28e6:	d008      	beq.n	28fa <MPSL_IRQ_TIMER0_Handler+0x5e>
    28e8:	f04f 0003 	mov.w	r0, #3
    28ec:	f000 face 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28f4:	2003      	movs	r0, #3
    28f6:	f7fe fecb 	bl	1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28fe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2902:	bf1c      	itt	ne
    2904:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2908:	2800      	cmpne	r0, #0
    290a:	d008      	beq.n	291e <MPSL_IRQ_TIMER0_Handler+0x82>
    290c:	f04f 0002 	mov.w	r0, #2
    2910:	f000 fabc 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2914:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2918:	2002      	movs	r0, #2
    291a:	f7fe feb9 	bl	1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    291e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2922:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2926:	bf1c      	itt	ne
    2928:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    292c:	2800      	cmpne	r0, #0
    292e:	d008      	beq.n	2942 <MPSL_IRQ_TIMER0_Handler+0xa6>
    2930:	f04f 0001 	mov.w	r0, #1
    2934:	f000 faaa 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2938:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    293c:	2001      	movs	r0, #1
    293e:	f7fe fea7 	bl	1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2942:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2946:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    294a:	bf1a      	itte	ne
    294c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2950:	2800      	cmpne	r0, #0
    2952:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2956:	f04f 0000 	mov.w	r0, #0
    295a:	f000 fa97 	bl	2e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    295e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2962:	2004      	movs	r0, #4
    2964:	7028      	strb	r0, [r5, #0]
    2966:	f8c5 8008 	str.w	r8, [r5, #8]
    296a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    296e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2972:	2000      	movs	r0, #0
    2974:	f7fe be8c 	b.w	1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2978:	f44f 715a 	mov.w	r1, #872	; 0x368
    297c:	206c      	movs	r0, #108	; 0x6c
    297e:	f000 feef 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2986:	2007      	movs	r0, #7
    2988:	f7fe be82 	b.w	1690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    298c:	2000001c 	.word	0x2000001c
    2990:	40008000 	.word	0x40008000
    2994:	2201      	movs	r2, #1
    2996:	0213      	lsls	r3, r2, #8
    2998:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    299c:	2000      	movs	r0, #0
    299e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    29a2:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    29a6:	f3bf 8f4f 	dsb	sy
    29aa:	f3bf 8f6f 	isb	sy
    29ae:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    29b2:	490c      	ldr	r1, [pc, #48]	; (29e4 <MPSL_IRQ_TIMER0_Handler+0x148>)
    29b4:	604a      	str	r2, [r1, #4]
    29b6:	1e43      	subs	r3, r0, #1
    29b8:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    29bc:	4b0a      	ldr	r3, [pc, #40]	; (29e8 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    29be:	6018      	str	r0, [r3, #0]
    29c0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    29c4:	1d1b      	adds	r3, r3, #4
    29c6:	6018      	str	r0, [r3, #0]
    29c8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    29cc:	1d1b      	adds	r3, r3, #4
    29ce:	6018      	str	r0, [r3, #0]
    29d0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    29d4:	1d1b      	adds	r3, r3, #4
    29d6:	6018      	str	r0, [r3, #0]
    29d8:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    29dc:	610a      	str	r2, [r1, #16]
    29de:	4903      	ldr	r1, [pc, #12]	; (29ec <MPSL_IRQ_TIMER0_Handler+0x150>)
    29e0:	7048      	strb	r0, [r1, #1]
    29e2:	4770      	bx	lr
    29e4:	40008000 	.word	0x40008000
    29e8:	40008540 	.word	0x40008540
    29ec:	2000001c 	.word	0x2000001c

000029f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    29f0:	4801      	ldr	r0, [pc, #4]	; (29f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    29f2:	6800      	ldr	r0, [r0, #0]
    29f4:	4770      	bx	lr
    29f6:	0000      	.short	0x0000
    29f8:	4000b504 	.word	0x4000b504

000029fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    29fc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2a00:	4e41      	ldr	r6, [pc, #260]	; (2b08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    2a02:	4604      	mov	r4, r0
    2a04:	1ef7      	subs	r7, r6, #3
    2a06:	f896 c000 	ldrb.w	ip, [r6]
    2a0a:	68f8      	ldr	r0, [r7, #12]
    2a0c:	f1bc 0f01 	cmp.w	ip, #1
    2a10:	bf04      	itt	eq
    2a12:	42a0      	cmpeq	r0, r4
    2a14:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2a18:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    2a1c:	4a3b      	ldr	r2, [pc, #236]	; (2b0c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    2a1e:	6011      	str	r1, [r2, #0]
    2a20:	493b      	ldr	r1, [pc, #236]	; (2b10 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2a22:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2a26:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a2a:	4a3a      	ldr	r2, [pc, #232]	; (2b14 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    2a2c:	f04f 0500 	mov.w	r5, #0
    2a30:	f1bc 0f00 	cmp.w	ip, #0
    2a34:	d057      	beq.n	2ae6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2a36:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2a3a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a3e:	6015      	str	r5, [r2, #0]
    2a40:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2a44:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2a48:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2a4c:	f04f 0801 	mov.w	r8, #1
    2a50:	2a00      	cmp	r2, #0
    2a52:	bf04      	itt	eq
    2a54:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2a58:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    2a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2a60:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2a64:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a68:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2a6c:	4a2a      	ldr	r2, [pc, #168]	; (2b18 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    2a6e:	f8d2 a000 	ldr.w	sl, [r2]
    2a72:	eba4 0a0a 	sub.w	sl, r4, sl
    2a76:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2a7a:	f1bb 0f02 	cmp.w	fp, #2
    2a7e:	d33c      	bcc.n	2afa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a80:	f04f 0a02 	mov.w	sl, #2
    2a84:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2a88:	d237      	bcs.n	2afa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a8a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2a8e:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2a92:	f1bc 0f00 	cmp.w	ip, #0
    2a96:	d005      	beq.n	2aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2a98:	6811      	ldr	r1, [r2, #0]
    2a9a:	1a41      	subs	r1, r0, r1
    2a9c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2aa0:	2902      	cmp	r1, #2
    2aa2:	d3f9      	bcc.n	2a98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2aa4:	f8c7 8008 	str.w	r8, [r7, #8]
    2aa8:	703d      	strb	r5, [r7, #0]
    2aaa:	f7ff ff73 	bl	2994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2aae:	481b      	ldr	r0, [pc, #108]	; (2b1c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2ab0:	6005      	str	r5, [r0, #0]
    2ab2:	1d00      	adds	r0, r0, #4
    2ab4:	f8c0 a000 	str.w	sl, [r0]
    2ab8:	4919      	ldr	r1, [pc, #100]	; (2b20 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2aba:	2004      	movs	r0, #4
    2abc:	6008      	str	r0, [r1, #0]
    2abe:	4919      	ldr	r1, [pc, #100]	; (2b24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2ac0:	f8c1 800c 	str.w	r8, [r1, #12]
    2ac4:	68ba      	ldr	r2, [r7, #8]
    2ac6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2aca:	0181      	lsls	r1, r0, #6
    2acc:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2ad0:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2ad4:	4a14      	ldr	r2, [pc, #80]	; (2b28 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2ad6:	0741      	lsls	r1, r0, #29
    2ad8:	6011      	str	r1, [r2, #0]
    2ada:	60fc      	str	r4, [r7, #12]
    2adc:	7070      	strb	r0, [r6, #1]
    2ade:	f886 8000 	strb.w	r8, [r6]
    2ae2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2ae6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2aea:	4b10      	ldr	r3, [pc, #64]	; (2b2c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2aec:	601d      	str	r5, [r3, #0]
    2aee:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2af2:	6015      	str	r5, [r2, #0]
    2af4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2af8:	e7a4      	b.n	2a44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2afa:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2afe:	f240 11f1 	movw	r1, #497	; 0x1f1
    2b02:	206c      	movs	r0, #108	; 0x6c
    2b04:	f000 fe2c 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b08:	2000001f 	.word	0x2000001f
    2b0c:	4001f508 	.word	0x4001f508
    2b10:	4000b000 	.word	0x4000b000
    2b14:	4000b544 	.word	0x4000b544
    2b18:	4000b504 	.word	0x4000b504
    2b1c:	40008504 	.word	0x40008504
    2b20:	40008510 	.word	0x40008510
    2b24:	40008000 	.word	0x40008000
    2b28:	4001f504 	.word	0x4001f504
    2b2c:	4000b540 	.word	0x4000b540

00002b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b34:	4c2b      	ldr	r4, [pc, #172]	; (2be4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2b36:	68e1      	ldr	r1, [r4, #12]
    2b38:	4281      	cmp	r1, r0
    2b3a:	bf14      	ite	ne
    2b3c:	2201      	movne	r2, #1
    2b3e:	2200      	moveq	r2, #0
    2b40:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2be8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2b44:	f89c 7000 	ldrb.w	r7, [ip]
    2b48:	2f02      	cmp	r7, #2
    2b4a:	d002      	beq.n	2b52 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2b4c:	2a00      	cmp	r2, #0
    2b4e:	d038      	beq.n	2bc2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2b50:	e003      	b.n	2b5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2b52:	2a00      	cmp	r2, #0
    2b54:	bf08      	it	eq
    2b56:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b5a:	7862      	ldrb	r2, [r4, #1]
    2b5c:	b382      	cbz	r2, 2bc0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2b5e:	4b23      	ldr	r3, [pc, #140]	; (2bec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b64:	601a      	str	r2, [r3, #0]
    2b66:	4b22      	ldr	r3, [pc, #136]	; (2bf0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2b68:	1395      	asrs	r5, r2, #14
    2b6a:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2b6e:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2b72:	2600      	movs	r6, #0
    2b74:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2b78:	4a1e      	ldr	r2, [pc, #120]	; (2bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2b7a:	f8d2 8000 	ldr.w	r8, [r2]
    2b7e:	eba0 0808 	sub.w	r8, r0, r8
    2b82:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2b86:	f1b8 0f02 	cmp.w	r8, #2
    2b8a:	d324      	bcc.n	2bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2b8c:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2b90:	d221      	bcs.n	2bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2b92:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2b96:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2b9a:	b12f      	cbz	r7, 2ba8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2b9c:	6813      	ldr	r3, [r2, #0]
    2b9e:	1acb      	subs	r3, r1, r3
    2ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2ba4:	2b02      	cmp	r3, #2
    2ba6:	d3f9      	bcc.n	2b9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2ba8:	4b13      	ldr	r3, [pc, #76]	; (2bf8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2baa:	2102      	movs	r1, #2
    2bac:	074a      	lsls	r2, r1, #29
    2bae:	601a      	str	r2, [r3, #0]
    2bb0:	60e0      	str	r0, [r4, #12]
    2bb2:	2004      	movs	r0, #4
    2bb4:	f88c 0001 	strb.w	r0, [ip, #1]
    2bb8:	f88c 1000 	strb.w	r1, [ip]
    2bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bc0:	e004      	b.n	2bcc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
    2bc6:	206c      	movs	r0, #108	; 0x6c
    2bc8:	f000 fdca 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bcc:	f240 2103 	movw	r1, #515	; 0x203
    2bd0:	206c      	movs	r0, #108	; 0x6c
    2bd2:	f000 fdc5 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bd6:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2bda:	f240 210f 	movw	r1, #527	; 0x20f
    2bde:	206c      	movs	r0, #108	; 0x6c
    2be0:	f000 fdbe 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2be4:	2000001c 	.word	0x2000001c
    2be8:	2000001f 	.word	0x2000001f
    2bec:	4001f508 	.word	0x4001f508
    2bf0:	4000b000 	.word	0x4000b000
    2bf4:	4000b504 	.word	0x4000b504
    2bf8:	4001f504 	.word	0x4001f504

00002bfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2bfc:	4801      	ldr	r0, [pc, #4]	; (2c04 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2bfe:	68c0      	ldr	r0, [r0, #12]
    2c00:	4770      	bx	lr
    2c02:	0000      	.short	0x0000
    2c04:	2000001c 	.word	0x2000001c

00002c08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c0c:	4833      	ldr	r0, [pc, #204]	; (2cdc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2c0e:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2c12:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2c16:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2ce0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2c1a:	4a32      	ldr	r2, [pc, #200]	; (2ce4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2c1c:	2100      	movs	r1, #0
    2c1e:	f89c 3000 	ldrb.w	r3, [ip]
    2c22:	b163      	cbz	r3, 2c3e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2c24:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2c28:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c2c:	6011      	str	r1, [r2, #0]
    2c2e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c32:	bf00      	nop
    2c34:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2c38:	2201      	movs	r2, #1
    2c3a:	b980      	cbnz	r0, 2c5e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2c3c:	e009      	b.n	2c52 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2c3e:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2c42:	4c29      	ldr	r4, [pc, #164]	; (2ce8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2c44:	6021      	str	r1, [r4, #0]
    2c46:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2c4a:	6011      	str	r1, [r2, #0]
    2c4c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2c50:	e7f0      	b.n	2c34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2c52:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2c56:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2c5a:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2c5e:	2b02      	cmp	r3, #2
    2c60:	d004      	beq.n	2c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2c62:	f240 211b 	movw	r1, #539	; 0x21b
    2c66:	206c      	movs	r0, #108	; 0x6c
    2c68:	f000 fd7a 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c6c:	4e1f      	ldr	r6, [pc, #124]	; (2cec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2c6e:	6830      	ldr	r0, [r6, #0]
    2c70:	4c1f      	ldr	r4, [pc, #124]	; (2cf0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2c72:	1cc0      	adds	r0, r0, #3
    2c74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c78:	68e3      	ldr	r3, [r4, #12]
    2c7a:	4d1e      	ldr	r5, [pc, #120]	; (2cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c7c:	4298      	cmp	r0, r3
    2c7e:	d00b      	beq.n	2c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c80:	6837      	ldr	r7, [r6, #0]
    2c82:	1bdf      	subs	r7, r3, r7
    2c84:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2c88:	2f04      	cmp	r7, #4
    2c8a:	d305      	bcc.n	2c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c8c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2c90:	d202      	bcs.n	2c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c92:	f7ff feb3 	bl	29fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c96:	e01b      	b.n	2cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2c98:	6830      	ldr	r0, [r6, #0]
    2c9a:	1a18      	subs	r0, r3, r0
    2c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ca0:	2802      	cmp	r0, #2
    2ca2:	d313      	bcc.n	2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2ca4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2ca8:	d210      	bcs.n	2ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2caa:	4b13      	ldr	r3, [pc, #76]	; (2cf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2cac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2cb0:	6018      	str	r0, [r3, #0]
    2cb2:	60a2      	str	r2, [r4, #8]
    2cb4:	7021      	strb	r1, [r4, #0]
    2cb6:	606a      	str	r2, [r5, #4]
    2cb8:	60ea      	str	r2, [r5, #12]
    2cba:	0040      	lsls	r0, r0, #1
    2cbc:	1f19      	subs	r1, r3, #4
    2cbe:	6008      	str	r0, [r1, #0]
    2cc0:	2004      	movs	r0, #4
    2cc2:	f88c 0001 	strb.w	r0, [ip, #1]
    2cc6:	f88c 2000 	strb.w	r2, [ip]
    2cca:	e001      	b.n	2cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2ccc:	60a2      	str	r2, [r4, #8]
    2cce:	7021      	strb	r1, [r4, #0]
    2cd0:	68a0      	ldr	r0, [r4, #8]
    2cd2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cda:	0000      	.short	0x0000
    2cdc:	4000b000 	.word	0x4000b000
    2ce0:	2000001f 	.word	0x2000001f
    2ce4:	4000b544 	.word	0x4000b544
    2ce8:	4000b540 	.word	0x4000b540
    2cec:	4000b504 	.word	0x4000b504
    2cf0:	2000001c 	.word	0x2000001c
    2cf4:	40008000 	.word	0x40008000
    2cf8:	4001f508 	.word	0x4001f508

00002cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d00:	f8df c174 	ldr.w	ip, [pc, #372]	; 2e78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2d04:	2701      	movs	r7, #1
    2d06:	f04f 0800 	mov.w	r8, #0
    2d0a:	f89c 5000 	ldrb.w	r5, [ip]
    2d0e:	f89c c001 	ldrb.w	ip, [ip, #1]
    2d12:	2807      	cmp	r0, #7
    2d14:	d27e      	bcs.n	2e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2d16:	e8df f000 	tbb	[pc, r0]
    2d1a:	0404      	.short	0x0404
    2d1c:	6a6a0404 	.word	0x6a6a0404
    2d20:	006a      	.short	0x006a
    2d22:	4c56      	ldr	r4, [pc, #344]	; (2e7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2d24:	68e6      	ldr	r6, [r4, #12]
    2d26:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2d2a:	bf04      	itt	eq
    2d2c:	7864      	ldrbeq	r4, [r4, #1]
    2d2e:	2c00      	cmpeq	r4, #0
    2d30:	d002      	beq.n	2d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2d32:	2d02      	cmp	r5, #2
    2d34:	d005      	beq.n	2d42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2d36:	e03c      	b.n	2db2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2d38:	f240 214e 	movw	r1, #590	; 0x24e
    2d3c:	206c      	movs	r0, #108	; 0x6c
    2d3e:	f000 fd0f 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d42:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2d46:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2d4a:	f1ac 0404 	sub.w	r4, ip, #4
    2d4e:	0624      	lsls	r4, r4, #24
    2d50:	0da4      	lsrs	r4, r4, #22
    2d52:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2d56:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2d5a:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2d5e:	2400      	movs	r4, #0
    2d60:	2d01      	cmp	r5, #1
    2d62:	d002      	beq.n	2d6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2d64:	2d02      	cmp	r5, #2
    2d66:	d011      	beq.n	2d8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2d68:	e020      	b.n	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d6a:	f1bc 0f04 	cmp.w	ip, #4
    2d6e:	d205      	bcs.n	2d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2d70:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d74:	f1ba 0f00 	cmp.w	sl, #0
    2d78:	d118      	bne.n	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d7a:	e004      	b.n	2d86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2d7c:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2d80:	f1ba 0f00 	cmp.w	sl, #0
    2d84:	d112      	bne.n	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d86:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2d8a:	e00f      	b.n	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d8c:	f1bc 0f04 	cmp.w	ip, #4
    2d90:	d205      	bcs.n	2d9e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2d92:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d96:	f1ba 0f00 	cmp.w	sl, #0
    2d9a:	d107      	bne.n	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d9c:	e004      	b.n	2da8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2d9e:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2da2:	f1ba 0f00 	cmp.w	sl, #0
    2da6:	d101      	bne.n	2dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2da8:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2dac:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2db0:	d1d5      	bne.n	2d5e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2db2:	4c33      	ldr	r4, [pc, #204]	; (2e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2db4:	f100 0c10 	add.w	ip, r0, #16
    2db8:	fa07 fc0c 	lsl.w	ip, r7, ip
    2dbc:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2dc0:	0080      	lsls	r0, r0, #2
    2dc2:	4420      	add	r0, r4
    2dc4:	b152      	cbz	r2, 2ddc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2dc6:	6407      	str	r7, [r0, #64]	; 0x40
    2dc8:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2dcc:	1b8d      	subs	r5, r1, r6
    2dce:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2dd2:	42aa      	cmp	r2, r5
    2dd4:	bf98      	it	ls
    2dd6:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2dda:	d243      	bcs.n	2e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2ddc:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2de0:	2b01      	cmp	r3, #1
    2de2:	bf08      	it	eq
    2de4:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2de8:	2001      	movs	r0, #1
    2dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dee:	b135      	cbz	r5, 2dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2df0:	4584      	cmp	ip, r0
    2df2:	d104      	bne.n	2dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2df4:	f240 2171 	movw	r1, #625	; 0x271
    2df8:	206c      	movs	r0, #108	; 0x6c
    2dfa:	f000 fcb1 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dfe:	1f00      	subs	r0, r0, #4
    2e00:	b2c0      	uxtb	r0, r0
    2e02:	2b01      	cmp	r3, #1
    2e04:	bf0c      	ite	eq
    2e06:	2401      	moveq	r4, #1
    2e08:	2400      	movne	r4, #0
    2e0a:	2803      	cmp	r0, #3
    2e0c:	d306      	bcc.n	2e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2e0e:	f240 114b 	movw	r1, #331	; 0x14b
    2e12:	e000      	b.n	2e16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2e14:	e02b      	b.n	2e6e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2e16:	206c      	movs	r0, #108	; 0x6c
    2e18:	f000 fca2 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e1c:	f8df c064 	ldr.w	ip, [pc, #100]	; 2e84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2e20:	f100 0310 	add.w	r3, r0, #16
    2e24:	fa07 f303 	lsl.w	r3, r7, r3
    2e28:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2e2c:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2e30:	0080      	lsls	r0, r0, #2
    2e32:	4460      	add	r0, ip
    2e34:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2e38:	b14a      	cbz	r2, 2e4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2e3a:	4d13      	ldr	r5, [pc, #76]	; (2e88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2e3c:	682e      	ldr	r6, [r5, #0]
    2e3e:	1b8d      	subs	r5, r1, r6
    2e40:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2e44:	42aa      	cmp	r2, r5
    2e46:	bf98      	it	ls
    2e48:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2e4c:	d20a      	bcs.n	2e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2e4e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2e52:	2c00      	cmp	r4, #0
    2e54:	bf18      	it	ne
    2e56:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2e5a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2e5e:	2001      	movs	r0, #1
    2e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e64:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2e68:	2000      	movs	r0, #0
    2e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e6e:	f240 2176 	movw	r1, #630	; 0x276
    2e72:	206c      	movs	r0, #108	; 0x6c
    2e74:	f000 fc74 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e78:	2000001f 	.word	0x2000001f
    2e7c:	2000001c 	.word	0x2000001c
    2e80:	40008000 	.word	0x40008000
    2e84:	4000b000 	.word	0x4000b000
    2e88:	4000b504 	.word	0x4000b504

00002e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e8e:	2701      	movs	r7, #1
    2e90:	2400      	movs	r4, #0
    2e92:	2807      	cmp	r0, #7
    2e94:	d24c      	bcs.n	2f30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2e96:	e8df f000 	tbb	[pc, r0]
    2e9a:	0404      	.short	0x0404
    2e9c:	16160404 	.word	0x16160404
    2ea0:	0016      	.short	0x0016
    2ea2:	4a26      	ldr	r2, [pc, #152]	; (2f3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2ea4:	f100 0110 	add.w	r1, r0, #16
    2ea8:	fa07 f101 	lsl.w	r1, r7, r1
    2eac:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2eb0:	0081      	lsls	r1, r0, #2
    2eb2:	4411      	add	r1, r2
    2eb4:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2eb8:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2ebc:	4920      	ldr	r1, [pc, #128]	; (2f40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2ebe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2ec2:	9000      	str	r0, [sp, #0]
    2ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ec6:	4d1f      	ldr	r5, [pc, #124]	; (2f44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2ec8:	1f01      	subs	r1, r0, #4
    2eca:	b2ce      	uxtb	r6, r1
    2ecc:	7829      	ldrb	r1, [r5, #0]
    2ece:	b179      	cbz	r1, 2ef0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2ed0:	786a      	ldrb	r2, [r5, #1]
    2ed2:	4282      	cmp	r2, r0
    2ed4:	d10c      	bne.n	2ef0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2ed6:	4a1c      	ldr	r2, [pc, #112]	; (2f48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2ed8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2edc:	6010      	str	r0, [r2, #0]
    2ede:	2901      	cmp	r1, #1
    2ee0:	bf08      	it	eq
    2ee2:	f7ff fd57 	bleq	2994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2ee6:	702c      	strb	r4, [r5, #0]
    2ee8:	4918      	ldr	r1, [pc, #96]	; (2f4c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2eea:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2eee:	60c8      	str	r0, [r1, #12]
    2ef0:	f106 0010 	add.w	r0, r6, #16
    2ef4:	fa07 f100 	lsl.w	r1, r7, r0
    2ef8:	4815      	ldr	r0, [pc, #84]	; (2f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2efa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2efe:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2f02:	00b0      	lsls	r0, r6, #2
    2f04:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2f08:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2f0c:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2f10:	4a10      	ldr	r2, [pc, #64]	; (2f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2f12:	6812      	ldr	r2, [r2, #0]
    2f14:	1a89      	subs	r1, r1, r2
    2f16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f1a:	2902      	cmp	r1, #2
    2f1c:	bf24      	itt	cs
    2f1e:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2f22:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2f26:	480c      	ldr	r0, [pc, #48]	; (2f58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2f28:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2f2c:	9000      	str	r0, [sp, #0]
    2f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f30:	f240 21ef 	movw	r1, #751	; 0x2ef
    2f34:	206c      	movs	r0, #108	; 0x6c
    2f36:	f000 fc13 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f3a:	0000      	.short	0x0000
    2f3c:	40008000 	.word	0x40008000
    2f40:	40008140 	.word	0x40008140
    2f44:	2000001f 	.word	0x2000001f
    2f48:	4001f508 	.word	0x4001f508
    2f4c:	2000001c 	.word	0x2000001c
    2f50:	4000b000 	.word	0x4000b000
    2f54:	4000b504 	.word	0x4000b504
    2f58:	4000b140 	.word	0x4000b140

00002f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2f5c:	491e      	ldr	r1, [pc, #120]	; (2fd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2f5e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2f62:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2f66:	481d      	ldr	r0, [pc, #116]	; (2fdc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2f68:	4a1d      	ldr	r2, [pc, #116]	; (2fe0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2f6a:	f890 c000 	ldrb.w	ip, [r0]
    2f6e:	2000      	movs	r0, #0
    2f70:	f1bc 0f00 	cmp.w	ip, #0
    2f74:	d00a      	beq.n	2f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2f76:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2f7a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f7e:	6010      	str	r0, [r2, #0]
    2f80:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f84:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2f88:	b981      	cbnz	r1, 2fac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2f8a:	e009      	b.n	2fa0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2f8c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f90:	4b14      	ldr	r3, [pc, #80]	; (2fe4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2f92:	6018      	str	r0, [r3, #0]
    2f94:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2f98:	6010      	str	r0, [r2, #0]
    2f9a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f9e:	e7f1      	b.n	2f84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2fa0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2fa8:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2fac:	490e      	ldr	r1, [pc, #56]	; (2fe8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2fae:	f04f 32ff 	mov.w	r2, #4294967295
    2fb2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fb6:	4a0d      	ldr	r2, [pc, #52]	; (2fec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2fb8:	6010      	str	r0, [r2, #0]
    2fba:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2fbe:	1d12      	adds	r2, r2, #4
    2fc0:	6010      	str	r0, [r2, #0]
    2fc2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2fc6:	1d12      	adds	r2, r2, #4
    2fc8:	6010      	str	r0, [r2, #0]
    2fca:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2fce:	1d12      	adds	r2, r2, #4
    2fd0:	6010      	str	r0, [r2, #0]
    2fd2:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2fd6:	4770      	bx	lr
    2fd8:	4000b000 	.word	0x4000b000
    2fdc:	2000001f 	.word	0x2000001f
    2fe0:	4000b544 	.word	0x4000b544
    2fe4:	4000b540 	.word	0x4000b540
    2fe8:	40008000 	.word	0x40008000
    2fec:	40008540 	.word	0x40008540

00002ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2ff0:	4808      	ldr	r0, [pc, #32]	; (3014 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2ff2:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2ff6:	2800      	cmp	r0, #0
    2ff8:	bfb8      	it	lt
    2ffa:	4770      	bxlt	lr
    2ffc:	f000 011f 	and.w	r1, r0, #31
    3000:	2201      	movs	r2, #1
    3002:	fa02 f101 	lsl.w	r1, r2, r1
    3006:	0940      	lsrs	r0, r0, #5
    3008:	0080      	lsls	r0, r0, #2
    300a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    300e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3012:	4770      	bx	lr
    3014:	2000001c 	.word	0x2000001c

00003018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3018:	b510      	push	{r4, lr}
    301a:	2807      	cmp	r0, #7
    301c:	d20d      	bcs.n	303a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    301e:	e8df f000 	tbb	[pc, r0]
    3022:	0404      	.short	0x0404
    3024:	06060404 	.word	0x06060404
    3028:	0006      	.short	0x0006
    302a:	4906      	ldr	r1, [pc, #24]	; (3044 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    302c:	e002      	b.n	3034 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    302e:	1f00      	subs	r0, r0, #4
    3030:	4905      	ldr	r1, [pc, #20]	; (3048 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3032:	b2c0      	uxtb	r0, r0
    3034:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3038:	bd10      	pop	{r4, pc}
    303a:	f240 219a 	movw	r1, #666	; 0x29a
    303e:	206c      	movs	r0, #108	; 0x6c
    3040:	f000 fb8e 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3044:	40008140 	.word	0x40008140
    3048:	4000b140 	.word	0x4000b140

0000304c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    304c:	b570      	push	{r4, r5, r6, lr}
    304e:	4819      	ldr	r0, [pc, #100]	; (30b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    3050:	2400      	movs	r4, #0
    3052:	2104      	movs	r1, #4
    3054:	7004      	strb	r4, [r0, #0]
    3056:	1ec0      	subs	r0, r0, #3
    3058:	7001      	strb	r1, [r0, #0]
    305a:	0589      	lsls	r1, r1, #22
    305c:	60c1      	str	r1, [r0, #12]
    305e:	f7ff fc99 	bl	2994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3062:	2501      	movs	r5, #1
    3064:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3068:	02eb      	lsls	r3, r5, #11
    306a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    306e:	f3bf 8f4f 	dsb	sy
    3072:	f3bf 8f6f 	isb	sy
    3076:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    307a:	4a0f      	ldr	r2, [pc, #60]	; (30b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    307c:	6055      	str	r5, [r2, #4]
    307e:	6095      	str	r5, [r2, #8]
    3080:	480e      	ldr	r0, [pc, #56]	; (30bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    3082:	6801      	ldr	r1, [r0, #0]
    3084:	2900      	cmp	r1, #0
    3086:	d1fc      	bne.n	3082 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    3088:	1e48      	subs	r0, r1, #1
    308a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    308e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3092:	480b      	ldr	r0, [pc, #44]	; (30c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3094:	6004      	str	r4, [r0, #0]
    3096:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    309a:	1d00      	adds	r0, r0, #4
    309c:	6004      	str	r4, [r0, #0]
    309e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    30a2:	1d00      	adds	r0, r0, #4
    30a4:	6004      	str	r4, [r0, #0]
    30a6:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    30aa:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    30ae:	6015      	str	r5, [r2, #0]
    30b0:	bd70      	pop	{r4, r5, r6, pc}
    30b2:	0000      	.short	0x0000
    30b4:	2000001f 	.word	0x2000001f
    30b8:	4000b000 	.word	0x4000b000
    30bc:	4000b504 	.word	0x4000b504
    30c0:	4000b540 	.word	0x4000b540

000030c4 <MPSL_IRQ_CLOCK_Handler>:
    30c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30c8:	4c16      	ldr	r4, [pc, #88]	; (3124 <MPSL_IRQ_CLOCK_Handler+0x60>)
    30ca:	7a60      	ldrb	r0, [r4, #9]
    30cc:	2800      	cmp	r0, #0
    30ce:	d027      	beq.n	3120 <MPSL_IRQ_CLOCK_Handler+0x5c>
    30d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    30d4:	058d      	lsls	r5, r1, #22
    30d6:	4628      	mov	r0, r5
    30d8:	f009 f909 	bl	c2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30dc:	4680      	mov	r8, r0
    30de:	f44f 7182 	mov.w	r1, #260	; 0x104
    30e2:	4628      	mov	r0, r5
    30e4:	f009 f903 	bl	c2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30e8:	2600      	movs	r6, #0
    30ea:	4607      	mov	r7, r0
    30ec:	f1b8 0f00 	cmp.w	r8, #0
    30f0:	d009      	beq.n	3106 <MPSL_IRQ_CLOCK_Handler+0x42>
    30f2:	2001      	movs	r0, #1
    30f4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    30f8:	7920      	ldrb	r0, [r4, #4]
    30fa:	b120      	cbz	r0, 3106 <MPSL_IRQ_CLOCK_Handler+0x42>
    30fc:	7126      	strb	r6, [r4, #4]
    30fe:	69e0      	ldr	r0, [r4, #28]
    3100:	b108      	cbz	r0, 3106 <MPSL_IRQ_CLOCK_Handler+0x42>
    3102:	4780      	blx	r0
    3104:	61e6      	str	r6, [r4, #28]
    3106:	b137      	cbz	r7, 3116 <MPSL_IRQ_CLOCK_Handler+0x52>
    3108:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    310c:	2002      	movs	r0, #2
    310e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3112:	f000 fa6d 	bl	35f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3116:	4640      	mov	r0, r8
    3118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    311c:	f000 b85a 	b.w	31d4 <MPSL_IRQ_CLOCK_Handler+0x110>
    3120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3124:	2000002c 	.word	0x2000002c
    3128:	b510      	push	{r4, lr}
    312a:	f009 f98a 	bl	c442 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    312e:	b930      	cbnz	r0, 313e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3130:	f009 f9a8 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3134:	b918      	cbnz	r0, 313e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3136:	f009 f9db 	bl	c4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    313a:	2800      	cmp	r0, #0
    313c:	d002      	beq.n	3144 <MPSL_IRQ_CLOCK_Handler+0x80>
    313e:	4902      	ldr	r1, [pc, #8]	; (3148 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3140:	2002      	movs	r0, #2
    3142:	6008      	str	r0, [r1, #0]
    3144:	bd10      	pop	{r4, pc}
    3146:	0000      	.short	0x0000
    3148:	40000c34 	.word	0x40000c34
    314c:	b570      	push	{r4, r5, r6, lr}
    314e:	f000 f987 	bl	3460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3152:	f000 faa1 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3156:	4c09      	ldr	r4, [pc, #36]	; (317c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3158:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    315c:	b130      	cbz	r0, 316c <MPSL_IRQ_CLOCK_Handler+0xa8>
    315e:	f7ff ffe3 	bl	3128 <MPSL_IRQ_CLOCK_Handler+0x64>
    3162:	2001      	movs	r0, #1
    3164:	6128      	str	r0, [r5, #16]
    3166:	2004      	movs	r0, #4
    3168:	72a0      	strb	r0, [r4, #10]
    316a:	e004      	b.n	3176 <MPSL_IRQ_CLOCK_Handler+0xb2>
    316c:	2003      	movs	r0, #3
    316e:	72a0      	strb	r0, [r4, #10]
    3170:	2001      	movs	r0, #1
    3172:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3176:	2000      	movs	r0, #0
    3178:	71e0      	strb	r0, [r4, #7]
    317a:	bd70      	pop	{r4, r5, r6, pc}
    317c:	2000002c 	.word	0x2000002c
    3180:	b570      	push	{r4, r5, r6, lr}
    3182:	4c13      	ldr	r4, [pc, #76]	; (31d0 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3184:	79a0      	ldrb	r0, [r4, #6]
    3186:	b1f0      	cbz	r0, 31c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3188:	2801      	cmp	r0, #1
    318a:	d003      	beq.n	3194 <MPSL_IRQ_CLOCK_Handler+0xd0>
    318c:	79e1      	ldrb	r1, [r4, #7]
    318e:	1e40      	subs	r0, r0, #1
    3190:	4281      	cmp	r1, r0
    3192:	da18      	bge.n	31c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3194:	f000 fa80 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3198:	4605      	mov	r5, r0
    319a:	f000 fb51 	bl	3840 <mpsl_temperature_get>
    319e:	79a1      	ldrb	r1, [r4, #6]
    31a0:	2901      	cmp	r1, #1
    31a2:	d902      	bls.n	31aa <MPSL_IRQ_CLOCK_Handler+0xe6>
    31a4:	79e1      	ldrb	r1, [r4, #7]
    31a6:	1c49      	adds	r1, r1, #1
    31a8:	71e1      	strb	r1, [r4, #7]
    31aa:	b10d      	cbz	r5, 31b0 <MPSL_IRQ_CLOCK_Handler+0xec>
    31ac:	6961      	ldr	r1, [r4, #20]
    31ae:	e000      	b.n	31b2 <MPSL_IRQ_CLOCK_Handler+0xee>
    31b0:	6921      	ldr	r1, [r4, #16]
    31b2:	1a41      	subs	r1, r0, r1
    31b4:	2902      	cmp	r1, #2
    31b6:	da02      	bge.n	31be <MPSL_IRQ_CLOCK_Handler+0xfa>
    31b8:	f111 0f02 	cmn.w	r1, #2
    31bc:	dc07      	bgt.n	31ce <MPSL_IRQ_CLOCK_Handler+0x10a>
    31be:	b10d      	cbz	r5, 31c4 <MPSL_IRQ_CLOCK_Handler+0x100>
    31c0:	6160      	str	r0, [r4, #20]
    31c2:	e000      	b.n	31c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    31c4:	6120      	str	r0, [r4, #16]
    31c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    31ca:	f7ff bfbf 	b.w	314c <MPSL_IRQ_CLOCK_Handler+0x88>
    31ce:	bd70      	pop	{r4, r5, r6, pc}
    31d0:	2000002c 	.word	0x2000002c
    31d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31d8:	4606      	mov	r6, r0
    31da:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    31de:	f44f 7186 	mov.w	r1, #268	; 0x10c
    31e2:	4628      	mov	r0, r5
    31e4:	f009 f883 	bl	c2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31e8:	4680      	mov	r8, r0
    31ea:	f44f 7188 	mov.w	r1, #272	; 0x110
    31ee:	4628      	mov	r0, r5
    31f0:	f009 f87d 	bl	c2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    31f4:	4c27      	ldr	r4, [pc, #156]	; (3294 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    31f6:	4682      	mov	sl, r0
    31f8:	7827      	ldrb	r7, [r4, #0]
    31fa:	f104 0008 	add.w	r0, r4, #8
    31fe:	f009 f8ea 	bl	c3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3202:	b110      	cbz	r0, 320a <MPSL_IRQ_CLOCK_Handler+0x146>
    3204:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3208:	e016      	b.n	3238 <MPSL_IRQ_CLOCK_Handler+0x174>
    320a:	f04f 0901 	mov.w	r9, #1
    320e:	b146      	cbz	r6, 3222 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3210:	7aa0      	ldrb	r0, [r4, #10]
    3212:	2803      	cmp	r0, #3
    3214:	d105      	bne.n	3222 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3216:	2004      	movs	r0, #4
    3218:	72a0      	strb	r0, [r4, #10]
    321a:	f7ff ff85 	bl	3128 <MPSL_IRQ_CLOCK_Handler+0x64>
    321e:	f8c5 9010 	str.w	r9, [r5, #16]
    3222:	2600      	movs	r6, #0
    3224:	f1b8 0f00 	cmp.w	r8, #0
    3228:	d018      	beq.n	325c <MPSL_IRQ_CLOCK_Handler+0x198>
    322a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    322e:	7aa0      	ldrb	r0, [r4, #10]
    3230:	2804      	cmp	r0, #4
    3232:	d004      	beq.n	323e <MPSL_IRQ_CLOCK_Handler+0x17a>
    3234:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3238:	206d      	movs	r0, #109	; 0x6d
    323a:	f000 fa91 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    323e:	f009 f900 	bl	c442 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3242:	b928      	cbnz	r0, 3250 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3244:	f009 f91e 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3248:	b910      	cbnz	r0, 3250 <MPSL_IRQ_CLOCK_Handler+0x18c>
    324a:	f009 f951 	bl	c4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    324e:	b108      	cbz	r0, 3254 <MPSL_IRQ_CLOCK_Handler+0x190>
    3250:	4811      	ldr	r0, [pc, #68]	; (3298 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3252:	6006      	str	r6, [r0, #0]
    3254:	2002      	movs	r0, #2
    3256:	72a0      	strb	r0, [r4, #10]
    3258:	f000 f8e6 	bl	3428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    325c:	f1ba 0f00 	cmp.w	sl, #0
    3260:	d008      	beq.n	3274 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3262:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3266:	7aa0      	ldrb	r0, [r4, #10]
    3268:	2802      	cmp	r0, #2
    326a:	d101      	bne.n	3270 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    326c:	f7ff ff88 	bl	3180 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3270:	f8c5 9014 	str.w	r9, [r5, #20]
    3274:	b13f      	cbz	r7, 3286 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3276:	7026      	strb	r6, [r4, #0]
    3278:	7aa0      	ldrb	r0, [r4, #10]
    327a:	2802      	cmp	r0, #2
    327c:	d101      	bne.n	3282 <MPSL_IRQ_CLOCK_Handler+0x1be>
    327e:	f7ff ff65 	bl	314c <MPSL_IRQ_CLOCK_Handler+0x88>
    3282:	f000 f8d1 	bl	3428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3286:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    328a:	4802      	ldr	r0, [pc, #8]	; (3294 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    328c:	3008      	adds	r0, #8
    328e:	f009 b8b9 	b.w	c404 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3292:	0000      	.short	0x0000
    3294:	2000002c 	.word	0x2000002c
    3298:	40000c34 	.word	0x40000c34
    329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32a0:	4c5c      	ldr	r4, [pc, #368]	; (3414 <MPSL_IRQ_CLOCK_Handler+0x350>)
    32a2:	f04f 0800 	mov.w	r8, #0
    32a6:	4606      	mov	r6, r0
    32a8:	f8c4 8018 	str.w	r8, [r4, #24]
    32ac:	7843      	ldrb	r3, [r0, #1]
    32ae:	7882      	ldrb	r2, [r0, #2]
    32b0:	7800      	ldrb	r0, [r0, #0]
    32b2:	72e0      	strb	r0, [r4, #11]
    32b4:	7163      	strb	r3, [r4, #5]
    32b6:	2701      	movs	r7, #1
    32b8:	71a2      	strb	r2, [r4, #6]
    32ba:	07bd      	lsls	r5, r7, #30
    32bc:	f884 8007 	strb.w	r8, [r4, #7]
    32c0:	2805      	cmp	r0, #5
    32c2:	d224      	bcs.n	330e <MPSL_IRQ_CLOCK_Handler+0x24a>
    32c4:	e8df f000 	tbb	[pc, r0]
    32c8:	1f05030f 	.word	0x1f05030f
    32cc:	0021      	.short	0x0021
    32ce:	61a7      	str	r7, [r4, #24]
    32d0:	e009      	b.n	32e6 <MPSL_IRQ_CLOCK_Handler+0x222>
    32d2:	f000 f8c5 	bl	3460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    32d6:	2101      	movs	r1, #1
    32d8:	4628      	mov	r0, r5
    32da:	f009 f80d 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    32de:	2800      	cmp	r0, #0
    32e0:	d0f9      	beq.n	32d6 <MPSL_IRQ_CLOCK_Handler+0x212>
    32e2:	2002      	movs	r0, #2
    32e4:	61a0      	str	r0, [r4, #24]
    32e6:	f009 f833 	bl	c350 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    32ea:	b1b0      	cbz	r0, 331a <MPSL_IRQ_CLOCK_Handler+0x256>
    32ec:	f000 f9ee 	bl	36cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    32f0:	7e21      	ldrb	r1, [r4, #24]
    32f2:	f001 0103 	and.w	r1, r1, #3
    32f6:	4288      	cmp	r0, r1
    32f8:	d10f      	bne.n	331a <MPSL_IRQ_CLOCK_Handler+0x256>
    32fa:	79b0      	ldrb	r0, [r6, #6]
    32fc:	b150      	cbz	r0, 3314 <MPSL_IRQ_CLOCK_Handler+0x250>
    32fe:	2002      	movs	r0, #2
    3300:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3304:	e06a      	b.n	33dc <MPSL_IRQ_CLOCK_Handler+0x318>
    3306:	4844      	ldr	r0, [pc, #272]	; (3418 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3308:	e7ec      	b.n	32e4 <MPSL_IRQ_CLOCK_Handler+0x220>
    330a:	4844      	ldr	r0, [pc, #272]	; (341c <MPSL_IRQ_CLOCK_Handler+0x358>)
    330c:	e7ea      	b.n	32e4 <MPSL_IRQ_CLOCK_Handler+0x220>
    330e:	f44f 714c 	mov.w	r1, #816	; 0x330
    3312:	e049      	b.n	33a8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3314:	f000 f9ae 	bl	3674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3318:	e060      	b.n	33dc <MPSL_IRQ_CLOCK_Handler+0x318>
    331a:	60ef      	str	r7, [r5, #12]
    331c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3320:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3324:	69a0      	ldr	r0, [r4, #24]
    3326:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    332a:	f009 f876 	bl	c41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    332e:	b940      	cbnz	r0, 3342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3330:	f009 f87d 	bl	c42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3334:	b928      	cbnz	r0, 3342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3336:	f009 f891 	bl	c45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    333a:	b910      	cbnz	r0, 3342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    333c:	f009 f8a2 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3340:	b138      	cbz	r0, 3352 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3342:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3346:	4836      	ldr	r0, [pc, #216]	; (3420 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3348:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    334c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3350:	6001      	str	r1, [r0, #0]
    3352:	f009 f862 	bl	c41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3356:	b940      	cbnz	r0, 336a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3358:	f009 f869 	bl	c42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    335c:	b928      	cbnz	r0, 336a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    335e:	f009 f87d 	bl	c45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3362:	b910      	cbnz	r0, 336a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3364:	f009 f88e 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3368:	b110      	cbz	r0, 3370 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    336a:	482d      	ldr	r0, [pc, #180]	; (3420 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    336c:	3010      	adds	r0, #16
    336e:	6007      	str	r7, [r0, #0]
    3370:	60af      	str	r7, [r5, #8]
    3372:	2002      	movs	r0, #2
    3374:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3378:	79b0      	ldrb	r0, [r6, #6]
    337a:	bb78      	cbnz	r0, 33dc <MPSL_IRQ_CLOCK_Handler+0x318>
    337c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3380:	f010 0f02 	tst.w	r0, #2
    3384:	d00e      	beq.n	33a4 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3386:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3424 <MPSL_IRQ_CLOCK_Handler+0x360>
    338a:	f8d9 1000 	ldr.w	r1, [r9]
    338e:	43c9      	mvns	r1, r1
    3390:	f341 1700 	sbfx	r7, r1, #4, #1
    3394:	f8d9 1000 	ldr.w	r1, [r9]
    3398:	f041 0110 	orr.w	r1, r1, #16
    339c:	f8c9 1000 	str.w	r1, [r9]
    33a0:	1c7f      	adds	r7, r7, #1
    33a2:	e007      	b.n	33b4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    33a4:	f240 21f1 	movw	r1, #753	; 0x2f1
    33a8:	206d      	movs	r0, #109	; 0x6d
    33aa:	f000 f9d9 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33ae:	bf00      	nop
    33b0:	f000 fafc 	bl	39ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    33b4:	4651      	mov	r1, sl
    33b6:	4628      	mov	r0, r5
    33b8:	f008 ff99 	bl	c2ee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    33bc:	2800      	cmp	r0, #0
    33be:	d0f7      	beq.n	33b0 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    33c0:	f000 f958 	bl	3674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    33c4:	b92f      	cbnz	r7, 33d2 <MPSL_IRQ_CLOCK_Handler+0x30e>
    33c6:	f8d9 1000 	ldr.w	r1, [r9]
    33ca:	f021 0110 	bic.w	r1, r1, #16
    33ce:	f8c9 1000 	str.w	r1, [r9]
    33d2:	2002      	movs	r0, #2
    33d4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    33d8:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    33dc:	79a0      	ldrb	r0, [r4, #6]
    33de:	b170      	cbz	r0, 33fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    33e0:	7830      	ldrb	r0, [r6, #0]
    33e2:	b960      	cbnz	r0, 33fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    33e4:	f000 f958 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    33e8:	4606      	mov	r6, r0
    33ea:	f000 fa29 	bl	3840 <mpsl_temperature_get>
    33ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    33f2:	b116      	cbz	r6, 33fa <MPSL_IRQ_CLOCK_Handler+0x336>
    33f4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    33f8:	e001      	b.n	33fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    33fa:	e9c4 0204 	strd	r0, r2, [r4, #16]
    33fe:	2101      	movs	r1, #1
    3400:	4628      	mov	r0, r5
    3402:	f008 ff79 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3406:	b108      	cbz	r0, 340c <MPSL_IRQ_CLOCK_Handler+0x348>
    3408:	f000 f940 	bl	368c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    340c:	f884 800a 	strb.w	r8, [r4, #10]
    3410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3414:	2000002c 	.word	0x2000002c
    3418:	00020001 	.word	0x00020001
    341c:	00030001 	.word	0x00030001
    3420:	4000053c 	.word	0x4000053c
    3424:	e000ed10 	.word	0xe000ed10

00003428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3428:	b510      	push	{r4, lr}
    342a:	f3ef 8410 	mrs	r4, PRIMASK
    342e:	b672      	cpsid	i
    3430:	480a      	ldr	r0, [pc, #40]	; (345c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3432:	7841      	ldrb	r1, [r0, #1]
    3434:	b129      	cbz	r1, 3442 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3436:	7841      	ldrb	r1, [r0, #1]
    3438:	1e49      	subs	r1, r1, #1
    343a:	7041      	strb	r1, [r0, #1]
    343c:	7841      	ldrb	r1, [r0, #1]
    343e:	b129      	cbz	r1, 344c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3440:	e008      	b.n	3454 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3442:	f240 110d 	movw	r1, #269	; 0x10d
    3446:	206d      	movs	r0, #109	; 0x6d
    3448:	f000 f98a 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    344c:	7880      	ldrb	r0, [r0, #2]
    344e:	b908      	cbnz	r0, 3454 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3450:	f000 f930 	bl	36b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3454:	2c00      	cmp	r4, #0
    3456:	d100      	bne.n	345a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3458:	b662      	cpsie	i
    345a:	bd10      	pop	{r4, pc}
    345c:	2000002c 	.word	0x2000002c

00003460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3460:	b510      	push	{r4, lr}
    3462:	f3ef 8410 	mrs	r4, PRIMASK
    3466:	b672      	cpsid	i
    3468:	4806      	ldr	r0, [pc, #24]	; (3484 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    346a:	7841      	ldrb	r1, [r0, #1]
    346c:	1c49      	adds	r1, r1, #1
    346e:	7041      	strb	r1, [r0, #1]
    3470:	7840      	ldrb	r0, [r0, #1]
    3472:	2801      	cmp	r0, #1
    3474:	d101      	bne.n	347a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3476:	f008 ff56 	bl	c326 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    347a:	2c00      	cmp	r4, #0
    347c:	d100      	bne.n	3480 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    347e:	b662      	cpsie	i
    3480:	bd10      	pop	{r4, pc}
    3482:	0000      	.short	0x0000
    3484:	2000002c 	.word	0x2000002c

00003488 <mpsl_clock_hfclk_release>:
    3488:	4805      	ldr	r0, [pc, #20]	; (34a0 <mpsl_clock_hfclk_release+0x18>)
    348a:	b510      	push	{r4, lr}
    348c:	78c1      	ldrb	r1, [r0, #3]
    348e:	b121      	cbz	r1, 349a <mpsl_clock_hfclk_release+0x12>
    3490:	2100      	movs	r1, #0
    3492:	7101      	strb	r1, [r0, #4]
    3494:	70c1      	strb	r1, [r0, #3]
    3496:	f7ff ffc7 	bl	3428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    349a:	2000      	movs	r0, #0
    349c:	bd10      	pop	{r4, pc}
    349e:	0000      	.short	0x0000
    34a0:	2000002c 	.word	0x2000002c

000034a4 <mpsl_clock_hfclk_request>:
    34a4:	b570      	push	{r4, r5, r6, lr}
    34a6:	4c0c      	ldr	r4, [pc, #48]	; (34d8 <mpsl_clock_hfclk_request+0x34>)
    34a8:	78e1      	ldrb	r1, [r4, #3]
    34aa:	b961      	cbnz	r1, 34c6 <mpsl_clock_hfclk_request+0x22>
    34ac:	2501      	movs	r5, #1
    34ae:	70e5      	strb	r5, [r4, #3]
    34b0:	61e0      	str	r0, [r4, #28]
    34b2:	f7ff ffd5 	bl	3460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34b6:	f000 f8ef 	bl	3698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34ba:	b130      	cbz	r0, 34ca <mpsl_clock_hfclk_request+0x26>
    34bc:	69e0      	ldr	r0, [r4, #28]
    34be:	b110      	cbz	r0, 34c6 <mpsl_clock_hfclk_request+0x22>
    34c0:	4780      	blx	r0
    34c2:	2000      	movs	r0, #0
    34c4:	61e0      	str	r0, [r4, #28]
    34c6:	2000      	movs	r0, #0
    34c8:	bd70      	pop	{r4, r5, r6, pc}
    34ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    34ce:	7125      	strb	r5, [r4, #4]
    34d0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    34d4:	e7f7      	b.n	34c6 <mpsl_clock_hfclk_request+0x22>
    34d6:	0000      	.short	0x0000
    34d8:	2000002c 	.word	0x2000002c

000034dc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    34dc:	f3ef 8010 	mrs	r0, PRIMASK
    34e0:	b672      	cpsid	i
    34e2:	4904      	ldr	r1, [pc, #16]	; (34f4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    34e4:	788a      	ldrb	r2, [r1, #2]
    34e6:	1c52      	adds	r2, r2, #1
    34e8:	708a      	strb	r2, [r1, #2]
    34ea:	2800      	cmp	r0, #0
    34ec:	d100      	bne.n	34f0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    34ee:	b662      	cpsie	i
    34f0:	4770      	bx	lr
    34f2:	0000      	.short	0x0000
    34f4:	2000002c 	.word	0x2000002c

000034f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    34f8:	b510      	push	{r4, lr}
    34fa:	f3ef 8410 	mrs	r4, PRIMASK
    34fe:	b672      	cpsid	i
    3500:	480a      	ldr	r0, [pc, #40]	; (352c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3502:	7881      	ldrb	r1, [r0, #2]
    3504:	b129      	cbz	r1, 3512 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3506:	7881      	ldrb	r1, [r0, #2]
    3508:	1e49      	subs	r1, r1, #1
    350a:	7081      	strb	r1, [r0, #2]
    350c:	7841      	ldrb	r1, [r0, #1]
    350e:	b129      	cbz	r1, 351c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3510:	e008      	b.n	3524 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3512:	f240 1125 	movw	r1, #293	; 0x125
    3516:	206d      	movs	r0, #109	; 0x6d
    3518:	f000 f922 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    351c:	7880      	ldrb	r0, [r0, #2]
    351e:	b908      	cbnz	r0, 3524 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3520:	f000 f8c8 	bl	36b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3524:	2c00      	cmp	r4, #0
    3526:	d100      	bne.n	352a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3528:	b662      	cpsie	i
    352a:	bd10      	pop	{r4, pc}
    352c:	2000002c 	.word	0x2000002c

00003530 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3534:	0004      	movs	r4, r0
    3536:	f06f 0015 	mvn.w	r0, #21
    353a:	d03c      	beq.n	35b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    353c:	7821      	ldrb	r1, [r4, #0]
    353e:	2904      	cmp	r1, #4
    3540:	d839      	bhi.n	35b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3542:	2900      	cmp	r1, #0
    3544:	7861      	ldrb	r1, [r4, #1]
    3546:	d038      	beq.n	35ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3548:	2900      	cmp	r1, #0
    354a:	d134      	bne.n	35b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    354c:	78a1      	ldrb	r1, [r4, #2]
    354e:	2900      	cmp	r1, #0
    3550:	d131      	bne.n	35b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3552:	2000      	movs	r0, #0
    3554:	f008 fe96 	bl	c284 <MPSL_IRQ_RADIO_Handler+0x1e>
    3558:	2000      	movs	r0, #0
    355a:	f008 fe86 	bl	c26a <MPSL_IRQ_RADIO_Handler+0x4>
    355e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3562:	f04f 31ff 	mov.w	r1, #4294967295
    3566:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    356a:	2600      	movs	r6, #0
    356c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3570:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3574:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3578:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    357c:	4f14      	ldr	r7, [pc, #80]	; (35d0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    357e:	707e      	strb	r6, [r7, #1]
    3580:	88a0      	ldrh	r0, [r4, #4]
    3582:	81b8      	strh	r0, [r7, #12]
    3584:	f008 fec6 	bl	c314 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3588:	2501      	movs	r5, #1
    358a:	b108      	cbz	r0, 3590 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    358c:	70fd      	strb	r5, [r7, #3]
    358e:	707d      	strb	r5, [r7, #1]
    3590:	2101      	movs	r1, #1
    3592:	4640      	mov	r0, r8
    3594:	f008 feb0 	bl	c2f8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3598:	b108      	cbz	r0, 359e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    359a:	f000 f877 	bl	368c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    359e:	4620      	mov	r0, r4
    35a0:	f7ff fe7c 	bl	329c <MPSL_IRQ_CLOCK_Handler+0x1d8>
    35a4:	727d      	strb	r5, [r7, #9]
    35a6:	2000      	movs	r0, #0
    35a8:	f008 fe5f 	bl	c26a <MPSL_IRQ_RADIO_Handler+0x4>
    35ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    35b0:	4630      	mov	r0, r6
    35b2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    35b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35ba:	2900      	cmp	r1, #0
    35bc:	d0fb      	beq.n	35b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35be:	2920      	cmp	r1, #32
    35c0:	d8f9      	bhi.n	35b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35c2:	78a1      	ldrb	r1, [r4, #2]
    35c4:	2921      	cmp	r1, #33	; 0x21
    35c6:	d8f6      	bhi.n	35b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35c8:	2901      	cmp	r1, #1
    35ca:	d1c2      	bne.n	3552 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    35cc:	e7f3      	b.n	35b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    35ce:	0000      	.short	0x0000
    35d0:	2000002c 	.word	0x2000002c

000035d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    35d4:	4801      	ldr	r0, [pc, #4]	; (35dc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    35d6:	8980      	ldrh	r0, [r0, #12]
    35d8:	4770      	bx	lr
    35da:	0000      	.short	0x0000
    35dc:	2000002c 	.word	0x2000002c

000035e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    35e0:	4802      	ldr	r0, [pc, #8]	; (35ec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    35e2:	7a80      	ldrb	r0, [r0, #10]
    35e4:	2800      	cmp	r0, #0
    35e6:	d000      	beq.n	35ea <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    35e8:	2001      	movs	r0, #1
    35ea:	4770      	bx	lr
    35ec:	2000002c 	.word	0x2000002c

000035f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    35f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35f2:	4d1f      	ldr	r5, [pc, #124]	; (3670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    35f4:	7ae8      	ldrb	r0, [r5, #11]
    35f6:	2800      	cmp	r0, #0
    35f8:	d10f      	bne.n	361a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    35fa:	7e28      	ldrb	r0, [r5, #24]
    35fc:	f000 0003 	and.w	r0, r0, #3
    3600:	f008 fe96 	bl	c330 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3604:	2800      	cmp	r0, #0
    3606:	d008      	beq.n	361a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3608:	f3ef 8110 	mrs	r1, PRIMASK
    360c:	b672      	cpsid	i
    360e:	f7ff ffe7 	bl	35e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    3612:	b118      	cbz	r0, 361c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3614:	2900      	cmp	r1, #0
    3616:	d100      	bne.n	361a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3618:	b662      	cpsie	i
    361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    361c:	2601      	movs	r6, #1
    361e:	72ae      	strb	r6, [r5, #10]
    3620:	b901      	cbnz	r1, 3624 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    3622:	b662      	cpsie	i
    3624:	2018      	movs	r0, #24
    3626:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    362a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    362e:	61a6      	str	r6, [r4, #24]
    3630:	f44f 7020 	mov.w	r0, #640	; 0x280
    3634:	f8ad 0000 	strh.w	r0, [sp]
    3638:	f8bd 0000 	ldrh.w	r0, [sp]
    363c:	1e41      	subs	r1, r0, #1
    363e:	f8ad 1000 	strh.w	r1, [sp]
    3642:	d2f9      	bcs.n	3638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3644:	2700      	movs	r7, #0
    3646:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    364a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    364e:	4808      	ldr	r0, [pc, #32]	; (3670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3650:	3008      	adds	r0, #8
    3652:	f008 fed3 	bl	c3fc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3656:	702f      	strb	r7, [r5, #0]
    3658:	f7ff fd78 	bl	314c <MPSL_IRQ_CLOCK_Handler+0x88>
    365c:	6166      	str	r6, [r4, #20]
    365e:	7968      	ldrb	r0, [r5, #5]
    3660:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3664:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3668:	2018      	movs	r0, #24
    366a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3670:	2000002c 	.word	0x2000002c

00003674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3674:	b510      	push	{r4, lr}
    3676:	4c04      	ldr	r4, [pc, #16]	; (3688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3678:	7e20      	ldrb	r0, [r4, #24]
    367a:	f000 0003 	and.w	r0, r0, #3
    367e:	f008 fe57 	bl	c330 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3682:	2800      	cmp	r0, #0
    3684:	d0f8      	beq.n	3678 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    3686:	bd10      	pop	{r4, pc}
    3688:	2000002c 	.word	0x2000002c

0000368c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    368c:	4901      	ldr	r1, [pc, #4]	; (3694 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    368e:	2001      	movs	r0, #1
    3690:	7008      	strb	r0, [r1, #0]
    3692:	4770      	bx	lr
    3694:	2000027c 	.word	0x2000027c

00003698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3698:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    369c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    36a0:	b918      	cbnz	r0, 36aa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    36a2:	4803      	ldr	r0, [pc, #12]	; (36b0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    36a4:	7800      	ldrb	r0, [r0, #0]
    36a6:	2800      	cmp	r0, #0
    36a8:	d000      	beq.n	36ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    36aa:	2001      	movs	r0, #1
    36ac:	4770      	bx	lr
    36ae:	0000      	.short	0x0000
    36b0:	2000027c 	.word	0x2000027c

000036b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    36b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    36b8:	2101      	movs	r1, #1
    36ba:	6041      	str	r1, [r0, #4]
    36bc:	2100      	movs	r1, #0
    36be:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    36c2:	4801      	ldr	r0, [pc, #4]	; (36c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    36c4:	7001      	strb	r1, [r0, #0]
    36c6:	4770      	bx	lr
    36c8:	2000027c 	.word	0x2000027c

000036cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    36cc:	4802      	ldr	r0, [pc, #8]	; (36d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    36ce:	6800      	ldr	r0, [r0, #0]
    36d0:	f000 0003 	and.w	r0, r0, #3
    36d4:	4770      	bx	lr
    36d6:	0000      	.short	0x0000
    36d8:	4000041c 	.word	0x4000041c
    36dc:	b510      	push	{r4, lr}
    36de:	b131      	cbz	r1, 36ee <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    36e0:	2901      	cmp	r1, #1
    36e2:	d007      	beq.n	36f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    36e4:	f240 3102 	movw	r1, #770	; 0x302
    36e8:	a005      	add	r0, pc, #20	; (adr r0, 3700 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    36ea:	f000 f80f 	bl	370c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    36ee:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    36f2:	e001      	b.n	36f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    36f4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    36f8:	f000 0001 	and.w	r0, r0, #1
    36fc:	bd10      	pop	{r4, pc}
    36fe:	0000      	.short	0x0000
    3700:	5f66726e 	.word	0x5f66726e
    3704:	636f6c63 	.word	0x636f6c63
    3708:	00682e6b 	.word	0x00682e6b

0000370c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    370c:	4a02      	ldr	r2, [pc, #8]	; (3718 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    370e:	6852      	ldr	r2, [r2, #4]
    3710:	b102      	cbz	r2, 3714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3712:	4710      	bx	r2
    3714:	e7fe      	b.n	3714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3716:	0000      	.short	0x0000
    3718:	2000004c 	.word	0x2000004c
    371c:	4806      	ldr	r0, [pc, #24]	; (3738 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    371e:	b510      	push	{r4, lr}
    3720:	2100      	movs	r1, #0
    3722:	6001      	str	r1, [r0, #0]
    3724:	2101      	movs	r1, #1
    3726:	6001      	str	r1, [r0, #0]
    3728:	4608      	mov	r0, r1
    372a:	f008 fe28 	bl	c37e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    372e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3732:	2001      	movs	r0, #1
    3734:	f008 be16 	b.w	c364 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3738:	40001ffc 	.word	0x40001ffc
    373c:	4807      	ldr	r0, [pc, #28]	; (375c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    373e:	b510      	push	{r4, lr}
    3740:	2101      	movs	r1, #1
    3742:	6041      	str	r1, [r0, #4]
    3744:	1e89      	subs	r1, r1, #2
    3746:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    374a:	200c      	movs	r0, #12
    374c:	f008 fe17 	bl	c37e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3754:	200c      	movs	r0, #12
    3756:	f008 be05 	b.w	c364 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    375a:	0000      	.short	0x0000
    375c:	4000c000 	.word	0x4000c000

00003760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3760:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    3762:	4a10      	ldr	r2, [pc, #64]	; (37a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3764:	6855      	ldr	r5, [r2, #4]
    3766:	b1e5      	cbz	r5, 37a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3768:	2200      	movs	r2, #0
    376a:	4603      	mov	r3, r0
    376c:	466e      	mov	r6, sp
    376e:	240a      	movs	r4, #10
    3770:	e003      	b.n	377a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    3772:	fbb0 f0f4 	udiv	r0, r0, r4
    3776:	1c52      	adds	r2, r2, #1
    3778:	b2d2      	uxtb	r2, r2
    377a:	2800      	cmp	r0, #0
    377c:	d1f9      	bne.n	3772 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    377e:	54b0      	strb	r0, [r6, r2]
    3780:	e00a      	b.n	3798 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3782:	bf00      	nop
    3784:	fbb3 f0f4 	udiv	r0, r3, r4
    3788:	fb04 3010 	mls	r0, r4, r0, r3
    378c:	fbb3 f3f4 	udiv	r3, r3, r4
    3790:	1e52      	subs	r2, r2, #1
    3792:	b2d2      	uxtb	r2, r2
    3794:	3030      	adds	r0, #48	; 0x30
    3796:	54b0      	strb	r0, [r6, r2]
    3798:	2a00      	cmp	r2, #0
    379a:	d1f3      	bne.n	3784 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    379c:	4630      	mov	r0, r6
    379e:	47a8      	blx	r5
    37a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    37a2:	e7fe      	b.n	37a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    37a4:	2000004c 	.word	0x2000004c

000037a8 <mpsl_init>:
    37a8:	b570      	push	{r4, r5, r6, lr}
    37aa:	4c17      	ldr	r4, [pc, #92]	; (3808 <mpsl_init+0x60>)
    37ac:	4606      	mov	r6, r0
    37ae:	460d      	mov	r5, r1
    37b0:	7860      	ldrb	r0, [r4, #1]
    37b2:	b110      	cbz	r0, 37ba <mpsl_init+0x12>
    37b4:	f04f 30ff 	mov.w	r0, #4294967295
    37b8:	bd70      	pop	{r4, r5, r6, pc}
    37ba:	b906      	cbnz	r6, 37be <mpsl_init+0x16>
    37bc:	4e13      	ldr	r6, [pc, #76]	; (380c <mpsl_init+0x64>)
    37be:	6062      	str	r2, [r4, #4]
    37c0:	7025      	strb	r5, [r4, #0]
    37c2:	f7ff ffab 	bl	371c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    37c6:	f7ff ffb9 	bl	373c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    37ca:	4630      	mov	r0, r6
    37cc:	f7ff feb0 	bl	3530 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    37d0:	0006      	movs	r6, r0
    37d2:	d1f1      	bne.n	37b8 <mpsl_init+0x10>
    37d4:	f7fe ff36 	bl	2644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    37d8:	f7ff ff0a 	bl	35f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    37dc:	f008 fd1c 	bl	c218 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    37e0:	4628      	mov	r0, r5
    37e2:	f008 fdbf 	bl	c364 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37e6:	2001      	movs	r0, #1
    37e8:	2d00      	cmp	r5, #0
    37ea:	db09      	blt.n	3800 <mpsl_init+0x58>
    37ec:	f005 011f 	and.w	r1, r5, #31
    37f0:	fa00 f101 	lsl.w	r1, r0, r1
    37f4:	096a      	lsrs	r2, r5, #5
    37f6:	0092      	lsls	r2, r2, #2
    37f8:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    37fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3800:	7060      	strb	r0, [r4, #1]
    3802:	4630      	mov	r0, r6
    3804:	bd70      	pop	{r4, r5, r6, pc}
    3806:	0000      	.short	0x0000
    3808:	2000004c 	.word	0x2000004c
    380c:	0000c3a0 	.word	0x0000c3a0

00003810 <mpsl_is_initialized>:
    3810:	4801      	ldr	r0, [pc, #4]	; (3818 <mpsl_is_initialized+0x8>)
    3812:	7840      	ldrb	r0, [r0, #1]
    3814:	4770      	bx	lr
    3816:	0000      	.short	0x0000
    3818:	2000004c 	.word	0x2000004c

0000381c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    381c:	4807      	ldr	r0, [pc, #28]	; (383c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    381e:	f990 0000 	ldrsb.w	r0, [r0]
    3822:	2800      	cmp	r0, #0
    3824:	db09      	blt.n	383a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3826:	f000 021f 	and.w	r2, r0, #31
    382a:	2101      	movs	r1, #1
    382c:	4091      	lsls	r1, r2
    382e:	0940      	lsrs	r0, r0, #5
    3830:	0080      	lsls	r0, r0, #2
    3832:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3836:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    383a:	4770      	bx	lr
    383c:	2000004c 	.word	0x2000004c

00003840 <mpsl_temperature_get>:
    3840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3844:	2601      	movs	r6, #1
    3846:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    384a:	0331      	lsls	r1, r6, #12
    384c:	f04f 0800 	mov.w	r8, #0
    3850:	4640      	mov	r0, r8
    3852:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3856:	f3bf 8f4f 	dsb	sy
    385a:	f3bf 8f6f 	isb	sy
    385e:	4c16      	ldr	r4, [pc, #88]	; (38b8 <mpsl_temperature_get+0x78>)
    3860:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3864:	200c      	movs	r0, #12
    3866:	f008 fda9 	bl	c3bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    386a:	4d14      	ldr	r5, [pc, #80]	; (38bc <mpsl_temperature_get+0x7c>)
    386c:	6828      	ldr	r0, [r5, #0]
    386e:	43c0      	mvns	r0, r0
    3870:	f340 1700 	sbfx	r7, r0, #4, #1
    3874:	6828      	ldr	r0, [r5, #0]
    3876:	f040 0010 	orr.w	r0, r0, #16
    387a:	6028      	str	r0, [r5, #0]
    387c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3880:	6026      	str	r6, [r4, #0]
    3882:	1c7f      	adds	r7, r7, #1
    3884:	e002      	b.n	388c <mpsl_temperature_get+0x4c>
    3886:	bf00      	nop
    3888:	f000 f890 	bl	39ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    388c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3890:	2800      	cmp	r0, #0
    3892:	d0f9      	beq.n	3888 <mpsl_temperature_get+0x48>
    3894:	b91f      	cbnz	r7, 389e <mpsl_temperature_get+0x5e>
    3896:	6828      	ldr	r0, [r5, #0]
    3898:	f020 0010 	bic.w	r0, r0, #16
    389c:	6028      	str	r0, [r5, #0]
    389e:	4808      	ldr	r0, [pc, #32]	; (38c0 <mpsl_temperature_get+0x80>)
    38a0:	6805      	ldr	r5, [r0, #0]
    38a2:	6066      	str	r6, [r4, #4]
    38a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    38a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    38ac:	200c      	movs	r0, #12
    38ae:	f008 fd85 	bl	c3bc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    38b2:	4628      	mov	r0, r5
    38b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38b8:	4000c000 	.word	0x4000c000
    38bc:	e000ed10 	.word	0xe000ed10
    38c0:	4000c508 	.word	0x4000c508

000038c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    38c4:	b510      	push	{r4, lr}
    38c6:	4602      	mov	r2, r0
    38c8:	2005      	movs	r0, #5
    38ca:	490c      	ldr	r1, [pc, #48]	; (38fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    38cc:	e004      	b.n	38d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    38ce:	bf00      	nop
    38d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    38d4:	791b      	ldrb	r3, [r3, #4]
    38d6:	b133      	cbz	r3, 38e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    38d8:	1e40      	subs	r0, r0, #1
    38da:	b2c0      	uxtb	r0, r0
    38dc:	d2f8      	bcs.n	38d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    38de:	214b      	movs	r1, #75	; 0x4b
    38e0:	2069      	movs	r0, #105	; 0x69
    38e2:	f7ff ff3d 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    38ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    38ee:	2200      	movs	r2, #0
    38f0:	714a      	strb	r2, [r1, #5]
    38f2:	718a      	strb	r2, [r1, #6]
    38f4:	2201      	movs	r2, #1
    38f6:	710a      	strb	r2, [r1, #4]
    38f8:	bd10      	pop	{r4, pc}
    38fa:	0000      	.short	0x0000
    38fc:	20000cd8 	.word	0x20000cd8

00003900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3900:	b510      	push	{r4, lr}
    3902:	2805      	cmp	r0, #5
    3904:	d301      	bcc.n	390a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3906:	215a      	movs	r1, #90	; 0x5a
    3908:	e006      	b.n	3918 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    390a:	490a      	ldr	r1, [pc, #40]	; (3934 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    390c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3910:	7901      	ldrb	r1, [r0, #4]
    3912:	2901      	cmp	r1, #1
    3914:	d003      	beq.n	391e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3916:	215b      	movs	r1, #91	; 0x5b
    3918:	2069      	movs	r0, #105	; 0x69
    391a:	f7ff ff21 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    391e:	7941      	ldrb	r1, [r0, #5]
    3920:	7982      	ldrb	r2, [r0, #6]
    3922:	1c49      	adds	r1, r1, #1
    3924:	b2c9      	uxtb	r1, r1
    3926:	428a      	cmp	r2, r1
    3928:	d000      	beq.n	392c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    392a:	7141      	strb	r1, [r0, #5]
    392c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3930:	f7ff bf74 	b.w	381c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3934:	20000cd8 	.word	0x20000cd8

00003938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3938:	b570      	push	{r4, r5, r6, lr}
    393a:	2505      	movs	r5, #5
    393c:	4e0e      	ldr	r6, [pc, #56]	; (3978 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    393e:	4c0f      	ldr	r4, [pc, #60]	; (397c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3940:	e016      	b.n	3970 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3942:	7821      	ldrb	r1, [r4, #0]
    3944:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3948:	7902      	ldrb	r2, [r0, #4]
    394a:	2a01      	cmp	r2, #1
    394c:	d108      	bne.n	3960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    394e:	7942      	ldrb	r2, [r0, #5]
    3950:	7983      	ldrb	r3, [r0, #6]
    3952:	429a      	cmp	r2, r3
    3954:	d004      	beq.n	3960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3956:	7942      	ldrb	r2, [r0, #5]
    3958:	7182      	strb	r2, [r0, #6]
    395a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    395e:	4780      	blx	r0
    3960:	7820      	ldrb	r0, [r4, #0]
    3962:	1c40      	adds	r0, r0, #1
    3964:	b2c0      	uxtb	r0, r0
    3966:	7020      	strb	r0, [r4, #0]
    3968:	2805      	cmp	r0, #5
    396a:	d301      	bcc.n	3970 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    396c:	2000      	movs	r0, #0
    396e:	7020      	strb	r0, [r4, #0]
    3970:	1e6d      	subs	r5, r5, #1
    3972:	b2ed      	uxtb	r5, r5
    3974:	d2e5      	bcs.n	3942 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3976:	bd70      	pop	{r4, r5, r6, pc}
    3978:	20000cd8 	.word	0x20000cd8
    397c:	2000027d 	.word	0x2000027d

00003980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3980:	b500      	push	{lr}
    3982:	f008 fd4a 	bl	c41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3986:	b940      	cbnz	r0, 399a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3988:	f008 fd51 	bl	c42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    398c:	b928      	cbnz	r0, 399a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    398e:	f008 fd65 	bl	c45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3992:	b910      	cbnz	r0, 399a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3994:	f008 fd76 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3998:	b108      	cbz	r0, 399e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    399a:	4802      	ldr	r0, [pc, #8]	; (39a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    399c:	bd00      	pop	{pc}
    399e:	4802      	ldr	r0, [pc, #8]	; (39a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    39a0:	bd00      	pop	{pc}
    39a2:	0000      	.short	0x0000
    39a4:	4000050c 	.word	0x4000050c
    39a8:	4001e700 	.word	0x4001e700

000039ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    39ac:	b510      	push	{r4, lr}
    39ae:	f008 fd69 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39b2:	b330      	cbz	r0, 3a02 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    39b4:	f3ef 8010 	mrs	r0, PRIMASK
    39b8:	b1c8      	cbz	r0, 39ee <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    39ba:	2100      	movs	r1, #0
    39bc:	b672      	cpsid	i
    39be:	4812      	ldr	r0, [pc, #72]	; (3a08 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    39c0:	6802      	ldr	r2, [r0, #0]
    39c2:	6803      	ldr	r3, [r0, #0]
    39c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    39c8:	f043 0310 	orr.w	r3, r3, #16
    39cc:	6003      	str	r3, [r0, #0]
    39ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    39d2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    39d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    39da:	431c      	orrs	r4, r3
    39dc:	d000      	beq.n	39e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    39de:	bf40      	sev
    39e0:	bf20      	wfe
    39e2:	bf00      	nop
    39e4:	bf00      	nop
    39e6:	bf00      	nop
    39e8:	bf00      	nop
    39ea:	b112      	cbz	r2, 39f2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    39ec:	e005      	b.n	39fa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    39ee:	2101      	movs	r1, #1
    39f0:	e7e4      	b.n	39bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    39f2:	6802      	ldr	r2, [r0, #0]
    39f4:	f022 0210 	bic.w	r2, r2, #16
    39f8:	6002      	str	r2, [r0, #0]
    39fa:	2900      	cmp	r1, #0
    39fc:	d000      	beq.n	3a00 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    39fe:	b662      	cpsie	i
    3a00:	bd10      	pop	{r4, pc}
    3a02:	bf20      	wfe
    3a04:	bd10      	pop	{r4, pc}
    3a06:	0000      	.short	0x0000
    3a08:	e000ed10 	.word	0xe000ed10

00003a0c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3a0c:	0000c6f5 0000c711 0000c6ff 0000c70b     ................
    3a1c:	0000c6f9 0000c6f3 0000c6f1 0000c717     ................
    3a2c:	0000c705 0000c6eb 0000c6e3 0000c6e7     ................
    3a3c:	0000c6dd                                ....

00003a40 <mpsl_fem_disable>:
    3a40:	4801      	ldr	r0, [pc, #4]	; (3a48 <mpsl_fem_disable+0x8>)
    3a42:	6800      	ldr	r0, [r0, #0]
    3a44:	6800      	ldr	r0, [r0, #0]
    3a46:	4700      	bx	r0
    3a48:	20000054 	.word	0x20000054

00003a4c <mpsl_fem_lna_configuration_clear>:
    3a4c:	4801      	ldr	r0, [pc, #4]	; (3a54 <mpsl_fem_lna_configuration_clear+0x8>)
    3a4e:	6800      	ldr	r0, [r0, #0]
    3a50:	6900      	ldr	r0, [r0, #16]
    3a52:	4700      	bx	r0
    3a54:	20000054 	.word	0x20000054

00003a58 <mpsl_fem_lna_configuration_set>:
    3a58:	4a01      	ldr	r2, [pc, #4]	; (3a60 <mpsl_fem_lna_configuration_set+0x8>)
    3a5a:	6812      	ldr	r2, [r2, #0]
    3a5c:	6892      	ldr	r2, [r2, #8]
    3a5e:	4710      	bx	r2
    3a60:	20000054 	.word	0x20000054

00003a64 <mpsl_fem_pa_configuration_clear>:
    3a64:	4801      	ldr	r0, [pc, #4]	; (3a6c <mpsl_fem_pa_configuration_clear+0x8>)
    3a66:	6800      	ldr	r0, [r0, #0]
    3a68:	68c0      	ldr	r0, [r0, #12]
    3a6a:	4700      	bx	r0
    3a6c:	20000054 	.word	0x20000054

00003a70 <mpsl_fem_pa_configuration_set>:
    3a70:	4a01      	ldr	r2, [pc, #4]	; (3a78 <mpsl_fem_pa_configuration_set+0x8>)
    3a72:	6812      	ldr	r2, [r2, #0]
    3a74:	6852      	ldr	r2, [r2, #4]
    3a76:	4710      	bx	r2
    3a78:	20000054 	.word	0x20000054

00003a7c <mpsl_fem_pa_is_configured>:
    3a7c:	4901      	ldr	r1, [pc, #4]	; (3a84 <mpsl_fem_pa_is_configured+0x8>)
    3a7e:	6809      	ldr	r1, [r1, #0]
    3a80:	6a09      	ldr	r1, [r1, #32]
    3a82:	4708      	bx	r1
    3a84:	20000054 	.word	0x20000054

00003a88 <mpsl_fem_device_config_254_apply_get>:
    3a88:	4801      	ldr	r0, [pc, #4]	; (3a90 <mpsl_fem_device_config_254_apply_get+0x8>)
    3a8a:	7800      	ldrb	r0, [r0, #0]
    3a8c:	4770      	bx	lr
    3a8e:	0000      	.short	0x0000
    3a90:	2000027e 	.word	0x2000027e
    3a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a96:	4c17      	ldr	r4, [pc, #92]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3a98:	7a20      	ldrb	r0, [r4, #8]
    3a9a:	2802      	cmp	r0, #2
    3a9c:	d200      	bcs.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a9e:	2002      	movs	r0, #2
    3aa0:	f88d 0001 	strb.w	r0, [sp, #1]
    3aa4:	79e0      	ldrb	r0, [r4, #7]
    3aa6:	2803      	cmp	r0, #3
    3aa8:	d200      	bcs.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3aaa:	2003      	movs	r0, #3
    3aac:	f88d 0000 	strb.w	r0, [sp]
    3ab0:	79a0      	ldrb	r0, [r4, #6]
    3ab2:	f8ad 0004 	strh.w	r0, [sp, #4]
    3ab6:	7960      	ldrb	r0, [r4, #5]
    3ab8:	f8ad 0002 	strh.w	r0, [sp, #2]
    3abc:	4668      	mov	r0, sp
    3abe:	f006 ffd5 	bl	aa6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3ac2:	b108      	cbz	r0, 3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
    3ac4:	2180      	movs	r1, #128	; 0x80
    3ac6:	e010      	b.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
    3ac8:	68e0      	ldr	r0, [r4, #12]
    3aca:	9002      	str	r0, [sp, #8]
    3acc:	a802      	add	r0, sp, #8
    3ace:	f006 ffe3 	bl	aa98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3ad2:	b108      	cbz	r0, 3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3ad4:	2184      	movs	r1, #132	; 0x84
    3ad6:	e008      	b.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
    3ad8:	4807      	ldr	r0, [pc, #28]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3ada:	6800      	ldr	r0, [r0, #0]
    3adc:	9003      	str	r0, [sp, #12]
    3ade:	a803      	add	r0, sp, #12
    3ae0:	f00b f9fc 	bl	eedc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3ae4:	2800      	cmp	r0, #0
    3ae6:	d003      	beq.n	3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>
    3ae8:	2188      	movs	r1, #136	; 0x88
    3aea:	2003      	movs	r0, #3
    3aec:	f000 f914 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3af0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3af2:	0000      	.short	0x0000
    3af4:	20000d00 	.word	0x20000d00
    3af8:	00003e04 	.word	0x00003e04
    3afc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3afe:	4604      	mov	r4, r0
    3b00:	460e      	mov	r6, r1
    3b02:	f100 0003 	add.w	r0, r0, #3
    3b06:	f020 0003 	bic.w	r0, r0, #3
    3b0a:	f04f 0100 	mov.w	r1, #0
    3b0e:	e9cd 0100 	strd	r0, r1, [sp]
    3b12:	7831      	ldrb	r1, [r6, #0]
    3b14:	0015      	movs	r5, r2
    3b16:	f88d 1005 	strb.w	r1, [sp, #5]
    3b1a:	d000      	beq.n	3b1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x86>
    3b1c:	2000      	movs	r0, #0
    3b1e:	a901      	add	r1, sp, #4
    3b20:	f000 faea 	bl	40f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3b24:	9900      	ldr	r1, [sp, #0]
    3b26:	4408      	add	r0, r1
    3b28:	490c      	ldr	r1, [pc, #48]	; (3b5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc4>)
    3b2a:	9000      	str	r0, [sp, #0]
    3b2c:	78c9      	ldrb	r1, [r1, #3]
    3b2e:	b149      	cbz	r1, 3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
    3b30:	7c31      	ldrb	r1, [r6, #16]
    3b32:	b139      	cbz	r1, 3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
    3b34:	2225      	movs	r2, #37	; 0x25
    3b36:	b105      	cbz	r5, 3b3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa2>
    3b38:	2000      	movs	r0, #0
    3b3a:	f000 fd25 	bl	4588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3b3e:	9900      	ldr	r1, [sp, #0]
    3b40:	4408      	add	r0, r1
    3b42:	9000      	str	r0, [sp, #0]
    3b44:	462a      	mov	r2, r5
    3b46:	4631      	mov	r1, r6
    3b48:	4668      	mov	r0, sp
    3b4a:	f008 fde6 	bl	c71a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3b4e:	9800      	ldr	r0, [sp, #0]
    3b50:	1dc0      	adds	r0, r0, #7
    3b52:	f020 0007 	bic.w	r0, r0, #7
    3b56:	9000      	str	r0, [sp, #0]
    3b58:	1b00      	subs	r0, r0, r4
    3b5a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3b5c:	20000058 	.word	0x20000058

00003b60 <sdc_build_revision_get>:
    3b60:	b510      	push	{r4, lr}
    3b62:	b128      	cbz	r0, 3b70 <sdc_build_revision_get+0x10>
    3b64:	2214      	movs	r2, #20
    3b66:	4904      	ldr	r1, [pc, #16]	; (3b78 <sdc_build_revision_get+0x18>)
    3b68:	f008 fcde 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b6c:	2000      	movs	r0, #0
    3b6e:	bd10      	pop	{r4, pc}
    3b70:	f06f 0015 	mvn.w	r0, #21
    3b74:	bd10      	pop	{r4, pc}
    3b76:	0000      	.short	0x0000
    3b78:	00003e20 	.word	0x00003e20

00003b7c <sdc_cfg_set>:
    3b7c:	b570      	push	{r4, r5, r6, lr}
    3b7e:	0003      	movs	r3, r0
    3b80:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3b84:	d103      	bne.n	3b8e <sdc_cfg_set+0x12>
    3b86:	4c28      	ldr	r4, [pc, #160]	; (3c28 <sdc_cfg_set+0xac>)
    3b88:	7863      	ldrb	r3, [r4, #1]
    3b8a:	b10b      	cbz	r3, 3b90 <sdc_cfg_set+0x14>
    3b8c:	1180      	asrs	r0, r0, #6
    3b8e:	bd70      	pop	{r4, r5, r6, pc}
    3b90:	b319      	cbz	r1, 3bda <sdc_cfg_set+0x5e>
    3b92:	f06f 0515 	mvn.w	r5, #21
    3b96:	b38a      	cbz	r2, 3bfc <sdc_cfg_set+0x80>
    3b98:	4b24      	ldr	r3, [pc, #144]	; (3c2c <sdc_cfg_set+0xb0>)
    3b9a:	290b      	cmp	r1, #11
    3b9c:	d23e      	bcs.n	3c1c <sdc_cfg_set+0xa0>
    3b9e:	e8df f001 	tbb	[pc, r1]
    3ba2:	063d      	.short	0x063d
    3ba4:	13100c09 	.word	0x13100c09
    3ba8:	2818251d 	.word	0x2818251d
    3bac:	002e      	.short	0x002e
    3bae:	7810      	ldrb	r0, [r2, #0]
    3bb0:	7018      	strb	r0, [r3, #0]
    3bb2:	e028      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bb4:	7810      	ldrb	r0, [r2, #0]
    3bb6:	7058      	strb	r0, [r3, #1]
    3bb8:	e025      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bba:	6810      	ldr	r0, [r2, #0]
    3bbc:	f8c3 0005 	str.w	r0, [r3, #5]
    3bc0:	e021      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bc2:	6810      	ldr	r0, [r2, #0]
    3bc4:	60d8      	str	r0, [r3, #12]
    3bc6:	e01e      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bc8:	7811      	ldrb	r1, [r2, #0]
    3bca:	2900      	cmp	r1, #0
    3bcc:	d1df      	bne.n	3b8e <sdc_cfg_set+0x12>
    3bce:	7099      	strb	r1, [r3, #2]
    3bd0:	e019      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bd2:	7811      	ldrb	r1, [r2, #0]
    3bd4:	2900      	cmp	r1, #0
    3bd6:	d1da      	bne.n	3b8e <sdc_cfg_set+0x12>
    3bd8:	70d9      	strb	r1, [r3, #3]
    3bda:	e014      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bdc:	78e0      	ldrb	r0, [r4, #3]
    3bde:	b110      	cbz	r0, 3be6 <sdc_cfg_set+0x6a>
    3be0:	7810      	ldrb	r0, [r2, #0]
    3be2:	2802      	cmp	r0, #2
    3be4:	d31a      	bcc.n	3c1c <sdc_cfg_set+0xa0>
    3be6:	7810      	ldrb	r0, [r2, #0]
    3be8:	7418      	strb	r0, [r3, #16]
    3bea:	e00c      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bec:	8810      	ldrh	r0, [r2, #0]
    3bee:	8258      	strh	r0, [r3, #18]
    3bf0:	e009      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bf2:	7811      	ldrb	r1, [r2, #0]
    3bf4:	2900      	cmp	r1, #0
    3bf6:	d1ca      	bne.n	3b8e <sdc_cfg_set+0x12>
    3bf8:	7119      	strb	r1, [r3, #4]
    3bfa:	e004      	b.n	3c06 <sdc_cfg_set+0x8a>
    3bfc:	e00e      	b.n	3c1c <sdc_cfg_set+0xa0>
    3bfe:	7810      	ldrb	r0, [r2, #0]
    3c00:	2802      	cmp	r0, #2
    3c02:	d30b      	bcc.n	3c1c <sdc_cfg_set+0xa0>
    3c04:	7518      	strb	r0, [r3, #20]
    3c06:	2201      	movs	r2, #1
    3c08:	4908      	ldr	r1, [pc, #32]	; (3c2c <sdc_cfg_set+0xb0>)
    3c0a:	2000      	movs	r0, #0
    3c0c:	f7ff ff76 	bl	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    3c10:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3c14:	db04      	blt.n	3c20 <sdc_cfg_set+0xa4>
    3c16:	f06f 000b 	mvn.w	r0, #11
    3c1a:	bd70      	pop	{r4, r5, r6, pc}
    3c1c:	4628      	mov	r0, r5
    3c1e:	bd70      	pop	{r4, r5, r6, pc}
    3c20:	2101      	movs	r1, #1
    3c22:	70a1      	strb	r1, [r4, #2]
    3c24:	bd70      	pop	{r4, r5, r6, pc}
    3c26:	0000      	.short	0x0000
    3c28:	20000058 	.word	0x20000058
    3c2c:	20000d00 	.word	0x20000d00

00003c30 <sdc_enable>:
    3c30:	b570      	push	{r4, r5, r6, lr}
    3c32:	460c      	mov	r4, r1
    3c34:	0005      	movs	r5, r0
    3c36:	d019      	beq.n	3c6c <sdc_enable+0x3c>
    3c38:	b1c4      	cbz	r4, 3c6c <sdc_enable+0x3c>
    3c3a:	f000 f925 	bl	3e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3c3e:	b1c0      	cbz	r0, 3c72 <sdc_enable+0x42>
    3c40:	4628      	mov	r0, r5
    3c42:	f7ff fe3f 	bl	38c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3c46:	4d0c      	ldr	r5, [pc, #48]	; (3c78 <sdc_enable+0x48>)
    3c48:	2200      	movs	r2, #0
    3c4a:	490c      	ldr	r1, [pc, #48]	; (3c7c <sdc_enable+0x4c>)
    3c4c:	7028      	strb	r0, [r5, #0]
    3c4e:	4620      	mov	r0, r4
    3c50:	f7ff ff54 	bl	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    3c54:	f00b fd43 	bl	f6de <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3c58:	2100      	movs	r1, #0
    3c5a:	7828      	ldrb	r0, [r5, #0]
    3c5c:	f007 f91a 	bl	ae94 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3c60:	f7ff ff18 	bl	3a94 <mpsl_fem_device_config_254_apply_get+0xc>
    3c64:	2001      	movs	r0, #1
    3c66:	7068      	strb	r0, [r5, #1]
    3c68:	2000      	movs	r0, #0
    3c6a:	bd70      	pop	{r4, r5, r6, pc}
    3c6c:	f06f 0015 	mvn.w	r0, #21
    3c70:	bd70      	pop	{r4, r5, r6, pc}
    3c72:	f04f 30ff 	mov.w	r0, #4294967295
    3c76:	bd70      	pop	{r4, r5, r6, pc}
    3c78:	20000058 	.word	0x20000058
    3c7c:	20000d00 	.word	0x20000d00

00003c80 <sdc_init>:
    3c80:	b530      	push	{r4, r5, lr}
    3c82:	b087      	sub	sp, #28
    3c84:	0005      	movs	r5, r0
    3c86:	d00c      	beq.n	3ca2 <sdc_init+0x22>
    3c88:	f7ff fdc2 	bl	3810 <mpsl_is_initialized>
    3c8c:	f04f 34ff 	mov.w	r4, #4294967295
    3c90:	b120      	cbz	r0, 3c9c <sdc_init+0x1c>
    3c92:	f7ff fc9f 	bl	35d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3c96:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3c9a:	d905      	bls.n	3ca8 <sdc_init+0x28>
    3c9c:	4620      	mov	r0, r4
    3c9e:	b007      	add	sp, #28
    3ca0:	bd30      	pop	{r4, r5, pc}
    3ca2:	f06f 0015 	mvn.w	r0, #21
    3ca6:	e7fa      	b.n	3c9e <sdc_init+0x1e>
    3ca8:	4c15      	ldr	r4, [pc, #84]	; (3d00 <sdc_init+0x80>)
    3caa:	4816      	ldr	r0, [pc, #88]	; (3d04 <sdc_init+0x84>)
    3cac:	6065      	str	r5, [r4, #4]
    3cae:	f000 f9e5 	bl	407c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3cb2:	2000      	movs	r0, #0
    3cb4:	7060      	strb	r0, [r4, #1]
    3cb6:	70a0      	strb	r0, [r4, #2]
    3cb8:	70e0      	strb	r0, [r4, #3]
    3cba:	4601      	mov	r1, r0
    3cbc:	2218      	movs	r2, #24
    3cbe:	4668      	mov	r0, sp
    3cc0:	f008 fcac 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3cc4:	2218      	movs	r2, #24
    3cc6:	4910      	ldr	r1, [pc, #64]	; (3d08 <sdc_init+0x88>)
    3cc8:	4668      	mov	r0, sp
    3cca:	f008 fc2d 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3cce:	2218      	movs	r2, #24
    3cd0:	4669      	mov	r1, sp
    3cd2:	480e      	ldr	r0, [pc, #56]	; (3d0c <sdc_init+0x8c>)
    3cd4:	f008 fc28 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3cd8:	f3ef 8410 	mrs	r4, PRIMASK
    3cdc:	b672      	cpsid	i
    3cde:	480c      	ldr	r0, [pc, #48]	; (3d10 <sdc_init+0x90>)
    3ce0:	f06f 010c 	mvn.w	r1, #12
    3ce4:	f000 fcf2 	bl	46cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3ce8:	480a      	ldr	r0, [pc, #40]	; (3d14 <sdc_init+0x94>)
    3cea:	f000 fdb3 	bl	4854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3cee:	b118      	cbz	r0, 3cf8 <sdc_init+0x78>
    3cf0:	2196      	movs	r1, #150	; 0x96
    3cf2:	2003      	movs	r0, #3
    3cf4:	f000 f810 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cf8:	b904      	cbnz	r4, 3cfc <sdc_init+0x7c>
    3cfa:	b662      	cpsie	i
    3cfc:	2000      	movs	r0, #0
    3cfe:	e7ce      	b.n	3c9e <sdc_init+0x1e>
    3d00:	20000058 	.word	0x20000058
    3d04:	00003a95 	.word	0x00003a95
    3d08:	00003e08 	.word	0x00003e08
    3d0c:	20000d00 	.word	0x20000d00
    3d10:	4000c000 	.word	0x4000c000
    3d14:	00003eb5 	.word	0x00003eb5

00003d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3d18:	b50e      	push	{r1, r2, r3, lr}
    3d1a:	b672      	cpsid	i
    3d1c:	4a15      	ldr	r2, [pc, #84]	; (3d74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3d1e:	6855      	ldr	r5, [r2, #4]
    3d20:	b1d5      	cbz	r5, 3d58 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3d22:	2200      	movs	r2, #0
    3d24:	4603      	mov	r3, r0
    3d26:	466e      	mov	r6, sp
    3d28:	240a      	movs	r4, #10
    3d2a:	e003      	b.n	3d34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3d2c:	fbb0 f0f4 	udiv	r0, r0, r4
    3d30:	1c52      	adds	r2, r2, #1
    3d32:	b2d2      	uxtb	r2, r2
    3d34:	2800      	cmp	r0, #0
    3d36:	d1f9      	bne.n	3d2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3d38:	54b0      	strb	r0, [r6, r2]
    3d3a:	e009      	b.n	3d50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3d3c:	fbb3 f0f4 	udiv	r0, r3, r4
    3d40:	fb04 3010 	mls	r0, r4, r0, r3
    3d44:	fbb3 f3f4 	udiv	r3, r3, r4
    3d48:	1e52      	subs	r2, r2, #1
    3d4a:	b2d2      	uxtb	r2, r2
    3d4c:	3030      	adds	r0, #48	; 0x30
    3d4e:	54b0      	strb	r0, [r6, r2]
    3d50:	2a00      	cmp	r2, #0
    3d52:	d1f3      	bne.n	3d3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3d54:	4630      	mov	r0, r6
    3d56:	47a8      	blx	r5
    3d58:	f3bf 8f4f 	dsb	sy
    3d5c:	4806      	ldr	r0, [pc, #24]	; (3d78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3d5e:	6801      	ldr	r1, [r0, #0]
    3d60:	4a06      	ldr	r2, [pc, #24]	; (3d7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3d62:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3d66:	4311      	orrs	r1, r2
    3d68:	6001      	str	r1, [r0, #0]
    3d6a:	f3bf 8f4f 	dsb	sy
    3d6e:	bf00      	nop
    3d70:	e7fd      	b.n	3d6e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3d72:	0000      	.short	0x0000
    3d74:	20000058 	.word	0x20000058
    3d78:	e000ed0c 	.word	0xe000ed0c
    3d7c:	05fa0004 	.word	0x05fa0004

00003d80 <sdc_support_dle>:
    3d80:	4806      	ldr	r0, [pc, #24]	; (3d9c <sdc_support_dle+0x1c>)
    3d82:	b510      	push	{r4, lr}
    3d84:	7881      	ldrb	r1, [r0, #2]
    3d86:	7840      	ldrb	r0, [r0, #1]
    3d88:	4301      	orrs	r1, r0
    3d8a:	d002      	beq.n	3d92 <sdc_support_dle+0x12>
    3d8c:	f04f 30ff 	mov.w	r0, #4294967295
    3d90:	bd10      	pop	{r4, pc}
    3d92:	f006 fed7 	bl	ab44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3d96:	2000      	movs	r0, #0
    3d98:	bd10      	pop	{r4, pc}
    3d9a:	0000      	.short	0x0000
    3d9c:	20000058 	.word	0x20000058

00003da0 <sdc_support_le_2m_phy>:
    3da0:	4806      	ldr	r0, [pc, #24]	; (3dbc <sdc_support_le_2m_phy+0x1c>)
    3da2:	b510      	push	{r4, lr}
    3da4:	7881      	ldrb	r1, [r0, #2]
    3da6:	7840      	ldrb	r0, [r0, #1]
    3da8:	4301      	orrs	r1, r0
    3daa:	d002      	beq.n	3db2 <sdc_support_le_2m_phy+0x12>
    3dac:	f04f 30ff 	mov.w	r0, #4294967295
    3db0:	bd10      	pop	{r4, pc}
    3db2:	f00b f940 	bl	f036 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3db6:	2000      	movs	r0, #0
    3db8:	bd10      	pop	{r4, pc}
    3dba:	0000      	.short	0x0000
    3dbc:	20000058 	.word	0x20000058

00003dc0 <sdc_support_master>:
    3dc0:	4806      	ldr	r0, [pc, #24]	; (3ddc <sdc_support_master+0x1c>)
    3dc2:	b510      	push	{r4, lr}
    3dc4:	7881      	ldrb	r1, [r0, #2]
    3dc6:	7840      	ldrb	r0, [r0, #1]
    3dc8:	4301      	orrs	r1, r0
    3dca:	d002      	beq.n	3dd2 <sdc_support_master+0x12>
    3dcc:	f04f 30ff 	mov.w	r0, #4294967295
    3dd0:	bd10      	pop	{r4, pc}
    3dd2:	f007 f893 	bl	aefc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    3dd6:	2000      	movs	r0, #0
    3dd8:	bd10      	pop	{r4, pc}
    3dda:	0000      	.short	0x0000
    3ddc:	20000058 	.word	0x20000058

00003de0 <sdc_support_scan>:
    3de0:	4807      	ldr	r0, [pc, #28]	; (3e00 <sdc_support_scan+0x20>)
    3de2:	b510      	push	{r4, lr}
    3de4:	7881      	ldrb	r1, [r0, #2]
    3de6:	7842      	ldrb	r2, [r0, #1]
    3de8:	4311      	orrs	r1, r2
    3dea:	d002      	beq.n	3df2 <sdc_support_scan+0x12>
    3dec:	f04f 30ff 	mov.w	r0, #4294967295
    3df0:	bd10      	pop	{r4, pc}
    3df2:	2101      	movs	r1, #1
    3df4:	70c1      	strb	r1, [r0, #3]
    3df6:	f007 f86f 	bl	aed8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    3dfa:	2000      	movs	r0, #0
    3dfc:	bd10      	pop	{r4, pc}
    3dfe:	0000      	.short	0x0000
    3e00:	20000058 	.word	0x20000058
    3e04:	00000001 	.word	0x00000001
    3e08:	00010101 	.word	0x00010101
    3e0c:	031b1b00 	.word	0x031b1b00
    3e10:	00000002 	.word	0x00000002
    3e14:	00001d4c 	.word	0x00001d4c
    3e18:	001f0003 	.word	0x001f0003
    3e1c:	00000000 	.word	0x00000000
    3e20:	d64ec0df 	.word	0xd64ec0df
    3e24:	09667c1f 	.word	0x09667c1f
    3e28:	a02bf50a 	.word	0xa02bf50a
    3e2c:	6443f298 	.word	0x6443f298
    3e30:	2aa6c562 	.word	0x2aa6c562

00003e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3e34:	4a05      	ldr	r2, [pc, #20]	; (3e4c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3e36:	b510      	push	{r4, lr}
    3e38:	6852      	ldr	r2, [r2, #4]
    3e3a:	b112      	cbz	r2, 3e42 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e40:	4710      	bx	r2
    3e42:	2183      	movs	r1, #131	; 0x83
    3e44:	2004      	movs	r0, #4
    3e46:	f7ff ff67 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e4a:	0000      	.short	0x0000
    3e4c:	20000d18 	.word	0x20000d18

00003e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3e50:	4a05      	ldr	r2, [pc, #20]	; (3e68 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3e52:	b510      	push	{r4, lr}
    3e54:	6812      	ldr	r2, [r2, #0]
    3e56:	b112      	cbz	r2, 3e5e <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e5c:	4710      	bx	r2
    3e5e:	217d      	movs	r1, #125	; 0x7d
    3e60:	2004      	movs	r0, #4
    3e62:	f7ff ff59 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e66:	0000      	.short	0x0000
    3e68:	20000d18 	.word	0x20000d18

00003e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3e6c:	4a05      	ldr	r2, [pc, #20]	; (3e84 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3e6e:	b510      	push	{r4, lr}
    3e70:	6892      	ldr	r2, [r2, #8]
    3e72:	b112      	cbz	r2, 3e7a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3e78:	4710      	bx	r2
    3e7a:	2189      	movs	r1, #137	; 0x89
    3e7c:	2004      	movs	r0, #4
    3e7e:	f7ff ff4b 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e82:	0000      	.short	0x0000
    3e84:	20000d18 	.word	0x20000d18

00003e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3e88:	4805      	ldr	r0, [pc, #20]	; (3ea0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3e8a:	6801      	ldr	r1, [r0, #0]
    3e8c:	b129      	cbz	r1, 3e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e8e:	6841      	ldr	r1, [r0, #4]
    3e90:	b119      	cbz	r1, 3e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e92:	6880      	ldr	r0, [r0, #8]
    3e94:	b108      	cbz	r0, 3e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3e96:	2001      	movs	r0, #1
    3e98:	4770      	bx	lr
    3e9a:	2000      	movs	r0, #0
    3e9c:	4770      	bx	lr
    3e9e:	0000      	.short	0x0000
    3ea0:	20000d18 	.word	0x20000d18

00003ea4 <sdc_rand_source_register>:
    3ea4:	4902      	ldr	r1, [pc, #8]	; (3eb0 <sdc_rand_source_register+0xc>)
    3ea6:	c80d      	ldmia	r0, {r0, r2, r3}
    3ea8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3eac:	2000      	movs	r0, #0
    3eae:	4770      	bx	lr
    3eb0:	20000d18 	.word	0x20000d18

00003eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eb6:	4c12      	ldr	r4, [pc, #72]	; (3f00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3eb8:	2600      	movs	r6, #0
    3eba:	6825      	ldr	r5, [r4, #0]
    3ebc:	e011      	b.n	3ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3ebe:	9800      	ldr	r0, [sp, #0]
    3ec0:	2802      	cmp	r0, #2
    3ec2:	d002      	beq.n	3eca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3ec4:	2803      	cmp	r0, #3
    3ec6:	d10c      	bne.n	3ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3ec8:	e006      	b.n	3ed8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3eca:	6820      	ldr	r0, [r4, #0]
    3ecc:	b110      	cbz	r0, 3ed4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3ece:	2000      	movs	r0, #0
    3ed0:	6026      	str	r6, [r4, #0]
    3ed2:	e005      	b.n	3ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3ed4:	2128      	movs	r1, #40	; 0x28
    3ed6:	e00c      	b.n	3ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3ed8:	6820      	ldr	r0, [r4, #0]
    3eda:	b168      	cbz	r0, 3ef8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3edc:	2001      	movs	r0, #1
    3ede:	6026      	str	r6, [r4, #0]
    3ee0:	47a8      	blx	r5
    3ee2:	4668      	mov	r0, sp
    3ee4:	f000 fc88 	bl	47f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3ee8:	2800      	cmp	r0, #0
    3eea:	d0e8      	beq.n	3ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3eec:	2805      	cmp	r0, #5
    3eee:	d005      	beq.n	3efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3ef0:	2135      	movs	r1, #53	; 0x35
    3ef2:	2004      	movs	r0, #4
    3ef4:	f7ff ff10 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ef8:	212d      	movs	r1, #45	; 0x2d
    3efa:	e7fa      	b.n	3ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3efe:	0000      	.short	0x0000
    3f00:	20000060 	.word	0x20000060
    3f04:	b570      	push	{r4, r5, r6, lr}
    3f06:	4c14      	ldr	r4, [pc, #80]	; (3f58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    3f08:	4605      	mov	r5, r0
    3f0a:	7820      	ldrb	r0, [r4, #0]
    3f0c:	b140      	cbz	r0, 3f20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3f0e:	78a2      	ldrb	r2, [r4, #2]
    3f10:	1c61      	adds	r1, r4, #1
    3f12:	4628      	mov	r0, r5
    3f14:	1c92      	adds	r2, r2, #2
    3f16:	f008 fb07 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3f1a:	2000      	movs	r0, #0
    3f1c:	7020      	strb	r0, [r4, #0]
    3f1e:	e013      	b.n	3f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3f20:	480e      	ldr	r0, [pc, #56]	; (3f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f22:	f006 feb1 	bl	ac88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3f26:	2800      	cmp	r0, #0
    3f28:	d00f      	beq.n	3f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f2a:	480c      	ldr	r0, [pc, #48]	; (3f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f2c:	7800      	ldrb	r0, [r0, #0]
    3f2e:	2814      	cmp	r0, #20
    3f30:	d104      	bne.n	3f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    3f32:	210a      	movs	r1, #10
    3f34:	203e      	movs	r0, #62	; 0x3e
    3f36:	f008 fc48 	bl	c7ca <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3f3a:	b138      	cbz	r0, 3f4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    3f3c:	4907      	ldr	r1, [pc, #28]	; (3f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f3e:	4628      	mov	r0, r5
    3f40:	f008 fca1 	bl	c886 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3f44:	2800      	cmp	r0, #0
    3f46:	d000      	beq.n	3f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    3f48:	2001      	movs	r0, #1
    3f4a:	bd70      	pop	{r4, r5, r6, pc}
    3f4c:	4903      	ldr	r1, [pc, #12]	; (3f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    3f4e:	4628      	mov	r0, r5
    3f50:	f008 fed6 	bl	cd00 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3f54:	e7f8      	b.n	3f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3f56:	0000      	.short	0x0000
    3f58:	20000e2c 	.word	0x20000e2c
    3f5c:	20000d24 	.word	0x20000d24
    3f60:	b570      	push	{r4, r5, r6, lr}
    3f62:	780a      	ldrb	r2, [r1, #0]
    3f64:	7082      	strb	r2, [r0, #2]
    3f66:	b33a      	cbz	r2, 3fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3f68:	2a01      	cmp	r2, #1
    3f6a:	d825      	bhi.n	3fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    3f6c:	2313      	movs	r3, #19
    3f6e:	7003      	strb	r3, [r0, #0]
    3f70:	2300      	movs	r3, #0
    3f72:	e00a      	b.n	3f8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    3f74:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3f78:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3f7c:	78a6      	ldrb	r6, [r4, #2]
    3f7e:	70ee      	strb	r6, [r5, #3]
    3f80:	8864      	ldrh	r4, [r4, #2]
    3f82:	0a24      	lsrs	r4, r4, #8
    3f84:	1c5b      	adds	r3, r3, #1
    3f86:	712c      	strb	r4, [r5, #4]
    3f88:	b2db      	uxtb	r3, r3
    3f8a:	4293      	cmp	r3, r2
    3f8c:	d3f2      	bcc.n	3f74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    3f8e:	2300      	movs	r3, #0
    3f90:	e00b      	b.n	3faa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    3f92:	bf00      	nop
    3f94:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3f98:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3f9c:	792e      	ldrb	r6, [r5, #4]
    3f9e:	7166      	strb	r6, [r4, #5]
    3fa0:	88ad      	ldrh	r5, [r5, #4]
    3fa2:	0a2d      	lsrs	r5, r5, #8
    3fa4:	1c5b      	adds	r3, r3, #1
    3fa6:	71a5      	strb	r5, [r4, #6]
    3fa8:	b2db      	uxtb	r3, r3
    3faa:	4293      	cmp	r3, r2
    3fac:	d3f2      	bcc.n	3f94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    3fae:	2101      	movs	r1, #1
    3fb0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3fb4:	b2c0      	uxtb	r0, r0
    3fb6:	bd70      	pop	{r4, r5, r6, pc}
    3fb8:	2000      	movs	r0, #0
    3fba:	bd70      	pop	{r4, r5, r6, pc}

00003fbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3fbc:	2101      	movs	r1, #1
    3fbe:	4a0c      	ldr	r2, [pc, #48]	; (3ff0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3fc0:	2840      	cmp	r0, #64	; 0x40
    3fc2:	d20c      	bcs.n	3fde <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3fc4:	2820      	cmp	r0, #32
    3fc6:	d803      	bhi.n	3fd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3fc8:	1e40      	subs	r0, r0, #1
    3fca:	4081      	lsls	r1, r0
    3fcc:	6810      	ldr	r0, [r2, #0]
    3fce:	e002      	b.n	3fd6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3fd0:	3821      	subs	r0, #33	; 0x21
    3fd2:	4081      	lsls	r1, r0
    3fd4:	6850      	ldr	r0, [r2, #4]
    3fd6:	4201      	tst	r1, r0
    3fd8:	d107      	bne.n	3fea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3fda:	2000      	movs	r0, #0
    3fdc:	4770      	bx	lr
    3fde:	28ff      	cmp	r0, #255	; 0xff
    3fe0:	d003      	beq.n	3fea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3fe2:	3840      	subs	r0, #64	; 0x40
    3fe4:	4081      	lsls	r1, r0
    3fe6:	6890      	ldr	r0, [r2, #8]
    3fe8:	e7f5      	b.n	3fd6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3fea:	2001      	movs	r0, #1
    3fec:	4770      	bx	lr
    3fee:	0000      	.short	0x0000
    3ff0:	20000064 	.word	0x20000064

00003ff4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3ff4:	2101      	movs	r1, #1
    3ff6:	1e40      	subs	r0, r0, #1
    3ff8:	4081      	lsls	r1, r0
    3ffa:	4804      	ldr	r0, [pc, #16]	; (400c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3ffc:	68c0      	ldr	r0, [r0, #12]
    3ffe:	4201      	tst	r1, r0
    4000:	d001      	beq.n	4006 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4002:	2001      	movs	r0, #1
    4004:	4770      	bx	lr
    4006:	2000      	movs	r0, #0
    4008:	4770      	bx	lr
    400a:	0000      	.short	0x0000
    400c:	20000064 	.word	0x20000064

00004010 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4010:	4901      	ldr	r1, [pc, #4]	; (4018 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4012:	6800      	ldr	r0, [r0, #0]
    4014:	60c8      	str	r0, [r1, #12]
    4016:	4770      	bx	lr
    4018:	20000064 	.word	0x20000064

0000401c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    401c:	4904      	ldr	r1, [pc, #16]	; (4030 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    401e:	6802      	ldr	r2, [r0, #0]
    4020:	6840      	ldr	r0, [r0, #4]
    4022:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4026:	600a      	str	r2, [r1, #0]
    4028:	4a02      	ldr	r2, [pc, #8]	; (4034 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    402a:	4310      	orrs	r0, r2
    402c:	6048      	str	r0, [r1, #4]
    402e:	4770      	bx	lr
    4030:	20000064 	.word	0x20000064
    4034:	024007f8 	.word	0x024007f8

00004038 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4038:	4901      	ldr	r1, [pc, #4]	; (4040 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    403a:	6800      	ldr	r0, [r0, #0]
    403c:	6088      	str	r0, [r1, #8]
    403e:	4770      	bx	lr
    4040:	20000064 	.word	0x20000064

00004044 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4044:	4805      	ldr	r0, [pc, #20]	; (405c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4046:	f04f 31ff 	mov.w	r1, #4294967295
    404a:	6001      	str	r1, [r0, #0]
    404c:	0cc9      	lsrs	r1, r1, #19
    404e:	6041      	str	r1, [r0, #4]
    4050:	2100      	movs	r1, #0
    4052:	6081      	str	r1, [r0, #8]
    4054:	211f      	movs	r1, #31
    4056:	60c1      	str	r1, [r0, #12]
    4058:	4770      	bx	lr
    405a:	0000      	.short	0x0000
    405c:	20000064 	.word	0x20000064

00004060 <sdc_hci_cmd_cb_reset>:
    4060:	b510      	push	{r4, lr}
    4062:	f7ff ffef 	bl	4044 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4066:	f00a ffbf 	bl	efe8 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    406a:	4604      	mov	r4, r0
    406c:	4802      	ldr	r0, [pc, #8]	; (4078 <sdc_hci_cmd_cb_reset+0x18>)
    406e:	6800      	ldr	r0, [r0, #0]
    4070:	b100      	cbz	r0, 4074 <sdc_hci_cmd_cb_reset+0x14>
    4072:	4780      	blx	r0
    4074:	4620      	mov	r0, r4
    4076:	bd10      	pop	{r4, pc}
    4078:	20000074 	.word	0x20000074

0000407c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    407c:	4901      	ldr	r1, [pc, #4]	; (4084 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    407e:	6008      	str	r0, [r1, #0]
    4080:	4770      	bx	lr
    4082:	0000      	.short	0x0000
    4084:	20000074 	.word	0x20000074

00004088 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4088:	2102      	movs	r1, #2
    408a:	8001      	strh	r1, [r0, #0]
    408c:	8041      	strh	r1, [r0, #2]
    408e:	2100      	movs	r1, #0
    4090:	7101      	strb	r1, [r0, #4]
    4092:	21df      	movs	r1, #223	; 0xdf
    4094:	7141      	strb	r1, [r0, #5]
    4096:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    409a:	80c1      	strh	r1, [r0, #6]
    409c:	4901      	ldr	r1, [pc, #4]	; (40a4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    409e:	6081      	str	r1, [r0, #8]
    40a0:	2000      	movs	r0, #0
    40a2:	4770      	bx	lr
    40a4:	667c1fd6 	.word	0x667c1fd6

000040a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    40a8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    40aa:	4604      	mov	r4, r0
    40ac:	4669      	mov	r1, sp
    40ae:	f009 fae1 	bl	d674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    40b2:	b170      	cbz	r0, 40d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    40b4:	f240 215a 	movw	r1, #602	; 0x25a
    40b8:	e008      	b.n	40cc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    40ba:	bf00      	nop
    40bc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    40c0:	4621      	mov	r1, r4
    40c2:	f000 f8a7 	bl	4214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    40c6:	b120      	cbz	r0, 40d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    40c8:	f240 215f 	movw	r1, #607	; 0x25f
    40cc:	2017      	movs	r0, #23
    40ce:	f7ff fe23 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40d2:	4668      	mov	r0, sp
    40d4:	f000 f850 	bl	4178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    40d8:	2800      	cmp	r0, #0
    40da:	d0ef      	beq.n	40bc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    40dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000040e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    40e0:	b510      	push	{r4, lr}
    40e2:	b120      	cbz	r0, 40ee <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    40e4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    40e8:	2017      	movs	r0, #23
    40ea:	f7ff fe15 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ee:	4801      	ldr	r0, [pc, #4]	; (40f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    40f0:	7800      	ldrb	r0, [r0, #0]
    40f2:	bd10      	pop	{r4, pc}
    40f4:	20000f30 	.word	0x20000f30

000040f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    40f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40fa:	4605      	mov	r5, r0
    40fc:	7808      	ldrb	r0, [r1, #0]
    40fe:	784a      	ldrb	r2, [r1, #1]
    4100:	4290      	cmp	r0, r2
    4102:	d902      	bls.n	410a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    4104:	f240 1163 	movw	r1, #355	; 0x163
    4108:	e00a      	b.n	4120 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    410a:	9500      	str	r5, [sp, #0]
    410c:	b15d      	cbz	r5, 4126 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    410e:	2600      	movs	r6, #0
    4110:	1ce8      	adds	r0, r5, #3
    4112:	784c      	ldrb	r4, [r1, #1]
    4114:	f020 0003 	bic.w	r0, r0, #3
    4118:	42a8      	cmp	r0, r5
    411a:	d006      	beq.n	412a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    411c:	f240 1179 	movw	r1, #377	; 0x179
    4120:	2017      	movs	r0, #23
    4122:	f7ff fdf9 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4126:	2601      	movs	r6, #1
    4128:	e7f2      	b.n	4110 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    412a:	4f12      	ldr	r7, [pc, #72]	; (4174 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    412c:	4631      	mov	r1, r6
    412e:	4668      	mov	r0, sp
    4130:	703c      	strb	r4, [r7, #0]
    4132:	f000 f8e1 	bl	42f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    4136:	2000      	movs	r0, #0
    4138:	4603      	mov	r3, r0
    413a:	9900      	ldr	r1, [sp, #0]
    413c:	1cc9      	adds	r1, r1, #3
    413e:	f021 0103 	bic.w	r1, r1, #3
    4142:	9100      	str	r1, [sp, #0]
    4144:	b966      	cbnz	r6, 4160 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    4146:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    414a:	6091      	str	r1, [r2, #8]
    414c:	2100      	movs	r1, #0
    414e:	e005      	b.n	415c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4150:	f8d2 c008 	ldr.w	ip, [r2, #8]
    4154:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4158:	1c49      	adds	r1, r1, #1
    415a:	b2c9      	uxtb	r1, r1
    415c:	42a1      	cmp	r1, r4
    415e:	d3f7      	bcc.n	4150 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4160:	9900      	ldr	r1, [sp, #0]
    4162:	1c40      	adds	r0, r0, #1
    4164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4168:	9100      	str	r1, [sp, #0]
    416a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    416e:	d0e4      	beq.n	413a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    4170:	1b48      	subs	r0, r1, r5
    4172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4174:	20000f30 	.word	0x20000f30

00004178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4178:	b570      	push	{r4, r5, r6, lr}
    417a:	4604      	mov	r4, r0
    417c:	f009 facf 	bl	d71e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4180:	b108      	cbz	r0, 4186 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4182:	2010      	movs	r0, #16
    4184:	bd70      	pop	{r4, r5, r6, pc}
    4186:	7825      	ldrb	r5, [r4, #0]
    4188:	f000 f8f2 	bl	4370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    418c:	4602      	mov	r2, r0
    418e:	480c      	ldr	r0, [pc, #48]	; (41c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4190:	8861      	ldrh	r1, [r4, #2]
    4192:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4196:	e00e      	b.n	41b6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4198:	6883      	ldr	r3, [r0, #8]
    419a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    419e:	b143      	cbz	r3, 41b2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    41a0:	1c4a      	adds	r2, r1, #1
    41a2:	8062      	strh	r2, [r4, #2]
    41a4:	80a1      	strh	r1, [r4, #4]
    41a6:	6880      	ldr	r0, [r0, #8]
    41a8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    41ac:	60a0      	str	r0, [r4, #8]
    41ae:	2000      	movs	r0, #0
    41b0:	bd70      	pop	{r4, r5, r6, pc}
    41b2:	1c49      	adds	r1, r1, #1
    41b4:	b289      	uxth	r1, r1
    41b6:	4291      	cmp	r1, r2
    41b8:	d3ee      	bcc.n	4198 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    41ba:	8061      	strh	r1, [r4, #2]
    41bc:	2005      	movs	r0, #5
    41be:	bd70      	pop	{r4, r5, r6, pc}
    41c0:	20000f30 	.word	0x20000f30

000041c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    41c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41c8:	b949      	cbnz	r1, 41de <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    41ca:	4c11      	ldr	r4, [pc, #68]	; (4210 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    41cc:	2700      	movs	r7, #0
    41ce:	463b      	mov	r3, r7
    41d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    41d4:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    41d8:	f814 c001 	ldrb.w	ip, [r4, r1]
    41dc:	e00d      	b.n	41fa <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    41de:	2000      	movs	r0, #0
    41e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41e4:	19dc      	adds	r4, r3, r7
    41e6:	f8d5 e008 	ldr.w	lr, [r5, #8]
    41ea:	b2a4      	uxth	r4, r4
    41ec:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    41f0:	f1be 0f00 	cmp.w	lr, #0
    41f4:	d004      	beq.n	4200 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    41f6:	1c5b      	adds	r3, r3, #1
    41f8:	b29b      	uxth	r3, r3
    41fa:	459c      	cmp	ip, r3
    41fc:	d8f2      	bhi.n	41e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    41fe:	4634      	mov	r4, r6
    4200:	8004      	strh	r4, [r0, #0]
    4202:	4620      	mov	r0, r4
    4204:	42b4      	cmp	r4, r6
    4206:	d0ea      	beq.n	41de <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    420c:	f000 b82c 	b.w	4268 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    4210:	20000f30 	.word	0x20000f30

00004214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4214:	b570      	push	{r4, r5, r6, lr}
    4216:	4606      	mov	r6, r0
    4218:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    421c:	f243 0502 	movw	r5, #12290	; 0x3002
    4220:	38ff      	subs	r0, #255	; 0xff
    4222:	d01a      	beq.n	425a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4224:	b109      	cbz	r1, 422a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    4226:	2007      	movs	r0, #7
    4228:	bd70      	pop	{r4, r5, r6, pc}
    422a:	4630      	mov	r0, r6
    422c:	f000 f854 	bl	42d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    4230:	0004      	movs	r4, r0
    4232:	d012      	beq.n	425a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    4234:	480a      	ldr	r0, [pc, #40]	; (4260 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    4236:	4621      	mov	r1, r4
    4238:	6802      	ldr	r2, [r0, #0]
    423a:	4630      	mov	r0, r6
    423c:	4790      	blx	r2
    423e:	4d09      	ldr	r5, [pc, #36]	; (4264 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    4240:	2000      	movs	r0, #0
    4242:	68a9      	ldr	r1, [r5, #8]
    4244:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    4248:	f000 f888 	bl	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    424c:	4602      	mov	r2, r0
    424e:	4621      	mov	r1, r4
    4250:	6868      	ldr	r0, [r5, #4]
    4252:	f009 f9f9 	bl	d648 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4256:	2000      	movs	r0, #0
    4258:	bd70      	pop	{r4, r5, r6, pc}
    425a:	4628      	mov	r0, r5
    425c:	bd70      	pop	{r4, r5, r6, pc}
    425e:	0000      	.short	0x0000
    4260:	00004384 	.word	0x00004384
    4264:	20000f30 	.word	0x20000f30
    4268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    426c:	4690      	mov	r8, r2
    426e:	460e      	mov	r6, r1
    4270:	4607      	mov	r7, r0
    4272:	f009 fa0f 	bl	d694 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    4276:	b148      	cbz	r0, 428c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    4278:	4815      	ldr	r0, [pc, #84]	; (42d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    427a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    427e:	68a8      	ldr	r0, [r5, #8]
    4280:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4284:	b128      	cbz	r0, 4292 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    4286:	f44f 719d 	mov.w	r1, #314	; 0x13a
    428a:	e014      	b.n	42b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    428c:	f240 1139 	movw	r1, #313	; 0x139
    4290:	e011      	b.n	42b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4292:	6868      	ldr	r0, [r5, #4]
    4294:	2800      	cmp	r0, #0
    4296:	d018      	beq.n	42ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    4298:	4630      	mov	r0, r6
    429a:	f000 f85f 	bl	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    429e:	4601      	mov	r1, r0
    42a0:	6868      	ldr	r0, [r5, #4]
    42a2:	f009 f983 	bl	d5ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42a6:	0004      	movs	r4, r0
    42a8:	d00e      	beq.n	42c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    42aa:	68a8      	ldr	r0, [r5, #8]
    42ac:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    42b0:	b126      	cbz	r6, 42bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    42b2:	f240 1145 	movw	r1, #325	; 0x145
    42b6:	2017      	movs	r0, #23
    42b8:	f7ff fd2e 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42bc:	4805      	ldr	r0, [pc, #20]	; (42d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    42be:	4642      	mov	r2, r8
    42c0:	4621      	mov	r1, r4
    42c2:	6803      	ldr	r3, [r0, #0]
    42c4:	4638      	mov	r0, r7
    42c6:	4798      	blx	r3
    42c8:	4620      	mov	r0, r4
    42ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42ce:	0000      	.short	0x0000
    42d0:	20000f30 	.word	0x20000f30
    42d4:	00004380 	.word	0x00004380
    42d8:	b570      	push	{r4, r5, r6, lr}
    42da:	460c      	mov	r4, r1
    42dc:	4605      	mov	r5, r0
    42de:	f009 f9d9 	bl	d694 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    42e2:	2800      	cmp	r0, #0
    42e4:	d005      	beq.n	42f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    42e6:	4803      	ldr	r0, [pc, #12]	; (42f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    42e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    42ec:	6880      	ldr	r0, [r0, #8]
    42ee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    42f2:	bd70      	pop	{r4, r5, r6, pc}
    42f4:	20000f30 	.word	0x20000f30
    42f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    42fc:	4e16      	ldr	r6, [pc, #88]	; (4358 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    42fe:	4688      	mov	r8, r1
    4300:	4605      	mov	r5, r0
    4302:	2400      	movs	r4, #0
    4304:	6828      	ldr	r0, [r5, #0]
    4306:	1cc0      	adds	r0, r0, #3
    4308:	f020 0003 	bic.w	r0, r0, #3
    430c:	6028      	str	r0, [r5, #0]
    430e:	4620      	mov	r0, r4
    4310:	f000 f824 	bl	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4314:	5d31      	ldrb	r1, [r6, r4]
    4316:	4348      	muls	r0, r1
    4318:	f1b8 0f00 	cmp.w	r8, #0
    431c:	d001      	beq.n	4322 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    431e:	2200      	movs	r2, #0
    4320:	e000      	b.n	4324 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    4322:	682a      	ldr	r2, [r5, #0]
    4324:	4601      	mov	r1, r0
    4326:	9200      	str	r2, [sp, #0]
    4328:	b132      	cbz	r2, 4338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    432a:	2700      	movs	r7, #0
    432c:	ea4f 000d 	mov.w	r0, sp
    4330:	f009 f969 	bl	d606 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4334:	b11f      	cbz	r7, 433e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    4336:	e006      	b.n	4346 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    4338:	2701      	movs	r7, #1
    433a:	2000      	movs	r0, #0
    433c:	e7f8      	b.n	4330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    433e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    4342:	9a00      	ldr	r2, [sp, #0]
    4344:	604a      	str	r2, [r1, #4]
    4346:	6829      	ldr	r1, [r5, #0]
    4348:	1c64      	adds	r4, r4, #1
    434a:	4408      	add	r0, r1
    434c:	6028      	str	r0, [r5, #0]
    434e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    4352:	d0d7      	beq.n	4304 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    4354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4358:	20000f30 	.word	0x20000f30
    435c:	4903      	ldr	r1, [pc, #12]	; (436c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    435e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4362:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4366:	1cc0      	adds	r0, r0, #3
    4368:	4008      	ands	r0, r1
    436a:	4770      	bx	lr
    436c:	0000437c 	.word	0x0000437c
    4370:	4801      	ldr	r0, [pc, #4]	; (4378 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    4372:	7800      	ldrb	r0, [r0, #0]
    4374:	4770      	bx	lr
    4376:	0000      	.short	0x0000
    4378:	20000f30 	.word	0x20000f30
    437c:	000001e0 	.word	0x000001e0
    4380:	0000d6a9 	.word	0x0000d6a9
    4384:	0000e713 	.word	0x0000e713

00004388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4388:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    438c:	4c26      	ldr	r4, [pc, #152]	; (4428 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    438e:	4680      	mov	r8, r0
    4390:	b081      	sub	sp, #4
    4392:	6820      	ldr	r0, [r4, #0]
    4394:	469a      	mov	sl, r3
    4396:	4693      	mov	fp, r2
    4398:	b158      	cbz	r0, 43b2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    439a:	7a02      	ldrb	r2, [r0, #8]
    439c:	4542      	cmp	r2, r8
    439e:	d903      	bls.n	43a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    43a0:	6841      	ldr	r1, [r0, #4]
    43a2:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    43a6:	b140      	cbz	r0, 43ba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    43a8:	f243 0002 	movw	r0, #12290	; 0x3002
    43ac:	b005      	add	sp, #20
    43ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43b2:	21a5      	movs	r1, #165	; 0xa5
    43b4:	2018      	movs	r0, #24
    43b6:	f7ff fcaf 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43ba:	4619      	mov	r1, r3
    43bc:	9802      	ldr	r0, [sp, #8]
    43be:	f009 f98b 	bl	d6d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    43c2:	b286      	uxth	r6, r0
    43c4:	4658      	mov	r0, fp
    43c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    43c8:	f009 f97d 	bl	d6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    43cc:	b285      	uxth	r5, r0
    43ce:	1970      	adds	r0, r6, r5
    43d0:	1d00      	adds	r0, r0, #4
    43d2:	b287      	uxth	r7, r0
    43d4:	6820      	ldr	r0, [r4, #0]
    43d6:	46a1      	mov	r9, r4
    43d8:	4639      	mov	r1, r7
    43da:	6800      	ldr	r0, [r0, #0]
    43dc:	f009 f8e6 	bl	d5ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    43e0:	0004      	movs	r4, r0
    43e2:	d01f      	beq.n	4424 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    43e4:	8067      	strh	r7, [r4, #2]
    43e6:	8025      	strh	r5, [r4, #0]
    43e8:	4629      	mov	r1, r5
    43ea:	1d20      	adds	r0, r4, #4
    43ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    43ee:	4607      	mov	r7, r0
    43f0:	465a      	mov	r2, fp
    43f2:	2301      	movs	r3, #1
    43f4:	9500      	str	r5, [sp, #0]
    43f6:	f009 f839 	bl	d46c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    43fa:	8820      	ldrh	r0, [r4, #0]
    43fc:	4631      	mov	r1, r6
    43fe:	4438      	add	r0, r7
    4400:	2301      	movs	r3, #1
    4402:	9a02      	ldr	r2, [sp, #8]
    4404:	f8cd a000 	str.w	sl, [sp]
    4408:	f009 f830 	bl	d46c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    440c:	8820      	ldrh	r0, [r4, #0]
    440e:	19c1      	adds	r1, r0, r7
    4410:	4638      	mov	r0, r7
    4412:	f009 f85c 	bl	d4ce <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4416:	f8d9 0000 	ldr.w	r0, [r9]
    441a:	6841      	ldr	r1, [r0, #4]
    441c:	2000      	movs	r0, #0
    441e:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    4422:	e7c3      	b.n	43ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4424:	2004      	movs	r0, #4
    4426:	e7c1      	b.n	43ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4428:	20000078 	.word	0x20000078

0000442c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    442c:	b570      	push	{r4, r5, r6, lr}
    442e:	4c14      	ldr	r4, [pc, #80]	; (4480 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    4430:	6823      	ldr	r3, [r4, #0]
    4432:	b18b      	cbz	r3, 4458 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4434:	7a19      	ldrb	r1, [r3, #8]
    4436:	4281      	cmp	r1, r0
    4438:	d912      	bls.n	4460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    443a:	685a      	ldr	r2, [r3, #4]
    443c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    4440:	b171      	cbz	r1, 4460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4442:	2500      	movs	r5, #0
    4444:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4448:	884a      	ldrh	r2, [r1, #2]
    444a:	6818      	ldr	r0, [r3, #0]
    444c:	f009 f8fc 	bl	d648 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4450:	6821      	ldr	r1, [r4, #0]
    4452:	2000      	movs	r0, #0
    4454:	7a0a      	ldrb	r2, [r1, #8]
    4456:	e00c      	b.n	4472 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4458:	21c8      	movs	r1, #200	; 0xc8
    445a:	2018      	movs	r0, #24
    445c:	f7ff fc5c 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4460:	f243 0002 	movw	r0, #12290	; 0x3002
    4464:	bd70      	pop	{r4, r5, r6, pc}
    4466:	684b      	ldr	r3, [r1, #4]
    4468:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    446c:	b933      	cbnz	r3, 447c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    446e:	1c40      	adds	r0, r0, #1
    4470:	b2c0      	uxtb	r0, r0
    4472:	4282      	cmp	r2, r0
    4474:	d8f7      	bhi.n	4466 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4476:	6808      	ldr	r0, [r1, #0]
    4478:	f009 f8db 	bl	d632 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    447c:	2000      	movs	r0, #0
    447e:	bd70      	pop	{r4, r5, r6, pc}
    4480:	20000078 	.word	0x20000078

00004484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4488:	460d      	mov	r5, r1
    448a:	0004      	movs	r4, r0
    448c:	4690      	mov	r8, r2
    448e:	f04f 0600 	mov.w	r6, #0
    4492:	d009      	beq.n	44a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4494:	2700      	movs	r7, #0
    4496:	1ce0      	adds	r0, r4, #3
    4498:	f020 0003 	bic.w	r0, r0, #3
    449c:	42a0      	cmp	r0, r4
    449e:	d005      	beq.n	44ac <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    44a0:	2186      	movs	r1, #134	; 0x86
    44a2:	2018      	movs	r0, #24
    44a4:	f7ff fc38 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44a8:	2701      	movs	r7, #1
    44aa:	e7f4      	b.n	4496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    44ac:	b1cd      	cbz	r5, 44e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    44ae:	4611      	mov	r1, r2
    44b0:	2000      	movs	r0, #0
    44b2:	f009 f8a8 	bl	d606 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44b6:	300c      	adds	r0, #12
    44b8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    44bc:	b98f      	cbnz	r7, 44e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    44be:	4f0a      	ldr	r7, [pc, #40]	; (44e8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    44c0:	f104 000c 	add.w	r0, r4, #12
    44c4:	00aa      	lsls	r2, r5, #2
    44c6:	603c      	str	r4, [r7, #0]
    44c8:	7225      	strb	r5, [r4, #8]
    44ca:	6060      	str	r0, [r4, #4]
    44cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    44d0:	6020      	str	r0, [r4, #0]
    44d2:	2100      	movs	r1, #0
    44d4:	6860      	ldr	r0, [r4, #4]
    44d6:	f008 f8a1 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    44da:	4641      	mov	r1, r8
    44dc:	6838      	ldr	r0, [r7, #0]
    44de:	f009 f892 	bl	d606 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44e2:	4630      	mov	r0, r6
    44e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44e8:	20000078 	.word	0x20000078

000044ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    44ec:	b570      	push	{r4, r5, r6, lr}
    44ee:	4d08      	ldr	r5, [pc, #32]	; (4510 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    44f0:	6828      	ldr	r0, [r5, #0]
    44f2:	2800      	cmp	r0, #0
    44f4:	d00a      	beq.n	450c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    44f6:	2400      	movs	r4, #0
    44f8:	e004      	b.n	4504 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    44fa:	4620      	mov	r0, r4
    44fc:	f7ff ff96 	bl	442c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    4500:	1c64      	adds	r4, r4, #1
    4502:	b2e4      	uxtb	r4, r4
    4504:	6828      	ldr	r0, [r5, #0]
    4506:	7a00      	ldrb	r0, [r0, #8]
    4508:	42a0      	cmp	r0, r4
    450a:	d8f6      	bhi.n	44fa <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    450c:	bd70      	pop	{r4, r5, r6, pc}
    450e:	0000      	.short	0x0000
    4510:	20000078 	.word	0x20000078

00004514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4514:	4909      	ldr	r1, [pc, #36]	; (453c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4516:	b510      	push	{r4, lr}
    4518:	4602      	mov	r2, r0
    451a:	6809      	ldr	r1, [r1, #0]
    451c:	2000      	movs	r0, #0
    451e:	b149      	cbz	r1, 4534 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    4520:	7a0b      	ldrb	r3, [r1, #8]
    4522:	4293      	cmp	r3, r2
    4524:	d905      	bls.n	4532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4526:	6849      	ldr	r1, [r1, #4]
    4528:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    452c:	2900      	cmp	r1, #0
    452e:	d000      	beq.n	4532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4530:	1d08      	adds	r0, r1, #4
    4532:	bd10      	pop	{r4, pc}
    4534:	21ee      	movs	r1, #238	; 0xee
    4536:	2018      	movs	r0, #24
    4538:	f7ff fbee 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    453c:	20000078 	.word	0x20000078

00004540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    4540:	490a      	ldr	r1, [pc, #40]	; (456c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    4542:	b510      	push	{r4, lr}
    4544:	4602      	mov	r2, r0
    4546:	6809      	ldr	r1, [r1, #0]
    4548:	2000      	movs	r0, #0
    454a:	b159      	cbz	r1, 4564 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    454c:	7a0b      	ldrb	r3, [r1, #8]
    454e:	4293      	cmp	r3, r2
    4550:	d907      	bls.n	4562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4552:	6849      	ldr	r1, [r1, #4]
    4554:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4558:	2900      	cmp	r1, #0
    455a:	d002      	beq.n	4562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    455c:	f831 0b04 	ldrh.w	r0, [r1], #4
    4560:	4408      	add	r0, r1
    4562:	bd10      	pop	{r4, pc}
    4564:	21fc      	movs	r1, #252	; 0xfc
    4566:	2018      	movs	r0, #24
    4568:	f7ff fbd6 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    456c:	20000078 	.word	0x20000078

00004570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    4570:	4801      	ldr	r0, [pc, #4]	; (4578 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    4572:	7840      	ldrb	r0, [r0, #1]
    4574:	4770      	bx	lr
    4576:	0000      	.short	0x0000
    4578:	2000007c 	.word	0x2000007c

0000457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    457c:	4801      	ldr	r0, [pc, #4]	; (4584 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    457e:	6840      	ldr	r0, [r0, #4]
    4580:	4770      	bx	lr
    4582:	0000      	.short	0x0000
    4584:	2000007c 	.word	0x2000007c

00004588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    458c:	460c      	mov	r4, r1
    458e:	4607      	mov	r7, r0
    4590:	4616      	mov	r6, r2
    4592:	211c      	movs	r1, #28
    4594:	4610      	mov	r0, r2
    4596:	460d      	mov	r5, r1
    4598:	4622      	mov	r2, r4
    459a:	f008 ffc2 	bl	d522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    459e:	4680      	mov	r8, r0
    45a0:	b157      	cbz	r7, 45b8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    45a2:	4638      	mov	r0, r7
    45a4:	4641      	mov	r1, r8
    45a6:	4632      	mov	r2, r6
    45a8:	462b      	mov	r3, r5
    45aa:	9400      	str	r4, [sp, #0]
    45ac:	f008 ff5e 	bl	d46c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    45b0:	4803      	ldr	r0, [pc, #12]	; (45c0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    45b2:	6047      	str	r7, [r0, #4]
    45b4:	7004      	strb	r4, [r0, #0]
    45b6:	7046      	strb	r6, [r0, #1]
    45b8:	4640      	mov	r0, r8
    45ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    45be:	0000      	.short	0x0000
    45c0:	2000007c 	.word	0x2000007c

000045c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    45c4:	4802      	ldr	r0, [pc, #8]	; (45d0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    45c6:	7842      	ldrb	r2, [r0, #1]
    45c8:	7801      	ldrb	r1, [r0, #0]
    45ca:	6840      	ldr	r0, [r0, #4]
    45cc:	f7ff bfdc 	b.w	4588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    45d0:	2000007c 	.word	0x2000007c
    45d4:	4909      	ldr	r1, [pc, #36]	; (45fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    45d6:	b510      	push	{r4, lr}
    45d8:	4807      	ldr	r0, [pc, #28]	; (45f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    45da:	6008      	str	r0, [r1, #0]
    45dc:	4b08      	ldr	r3, [pc, #32]	; (4600 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    45de:	2011      	movs	r0, #17
    45e0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    45e4:	2200      	movs	r2, #0
    45e6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    45ea:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    45ee:	1c40      	adds	r0, r0, #1
    45f0:	b2c0      	uxtb	r0, r0
    45f2:	2814      	cmp	r0, #20
    45f4:	d3f4      	bcc.n	45e0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    45f6:	bd10      	pop	{r4, pc}
    45f8:	fffe0000 	.word	0xfffe0000
    45fc:	4001f508 	.word	0x4001f508
    4600:	4001f000 	.word	0x4001f000
    4604:	b570      	push	{r4, r5, r6, lr}
    4606:	2420      	movs	r4, #32
    4608:	2100      	movs	r1, #0
    460a:	2301      	movs	r3, #1
    460c:	fa20 f201 	lsr.w	r2, r0, r1
    4610:	07d2      	lsls	r2, r2, #31
    4612:	d020      	beq.n	4656 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    4614:	b24a      	sxtb	r2, r1
    4616:	2a00      	cmp	r2, #0
    4618:	db10      	blt.n	463c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    461a:	bf00      	nop
    461c:	ea4f 1652 	mov.w	r6, r2, lsr #5
    4620:	ea4f 0686 	mov.w	r6, r6, lsl #2
    4624:	f002 051f 	and.w	r5, r2, #31
    4628:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    462c:	fa03 f505 	lsl.w	r5, r3, r5
    4630:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4634:	f3bf 8f4f 	dsb	sy
    4638:	f3bf 8f6f 	isb	sy
    463c:	db0b      	blt.n	4656 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    463e:	f002 051f 	and.w	r5, r2, #31
    4642:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4646:	ea4f 0282 	mov.w	r2, r2, lsl #2
    464a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    464e:	fa03 f505 	lsl.w	r5, r3, r5
    4652:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    4656:	f101 0101 	add.w	r1, r1, #1
    465a:	42a1      	cmp	r1, r4
    465c:	d3d6      	bcc.n	460c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    465e:	bd70      	pop	{r4, r5, r6, pc}
    4660:	b570      	push	{r4, r5, r6, lr}
    4662:	0042      	lsls	r2, r0, #1
    4664:	f04f 0100 	mov.w	r1, #0
    4668:	d501      	bpl.n	466e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    466a:	4a14      	ldr	r2, [pc, #80]	; (46bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    466c:	6011      	str	r1, [r2, #0]
    466e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4672:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4676:	429a      	cmp	r2, r3
    4678:	d003      	beq.n	4682 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    467a:	2166      	movs	r1, #102	; 0x66
    467c:	201b      	movs	r0, #27
    467e:	f7ff fb4b 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4682:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4686:	d014      	beq.n	46b2 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    4688:	4a0d      	ldr	r2, [pc, #52]	; (46c0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    468a:	2001      	movs	r0, #1
    468c:	6050      	str	r0, [r2, #4]
    468e:	1e83      	subs	r3, r0, #2
    4690:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4694:	4a0b      	ldr	r2, [pc, #44]	; (46c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    4696:	6090      	str	r0, [r2, #8]
    4698:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    469c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    46a0:	4c09      	ldr	r4, [pc, #36]	; (46c8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    46a2:	6021      	str	r1, [r4, #0]
    46a4:	1d25      	adds	r5, r4, #4
    46a6:	6028      	str	r0, [r5, #0]
    46a8:	6090      	str	r0, [r2, #8]
    46aa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    46ae:	6021      	str	r1, [r4, #0]
    46b0:	6028      	str	r0, [r5, #0]
    46b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46b6:	f7ff bf8d 	b.w	45d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    46ba:	0000      	.short	0x0000
    46bc:	4001e504 	.word	0x4001e504
    46c0:	4000e000 	.word	0x4000e000
    46c4:	4000f000 	.word	0x4000f000
    46c8:	4000f500 	.word	0x4000f500

000046cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    46cc:	b570      	push	{r4, r5, r6, lr}
    46ce:	4c0a      	ldr	r4, [pc, #40]	; (46f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    46d0:	460d      	mov	r5, r1
    46d2:	6020      	str	r0, [r4, #0]
    46d4:	f7ff ffc4 	bl	4660 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    46d8:	6820      	ldr	r0, [r4, #0]
    46da:	f7ff ff93 	bl	4604 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    46de:	f000 f877 	bl	47d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    46e2:	f7ff ff77 	bl	45d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    46e6:	f009 f80f 	bl	d708 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    46ea:	4628      	mov	r0, r5
    46ec:	f000 f8aa 	bl	4844 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    46f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46f4:	f000 b8c2 	b.w	487c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    46f8:	20000084 	.word	0x20000084

000046fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    46fc:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4700:	4e2f      	ldr	r6, [pc, #188]	; (47c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    4702:	4683      	mov	fp, r0
    4704:	6830      	ldr	r0, [r6, #0]
    4706:	9001      	str	r0, [sp, #4]
    4708:	2701      	movs	r7, #1
    470a:	482e      	ldr	r0, [pc, #184]	; (47c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    470c:	f007 fe63 	bl	c3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4710:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 47c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    4714:	b920      	cbnz	r0, 4720 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    4716:	2700      	movs	r7, #0
    4718:	f108 0001 	add.w	r0, r8, #1
    471c:	f007 fe72 	bl	c404 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4720:	4c29      	ldr	r4, [pc, #164]	; (47c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    4722:	2500      	movs	r5, #0
    4724:	f04f 0903 	mov.w	r9, #3
    4728:	2001      	movs	r0, #1
    472a:	6060      	str	r0, [r4, #4]
    472c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4730:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4734:	f8c6 b000 	str.w	fp, [r6]
    4738:	6020      	str	r0, [r4, #0]
    473a:	f8df a090 	ldr.w	sl, [pc, #144]	; 47cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    473e:	e017      	b.n	4770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4740:	f8da 0000 	ldr.w	r0, [sl]
    4744:	06c0      	lsls	r0, r0, #27
    4746:	d513      	bpl.n	4770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4748:	200e      	movs	r0, #14
    474a:	f008 ffce 	bl	d6ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    474e:	f3ef 8010 	mrs	r0, PRIMASK
    4752:	9000      	str	r0, [sp, #0]
    4754:	b672      	cpsid	i
    4756:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    475a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    475e:	b920      	cbnz	r0, 476a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4760:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4764:	b908      	cbnz	r0, 476a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4766:	f7ff f921 	bl	39ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    476a:	9800      	ldr	r0, [sp, #0]
    476c:	b900      	cbnz	r0, 4770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    476e:	b662      	cpsie	i
    4770:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4774:	b918      	cbnz	r0, 477e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4776:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    477a:	2800      	cmp	r0, #0
    477c:	d0e0      	beq.n	4740 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    477e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4782:	2800      	cmp	r0, #0
    4784:	d1d0      	bne.n	4728 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    4786:	b137      	cbz	r7, 4796 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4788:	9801      	ldr	r0, [sp, #4]
    478a:	6030      	str	r0, [r6, #0]
    478c:	f108 0001 	add.w	r0, r8, #1
    4790:	f007 fe21 	bl	c3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4794:	e011      	b.n	47ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    4796:	f108 0001 	add.w	r0, r8, #1
    479a:	f007 fe1c 	bl	c3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    479e:	2800      	cmp	r0, #0
    47a0:	d1ba      	bne.n	4718 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    47a2:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    47a6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    47aa:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    47ae:	200e      	movs	r0, #14
    47b0:	f008 ff9b 	bl	d6ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    47b4:	4803      	ldr	r0, [pc, #12]	; (47c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    47b6:	f007 fe25 	bl	c404 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    47ba:	2000      	movs	r0, #0
    47bc:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    47c0:	4000e504 	.word	0x4000e504
    47c4:	2000027f 	.word	0x2000027f
    47c8:	4000e000 	.word	0x4000e000
    47cc:	e000ed10 	.word	0xe000ed10

000047d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    47d0:	b510      	push	{r4, lr}
    47d2:	4808      	ldr	r0, [pc, #32]	; (47f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    47d4:	f007 fe12 	bl	c3fc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    47d8:	b108      	cbz	r0, 47de <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    47da:	2124      	movs	r1, #36	; 0x24
    47dc:	e006      	b.n	47ec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    47de:	4805      	ldr	r0, [pc, #20]	; (47f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    47e0:	1c40      	adds	r0, r0, #1
    47e2:	f007 fe0b 	bl	c3fc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    47e6:	2800      	cmp	r0, #0
    47e8:	d003      	beq.n	47f2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    47ea:	2128      	movs	r1, #40	; 0x28
    47ec:	201d      	movs	r0, #29
    47ee:	f7ff fa93 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47f2:	bd10      	pop	{r4, pc}
    47f4:	2000027f 	.word	0x2000027f

000047f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    47f8:	b570      	push	{r4, r5, r6, lr}
    47fa:	4911      	ldr	r1, [pc, #68]	; (4840 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    47fc:	680a      	ldr	r2, [r1, #0]
    47fe:	b1ea      	cbz	r2, 483c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4800:	2300      	movs	r3, #0
    4802:	461d      	mov	r5, r3
    4804:	2401      	movs	r4, #1
    4806:	684a      	ldr	r2, [r1, #4]
    4808:	1c52      	adds	r2, r2, #1
    480a:	604a      	str	r2, [r1, #4]
    480c:	2a0c      	cmp	r2, #12
    480e:	d300      	bcc.n	4812 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4810:	604d      	str	r5, [r1, #4]
    4812:	790e      	ldrb	r6, [r1, #4]
    4814:	fa04 f206 	lsl.w	r2, r4, r6
    4818:	680e      	ldr	r6, [r1, #0]
    481a:	4216      	tst	r6, r2
    481c:	d00b      	beq.n	4836 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    481e:	f3ef 8310 	mrs	r3, PRIMASK
    4822:	b672      	cpsid	i
    4824:	680c      	ldr	r4, [r1, #0]
    4826:	4394      	bics	r4, r2
    4828:	600c      	str	r4, [r1, #0]
    482a:	b903      	cbnz	r3, 482e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    482c:	b662      	cpsie	i
    482e:	6849      	ldr	r1, [r1, #4]
    4830:	6001      	str	r1, [r0, #0]
    4832:	2000      	movs	r0, #0
    4834:	bd70      	pop	{r4, r5, r6, pc}
    4836:	1c5b      	adds	r3, r3, #1
    4838:	2b0c      	cmp	r3, #12
    483a:	d3e4      	bcc.n	4806 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    483c:	2005      	movs	r0, #5
    483e:	bd70      	pop	{r4, r5, r6, pc}
    4840:	20000088 	.word	0x20000088

00004844 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4844:	4802      	ldr	r0, [pc, #8]	; (4850 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4846:	2100      	movs	r1, #0
    4848:	6001      	str	r1, [r0, #0]
    484a:	6041      	str	r1, [r0, #4]
    484c:	4770      	bx	lr
    484e:	0000      	.short	0x0000
    4850:	20000088 	.word	0x20000088

00004854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4854:	b510      	push	{r4, lr}
    4856:	4c08      	ldr	r4, [pc, #32]	; (4878 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4858:	7861      	ldrb	r1, [r4, #1]
    485a:	b109      	cbz	r1, 4860 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    485c:	200f      	movs	r0, #15
    485e:	bd10      	pop	{r4, pc}
    4860:	f7ff f830 	bl	38c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4864:	7020      	strb	r0, [r4, #0]
    4866:	28ff      	cmp	r0, #255	; 0xff
    4868:	d001      	beq.n	486e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    486a:	2000      	movs	r0, #0
    486c:	bd10      	pop	{r4, pc}
    486e:	2176      	movs	r1, #118	; 0x76
    4870:	201f      	movs	r0, #31
    4872:	f7ff fa51 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4876:	0000      	.short	0x0000
    4878:	20000090 	.word	0x20000090

0000487c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    487c:	4901      	ldr	r1, [pc, #4]	; (4884 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    487e:	2000      	movs	r0, #0
    4880:	7048      	strb	r0, [r1, #1]
    4882:	4770      	bx	lr
    4884:	20000090 	.word	0x20000090

00004888 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4888:	4806      	ldr	r0, [pc, #24]	; (48a4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    488a:	4a07      	ldr	r2, [pc, #28]	; (48a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    488c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    488e:	8852      	ldrh	r2, [r2, #2]
    4890:	4291      	cmp	r1, r2
    4892:	d104      	bne.n	489e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4894:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4898:	b108      	cbz	r0, 489e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    489a:	2000      	movs	r0, #0
    489c:	4770      	bx	lr
    489e:	2001      	movs	r0, #1
    48a0:	4770      	bx	lr
    48a2:	0000      	.short	0x0000
    48a4:	200010b4 	.word	0x200010b4
    48a8:	2000026c 	.word	0x2000026c

000048ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    48ac:	4901      	ldr	r1, [pc, #4]	; (48b4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    48ae:	8048      	strh	r0, [r1, #2]
    48b0:	4770      	bx	lr
    48b2:	0000      	.short	0x0000
    48b4:	2000026c 	.word	0x2000026c

000048b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    48b8:	4808      	ldr	r0, [pc, #32]	; (48dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    48ba:	4a09      	ldr	r2, [pc, #36]	; (48e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    48bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    48be:	8852      	ldrh	r2, [r2, #2]
    48c0:	4291      	cmp	r1, r2
    48c2:	d109      	bne.n	48d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    48c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    48c8:	8481      	strh	r1, [r0, #36]	; 0x24
    48ca:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    48ce:	b119      	cbz	r1, 48d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    48d0:	2100      	movs	r1, #0
    48d2:	7001      	strb	r1, [r0, #0]
    48d4:	2001      	movs	r0, #1
    48d6:	4770      	bx	lr
    48d8:	2000      	movs	r0, #0
    48da:	4770      	bx	lr
    48dc:	200010b4 	.word	0x200010b4
    48e0:	2000026c 	.word	0x2000026c

000048e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    48e4:	4807      	ldr	r0, [pc, #28]	; (4904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    48e6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    48ea:	2901      	cmp	r1, #1
    48ec:	d007      	beq.n	48fe <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    48ee:	2101      	movs	r1, #1
    48f0:	7001      	strb	r1, [r0, #0]
    48f2:	4805      	ldr	r0, [pc, #20]	; (4908 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    48f4:	4903      	ldr	r1, [pc, #12]	; (4904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    48f6:	8800      	ldrh	r0, [r0, #0]
    48f8:	8488      	strh	r0, [r1, #36]	; 0x24
    48fa:	2001      	movs	r0, #1
    48fc:	4770      	bx	lr
    48fe:	2000      	movs	r0, #0
    4900:	4770      	bx	lr
    4902:	0000      	.short	0x0000
    4904:	200010b4 	.word	0x200010b4
    4908:	2000026c 	.word	0x2000026c

0000490c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    490c:	4906      	ldr	r1, [pc, #24]	; (4928 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    490e:	4b07      	ldr	r3, [pc, #28]	; (492c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4910:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4912:	885b      	ldrh	r3, [r3, #2]
    4914:	429a      	cmp	r2, r3
    4916:	d105      	bne.n	4924 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4918:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    491c:	b112      	cbz	r2, 4924 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    491e:	6001      	str	r1, [r0, #0]
    4920:	2001      	movs	r0, #1
    4922:	4770      	bx	lr
    4924:	2000      	movs	r0, #0
    4926:	4770      	bx	lr
    4928:	200010b4 	.word	0x200010b4
    492c:	2000026c 	.word	0x2000026c

00004930 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4930:	4909      	ldr	r1, [pc, #36]	; (4958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4932:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4934:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4938:	3bff      	subs	r3, #255	; 0xff
    493a:	d002      	beq.n	4942 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    493c:	2100      	movs	r1, #0
    493e:	6001      	str	r1, [r0, #0]
    4940:	e007      	b.n	4952 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4942:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4946:	4904      	ldr	r1, [pc, #16]	; (4958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4948:	2a01      	cmp	r2, #1
    494a:	d002      	beq.n	4952 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    494c:	6001      	str	r1, [r0, #0]
    494e:	2001      	movs	r0, #1
    4950:	4770      	bx	lr
    4952:	2000      	movs	r0, #0
    4954:	4770      	bx	lr
    4956:	0000      	.short	0x0000
    4958:	200010b4 	.word	0x200010b4

0000495c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    495c:	4901      	ldr	r1, [pc, #4]	; (4964 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    495e:	8008      	strh	r0, [r1, #0]
    4960:	4770      	bx	lr
    4962:	0000      	.short	0x0000
    4964:	2000026c 	.word	0x2000026c

00004968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4968:	4905      	ldr	r1, [pc, #20]	; (4980 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    496a:	2000      	movs	r0, #0
    496c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4970:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4974:	8488      	strh	r0, [r1, #36]	; 0x24
    4976:	4903      	ldr	r1, [pc, #12]	; (4984 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4978:	8008      	strh	r0, [r1, #0]
    497a:	8048      	strh	r0, [r1, #2]
    497c:	4770      	bx	lr
    497e:	0000      	.short	0x0000
    4980:	200010b4 	.word	0x200010b4
    4984:	2000026c 	.word	0x2000026c
    4988:	4905      	ldr	r1, [pc, #20]	; (49a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    498a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    498c:	4282      	cmp	r2, r0
    498e:	d105      	bne.n	499c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4990:	2000      	movs	r0, #0
    4992:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4996:	f64f 70ff 	movw	r0, #65535	; 0xffff
    499a:	8488      	strh	r0, [r1, #36]	; 0x24
    499c:	4770      	bx	lr
    499e:	0000      	.short	0x0000
    49a0:	200010b4 	.word	0x200010b4

000049a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    49a4:	4a0a      	ldr	r2, [pc, #40]	; (49d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    49a6:	b110      	cbz	r0, 49ae <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    49a8:	2801      	cmp	r0, #1
    49aa:	d007      	beq.n	49bc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    49ac:	e00e      	b.n	49cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    49ae:	7850      	ldrb	r0, [r2, #1]
    49b0:	b160      	cbz	r0, 49cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    49b2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    49b6:	6008      	str	r0, [r1, #0]
    49b8:	88d0      	ldrh	r0, [r2, #6]
    49ba:	e004      	b.n	49c6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    49bc:	7810      	ldrb	r0, [r2, #0]
    49be:	b128      	cbz	r0, 49cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    49c0:	6890      	ldr	r0, [r2, #8]
    49c2:	6008      	str	r0, [r1, #0]
    49c4:	8990      	ldrh	r0, [r2, #12]
    49c6:	8088      	strh	r0, [r1, #4]
    49c8:	2001      	movs	r0, #1
    49ca:	4770      	bx	lr
    49cc:	2000      	movs	r0, #0
    49ce:	4770      	bx	lr
    49d0:	20000281 	.word	0x20000281

000049d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    49d4:	4a08      	ldr	r2, [pc, #32]	; (49f8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    49d6:	2301      	movs	r3, #1
    49d8:	b138      	cbz	r0, 49ea <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    49da:	2801      	cmp	r0, #1
    49dc:	d104      	bne.n	49e8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    49de:	7013      	strb	r3, [r2, #0]
    49e0:	6808      	ldr	r0, [r1, #0]
    49e2:	6090      	str	r0, [r2, #8]
    49e4:	8888      	ldrh	r0, [r1, #4]
    49e6:	8190      	strh	r0, [r2, #12]
    49e8:	4770      	bx	lr
    49ea:	7053      	strb	r3, [r2, #1]
    49ec:	6808      	ldr	r0, [r1, #0]
    49ee:	f8c2 0002 	str.w	r0, [r2, #2]
    49f2:	8888      	ldrh	r0, [r1, #4]
    49f4:	80d0      	strh	r0, [r2, #6]
    49f6:	4770      	bx	lr
    49f8:	20000281 	.word	0x20000281

000049fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    49fc:	4906      	ldr	r1, [pc, #24]	; (4a18 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    49fe:	b110      	cbz	r0, 4a06 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4a00:	2801      	cmp	r0, #1
    4a02:	d002      	beq.n	4a0a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4a04:	e005      	b.n	4a12 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a06:	7848      	ldrb	r0, [r1, #1]
    4a08:	e000      	b.n	4a0c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4a0a:	7808      	ldrb	r0, [r1, #0]
    4a0c:	b108      	cbz	r0, 4a12 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4a0e:	2001      	movs	r0, #1
    4a10:	4770      	bx	lr
    4a12:	2000      	movs	r0, #0
    4a14:	4770      	bx	lr
    4a16:	0000      	.short	0x0000
    4a18:	20000281 	.word	0x20000281

00004a1c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4a1c:	4901      	ldr	r1, [pc, #4]	; (4a24 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4a1e:	7448      	strb	r0, [r1, #17]
    4a20:	4770      	bx	lr
    4a22:	0000      	.short	0x0000
    4a24:	20000912 	.word	0x20000912

00004a28 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4a28:	b578      	push	{r3, r4, r5, r6, lr}
    4a2a:	4913      	ldr	r1, [pc, #76]	; (4a78 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4a2c:	7c4a      	ldrb	r2, [r1, #17]
    4a2e:	b30a      	cbz	r2, 4a74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4a30:	7c0a      	ldrb	r2, [r1, #16]
    4a32:	f88d 2000 	strb.w	r2, [sp]
    4a36:	9a00      	ldr	r2, [sp, #0]
    4a38:	9200      	str	r2, [sp, #0]
    4a3a:	f89d 2000 	ldrb.w	r2, [sp]
    4a3e:	b1ca      	cbz	r2, 4a74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4a40:	2300      	movs	r3, #0
    4a42:	f101 0210 	add.w	r2, r1, #16
    4a46:	241f      	movs	r4, #31
    4a48:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4a4c:	7c0e      	ldrb	r6, [r1, #16]
    4a4e:	f88d 6000 	strb.w	r6, [sp]
    4a52:	9e00      	ldr	r6, [sp, #0]
    4a54:	9600      	str	r6, [sp, #0]
    4a56:	f89d 6000 	ldrb.w	r6, [sp]
    4a5a:	b14e      	cbz	r6, 4a70 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4a5c:	7013      	strb	r3, [r2, #0]
    4a5e:	7043      	strb	r3, [r0, #1]
    4a60:	7004      	strb	r4, [r0, #0]
    4a62:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4a66:	6046      	str	r6, [r0, #4]
    4a68:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4a6c:	6086      	str	r6, [r0, #8]
    4a6e:	e7ed      	b.n	4a4c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4a70:	2001      	movs	r0, #1
    4a72:	bd78      	pop	{r3, r4, r5, r6, pc}
    4a74:	2000      	movs	r0, #0
    4a76:	bd78      	pop	{r3, r4, r5, r6, pc}
    4a78:	20000912 	.word	0x20000912

00004a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4a7c:	b510      	push	{r4, lr}
    4a7e:	4604      	mov	r4, r0
    4a80:	f000 f966 	bl	4d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4a84:	b118      	cbz	r0, 4a8e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4a86:	21bd      	movs	r1, #189	; 0xbd
    4a88:	2027      	movs	r0, #39	; 0x27
    4a8a:	f7ff f945 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a8e:	4803      	ldr	r0, [pc, #12]	; (4a9c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4a90:	2101      	movs	r1, #1
    4a92:	f009 fa13 	bl	debc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4a96:	4802      	ldr	r0, [pc, #8]	; (4aa0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4a98:	62c4      	str	r4, [r0, #44]	; 0x2c
    4a9a:	bd10      	pop	{r4, pc}
    4a9c:	200008f0 	.word	0x200008f0
    4aa0:	200000ac 	.word	0x200000ac

00004aa4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4aa4:	4901      	ldr	r1, [pc, #4]	; (4aac <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4aa6:	2001      	movs	r0, #1
    4aa8:	7188      	strb	r0, [r1, #6]
    4aaa:	4770      	bx	lr
    4aac:	200000ac 	.word	0x200000ac

00004ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ab4:	4d6b      	ldr	r5, [pc, #428]	; (4c64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b4>)
    4ab6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4ab8:	782e      	ldrb	r6, [r5, #0]
    4aba:	bbee      	cbnz	r6, 4b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4abc:	b3e2      	cbz	r2, 4b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4abe:	b3db      	cbz	r3, 4b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4ac0:	b3d4      	cbz	r4, 4b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4ac2:	f105 0614 	add.w	r6, r5, #20
    4ac6:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4aca:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4ace:	2700      	movs	r7, #0
    4ad0:	71af      	strb	r7, [r5, #6]
    4ad2:	716f      	strb	r7, [r5, #5]
    4ad4:	70ef      	strb	r7, [r5, #3]
    4ad6:	70af      	strb	r7, [r5, #2]
    4ad8:	712f      	strb	r7, [r5, #4]
    4ada:	81af      	strh	r7, [r5, #12]
    4adc:	81ef      	strh	r7, [r5, #14]
    4ade:	f000 f97b 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4ae2:	4606      	mov	r6, r0
    4ae4:	f000 f972 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4ae8:	4604      	mov	r4, r0
    4aea:	f006 feb5 	bl	b858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4aee:	f006 fba5 	bl	b23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4af2:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4af6:	f006 ff39 	bl	b96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4afa:	f104 0018 	add.w	r0, r4, #24
    4afe:	f007 f80f 	bl	bb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4b02:	6920      	ldr	r0, [r4, #16]
    4b04:	f007 f802 	bl	bb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4b08:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4b0c:	f007 f822 	bl	bb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4b10:	f04f 0b01 	mov.w	fp, #1
    4b14:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    4b18:	2000      	movs	r0, #0
    4b1a:	f006 fd69 	bl	b5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4b1e:	2800      	cmp	r0, #0
    4b20:	d07e      	beq.n	4c20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    4b22:	4851      	ldr	r0, [pc, #324]	; (4c68 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>)
    4b24:	f006 fdd8 	bl	b6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4b28:	8820      	ldrh	r0, [r4, #0]
    4b2a:	f7ff fd09 	bl	4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4b2e:	6328      	str	r0, [r5, #48]	; 0x30
    4b30:	8820      	ldrh	r0, [r4, #0]
    4b32:	f7ff fcef 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4b36:	e000      	b.n	4b3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    4b38:	e00a      	b.n	4b50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    4b3a:	6368      	str	r0, [r5, #52]	; 0x34
    4b3c:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    4b40:	f88d 0000 	strb.w	r0, [sp]
    4b44:	9800      	ldr	r0, [sp, #0]
    4b46:	9000      	str	r0, [sp, #0]
    4b48:	f89d 0000 	ldrb.w	r0, [sp]
    4b4c:	b118      	cbz	r0, 4b56 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    4b4e:	e012      	b.n	4b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4b50:	f44f 718a 	mov.w	r1, #276	; 0x114
    4b54:	e082      	b.n	4c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    4b56:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4b58:	b168      	cbz	r0, 4b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4b5a:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    4b5c:	88b1      	ldrh	r1, [r6, #4]
    4b5e:	4288      	cmp	r0, r1
    4b60:	d109      	bne.n	4b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4b62:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    4b66:	2201      	movs	r2, #1
    4b68:	4408      	add	r0, r1
    4b6a:	8670      	strh	r0, [r6, #50]	; 0x32
    4b6c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    4b70:	6f21      	ldr	r1, [r4, #112]	; 0x70
    4b72:	f7fd fdad 	bl	26d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4b76:	f106 0168 	add.w	r1, r6, #104	; 0x68
    4b7a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 4c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
    4b7e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4b82:	f109 0808 	add.w	r8, r9, #8
    4b86:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4b8a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    4b8c:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4b90:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4b92:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4b96:	f000 f98d 	bl	4eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    4b9a:	4601      	mov	r1, r0
    4b9c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4b9e:	46ba      	mov	sl, r7
    4ba0:	f008 ff77 	bl	da92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4ba4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4ba6:	4281      	cmp	r1, r0
    4ba8:	d200      	bcs.n	4bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    4baa:	4608      	mov	r0, r1
    4bac:	7228      	strb	r0, [r5, #8]
    4bae:	46a8      	mov	r8, r5
    4bb0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4bb4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4bb6:	7cf7      	ldrb	r7, [r6, #19]
    4bb8:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4bba:	2908      	cmp	r1, #8
    4bbc:	d100      	bne.n	4bc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4bbe:	2104      	movs	r1, #4
    4bc0:	f008 ff67 	bl	da92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4bc4:	b90f      	cbnz	r7, 4bca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    4bc6:	1d00      	adds	r0, r0, #4
    4bc8:	b280      	uxth	r0, r0
    4bca:	4285      	cmp	r5, r0
    4bcc:	d200      	bcs.n	4bd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    4bce:	4628      	mov	r0, r5
    4bd0:	b2c0      	uxtb	r0, r0
    4bd2:	f888 0009 	strb.w	r0, [r8, #9]
    4bd6:	7cf2      	ldrb	r2, [r6, #19]
    4bd8:	b102      	cbz	r2, 4bdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    4bda:	2204      	movs	r2, #4
    4bdc:	4410      	add	r0, r2
    4bde:	b2c0      	uxtb	r0, r0
    4be0:	f888 0007 	strb.w	r0, [r8, #7]
    4be4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    4be8:	1d09      	adds	r1, r1, #4
    4bea:	4281      	cmp	r1, r0
    4bec:	d202      	bcs.n	4bf4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>
    4bee:	f240 119f 	movw	r1, #415	; 0x19f
    4bf2:	e033      	b.n	4c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    4bf4:	7cb0      	ldrb	r0, [r6, #18]
    4bf6:	b1b0      	cbz	r0, 4c26 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    4bf8:	481c      	ldr	r0, [pc, #112]	; (4c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4bfa:	3008      	adds	r0, #8
    4bfc:	f880 b018 	strb.w	fp, [r0, #24]
    4c00:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    4c04:	e9c0 1204 	strd	r1, r2, [r0, #16]
    4c08:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4c0c:	f008 fe06 	bl	d81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4c10:	4916      	ldr	r1, [pc, #88]	; (4c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4c12:	4603      	mov	r3, r0
    4c14:	22fb      	movs	r2, #251	; 0xfb
    4c16:	3108      	adds	r1, #8
    4c18:	2000      	movs	r0, #0
    4c1a:	f006 fb59 	bl	b2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4c1e:	e000      	b.n	4c22 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    4c20:	e018      	b.n	4c54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    4c22:	f006 fb8b 	bl	b33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4c26:	2001      	movs	r0, #1
    4c28:	f000 fb94 	bl	5354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    4c2c:	4810      	ldr	r0, [pc, #64]	; (4c70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c0>)
    4c2e:	6800      	ldr	r0, [r0, #0]
    4c30:	2803      	cmp	r0, #3
    4c32:	d011      	beq.n	4c58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4c34:	280b      	cmp	r0, #11
    4c36:	d00f      	beq.n	4c58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4c38:	4648      	mov	r0, r9
    4c3a:	f840 af52 	str.w	sl, [r0, #82]!
    4c3e:	f8c0 a004 	str.w	sl, [r0, #4]
    4c42:	480a      	ldr	r0, [pc, #40]	; (4c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    4c44:	88b1      	ldrh	r1, [r6, #4]
    4c46:	3052      	adds	r0, #82	; 0x52
    4c48:	8041      	strh	r1, [r0, #2]
    4c4a:	8821      	ldrh	r1, [r4, #0]
    4c4c:	8001      	strh	r1, [r0, #0]
    4c4e:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4c52:	7101      	strb	r1, [r0, #4]
    4c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c58:	f240 11c7 	movw	r1, #455	; 0x1c7
    4c5c:	2027      	movs	r0, #39	; 0x27
    4c5e:	f7ff f85b 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c62:	0000      	.short	0x0000
    4c64:	200000ac 	.word	0x200000ac
    4c68:	000054d8 	.word	0x000054d8
    4c6c:	200008c0 	.word	0x200008c0
    4c70:	40001550 	.word	0x40001550

00004c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c78:	4605      	mov	r5, r0
    4c7a:	f000 f8ad 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4c7e:	4e33      	ldr	r6, [pc, #204]	; (4d4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4c80:	4604      	mov	r4, r0
    4c82:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4c84:	7847      	ldrb	r7, [r0, #1]
    4c86:	b10d      	cbz	r5, 4c8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4c88:	2d01      	cmp	r5, #1
    4c8a:	d103      	bne.n	4c94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4c8c:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4c8e:	f007 fd74 	bl	c77a <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4c92:	7070      	strb	r0, [r6, #1]
    4c94:	7870      	ldrb	r0, [r6, #1]
    4c96:	f04f 0800 	mov.w	r8, #0
    4c9a:	f04f 0901 	mov.w	r9, #1
    4c9e:	b150      	cbz	r0, 4cb6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4ca0:	2801      	cmp	r0, #1
    4ca2:	d01a      	beq.n	4cda <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4ca4:	2802      	cmp	r0, #2
    4ca6:	d034      	beq.n	4d12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4ca8:	2803      	cmp	r0, #3
    4caa:	d048      	beq.n	4d3e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4cac:	f240 4114 	movw	r1, #1044	; 0x414
    4cb0:	2027      	movs	r0, #39	; 0x27
    4cb2:	f7ff f831 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cb6:	2d01      	cmp	r5, #1
    4cb8:	d032      	beq.n	4d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4cba:	f000 f8e7 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4cbe:	4639      	mov	r1, r7
    4cc0:	2201      	movs	r2, #1
    4cc2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4cc4:	f008 fa33 	bl	d12e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4cc8:	e028      	b.n	4d1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4cca:	bf00      	nop
    4ccc:	f884 8008 	strb.w	r8, [r4, #8]
    4cd0:	e031      	b.n	4d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4cd2:	bf00      	nop
    4cd4:	f884 9008 	strb.w	r9, [r4, #8]
    4cd8:	e02d      	b.n	4d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4cda:	2d01      	cmp	r5, #1
    4cdc:	d008      	beq.n	4cf0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4cde:	f000 f8d5 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4ce2:	4639      	mov	r1, r7
    4ce4:	2200      	movs	r2, #0
    4ce6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4ce8:	f008 fa21 	bl	d12e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4cec:	2d02      	cmp	r5, #2
    4cee:	d00b      	beq.n	4d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4cf0:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4cf4:	1c40      	adds	r0, r0, #1
    4cf6:	f141 0100 	adc.w	r1, r1, #0
    4cfa:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4cfe:	7a20      	ldrb	r0, [r4, #8]
    4d00:	2801      	cmp	r0, #1
    4d02:	d003      	beq.n	4d0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4d04:	f884 9008 	strb.w	r9, [r4, #8]
    4d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d0c:	f884 8008 	strb.w	r8, [r4, #8]
    4d10:	e7fa      	b.n	4d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d12:	2d01      	cmp	r5, #1
    4d14:	d004      	beq.n	4d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d16:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d18:	f008 fc43 	bl	d5a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d1c:	2d02      	cmp	r5, #2
    4d1e:	d0f3      	beq.n	4d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d20:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4d24:	1c40      	adds	r0, r0, #1
    4d26:	f141 0100 	adc.w	r1, r1, #0
    4d2a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4d2e:	7a20      	ldrb	r0, [r4, #8]
    4d30:	2801      	cmp	r0, #1
    4d32:	d1cf      	bne.n	4cd4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4d34:	e7ca      	b.n	4ccc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4d36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d3a:	f005 bc21 	b.w	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4d3e:	2d01      	cmp	r5, #1
    4d40:	d0e2      	beq.n	4d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4d42:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d44:	f008 fc2d 	bl	d5a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4d48:	e7f5      	b.n	4d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d4a:	0000      	.short	0x0000
    4d4c:	200000ac 	.word	0x200000ac

00004d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4d50:	4804      	ldr	r0, [pc, #16]	; (4d64 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4d52:	7800      	ldrb	r0, [r0, #0]
    4d54:	b108      	cbz	r0, 4d5a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4d56:	200c      	movs	r0, #12
    4d58:	4770      	bx	lr
    4d5a:	4903      	ldr	r1, [pc, #12]	; (4d68 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4d5c:	2000      	movs	r0, #0
    4d5e:	7448      	strb	r0, [r1, #17]
    4d60:	4770      	bx	lr
    4d62:	0000      	.short	0x0000
    4d64:	200000ac 	.word	0x200000ac
    4d68:	20000912 	.word	0x20000912

00004d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4d6c:	4812      	ldr	r0, [pc, #72]	; (4db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    4d6e:	b508      	push	{r3, lr}
    4d70:	7801      	ldrb	r1, [r0, #0]
    4d72:	b139      	cbz	r1, 4d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    4d74:	7800      	ldrb	r0, [r0, #0]
    4d76:	2801      	cmp	r0, #1
    4d78:	d006      	beq.n	4d88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4d7a:	f240 11df 	movw	r1, #479	; 0x1df
    4d7e:	2027      	movs	r0, #39	; 0x27
    4d80:	f7fe ffca 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d84:	f000 f9ce 	bl	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    4d88:	f000 f820 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4d8c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    4d90:	f88d 1000 	strb.w	r1, [sp]
    4d94:	9900      	ldr	r1, [sp, #0]
    4d96:	9100      	str	r1, [sp, #0]
    4d98:	f89d 1000 	ldrb.w	r1, [sp]
    4d9c:	2900      	cmp	r1, #0
    4d9e:	d10a      	bne.n	4db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4da0:	6f01      	ldr	r1, [r0, #112]	; 0x70
    4da2:	2900      	cmp	r1, #0
    4da4:	d007      	beq.n	4db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4da6:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    4daa:	2200      	movs	r2, #0
    4dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4db0:	4611      	mov	r1, r2
    4db2:	f7fd bc8d 	b.w	26d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4db6:	bd08      	pop	{r3, pc}
    4db8:	200000ac 	.word	0x200000ac
    4dbc:	4a02      	ldr	r2, [pc, #8]	; (4dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4dbe:	8993      	ldrh	r3, [r2, #12]
    4dc0:	4303      	orrs	r3, r0
    4dc2:	8193      	strh	r3, [r2, #12]
    4dc4:	6952      	ldr	r2, [r2, #20]
    4dc6:	4710      	bx	r2
    4dc8:	200000ac 	.word	0x200000ac
    4dcc:	4801      	ldr	r0, [pc, #4]	; (4dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4dce:	6840      	ldr	r0, [r0, #4]
    4dd0:	4770      	bx	lr
    4dd2:	0000      	.short	0x0000
    4dd4:	200000e4 	.word	0x200000e4
    4dd8:	4801      	ldr	r0, [pc, #4]	; (4de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    4dda:	6840      	ldr	r0, [r0, #4]
    4ddc:	3078      	adds	r0, #120	; 0x78
    4dde:	4770      	bx	lr
    4de0:	200000e4 	.word	0x200000e4
    4de4:	4a01      	ldr	r2, [pc, #4]	; (4dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    4de6:	2100      	movs	r1, #0
    4de8:	6952      	ldr	r2, [r2, #20]
    4dea:	4710      	bx	r2
    4dec:	200000ac 	.word	0x200000ac
    4df0:	b570      	push	{r4, r5, r6, lr}
    4df2:	f7ff fff1 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4df6:	4604      	mov	r4, r0
    4df8:	f7ff ffe8 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4dfc:	4605      	mov	r5, r0
    4dfe:	4621      	mov	r1, r4
    4e00:	f008 ff0f 	bl	dc22 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4e04:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4e08:	2901      	cmp	r1, #1
    4e0a:	d114      	bne.n	4e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4e0c:	2800      	cmp	r0, #0
    4e0e:	d012      	beq.n	4e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4e10:	4909      	ldr	r1, [pc, #36]	; (4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    4e12:	2001      	movs	r0, #1
    4e14:	684a      	ldr	r2, [r1, #4]
    4e16:	8829      	ldrh	r1, [r5, #0]
    4e18:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    4e1c:	7a61      	ldrb	r1, [r4, #9]
    4e1e:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    4e22:	7aa1      	ldrb	r1, [r4, #10]
    4e24:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    4e28:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    4e2c:	7010      	strb	r0, [r2, #0]
    4e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4e32:	f005 bba5 	b.w	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4e36:	bd70      	pop	{r4, r5, r6, pc}
    4e38:	200000e4 	.word	0x200000e4
    4e3c:	b570      	push	{r4, r5, r6, lr}
    4e3e:	4605      	mov	r5, r0
    4e40:	2901      	cmp	r1, #1
    4e42:	d81c      	bhi.n	4e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e44:	4c10      	ldr	r4, [pc, #64]	; (4e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    4e46:	69a1      	ldr	r1, [r4, #24]
    4e48:	4788      	blx	r1
    4e4a:	b1c0      	cbz	r0, 4e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e4c:	7960      	ldrb	r0, [r4, #5]
    4e4e:	b9b0      	cbnz	r0, 4e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e50:	2d01      	cmp	r5, #1
    4e52:	d116      	bne.n	4e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4e54:	f104 0010 	add.w	r0, r4, #16
    4e58:	7800      	ldrb	r0, [r0, #0]
    4e5a:	06c1      	lsls	r1, r0, #27
    4e5c:	d405      	bmi.n	4e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4e5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4e60:	7809      	ldrb	r1, [r1, #0]
    4e62:	06c9      	lsls	r1, r1, #27
    4e64:	d401      	bmi.n	4e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    4e66:	2101      	movs	r1, #1
    4e68:	e000      	b.n	4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    4e6a:	2100      	movs	r1, #0
    4e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4e6e:	b91a      	cbnz	r2, 4e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4e70:	8962      	ldrh	r2, [r4, #10]
    4e72:	b10a      	cbz	r2, 4e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    4e74:	06c0      	lsls	r0, r0, #27
    4e76:	d502      	bpl.n	4e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4e78:	89a0      	ldrh	r0, [r4, #12]
    4e7a:	4301      	orrs	r1, r0
    4e7c:	d001      	beq.n	4e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    4e7e:	2001      	movs	r0, #1
    4e80:	bd70      	pop	{r4, r5, r6, pc}
    4e82:	2000      	movs	r0, #0
    4e84:	bd70      	pop	{r4, r5, r6, pc}
    4e86:	0000      	.short	0x0000
    4e88:	200000ac 	.word	0x200000ac
    4e8c:	b510      	push	{r4, lr}
    4e8e:	4c08      	ldr	r4, [pc, #32]	; (4eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    4e90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4e92:	b138      	cbz	r0, 4ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4e94:	8962      	ldrh	r2, [r4, #10]
    4e96:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4e98:	1cd2      	adds	r2, r2, #3
    4e9a:	f007 fb45 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4ea0:	6260      	str	r0, [r4, #36]	; 0x24
    4ea2:	bd10      	pop	{r4, pc}
    4ea4:	f240 415a 	movw	r1, #1114	; 0x45a
    4ea8:	2027      	movs	r0, #39	; 0x27
    4eaa:	f7fe ff35 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eae:	0000      	.short	0x0000
    4eb0:	200000ac 	.word	0x200000ac
    4eb4:	b510      	push	{r4, lr}
    4eb6:	f7ff ff89 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4eba:	4604      	mov	r4, r0
    4ebc:	f7ff ff8c 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4ec0:	7b41      	ldrb	r1, [r0, #13]
    4ec2:	4a0a      	ldr	r2, [pc, #40]	; (4eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    4ec4:	2924      	cmp	r1, #36	; 0x24
    4ec6:	d008      	beq.n	4eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4ec8:	7b80      	ldrb	r0, [r0, #14]
    4eca:	2824      	cmp	r0, #36	; 0x24
    4ecc:	d005      	beq.n	4eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    4ece:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4ed2:	2804      	cmp	r0, #4
    4ed4:	d100      	bne.n	4ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4ed6:	2008      	movs	r0, #8
    4ed8:	bd10      	pop	{r4, pc}
    4eda:	6850      	ldr	r0, [r2, #4]
    4edc:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    4ee0:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ee8:	f008 bca6 	b.w	d838 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    4eec:	200000e4 	.word	0x200000e4
    4ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ef4:	4689      	mov	r9, r1
    4ef6:	4606      	mov	r6, r0
    4ef8:	f7ff ff6e 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4efc:	4c58      	ldr	r4, [pc, #352]	; (5060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    4efe:	2700      	movs	r7, #0
    4f00:	4605      	mov	r5, r0
    4f02:	f88d 7000 	strb.w	r7, [sp]
    4f06:	7820      	ldrb	r0, [r4, #0]
    4f08:	2802      	cmp	r0, #2
    4f0a:	d004      	beq.n	4f16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    4f0c:	f240 41b9 	movw	r1, #1209	; 0x4b9
    4f10:	2027      	movs	r0, #39	; 0x27
    4f12:	f7fe ff01 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f16:	7ba0      	ldrb	r0, [r4, #14]
    4f18:	0640      	lsls	r0, r0, #25
    4f1a:	d406      	bmi.n	4f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    4f1c:	2040      	movs	r0, #64	; 0x40
    4f1e:	f7ff ff61 	bl	4de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    4f22:	89e0      	ldrh	r0, [r4, #14]
    4f24:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4f28:	81e0      	strh	r0, [r4, #14]
    4f2a:	7ce8      	ldrb	r0, [r5, #19]
    4f2c:	f04f 0801 	mov.w	r8, #1
    4f30:	b3c6      	cbz	r6, 4fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    4f32:	f006 fa33 	bl	b39c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4f36:	f006 fa17 	bl	b368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4f3a:	b968      	cbnz	r0, 4f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f3c:	7ce8      	ldrb	r0, [r5, #19]
    4f3e:	b158      	cbz	r0, 4f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f40:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f42:	7841      	ldrb	r1, [r0, #1]
    4f44:	b141      	cbz	r1, 4f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f46:	7800      	ldrb	r0, [r0, #0]
    4f48:	7a29      	ldrb	r1, [r5, #8]
    4f4a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4f4e:	4288      	cmp	r0, r1
    4f50:	d102      	bne.n	4f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    4f52:	f884 8002 	strb.w	r8, [r4, #2]
    4f56:	e064      	b.n	5022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    4f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f5a:	7841      	ldrb	r1, [r0, #1]
    4f5c:	8161      	strh	r1, [r4, #10]
    4f5e:	b121      	cbz	r1, 4f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    4f60:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4f62:	f008 faeb 	bl	d53c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4f66:	62a0      	str	r0, [r4, #40]	; 0x28
    4f68:	e000      	b.n	4f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    4f6a:	62a7      	str	r7, [r4, #40]	; 0x28
    4f6c:	89e0      	ldrh	r0, [r4, #14]
    4f6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4f72:	81e0      	strh	r0, [r4, #14]
    4f74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f76:	79e9      	ldrb	r1, [r5, #7]
    4f78:	7800      	ldrb	r0, [r0, #0]
    4f7a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4f7e:	4288      	cmp	r0, r1
    4f80:	d005      	beq.n	4f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    4f82:	f000 f963 	bl	524c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    4f86:	89e0      	ldrh	r0, [r4, #14]
    4f88:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4f8c:	81e0      	strh	r0, [r4, #14]
    4f8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f90:	7a29      	ldrb	r1, [r5, #8]
    4f92:	7800      	ldrb	r0, [r0, #0]
    4f94:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4f98:	4288      	cmp	r0, r1
    4f9a:	d10e      	bne.n	4fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    4f9c:	4668      	mov	r0, sp
    4f9e:	f000 f917 	bl	51d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    4fa2:	e00a      	b.n	4fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    4fa4:	e7ff      	b.n	4fa6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    4fa6:	b108      	cbz	r0, 4fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    4fa8:	f006 f9f2 	bl	b390 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    4fac:	78e0      	ldrb	r0, [r4, #3]
    4fae:	1c40      	adds	r0, r0, #1
    4fb0:	70e0      	strb	r0, [r4, #3]
    4fb2:	89e0      	ldrh	r0, [r4, #14]
    4fb4:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    4fb8:	81e0      	strh	r0, [r4, #14]
    4fba:	7ca8      	ldrb	r0, [r5, #18]
    4fbc:	b1a0      	cbz	r0, 4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    4fbe:	f7ff ff05 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4fc2:	4928      	ldr	r1, [pc, #160]	; (5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    4fc4:	f881 8018 	strb.w	r8, [r1, #24]
    4fc8:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    4fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    4fd0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    4fd4:	f008 fc22 	bl	d81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4fd8:	4603      	mov	r3, r0
    4fda:	22fb      	movs	r2, #251	; 0xfb
    4fdc:	4921      	ldr	r1, [pc, #132]	; (5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    4fde:	2000      	movs	r0, #0
    4fe0:	f006 f976 	bl	b2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4fe4:	f006 f9aa 	bl	b33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4fe8:	4d1e      	ldr	r5, [pc, #120]	; (5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    4fea:	354a      	adds	r5, #74	; 0x4a
    4fec:	f1b9 0f00 	cmp.w	r9, #0
    4ff0:	d104      	bne.n	4ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    4ff2:	78e1      	ldrb	r1, [r4, #3]
    4ff4:	2001      	movs	r0, #1
    4ff6:	f7ff ff21 	bl	4e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    4ffa:	b1b0      	cbz	r0, 502a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    4ffc:	f006 fd64 	bl	bac8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5000:	f89d 0000 	ldrb.w	r0, [sp]
    5004:	b110      	cbz	r0, 500c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    5006:	2000      	movs	r0, #0
    5008:	f7ff fe34 	bl	4c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    500c:	b136      	cbz	r6, 501c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    500e:	70e7      	strb	r7, [r4, #3]
    5010:	7968      	ldrb	r0, [r5, #5]
    5012:	1c40      	adds	r0, r0, #1
    5014:	7168      	strb	r0, [r5, #5]
    5016:	f7ff feeb 	bl	4df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    501a:	e002      	b.n	5022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    501c:	79a8      	ldrb	r0, [r5, #6]
    501e:	1c40      	adds	r0, r0, #1
    5020:	71a8      	strb	r0, [r5, #6]
    5022:	f000 f87f 	bl	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    502a:	f89d 0000 	ldrb.w	r0, [sp]
    502e:	b110      	cbz	r0, 5036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5030:	2001      	movs	r0, #1
    5032:	f7ff fe1f 	bl	4c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5036:	2000      	movs	r0, #0
    5038:	f000 f98c 	bl	5354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    503c:	f89d 0000 	ldrb.w	r0, [sp]
    5040:	b110      	cbz	r0, 5048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    5042:	2002      	movs	r0, #2
    5044:	f7ff fe16 	bl	4c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5048:	b136      	cbz	r6, 5058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    504a:	70e7      	strb	r7, [r4, #3]
    504c:	7968      	ldrb	r0, [r5, #5]
    504e:	1c40      	adds	r0, r0, #1
    5050:	7168      	strb	r0, [r5, #5]
    5052:	f7ff fecd 	bl	4df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5056:	e7e6      	b.n	5026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5058:	79a8      	ldrb	r0, [r5, #6]
    505a:	1c40      	adds	r0, r0, #1
    505c:	71a8      	strb	r0, [r5, #6]
    505e:	e7e2      	b.n	5026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5060:	200000ac 	.word	0x200000ac
    5064:	200008c8 	.word	0x200008c8
    5068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    506c:	4688      	mov	r8, r1
    506e:	4681      	mov	r9, r0
    5070:	f7ff feb2 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5074:	4d29      	ldr	r5, [pc, #164]	; (511c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    5076:	4604      	mov	r4, r0
    5078:	7828      	ldrb	r0, [r5, #0]
    507a:	2801      	cmp	r0, #1
    507c:	d004      	beq.n	5088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    507e:	f240 4169 	movw	r1, #1129	; 0x469
    5082:	2027      	movs	r0, #39	; 0x27
    5084:	f7fe fe48 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5088:	7860      	ldrb	r0, [r4, #1]
    508a:	2600      	movs	r6, #0
    508c:	2701      	movs	r7, #1
    508e:	b120      	cbz	r0, 509a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    5090:	7066      	strb	r6, [r4, #1]
    5092:	2100      	movs	r1, #0
    5094:	2004      	movs	r0, #4
    5096:	f7ff fe91 	bl	4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    509a:	6a29      	ldr	r1, [r5, #32]
    509c:	7808      	ldrb	r0, [r1, #0]
    509e:	43c0      	mvns	r0, r0
    50a0:	0780      	lsls	r0, r0, #30
    50a2:	d109      	bne.n	50b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    50a4:	79a0      	ldrb	r0, [r4, #6]
    50a6:	bb88      	cbnz	r0, 510c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    50a8:	2002      	movs	r0, #2
    50aa:	f7ff fe87 	bl	4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    50ae:	6a28      	ldr	r0, [r5, #32]
    50b0:	7800      	ldrb	r0, [r0, #0]
    50b2:	43c0      	mvns	r0, r0
    50b4:	0780      	lsls	r0, r0, #30
    50b6:	d029      	beq.n	510c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    50b8:	6a28      	ldr	r0, [r5, #32]
    50ba:	7840      	ldrb	r0, [r0, #1]
    50bc:	b110      	cbz	r0, 50c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    50be:	2002      	movs	r0, #2
    50c0:	71a0      	strb	r0, [r4, #6]
    50c2:	e000      	b.n	50c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    50c4:	71a7      	strb	r7, [r4, #6]
    50c6:	7ce0      	ldrb	r0, [r4, #19]
    50c8:	b1a0      	cbz	r0, 50f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    50ca:	f7ff fe7f 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    50ce:	4914      	ldr	r1, [pc, #80]	; (5120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    50d0:	7a6d      	ldrb	r5, [r5, #9]
    50d2:	760e      	strb	r6, [r1, #24]
    50d4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    50d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    50dc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    50e0:	f008 fb9c 	bl	d81c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    50e4:	4603      	mov	r3, r0
    50e6:	462a      	mov	r2, r5
    50e8:	490d      	ldr	r1, [pc, #52]	; (5120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    50ea:	2001      	movs	r0, #1
    50ec:	f006 f8f0 	bl	b2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    50f0:	f006 f924 	bl	b33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    50f4:	ea38 0009 	bics.w	r0, r8, r9
    50f8:	d004      	beq.n	5104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    50fa:	2100      	movs	r1, #0
    50fc:	4608      	mov	r0, r1
    50fe:	f7ff fe9d 	bl	4e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5102:	b128      	cbz	r0, 5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    5104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5108:	f000 b80c 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    510c:	2003      	movs	r0, #3
    510e:	e7d7      	b.n	50c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5110:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5114:	2000      	movs	r0, #0
    5116:	f000 b8df 	b.w	52d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    511a:	0000      	.short	0x0000
    511c:	200000ac 	.word	0x200000ac
    5120:	200008c8 	.word	0x200008c8
    5124:	b510      	push	{r4, lr}
    5126:	f006 f9cf 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    512a:	f006 f887 	bl	b23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    512e:	4c0d      	ldr	r4, [pc, #52]	; (5164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    5130:	89e0      	ldrh	r0, [r4, #14]
    5132:	f7ff fe57 	bl	4de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5136:	69e2      	ldr	r2, [r4, #28]
    5138:	7961      	ldrb	r1, [r4, #5]
    513a:	78a0      	ldrb	r0, [r4, #2]
    513c:	4790      	blx	r2
    513e:	480a      	ldr	r0, [pc, #40]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5140:	7c40      	ldrb	r0, [r0, #17]
    5142:	b158      	cbz	r0, 515c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    5144:	4808      	ldr	r0, [pc, #32]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5146:	3852      	subs	r0, #82	; 0x52
    5148:	f850 1f52 	ldr.w	r1, [r0, #82]!
    514c:	6081      	str	r1, [r0, #8]
    514e:	6841      	ldr	r1, [r0, #4]
    5150:	60c1      	str	r1, [r0, #12]
    5152:	4805      	ldr	r0, [pc, #20]	; (5168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5154:	2101      	movs	r1, #1
    5156:	7401      	strb	r1, [r0, #16]
    5158:	f005 fa12 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    515c:	2000      	movs	r0, #0
    515e:	7020      	strb	r0, [r4, #0]
    5160:	bd10      	pop	{r4, pc}
    5162:	0000      	.short	0x0000
    5164:	200000ac 	.word	0x200000ac
    5168:	20000912 	.word	0x20000912
    516c:	4808      	ldr	r0, [pc, #32]	; (5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    516e:	b510      	push	{r4, lr}
    5170:	7800      	ldrb	r0, [r0, #0]
    5172:	2802      	cmp	r0, #2
    5174:	d004      	beq.n	5180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5176:	f240 2117 	movw	r1, #535	; 0x217
    517a:	2027      	movs	r0, #39	; 0x27
    517c:	f7fe fdcc 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5180:	4904      	ldr	r1, [pc, #16]	; (5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    5182:	2001      	movs	r0, #1
    5184:	71c8      	strb	r0, [r1, #7]
    5186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    518a:	f7ff bfcb 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    518e:	0000      	.short	0x0000
    5190:	200000ac 	.word	0x200000ac
    5194:	20000912 	.word	0x20000912
    5198:	b430      	push	{r4, r5}
    519a:	4b0c      	ldr	r3, [pc, #48]	; (51cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    519c:	b942      	cbnz	r2, 51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    519e:	79da      	ldrb	r2, [r3, #7]
    51a0:	2aff      	cmp	r2, #255	; 0xff
    51a2:	d105      	bne.n	51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    51a4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    51a8:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    51ac:	42a2      	cmp	r2, r4
    51ae:	d00b      	beq.n	51c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    51b0:	b131      	cbz	r1, 51c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    51b2:	79da      	ldrb	r2, [r3, #7]
    51b4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    51b8:	bc30      	pop	{r4, r5}
    51ba:	4610      	mov	r0, r2
    51bc:	f006 bcb8 	b.w	bb30 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    51c0:	22ff      	movs	r2, #255	; 0xff
    51c2:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    51c6:	e7f7      	b.n	51b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    51c8:	bc30      	pop	{r4, r5}
    51ca:	4770      	bx	lr
    51cc:	200000ac 	.word	0x200000ac
    51d0:	b570      	push	{r4, r5, r6, lr}
    51d2:	4606      	mov	r6, r0
    51d4:	f7ff fe00 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    51d8:	4a1b      	ldr	r2, [pc, #108]	; (5248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    51da:	4604      	mov	r4, r0
    51dc:	2501      	movs	r5, #1
    51de:	6a51      	ldr	r1, [r2, #36]	; 0x24
    51e0:	7808      	ldrb	r0, [r1, #0]
    51e2:	f000 0003 	and.w	r0, r0, #3
    51e6:	2801      	cmp	r0, #1
    51e8:	d00c      	beq.n	5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    51ea:	2802      	cmp	r0, #2
    51ec:	d00a      	beq.n	5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    51ee:	2803      	cmp	r0, #3
    51f0:	d121      	bne.n	5236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    51f2:	7065      	strb	r5, [r4, #1]
    51f4:	89d0      	ldrh	r0, [r2, #14]
    51f6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    51fa:	81d0      	strh	r0, [r2, #14]
    51fc:	2001      	movs	r0, #1
    51fe:	f7ff fddd 	bl	4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5202:	e018      	b.n	5236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5204:	7848      	ldrb	r0, [r1, #1]
    5206:	b1b0      	cbz	r0, 5236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    5208:	89d1      	ldrh	r1, [r2, #14]
    520a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    520e:	81d1      	strh	r1, [r2, #14]
    5210:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5212:	2900      	cmp	r1, #0
    5214:	d009      	beq.n	522a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    5216:	28fb      	cmp	r0, #251	; 0xfb
    5218:	d808      	bhi.n	522c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    521a:	7990      	ldrb	r0, [r2, #6]
    521c:	b120      	cbz	r0, 5228 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    521e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5222:	2020      	movs	r0, #32
    5224:	f7ff bdde 	b.w	4de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5228:	7035      	strb	r5, [r6, #0]
    522a:	bd70      	pop	{r4, r5, r6, pc}
    522c:	7950      	ldrb	r0, [r2, #5]
    522e:	f040 0010 	orr.w	r0, r0, #16
    5232:	7150      	strb	r0, [r2, #5]
    5234:	bd70      	pop	{r4, r5, r6, pc}
    5236:	7a20      	ldrb	r0, [r4, #8]
    5238:	2801      	cmp	r0, #1
    523a:	d001      	beq.n	5240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    523c:	7225      	strb	r5, [r4, #8]
    523e:	bd70      	pop	{r4, r5, r6, pc}
    5240:	2000      	movs	r0, #0
    5242:	7220      	strb	r0, [r4, #8]
    5244:	bd70      	pop	{r4, r5, r6, pc}
    5246:	0000      	.short	0x0000
    5248:	200000ac 	.word	0x200000ac
    524c:	b570      	push	{r4, r5, r6, lr}
    524e:	f7ff fdc3 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5252:	4604      	mov	r4, r0
    5254:	7980      	ldrb	r0, [r0, #6]
    5256:	2800      	cmp	r0, #0
    5258:	d027      	beq.n	52aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    525a:	2802      	cmp	r0, #2
    525c:	d10d      	bne.n	527a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    525e:	4818      	ldr	r0, [pc, #96]	; (52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    5260:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5262:	f007 ff3d 	bl	d0e0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5266:	b308      	cbz	r0, 52ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5268:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    526c:	1c40      	adds	r0, r0, #1
    526e:	f141 0100 	adc.w	r1, r1, #0
    5272:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5276:	f005 f983 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    527a:	2500      	movs	r5, #0
    527c:	71a5      	strb	r5, [r4, #6]
    527e:	78a0      	ldrb	r0, [r4, #2]
    5280:	2601      	movs	r6, #1
    5282:	b170      	cbz	r0, 52a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    5284:	70a5      	strb	r5, [r4, #2]
    5286:	f7ff fb17 	bl	48b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    528a:	b190      	cbz	r0, 52b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    528c:	2100      	movs	r1, #0
    528e:	2008      	movs	r0, #8
    5290:	f7ff fd94 	bl	4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5294:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5298:	1c40      	adds	r0, r0, #1
    529a:	f141 0100 	adc.w	r1, r1, #0
    529e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    52a2:	79e0      	ldrb	r0, [r4, #7]
    52a4:	2801      	cmp	r0, #1
    52a6:	d009      	beq.n	52bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    52a8:	71e6      	strb	r6, [r4, #7]
    52aa:	bd70      	pop	{r4, r5, r6, pc}
    52ac:	f240 31af 	movw	r1, #943	; 0x3af
    52b0:	e001      	b.n	52b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    52b2:	f240 31c7 	movw	r1, #967	; 0x3c7
    52b6:	2027      	movs	r0, #39	; 0x27
    52b8:	f7fe fd2e 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52bc:	71e5      	strb	r5, [r4, #7]
    52be:	bd70      	pop	{r4, r5, r6, pc}
    52c0:	200000ac 	.word	0x200000ac
    52c4:	4803      	ldr	r0, [pc, #12]	; (52d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    52c6:	7800      	ldrb	r0, [r0, #0]
    52c8:	2800      	cmp	r0, #0
    52ca:	d001      	beq.n	52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    52cc:	f7ff bf2a 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    52d0:	4770      	bx	lr
    52d2:	0000      	.short	0x0000
    52d4:	200000ac 	.word	0x200000ac
    52d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52dc:	4607      	mov	r7, r0
    52de:	f7ff fd75 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    52e2:	4680      	mov	r8, r0
    52e4:	f7ff fd78 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52e8:	4c17      	ldr	r4, [pc, #92]	; (5348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    52ea:	4605      	mov	r5, r0
    52ec:	463a      	mov	r2, r7
    52ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    52f0:	6260      	str	r0, [r4, #36]	; 0x24
    52f2:	2101      	movs	r1, #1
    52f4:	4640      	mov	r0, r8
    52f6:	f7ff ff4f 	bl	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    52fa:	7ce8      	ldrb	r0, [r5, #19]
    52fc:	2600      	movs	r6, #0
    52fe:	b178      	cbz	r0, 5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    5300:	4812      	ldr	r0, [pc, #72]	; (534c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5302:	f006 fb39 	bl	b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5306:	4812      	ldr	r0, [pc, #72]	; (5350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    5308:	7606      	strb	r6, [r0, #24]
    530a:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    530e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5312:	490e      	ldr	r1, [pc, #56]	; (534c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    5314:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5316:	f005 ff63 	bl	b1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    531a:	f005 ff75 	bl	b208 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    531e:	e004      	b.n	532a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    5320:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5322:	f006 fb29 	bl	b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5326:	f005 ff89 	bl	b23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    532a:	b917      	cbnz	r7, 5332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    532c:	4630      	mov	r0, r6
    532e:	f006 f9db 	bl	b6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5332:	2100      	movs	r1, #0
    5334:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5338:	4608      	mov	r0, r1
    533a:	f006 fba7 	bl	ba8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    533e:	2002      	movs	r0, #2
    5340:	7020      	strb	r0, [r4, #0]
    5342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5346:	0000      	.short	0x0000
    5348:	200000ac 	.word	0x200000ac
    534c:	200007c0 	.word	0x200007c0
    5350:	200008c8 	.word	0x200008c8
    5354:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5358:	4604      	mov	r4, r0
    535a:	f7ff fd3d 	bl	4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    535e:	4605      	mov	r5, r0
    5360:	f7ff fd34 	bl	4dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5364:	4606      	mov	r6, r0
    5366:	f8df 9164 	ldr.w	r9, [pc, #356]	; 54cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    536a:	4622      	mov	r2, r4
    536c:	2100      	movs	r1, #0
    536e:	f7ff ff13 	bl	5198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    5372:	79a8      	ldrb	r0, [r5, #6]
    5374:	f04f 0800 	mov.w	r8, #0
    5378:	2701      	movs	r7, #1
    537a:	f1a9 0420 	sub.w	r4, r9, #32
    537e:	b140      	cbz	r0, 5392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    5380:	2801      	cmp	r0, #1
    5382:	d01f      	beq.n	53c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5384:	2802      	cmp	r0, #2
    5386:	d030      	beq.n	53ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    5388:	2803      	cmp	r0, #3
    538a:	d03c      	beq.n	5406 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    538c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    5390:	e058      	b.n	5444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5392:	7a20      	ldrb	r0, [r4, #8]
    5394:	2150      	movs	r1, #80	; 0x50
    5396:	f8ad 0004 	strh.w	r0, [sp, #4]
    539a:	5388      	strh	r0, [r1, r6]
    539c:	4648      	mov	r0, r9
    539e:	f7ff fab5 	bl	490c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    53a2:	b128      	cbz	r0, 53b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    53a4:	2080      	movs	r0, #128	; 0x80
    53a6:	6a21      	ldr	r1, [r4, #32]
    53a8:	f7ff fd08 	bl	4dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    53ac:	70af      	strb	r7, [r5, #2]
    53ae:	e02e      	b.n	540e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    53b0:	466a      	mov	r2, sp
    53b2:	a901      	add	r1, sp, #4
    53b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    53b6:	f008 fa49 	bl	d84c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    53ba:	6220      	str	r0, [r4, #32]
    53bc:	b110      	cbz	r0, 53c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    53be:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    53c2:	b111      	cbz	r1, 53ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    53c4:	4842      	ldr	r0, [pc, #264]	; (54d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    53c6:	6220      	str	r0, [r4, #32]
    53c8:	e021      	b.n	540e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    53ca:	f89d 1000 	ldrb.w	r1, [sp]
    53ce:	b931      	cbnz	r1, 53de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    53d0:	f8a0 8000 	strh.w	r8, [r0]
    53d4:	f880 8002 	strb.w	r8, [r0, #2]
    53d8:	2101      	movs	r1, #1
    53da:	f008 fd6f 	bl	debc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    53de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    53e2:	6a20      	ldr	r0, [r4, #32]
    53e4:	f008 fd24 	bl	de30 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    53e8:	e011      	b.n	540e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    53ea:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    53ee:	f8ad 0004 	strh.w	r0, [sp, #4]
    53f2:	466a      	mov	r2, sp
    53f4:	a901      	add	r1, sp, #4
    53f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    53f8:	f008 fa28 	bl	d84c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    53fc:	6220      	str	r0, [r4, #32]
    53fe:	b930      	cbnz	r0, 540e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5400:	f240 21a5 	movw	r1, #677	; 0x2a5
    5404:	e01e      	b.n	5444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    5406:	4648      	mov	r0, r9
    5408:	f7ff fa80 	bl	490c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    540c:	b1c0      	cbz	r0, 5440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    540e:	6a20      	ldr	r0, [r4, #32]
    5410:	2308      	movs	r3, #8
    5412:	7801      	ldrb	r1, [r0, #0]
    5414:	f021 0108 	bic.w	r1, r1, #8
    5418:	7001      	strb	r1, [r0, #0]
    541a:	79ea      	ldrb	r2, [r5, #7]
    541c:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5420:	4311      	orrs	r1, r2
    5422:	f021 0104 	bic.w	r1, r1, #4
    5426:	7001      	strb	r1, [r0, #0]
    5428:	7a2a      	ldrb	r2, [r5, #8]
    542a:	2304      	movs	r3, #4
    542c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5430:	4311      	orrs	r1, r2
    5432:	f021 0110 	bic.w	r1, r1, #16
    5436:	7001      	strb	r1, [r0, #0]
    5438:	43c9      	mvns	r1, r1
    543a:	0789      	lsls	r1, r1, #30
    543c:	d005      	beq.n	544a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    543e:	e007      	b.n	5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    5440:	f240 21ae 	movw	r1, #686	; 0x2ae
    5444:	2027      	movs	r0, #39	; 0x27
    5446:	f7fe fc67 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    544a:	78c0      	ldrb	r0, [r0, #3]
    544c:	2802      	cmp	r0, #2
    544e:	d00f      	beq.n	5470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5450:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5452:	f007 ff96 	bl	d382 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5456:	b108      	cbz	r0, 545c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5458:	2101      	movs	r1, #1
    545a:	e00a      	b.n	5472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    545c:	6a20      	ldr	r0, [r4, #32]
    545e:	7800      	ldrb	r0, [r0, #0]
    5460:	43c0      	mvns	r0, r0
    5462:	0780      	lsls	r0, r0, #30
    5464:	d004      	beq.n	5470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5466:	f7ff fa0f 	bl	4888 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    546a:	f080 0101 	eor.w	r1, r0, #1
    546e:	e000      	b.n	5472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5470:	2100      	movs	r1, #0
    5472:	6a20      	ldr	r0, [r4, #32]
    5474:	7802      	ldrb	r2, [r0, #0]
    5476:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    547a:	7001      	strb	r1, [r0, #0]
    547c:	7ca9      	ldrb	r1, [r5, #18]
    547e:	b191      	cbz	r1, 54a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5480:	7841      	ldrb	r1, [r0, #1]
    5482:	b181      	cbz	r1, 54a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5484:	4813      	ldr	r0, [pc, #76]	; (54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5486:	f006 fa77 	bl	b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    548a:	4811      	ldr	r0, [pc, #68]	; (54d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    548c:	3828      	subs	r0, #40	; 0x28
    548e:	7607      	strb	r7, [r0, #24]
    5490:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5494:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5498:	480e      	ldr	r0, [pc, #56]	; (54d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    549a:	6a21      	ldr	r1, [r4, #32]
    549c:	f005 fea0 	bl	b1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    54a0:	f005 feea 	bl	b278 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    54a4:	e003      	b.n	54ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    54a6:	f006 fa67 	bl	b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54aa:	f005 fec7 	bl	b23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    54ae:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    54b2:	2101      	movs	r1, #1
    54b4:	2000      	movs	r0, #0
    54b6:	f006 fae9 	bl	ba8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    54ba:	7127      	strb	r7, [r4, #4]
    54bc:	6a20      	ldr	r0, [r4, #32]
    54be:	8801      	ldrh	r1, [r0, #0]
    54c0:	8221      	strh	r1, [r4, #16]
    54c2:	7880      	ldrb	r0, [r0, #2]
    54c4:	74a0      	strb	r0, [r4, #18]
    54c6:	7027      	strb	r7, [r4, #0]
    54c8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    54cc:	200000cc 	.word	0x200000cc
    54d0:	200008f0 	.word	0x200008f0
    54d4:	200007c0 	.word	0x200007c0
    54d8:	0000516d 	.word	0x0000516d
    54dc:	00004ef1 	.word	0x00004ef1
    54e0:	00005069 	.word	0x00005069
    54e4:	000052c5 	.word	0x000052c5

000054e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    54e8:	4800      	ldr	r0, [pc, #0]	; (54ec <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    54ea:	4770      	bx	lr
    54ec:	200012ad 	.word	0x200012ad

000054f0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    54f0:	b570      	push	{r4, r5, r6, lr}
    54f2:	2600      	movs	r6, #0
    54f4:	4635      	mov	r5, r6
    54f6:	4c0f      	ldr	r4, [pc, #60]	; (5534 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    54f8:	e018      	b.n	552c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    54fa:	1960      	adds	r0, r4, r5
    54fc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5500:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5504:	2a01      	cmp	r2, #1
    5506:	d002      	beq.n	550e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    5508:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    550c:	b160      	cbz	r0, 5528 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    550e:	480a      	ldr	r0, [pc, #40]	; (5538 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    5510:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    5514:	1c73      	adds	r3, r6, #1
    5516:	5585      	strb	r5, [r0, r6]
    5518:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    551c:	4630      	mov	r0, r6
    551e:	b2de      	uxtb	r6, r3
    5520:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    5524:	f006 fbd2 	bl	bccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5528:	1c6d      	adds	r5, r5, #1
    552a:	b2ed      	uxtb	r5, r5
    552c:	78a0      	ldrb	r0, [r4, #2]
    552e:	42a8      	cmp	r0, r5
    5530:	d8e3      	bhi.n	54fa <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    5532:	bd70      	pop	{r4, r5, r6, pc}
    5534:	200010da 	.word	0x200010da
    5538:	20000274 	.word	0x20000274

0000553c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    553c:	4904      	ldr	r1, [pc, #16]	; (5550 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    553e:	788a      	ldrb	r2, [r1, #2]
    5540:	4282      	cmp	r2, r0
    5542:	d903      	bls.n	554c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5544:	4408      	add	r0, r1
    5546:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    554a:	4770      	bx	lr
    554c:	2000      	movs	r0, #0
    554e:	4770      	bx	lr
    5550:	200010da 	.word	0x200010da

00005554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5554:	4904      	ldr	r1, [pc, #16]	; (5568 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5556:	788a      	ldrb	r2, [r1, #2]
    5558:	4282      	cmp	r2, r0
    555a:	d903      	bls.n	5564 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    555c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5560:	3083      	adds	r0, #131	; 0x83
    5562:	4770      	bx	lr
    5564:	2000      	movs	r0, #0
    5566:	4770      	bx	lr
    5568:	200010da 	.word	0x200010da

0000556c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    556c:	4a05      	ldr	r2, [pc, #20]	; (5584 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    556e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5572:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5576:	6802      	ldr	r2, [r0, #0]
    5578:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    557c:	8880      	ldrh	r0, [r0, #4]
    557e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5582:	4770      	bx	lr
    5584:	200010da 	.word	0x200010da

00005588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    558c:	4607      	mov	r7, r0
    558e:	2400      	movs	r4, #0
    5590:	4d10      	ldr	r5, [pc, #64]	; (55d4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    5592:	e019      	b.n	55c8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5594:	4620      	mov	r0, r4
    5596:	f7ff ffdd 	bl	5554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    559a:	0003      	movs	r3, r0
    559c:	d012      	beq.n	55c4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    559e:	1928      	adds	r0, r5, r4
    55a0:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    55a4:	b970      	cbnz	r0, 55c4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    55a6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    55aa:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    55ae:	f206 160b 	addw	r6, r6, #267	; 0x10b
    55b2:	463a      	mov	r2, r7
    55b4:	4631      	mov	r1, r6
    55b6:	4618      	mov	r0, r3
    55b8:	f008 f8cb 	bl	d752 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    55bc:	4630      	mov	r0, r6
    55be:	4621      	mov	r1, r4
    55c0:	f7ff ffd4 	bl	556c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    55c4:	1c64      	adds	r4, r4, #1
    55c6:	b2e4      	uxtb	r4, r4
    55c8:	78a8      	ldrb	r0, [r5, #2]
    55ca:	42a0      	cmp	r0, r4
    55cc:	d8e2      	bhi.n	5594 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    55ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55d2:	0000      	.short	0x0000
    55d4:	200010da 	.word	0x200010da

000055d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    55d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55dc:	460e      	mov	r6, r1
    55de:	4607      	mov	r7, r0
    55e0:	4615      	mov	r5, r2
    55e2:	2106      	movs	r1, #6
    55e4:	4630      	mov	r0, r6
    55e6:	f008 fb6c 	bl	dcc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    55ea:	4c0d      	ldr	r4, [pc, #52]	; (5620 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    55ec:	b160      	cbz	r0, 5608 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    55ee:	2000      	movs	r0, #0
    55f0:	e004      	b.n	55fc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    55f2:	1821      	adds	r1, r4, r0
    55f4:	1c40      	adds	r0, r0, #1
    55f6:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    55fa:	b2c0      	uxtb	r0, r0
    55fc:	78a1      	ldrb	r1, [r4, #2]
    55fe:	4281      	cmp	r1, r0
    5600:	d8f7      	bhi.n	55f2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5602:	2001      	movs	r0, #1
    5604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5608:	4631      	mov	r1, r6
    560a:	4638      	mov	r0, r7
    560c:	f008 f92d 	bl	d86a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5610:	2808      	cmp	r0, #8
    5612:	d003      	beq.n	561c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5614:	4420      	add	r0, r4
    5616:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    561a:	e7f2      	b.n	5602 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    561c:	2000      	movs	r0, #0
    561e:	e7f1      	b.n	5604 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5620:	200010da 	.word	0x200010da

00005624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5624:	4904      	ldr	r1, [pc, #16]	; (5638 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5626:	788a      	ldrb	r2, [r1, #2]
    5628:	4282      	cmp	r2, r0
    562a:	d903      	bls.n	5634 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    562c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5630:	1cc0      	adds	r0, r0, #3
    5632:	4770      	bx	lr
    5634:	2000      	movs	r0, #0
    5636:	4770      	bx	lr
    5638:	200010da 	.word	0x200010da

0000563c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    563c:	4908      	ldr	r1, [pc, #32]	; (5660 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    563e:	788a      	ldrb	r2, [r1, #2]
    5640:	4282      	cmp	r2, r0
    5642:	d903      	bls.n	564c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    5644:	180a      	adds	r2, r1, r0
    5646:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    564a:	b10a      	cbz	r2, 5650 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    564c:	2000      	movs	r0, #0
    564e:	4770      	bx	lr
    5650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5654:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5658:	f200 100b 	addw	r0, r0, #267	; 0x10b
    565c:	4770      	bx	lr
    565e:	0000      	.short	0x0000
    5660:	200010da 	.word	0x200010da

00005664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5664:	b510      	push	{r4, lr}
    5666:	f240 12d3 	movw	r2, #467	; 0x1d3
    566a:	2100      	movs	r1, #0
    566c:	4808      	ldr	r0, [pc, #32]	; (5690 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    566e:	f006 ffd5 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5672:	2208      	movs	r2, #8
    5674:	21ff      	movs	r1, #255	; 0xff
    5676:	4807      	ldr	r0, [pc, #28]	; (5694 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5678:	f006 ffd0 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    567c:	4805      	ldr	r0, [pc, #20]	; (5694 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    567e:	2100      	movs	r1, #0
    5680:	1f00      	subs	r0, r0, #4
    5682:	7001      	strb	r1, [r0, #0]
    5684:	7041      	strb	r1, [r0, #1]
    5686:	f44f 7161 	mov.w	r1, #900	; 0x384
    568a:	8041      	strh	r1, [r0, #2]
    568c:	bd10      	pop	{r4, pc}
    568e:	0000      	.short	0x0000
    5690:	200010da 	.word	0x200010da
    5694:	20000274 	.word	0x20000274

00005698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5698:	4901      	ldr	r1, [pc, #4]	; (56a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    569a:	7008      	strb	r0, [r1, #0]
    569c:	4770      	bx	lr
    569e:	0000      	.short	0x0000
    56a0:	20000270 	.word	0x20000270

000056a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    56a4:	4801      	ldr	r0, [pc, #4]	; (56ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    56a6:	7800      	ldrb	r0, [r0, #0]
    56a8:	4770      	bx	lr
    56aa:	0000      	.short	0x0000
    56ac:	20000270 	.word	0x20000270

000056b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    56b0:	4b0b      	ldr	r3, [pc, #44]	; (56e0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    56b2:	b510      	push	{r4, lr}
    56b4:	789c      	ldrb	r4, [r3, #2]
    56b6:	4284      	cmp	r4, r0
    56b8:	d90f      	bls.n	56da <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    56ba:	4418      	add	r0, r3
    56bc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    56c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    56c4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    56c8:	700b      	strb	r3, [r1, #0]
    56ca:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    56ce:	6011      	str	r1, [r2, #0]
    56d0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    56d4:	8090      	strh	r0, [r2, #4]
    56d6:	2001      	movs	r0, #1
    56d8:	bd10      	pop	{r4, pc}
    56da:	2000      	movs	r0, #0
    56dc:	bd10      	pop	{r4, pc}
    56de:	0000      	.short	0x0000
    56e0:	200010da 	.word	0x200010da

000056e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    56e4:	4907      	ldr	r1, [pc, #28]	; (5704 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    56e6:	788a      	ldrb	r2, [r1, #2]
    56e8:	4282      	cmp	r2, r0
    56ea:	d909      	bls.n	5700 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    56ec:	4408      	add	r0, r1
    56ee:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    56f2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    56f6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    56fa:	f000 0001 	and.w	r0, r0, #1
    56fe:	4770      	bx	lr
    5700:	2000      	movs	r0, #0
    5702:	4770      	bx	lr
    5704:	200010da 	.word	0x200010da

00005708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    570c:	4698      	mov	r8, r3
    570e:	4691      	mov	r9, r2
    5710:	460c      	mov	r4, r1
    5712:	4605      	mov	r5, r0
    5714:	f000 f962 	bl	59dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5718:	4606      	mov	r6, r0
    571a:	2810      	cmp	r0, #16
    571c:	d006      	beq.n	572c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    571e:	f000 f92d 	bl	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5722:	2810      	cmp	r0, #16
    5724:	d002      	beq.n	572c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5726:	2012      	movs	r0, #18
    5728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    572c:	4f18      	ldr	r7, [pc, #96]	; (5790 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    572e:	78b8      	ldrb	r0, [r7, #2]
    5730:	2808      	cmp	r0, #8
    5732:	d22a      	bcs.n	578a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5734:	2e10      	cmp	r6, #16
    5736:	d105      	bne.n	5744 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5738:	2200      	movs	r2, #0
    573a:	4621      	mov	r1, r4
    573c:	4628      	mov	r0, r5
    573e:	f000 f931 	bl	59a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5742:	4606      	mov	r6, r0
    5744:	78bc      	ldrb	r4, [r7, #2]
    5746:	2210      	movs	r2, #16
    5748:	1c60      	adds	r0, r4, #1
    574a:	70b8      	strb	r0, [r7, #2]
    574c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5750:	1ce8      	adds	r0, r5, #3
    5752:	4649      	mov	r1, r9
    5754:	f008 fa58 	bl	dc08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5758:	f105 0083 	add.w	r0, r5, #131	; 0x83
    575c:	2210      	movs	r2, #16
    575e:	4641      	mov	r1, r8
    5760:	f008 fa52 	bl	dc08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5764:	2110      	movs	r1, #16
    5766:	4640      	mov	r0, r8
    5768:	f008 faab 	bl	dcc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    576c:	443c      	add	r4, r7
    576e:	2110      	movs	r1, #16
    5770:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5774:	4648      	mov	r0, r9
    5776:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    577a:	f008 faa2 	bl	dcc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    577e:	77e0      	strb	r0, [r4, #31]
    5780:	f804 6c29 	strb.w	r6, [r4, #-41]
    5784:	2000      	movs	r0, #0
    5786:	73e0      	strb	r0, [r4, #15]
    5788:	e7ce      	b.n	5728 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    578a:	2007      	movs	r0, #7
    578c:	e7cc      	b.n	5728 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    578e:	0000      	.short	0x0000
    5790:	200010da 	.word	0x200010da

00005794 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5794:	4806      	ldr	r0, [pc, #24]	; (57b0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5796:	b510      	push	{r4, lr}
    5798:	7880      	ldrb	r0, [r0, #2]
    579a:	1e40      	subs	r0, r0, #1
    579c:	b244      	sxtb	r4, r0
    579e:	e004      	b.n	57aa <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    57a0:	b2e0      	uxtb	r0, r4
    57a2:	f000 f963 	bl	5a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    57a6:	1e64      	subs	r4, r4, #1
    57a8:	b264      	sxtb	r4, r4
    57aa:	2c00      	cmp	r4, #0
    57ac:	daf8      	bge.n	57a0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    57ae:	bd10      	pop	{r4, pc}
    57b0:	200010da 	.word	0x200010da

000057b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    57b4:	4801      	ldr	r0, [pc, #4]	; (57bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    57b6:	8840      	ldrh	r0, [r0, #2]
    57b8:	4770      	bx	lr
    57ba:	0000      	.short	0x0000
    57bc:	20000270 	.word	0x20000270

000057c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    57c0:	b138      	cbz	r0, 57d2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    57c2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    57c6:	4288      	cmp	r0, r1
    57c8:	d803      	bhi.n	57d2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    57ca:	4903      	ldr	r1, [pc, #12]	; (57d8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    57cc:	8048      	strh	r0, [r1, #2]
    57ce:	2001      	movs	r0, #1
    57d0:	4770      	bx	lr
    57d2:	2000      	movs	r0, #0
    57d4:	4770      	bx	lr
    57d6:	0000      	.short	0x0000
    57d8:	20000270 	.word	0x20000270

000057dc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>:
    57dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57e0:	2501      	movs	r5, #1
    57e2:	461f      	mov	r7, r3
    57e4:	4691      	mov	r9, r2
    57e6:	462c      	mov	r4, r5
    57e8:	2600      	movs	r6, #0
    57ea:	f000 f8f7 	bl	59dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    57ee:	2810      	cmp	r0, #16
    57f0:	d023      	beq.n	583a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    57f2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 584c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x70>
    57f6:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    57fa:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    57fe:	f001 0601 	and.w	r6, r1, #1
    5802:	f000 f8bb 	bl	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5806:	4603      	mov	r3, r0
    5808:	2810      	cmp	r0, #16
    580a:	d016      	beq.n	583a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    580c:	b107      	cbz	r7, 5810 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x34>
    580e:	703b      	strb	r3, [r7, #0]
    5810:	4618      	mov	r0, r3
    5812:	f7ff ff07 	bl	5624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5816:	b180      	cbz	r0, 583a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    5818:	f898 1002 	ldrb.w	r1, [r8, #2]
    581c:	4640      	mov	r0, r8
    581e:	4299      	cmp	r1, r3
    5820:	d903      	bls.n	582a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x4e>
    5822:	18c1      	adds	r1, r0, r3
    5824:	f891 414b 	ldrb.w	r4, [r1, #331]	; 0x14b
    5828:	e000      	b.n	582c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x50>
    582a:	2400      	movs	r4, #0
    582c:	eb08 0003 	add.w	r0, r8, r3
    5830:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5834:	2801      	cmp	r0, #1
    5836:	d006      	beq.n	5846 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x6a>
    5838:	2500      	movs	r5, #0
    583a:	ea49 0006 	orr.w	r0, r9, r6
    583e:	4325      	orrs	r5, r4
    5840:	4028      	ands	r0, r5
    5842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5846:	2501      	movs	r5, #1
    5848:	e7f7      	b.n	583a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    584a:	0000      	.short	0x0000
    584c:	200010da 	.word	0x200010da

00005850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5850:	b570      	push	{r4, r5, r6, lr}
    5852:	460d      	mov	r5, r1
    5854:	4606      	mov	r6, r0
    5856:	f000 f8c1 	bl	59dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    585a:	4c10      	ldr	r4, [pc, #64]	; (589c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    585c:	2810      	cmp	r0, #16
    585e:	d007      	beq.n	5870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5860:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5864:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5868:	07c9      	lsls	r1, r1, #31
    586a:	d001      	beq.n	5870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    586c:	2001      	movs	r0, #1
    586e:	bd70      	pop	{r4, r5, r6, pc}
    5870:	7861      	ldrb	r1, [r4, #1]
    5872:	2908      	cmp	r1, #8
    5874:	d210      	bcs.n	5898 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5876:	2810      	cmp	r0, #16
    5878:	d008      	beq.n	588c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    587a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    587e:	2101      	movs	r1, #1
    5880:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5884:	7860      	ldrb	r0, [r4, #1]
    5886:	1c40      	adds	r0, r0, #1
    5888:	7060      	strb	r0, [r4, #1]
    588a:	e7ef      	b.n	586c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    588c:	2201      	movs	r2, #1
    588e:	4629      	mov	r1, r5
    5890:	4630      	mov	r0, r6
    5892:	f000 f887 	bl	59a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5896:	e7f5      	b.n	5884 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5898:	2000      	movs	r0, #0
    589a:	bd70      	pop	{r4, r5, r6, pc}
    589c:	200010da 	.word	0x200010da

000058a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    58a0:	b570      	push	{r4, r5, r6, lr}
    58a2:	4d0b      	ldr	r5, [pc, #44]	; (58d0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    58a4:	7828      	ldrb	r0, [r5, #0]
    58a6:	1e40      	subs	r0, r0, #1
    58a8:	b244      	sxtb	r4, r0
    58aa:	e00a      	b.n	58c2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    58ac:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    58b0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    58b4:	07c0      	lsls	r0, r0, #31
    58b6:	d002      	beq.n	58be <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    58b8:	b2e0      	uxtb	r0, r4
    58ba:	f000 f91f 	bl	5afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    58be:	1e64      	subs	r4, r4, #1
    58c0:	b264      	sxtb	r4, r4
    58c2:	2c00      	cmp	r4, #0
    58c4:	daf2      	bge.n	58ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    58c6:	4903      	ldr	r1, [pc, #12]	; (58d4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    58c8:	2000      	movs	r0, #0
    58ca:	7048      	strb	r0, [r1, #1]
    58cc:	bd70      	pop	{r4, r5, r6, pc}
    58ce:	0000      	.short	0x0000
    58d0:	200010da 	.word	0x200010da
    58d4:	20000270 	.word	0x20000270

000058d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    58d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58dc:	2400      	movs	r4, #0
    58de:	4625      	mov	r5, r4
    58e0:	4e18      	ldr	r6, [pc, #96]	; (5944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    58e2:	e029      	b.n	5938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    58e4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    58e8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    58ec:	07c0      	lsls	r0, r0, #31
    58ee:	d021      	beq.n	5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    58f0:	4628      	mov	r0, r5
    58f2:	f000 f843 	bl	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    58f6:	4603      	mov	r3, r0
    58f8:	f7ff fe94 	bl	5624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    58fc:	4601      	mov	r1, r0
    58fe:	2000      	movs	r0, #0
    5900:	2b10      	cmp	r3, #16
    5902:	d009      	beq.n	5918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5904:	18f2      	adds	r2, r6, r3
    5906:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    590a:	f1bc 0f01 	cmp.w	ip, #1
    590e:	d002      	beq.n	5916 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5910:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5914:	b102      	cbz	r2, 5918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5916:	2001      	movs	r0, #1
    5918:	1e40      	subs	r0, r0, #1
    591a:	4201      	tst	r1, r0
    591c:	d10a      	bne.n	5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    591e:	480a      	ldr	r0, [pc, #40]	; (5948 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5920:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5924:	5503      	strb	r3, [r0, r4]
    5926:	4620      	mov	r0, r4
    5928:	1c64      	adds	r4, r4, #1
    592a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    592e:	b2e4      	uxtb	r4, r4
    5930:	f006 f9cc 	bl	bccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5934:	1c6d      	adds	r5, r5, #1
    5936:	b2ed      	uxtb	r5, r5
    5938:	7830      	ldrb	r0, [r6, #0]
    593a:	42a8      	cmp	r0, r5
    593c:	d8d2      	bhi.n	58e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    593e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5942:	0000      	.short	0x0000
    5944:	200010da 	.word	0x200010da
    5948:	20000274 	.word	0x20000274
    594c:	4602      	mov	r2, r0
    594e:	4809      	ldr	r0, [pc, #36]	; (5974 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5950:	b510      	push	{r4, lr}
    5952:	7800      	ldrb	r0, [r0, #0]
    5954:	460b      	mov	r3, r1
    5956:	b158      	cbz	r0, 5970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5958:	4807      	ldr	r0, [pc, #28]	; (5978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    595a:	7881      	ldrb	r1, [r0, #2]
    595c:	b141      	cbz	r1, 5970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    595e:	b10b      	cbz	r3, 5964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5960:	1cc0      	adds	r0, r0, #3
    5962:	e001      	b.n	5968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5964:	4804      	ldr	r0, [pc, #16]	; (5978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5966:	3083      	adds	r0, #131	; 0x83
    5968:	f005 fb5c 	bl	b024 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    596c:	2001      	movs	r0, #1
    596e:	bd10      	pop	{r4, pc}
    5970:	2000      	movs	r0, #0
    5972:	bd10      	pop	{r4, pc}
    5974:	20000270 	.word	0x20000270
    5978:	200010da 	.word	0x200010da
    597c:	4908      	ldr	r1, [pc, #32]	; (59a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    597e:	b510      	push	{r4, lr}
    5980:	4603      	mov	r3, r0
    5982:	2000      	movs	r0, #0
    5984:	788a      	ldrb	r2, [r1, #2]
    5986:	e006      	b.n	5996 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5988:	180c      	adds	r4, r1, r0
    598a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    598e:	429c      	cmp	r4, r3
    5990:	d004      	beq.n	599c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5992:	1c40      	adds	r0, r0, #1
    5994:	b2c0      	uxtb	r0, r0
    5996:	4282      	cmp	r2, r0
    5998:	d8f6      	bhi.n	5988 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    599a:	2010      	movs	r0, #16
    599c:	bd10      	pop	{r4, pc}
    599e:	0000      	.short	0x0000
    59a0:	200010da 	.word	0x200010da
    59a4:	b570      	push	{r4, r5, r6, lr}
    59a6:	4b0c      	ldr	r3, [pc, #48]	; (59d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    59a8:	4604      	mov	r4, r0
    59aa:	7818      	ldrb	r0, [r3, #0]
    59ac:	1c45      	adds	r5, r0, #1
    59ae:	701d      	strb	r5, [r3, #0]
    59b0:	2810      	cmp	r0, #16
    59b2:	d303      	bcc.n	59bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    59b4:	2146      	movs	r1, #70	; 0x46
    59b6:	2028      	movs	r0, #40	; 0x28
    59b8:	f7fe f9ae 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    59c0:	680d      	ldr	r5, [r1, #0]
    59c2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    59c6:	8889      	ldrh	r1, [r1, #4]
    59c8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    59cc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    59d0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    59d4:	bd70      	pop	{r4, r5, r6, pc}
    59d6:	0000      	.short	0x0000
    59d8:	200010da 	.word	0x200010da
    59dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59e0:	460f      	mov	r7, r1
    59e2:	4606      	mov	r6, r0
    59e4:	2400      	movs	r4, #0
    59e6:	4d0d      	ldr	r5, [pc, #52]	; (5a1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    59e8:	e00f      	b.n	5a0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    59ea:	bf00      	nop
    59ec:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    59f0:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    59f4:	42b1      	cmp	r1, r6
    59f6:	d106      	bne.n	5a06 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    59f8:	2206      	movs	r2, #6
    59fa:	4639      	mov	r1, r7
    59fc:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5a00:	f006 fd80 	bl	c504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a04:	b138      	cbz	r0, 5a16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5a06:	1c64      	adds	r4, r4, #1
    5a08:	b2e4      	uxtb	r4, r4
    5a0a:	7828      	ldrb	r0, [r5, #0]
    5a0c:	42a0      	cmp	r0, r4
    5a0e:	d8ed      	bhi.n	59ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5a10:	2010      	movs	r0, #16
    5a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a16:	4620      	mov	r0, r4
    5a18:	e7fb      	b.n	5a12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5a1a:	0000      	.short	0x0000
    5a1c:	200010da 	.word	0x200010da
    5a20:	b570      	push	{r4, r5, r6, lr}
    5a22:	4605      	mov	r5, r0
    5a24:	f7ff ffaa 	bl	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a28:	2810      	cmp	r0, #16
    5a2a:	d11c      	bne.n	5a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a2c:	4c0e      	ldr	r4, [pc, #56]	; (5a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5a2e:	7820      	ldrb	r0, [r4, #0]
    5a30:	1e40      	subs	r0, r0, #1
    5a32:	b2c0      	uxtb	r0, r0
    5a34:	7020      	strb	r0, [r4, #0]
    5a36:	42a8      	cmp	r0, r5
    5a38:	d015      	beq.n	5a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a3a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5a42:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5a46:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5a4a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5a4e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5a52:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5a56:	7820      	ldrb	r0, [r4, #0]
    5a58:	f7ff ff90 	bl	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a5c:	2810      	cmp	r0, #16
    5a5e:	d002      	beq.n	5a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a60:	4420      	add	r0, r4
    5a62:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5a66:	bd70      	pop	{r4, r5, r6, pc}
    5a68:	200010da 	.word	0x200010da
    5a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a70:	4c21      	ldr	r4, [pc, #132]	; (5af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5a72:	4606      	mov	r6, r0
    5a74:	19a7      	adds	r7, r4, r6
    5a76:	78a0      	ldrb	r0, [r4, #2]
    5a78:	1e40      	subs	r0, r0, #1
    5a7a:	b2c5      	uxtb	r5, r0
    5a7c:	70a5      	strb	r5, [r4, #2]
    5a7e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5a82:	42ae      	cmp	r6, r5
    5a84:	d02a      	beq.n	5adc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5a86:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5a8a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5a8e:	f10a 0103 	add.w	r1, sl, #3
    5a92:	f109 0003 	add.w	r0, r9, #3
    5a96:	2210      	movs	r2, #16
    5a98:	f006 fd46 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a9c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5aa0:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5aa4:	2210      	movs	r2, #16
    5aa6:	f006 fd3f 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5aaa:	1960      	adds	r0, r4, r5
    5aac:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5ab0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5ab4:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5ab8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5abc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5ac0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5ac4:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5ac8:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5acc:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5ad0:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5ad4:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5ad8:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5adc:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5ae0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5ae4:	07c0      	lsls	r0, r0, #31
    5ae6:	d104      	bne.n	5af2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5ae8:	4640      	mov	r0, r8
    5aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5aee:	f7ff bf97 	b.w	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5af6:	0000      	.short	0x0000
    5af8:	200010da 	.word	0x200010da
    5afc:	4905      	ldr	r1, [pc, #20]	; (5b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5afe:	784a      	ldrb	r2, [r1, #1]
    5b00:	1e52      	subs	r2, r2, #1
    5b02:	704a      	strb	r2, [r1, #1]
    5b04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5b08:	2200      	movs	r2, #0
    5b0a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5b0e:	f7ff bf87 	b.w	5a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5b12:	0000      	.short	0x0000
    5b14:	200010da 	.word	0x200010da

00005b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    5b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b1c:	4604      	mov	r4, r0
    5b1e:	f100 0778 	add.w	r7, r0, #120	; 0x78
    5b22:	b171      	cbz	r1, 5b42 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    5b24:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    5b28:	1e75      	subs	r5, r6, #1
    5b2a:	2901      	cmp	r1, #1
    5b2c:	d016      	beq.n	5b5c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    5b2e:	2902      	cmp	r1, #2
    5b30:	d025      	beq.n	5b7e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    5b32:	2903      	cmp	r1, #3
    5b34:	d110      	bne.n	5b58 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    5b36:	4631      	mov	r1, r6
    5b38:	4628      	mov	r0, r5
    5b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b3e:	f008 b912 	b.w	dd66 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5b42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5b46:	2100      	movs	r1, #0
    5b48:	f006 fd68 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b4c:	4638      	mov	r0, r7
    5b4e:	f008 f8c7 	bl	dce0 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    5b52:	2020      	movs	r0, #32
    5b54:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    5b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b5c:	68e1      	ldr	r1, [r4, #12]
    5b5e:	480d      	ldr	r0, [pc, #52]	; (5b94 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    5b60:	460a      	mov	r2, r1
    5b62:	4408      	add	r0, r1
    5b64:	fbb0 f0f1 	udiv	r0, r0, r1
    5b68:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    5b6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5b70:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    5b74:	8ae3      	ldrh	r3, [r4, #22]
    5b76:	4638      	mov	r0, r7
    5b78:	f000 f80e 	bl	5b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5b7c:	e7db      	b.n	5b36 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    5b7e:	68c1      	ldr	r1, [r0, #12]
    5b80:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    5b84:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    5b88:	4638      	mov	r0, r7
    5b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b8e:	f000 b803 	b.w	5b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5b92:	0000      	.short	0x0000
    5b94:	01c9c37f 	.word	0x01c9c37f
    5b98:	b530      	push	{r4, r5, lr}
    5b9a:	2400      	movs	r4, #0
    5b9c:	86c4      	strh	r4, [r0, #54]	; 0x36
    5b9e:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    5ba0:	4d13      	ldr	r5, [pc, #76]	; (5bf0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    5ba2:	434c      	muls	r4, r1
    5ba4:	fbb4 f4f2 	udiv	r4, r4, r2
    5ba8:	8744      	strh	r4, [r0, #58]	; 0x3a
    5baa:	f242 7410 	movw	r4, #10000	; 0x2710
    5bae:	4363      	muls	r3, r4
    5bb0:	fbb3 f3f2 	udiv	r3, r3, r2
    5bb4:	1c5b      	adds	r3, r3, #1
    5bb6:	b29b      	uxth	r3, r3
    5bb8:	fb03 f402 	mul.w	r4, r3, r2
    5bbc:	8703      	strh	r3, [r0, #56]	; 0x38
    5bbe:	42ac      	cmp	r4, r5
    5bc0:	d901      	bls.n	5bc6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    5bc2:	1e5b      	subs	r3, r3, #1
    5bc4:	8703      	strh	r3, [r0, #56]	; 0x38
    5bc6:	4b0b      	ldr	r3, [pc, #44]	; (5bf4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    5bc8:	f240 2471 	movw	r4, #625	; 0x271
    5bcc:	fbb3 f3f2 	udiv	r3, r3, r2
    5bd0:	1c5b      	adds	r3, r3, #1
    5bd2:	87c3      	strh	r3, [r0, #62]	; 0x3e
    5bd4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5bd6:	4363      	muls	r3, r4
    5bd8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5bdc:	1e5b      	subs	r3, r3, #1
    5bde:	fbb3 f3f2 	udiv	r3, r3, r2
    5be2:	62c3      	str	r3, [r0, #44]	; 0x2c
    5be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5be6:	434b      	muls	r3, r1
    5be8:	fbb3 f1f2 	udiv	r1, r3, r2
    5bec:	6281      	str	r1, [r0, #40]	; 0x28
    5bee:	bd30      	pop	{r4, r5, pc}
    5bf0:	01e84800 	.word	0x01e84800
    5bf4:	02625a00 	.word	0x02625a00

00005bf8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5bf8:	4909      	ldr	r1, [pc, #36]	; (5c20 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5bfa:	b508      	push	{r3, lr}
    5bfc:	7809      	ldrb	r1, [r1, #0]
    5bfe:	f88d 1000 	strb.w	r1, [sp]
    5c02:	9900      	ldr	r1, [sp, #0]
    5c04:	9100      	str	r1, [sp, #0]
    5c06:	f89d 1000 	ldrb.w	r1, [sp]
    5c0a:	b109      	cbz	r1, 5c10 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    5c0c:	2000      	movs	r0, #0
    5c0e:	bd08      	pop	{r3, pc}
    5c10:	4903      	ldr	r1, [pc, #12]	; (5c20 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5c12:	f8d1 2001 	ldr.w	r2, [r1, #1]
    5c16:	6002      	str	r2, [r0, #0]
    5c18:	7949      	ldrb	r1, [r1, #5]
    5c1a:	7101      	strb	r1, [r0, #4]
    5c1c:	2001      	movs	r0, #1
    5c1e:	bd08      	pop	{r3, pc}
    5c20:	2000028f 	.word	0x2000028f

00005c24 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    5c24:	4905      	ldr	r1, [pc, #20]	; (5c3c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    5c26:	2201      	movs	r2, #1
    5c28:	700a      	strb	r2, [r1, #0]
    5c2a:	460a      	mov	r2, r1
    5c2c:	6803      	ldr	r3, [r0, #0]
    5c2e:	f8c2 3001 	str.w	r3, [r2, #1]
    5c32:	7900      	ldrb	r0, [r0, #4]
    5c34:	7150      	strb	r0, [r2, #5]
    5c36:	2000      	movs	r0, #0
    5c38:	7008      	strb	r0, [r1, #0]
    5c3a:	4770      	bx	lr
    5c3c:	2000028f 	.word	0x2000028f

00005c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5c40:	b570      	push	{r4, r5, r6, lr}
    5c42:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5c46:	b28b      	uxth	r3, r1
    5c48:	7ac5      	ldrb	r5, [r0, #11]
    5c4a:	ea83 0102 	eor.w	r1, r3, r2
    5c4e:	2200      	movs	r2, #0
    5c50:	b2cc      	uxtb	r4, r1
    5c52:	0a09      	lsrs	r1, r1, #8
    5c54:	fa94 f4a4 	rbit	r4, r4
    5c58:	fa91 f1a1 	rbit	r1, r1
    5c5c:	0e24      	lsrs	r4, r4, #24
    5c5e:	0e09      	lsrs	r1, r1, #24
    5c60:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5c64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5c68:	1c52      	adds	r2, r2, #1
    5c6a:	4419      	add	r1, r3
    5c6c:	b2d2      	uxtb	r2, r2
    5c6e:	b289      	uxth	r1, r1
    5c70:	2a03      	cmp	r2, #3
    5c72:	d3ed      	bcc.n	5c50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5c74:	4059      	eors	r1, r3
    5c76:	2225      	movs	r2, #37	; 0x25
    5c78:	fbb1 f3f2 	udiv	r3, r1, r2
    5c7c:	fb02 1213 	mls	r2, r2, r3, r1
    5c80:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5c84:	f002 0607 	and.w	r6, r2, #7
    5c88:	785b      	ldrb	r3, [r3, #1]
    5c8a:	2401      	movs	r4, #1
    5c8c:	fa04 f606 	lsl.w	r6, r4, r6
    5c90:	4233      	tst	r3, r6
    5c92:	d001      	beq.n	5c98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5c94:	4610      	mov	r0, r2
    5c96:	bd70      	pop	{r4, r5, r6, pc}
    5c98:	434d      	muls	r5, r1
    5c9a:	0c29      	lsrs	r1, r5, #16
    5c9c:	1c49      	adds	r1, r1, #1
    5c9e:	b2c9      	uxtb	r1, r1
    5ca0:	2200      	movs	r2, #0
    5ca2:	1885      	adds	r5, r0, r2
    5ca4:	79ab      	ldrb	r3, [r5, #6]
    5ca6:	428b      	cmp	r3, r1
    5ca8:	d312      	bcc.n	5cd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5caa:	f895 5001 	ldrb.w	r5, [r5, #1]
    5cae:	2300      	movs	r3, #0
    5cb0:	fa04 f603 	lsl.w	r6, r4, r3
    5cb4:	4235      	tst	r5, r6
    5cb6:	d001      	beq.n	5cbc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5cb8:	1e49      	subs	r1, r1, #1
    5cba:	b2c9      	uxtb	r1, r1
    5cbc:	b121      	cbz	r1, 5cc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5cbe:	1c5b      	adds	r3, r3, #1
    5cc0:	b2db      	uxtb	r3, r3
    5cc2:	2b08      	cmp	r3, #8
    5cc4:	d3f4      	bcc.n	5cb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5cc6:	e005      	b.n	5cd4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5cc8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5ccc:	b2c0      	uxtb	r0, r0
    5cce:	bd70      	pop	{r4, r5, r6, pc}
    5cd0:	1ac9      	subs	r1, r1, r3
    5cd2:	b2c9      	uxtb	r1, r1
    5cd4:	1c52      	adds	r2, r2, #1
    5cd6:	b2d2      	uxtb	r2, r2
    5cd8:	2a05      	cmp	r2, #5
    5cda:	d3e2      	bcc.n	5ca2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5cdc:	f240 110d 	movw	r1, #269	; 0x10d
    5ce0:	2046      	movs	r0, #70	; 0x46
    5ce2:	f7fe f819 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ce6:	0000      	movs	r0, r0
    5ce8:	b570      	push	{r4, r5, r6, lr}
    5cea:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5cee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5cf2:	2401      	movs	r4, #1
    5cf4:	fb03 2101 	mla	r1, r3, r1, r2
    5cf8:	2225      	movs	r2, #37	; 0x25
    5cfa:	fbb1 f3f2 	udiv	r3, r1, r2
    5cfe:	fb02 1113 	mls	r1, r2, r3, r1
    5d02:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5d06:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5d0a:	f001 0307 	and.w	r3, r1, #7
    5d0e:	7d92      	ldrb	r2, [r2, #22]
    5d10:	fa04 f303 	lsl.w	r3, r4, r3
    5d14:	421a      	tst	r2, r3
    5d16:	d003      	beq.n	5d20 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5d18:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5d1c:	2000      	movs	r0, #0
    5d1e:	bd70      	pop	{r4, r5, r6, pc}
    5d20:	f890 2020 	ldrb.w	r2, [r0, #32]
    5d24:	fbb1 f3f2 	udiv	r3, r1, r2
    5d28:	fb02 1113 	mls	r1, r2, r3, r1
    5d2c:	1c49      	adds	r1, r1, #1
    5d2e:	b2c9      	uxtb	r1, r1
    5d30:	2300      	movs	r3, #0
    5d32:	18c5      	adds	r5, r0, r3
    5d34:	7eea      	ldrb	r2, [r5, #27]
    5d36:	428a      	cmp	r2, r1
    5d38:	d311      	bcc.n	5d5e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5d3a:	f895 5016 	ldrb.w	r5, [r5, #22]
    5d3e:	2200      	movs	r2, #0
    5d40:	fa04 f602 	lsl.w	r6, r4, r2
    5d44:	4235      	tst	r5, r6
    5d46:	d001      	beq.n	5d4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5d48:	1e49      	subs	r1, r1, #1
    5d4a:	b2c9      	uxtb	r1, r1
    5d4c:	b121      	cbz	r1, 5d58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5d4e:	1c52      	adds	r2, r2, #1
    5d50:	b2d2      	uxtb	r2, r2
    5d52:	2a08      	cmp	r2, #8
    5d54:	d3f4      	bcc.n	5d40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5d56:	e004      	b.n	5d62 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5d58:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5d5c:	e7dc      	b.n	5d18 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5d5e:	1a89      	subs	r1, r1, r2
    5d60:	b2c9      	uxtb	r1, r1
    5d62:	1c5b      	adds	r3, r3, #1
    5d64:	b2db      	uxtb	r3, r3
    5d66:	2b05      	cmp	r3, #5
    5d68:	d3e3      	bcc.n	5d32 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5d6a:	201f      	movs	r0, #31
    5d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

00005d70 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5d70:	7841      	ldrb	r1, [r0, #1]
    5d72:	b141      	cbz	r1, 5d86 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5d74:	78c0      	ldrb	r0, [r0, #3]
    5d76:	2819      	cmp	r0, #25
    5d78:	d203      	bcs.n	5d82 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5d7a:	4a04      	ldr	r2, [pc, #16]	; (5d8c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5d7c:	5c10      	ldrb	r0, [r2, r0]
    5d7e:	4288      	cmp	r0, r1
    5d80:	d101      	bne.n	5d86 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5d82:	2001      	movs	r0, #1
    5d84:	4770      	bx	lr
    5d86:	2000      	movs	r0, #0
    5d88:	4770      	bx	lr
    5d8a:	0000      	.short	0x0000
    5d8c:	0000f938 	.word	0x0000f938

00005d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5d90:	b510      	push	{r4, lr}
    5d92:	2201      	movs	r2, #1
    5d94:	70c1      	strb	r1, [r0, #3]
    5d96:	2919      	cmp	r1, #25
    5d98:	d202      	bcs.n	5da0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5d9a:	4a06      	ldr	r2, [pc, #24]	; (5db4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5d9c:	5c52      	ldrb	r2, [r2, r1]
    5d9e:	e006      	b.n	5dae <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5da0:	29ff      	cmp	r1, #255	; 0xff
    5da2:	d004      	beq.n	5dae <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5da4:	f240 31d5 	movw	r1, #981	; 0x3d5
    5da8:	202a      	movs	r0, #42	; 0x2a
    5daa:	f7fd ffb5 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dae:	7042      	strb	r2, [r0, #1]
    5db0:	bd10      	pop	{r4, pc}
    5db2:	0000      	.short	0x0000
    5db4:	0000f938 	.word	0x0000f938

00005db8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5dbc:	ea5f 0900 	movs.w	r9, r0
    5dc0:	d006      	beq.n	5dd0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5dc2:	4c21      	ldr	r4, [pc, #132]	; (5e48 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5dc4:	f104 0010 	add.w	r0, r4, #16
    5dc8:	7b61      	ldrb	r1, [r4, #13]
    5dca:	4682      	mov	sl, r0
    5dcc:	b119      	cbz	r1, 5dd6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5dce:	e00b      	b.n	5de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5dd0:	f240 3193 	movw	r1, #915	; 0x393
    5dd4:	e005      	b.n	5de2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5dd6:	2100      	movs	r1, #0
    5dd8:	f008 f940 	bl	e05c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    5ddc:	b120      	cbz	r0, 5de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5dde:	f240 3196 	movw	r1, #918	; 0x396
    5de2:	202b      	movs	r0, #43	; 0x2b
    5de4:	f7fd ff98 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5de8:	8a26      	ldrh	r6, [r4, #16]
    5dea:	2000      	movs	r0, #0
    5dec:	f7fe f978 	bl	40e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5df0:	4f16      	ldr	r7, [pc, #88]	; (5e4c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5df2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5e50 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5df6:	4605      	mov	r5, r0
    5df8:	6839      	ldr	r1, [r7, #0]
    5dfa:	b129      	cbz	r1, 5e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    5dfc:	8a20      	ldrh	r0, [r4, #16]
    5dfe:	42a8      	cmp	r0, r5
    5e00:	d102      	bne.n	5e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    5e02:	4648      	mov	r0, r9
    5e04:	4788      	blx	r1
    5e06:	e005      	b.n	5e14 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5e08:	f8d8 2000 	ldr.w	r2, [r8]
    5e0c:	b11a      	cbz	r2, 5e16 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5e>
    5e0e:	8a20      	ldrh	r0, [r4, #16]
    5e10:	4649      	mov	r1, r9
    5e12:	4790      	blx	r2
    5e14:	b998      	cbnz	r0, 5e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5e16:	2100      	movs	r1, #0
    5e18:	4650      	mov	r0, sl
    5e1a:	f008 f91f 	bl	e05c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    5e1e:	b910      	cbnz	r0, 5e26 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6e>
    5e20:	8a20      	ldrh	r0, [r4, #16]
    5e22:	42b0      	cmp	r0, r6
    5e24:	d1e8      	bne.n	5df8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5e26:	480b      	ldr	r0, [pc, #44]	; (5e54 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5e28:	6801      	ldr	r1, [r0, #0]
    5e2a:	b111      	cbz	r1, 5e32 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5e2c:	4648      	mov	r0, r9
    5e2e:	4788      	blx	r1
    5e30:	b928      	cbnz	r0, 5e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5e32:	4809      	ldr	r0, [pc, #36]	; (5e58 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xa0>)
    5e34:	6801      	ldr	r1, [r0, #0]
    5e36:	b129      	cbz	r1, 5e44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5e38:	4648      	mov	r0, r9
    5e3a:	4788      	blx	r1
    5e3c:	b110      	cbz	r0, 5e44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5e3e:	2001      	movs	r0, #1
    5e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e44:	2000      	movs	r0, #0
    5e46:	e7fb      	b.n	5e40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5e48:	20000f78 	.word	0x20000f78
    5e4c:	20000218 	.word	0x20000218
    5e50:	2000020c 	.word	0x2000020c
    5e54:	2000021c 	.word	0x2000021c
    5e58:	20000208 	.word	0x20000208

00005e5c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5e5c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e60:	b087      	sub	sp, #28
    5e62:	460c      	mov	r4, r1
    5e64:	a902      	add	r1, sp, #8
    5e66:	9807      	ldr	r0, [sp, #28]
    5e68:	f007 fd79 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5e6c:	2800      	cmp	r0, #0
    5e6e:	d17d      	bne.n	5f6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5e70:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5f94 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    5e74:	f04f 0801 	mov.w	r8, #1
    5e78:	4682      	mov	sl, r0
    5e7a:	9803      	ldr	r0, [sp, #12]
    5e7c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    5e80:	2800      	cmp	r0, #0
    5e82:	d00c      	beq.n	5e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5e84:	f8d9 2000 	ldr.w	r2, [r9]
    5e88:	b162      	cbz	r2, 5ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5e8a:	4621      	mov	r1, r4
    5e8c:	9807      	ldr	r0, [sp, #28]
    5e8e:	4790      	blx	r2
    5e90:	b140      	cbz	r0, 5ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5e92:	4620      	mov	r0, r4
    5e94:	f000 f9c0 	bl	6218 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1b0>
    5e98:	2800      	cmp	r0, #0
    5e9a:	d1ee      	bne.n	5e7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5e9c:	2001      	movs	r0, #1
    5e9e:	b009      	add	sp, #36	; 0x24
    5ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ea4:	9d03      	ldr	r5, [sp, #12]
    5ea6:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    5eaa:	3578      	adds	r5, #120	; 0x78
    5eac:	b950      	cbnz	r0, 5ec4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5eae:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5eb2:	f88d 0004 	strb.w	r0, [sp, #4]
    5eb6:	9801      	ldr	r0, [sp, #4]
    5eb8:	9001      	str	r0, [sp, #4]
    5eba:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5ebe:	b108      	cbz	r0, 5ec4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5ec0:	2001      	movs	r0, #1
    5ec2:	e000      	b.n	5ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    5ec4:	2000      	movs	r0, #0
    5ec6:	4683      	mov	fp, r0
    5ec8:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    5ecc:	b1c0      	cbz	r0, 5f00 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5ece:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    5ed2:	0780      	lsls	r0, r0, #30
    5ed4:	d514      	bpl.n	5f00 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5ed6:	f884 a001 	strb.w	sl, [r4, #1]
    5eda:	f884 8000 	strb.w	r8, [r4]
    5ede:	f884 a004 	strb.w	sl, [r4, #4]
    5ee2:	9907      	ldr	r1, [sp, #28]
    5ee4:	f8a4 1005 	strh.w	r1, [r4, #5]
    5ee8:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    5eec:	71e1      	strb	r1, [r4, #7]
    5eee:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    5ef2:	8121      	strh	r1, [r4, #8]
    5ef4:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    5ef8:	8161      	strh	r1, [r4, #10]
    5efa:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    5efe:	e7c8      	b.n	5e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f00:	9807      	ldr	r0, [sp, #28]
    5f02:	f7fe fb1d 	bl	4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f06:	0007      	movs	r7, r0
    5f08:	d00d      	beq.n	5f26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    5f0a:	f007 f9bf 	bl	d28c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5f0e:	0006      	movs	r6, r0
    5f10:	d015      	beq.n	5f3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    5f12:	f884 a001 	strb.w	sl, [r4, #1]
    5f16:	200f      	movs	r0, #15
    5f18:	7020      	strb	r0, [r4, #0]
    5f1a:	9807      	ldr	r0, [sp, #28]
    5f1c:	80e0      	strh	r0, [r4, #6]
    5f1e:	8126      	strh	r6, [r4, #8]
    5f20:	f884 8004 	strb.w	r8, [r4, #4]
    5f24:	e007      	b.n	5f36 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    5f26:	f240 213a 	movw	r1, #570	; 0x23a
    5f2a:	e02d      	b.n	5f88 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5f2c:	2100      	movs	r1, #0
    5f2e:	4638      	mov	r0, r7
    5f30:	460a      	mov	r2, r1
    5f32:	f007 facf 	bl	d4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5f36:	1e76      	subs	r6, r6, #1
    5f38:	b2b6      	uxth	r6, r6
    5f3a:	d2f7      	bcs.n	5f2c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    5f3c:	e7a9      	b.n	5e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f3e:	9807      	ldr	r0, [sp, #28]
    5f40:	f7fe fae8 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5f44:	b1f0      	cbz	r0, 5f84 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    5f46:	f1bb 0f00 	cmp.w	fp, #0
    5f4a:	d020      	beq.n	5f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5f4c:	f007 f8b8 	bl	d0c0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5f50:	b160      	cbz	r0, 5f6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5f52:	9807      	ldr	r0, [sp, #28]
    5f54:	f007 fbe8 	bl	d728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5f58:	2100      	movs	r1, #0
    5f5a:	9807      	ldr	r0, [sp, #28]
    5f5c:	f7fe f95a 	bl	4214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5f60:	f884 a001 	strb.w	sl, [r4, #1]
    5f64:	210c      	movs	r1, #12
    5f66:	4650      	mov	r0, sl
    5f68:	7021      	strb	r1, [r4, #0]
    5f6a:	e000      	b.n	5f6e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    5f6c:	e00f      	b.n	5f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5f6e:	f884 a004 	strb.w	sl, [r4, #4]
    5f72:	9907      	ldr	r1, [sp, #28]
    5f74:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f78:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    5f7c:	71e1      	strb	r1, [r4, #7]
    5f7e:	3524      	adds	r5, #36	; 0x24
    5f80:	7028      	strb	r0, [r5, #0]
    5f82:	e786      	b.n	5e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f84:	f44f 7116 	mov.w	r1, #600	; 0x258
    5f88:	202b      	movs	r0, #43	; 0x2b
    5f8a:	f7fd fec5 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f8e:	2000      	movs	r0, #0
    5f90:	e785      	b.n	5e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5f92:	0000      	.short	0x0000
    5f94:	20000210 	.word	0x20000210

00005f98 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI>:
    5f98:	b570      	push	{r4, r5, r6, lr}
    5f9a:	4604      	mov	r4, r0
    5f9c:	481b      	ldr	r0, [pc, #108]	; (600c <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x74>)
    5f9e:	6801      	ldr	r1, [r0, #0]
    5fa0:	b319      	cbz	r1, 5fea <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    5fa2:	4620      	mov	r0, r4
    5fa4:	4788      	blx	r1
    5fa6:	b300      	cbz	r0, 5fea <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    5fa8:	7820      	ldrb	r0, [r4, #0]
    5faa:	2818      	cmp	r0, #24
    5fac:	d002      	beq.n	5fb4 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x1c>
    5fae:	2805      	cmp	r0, #5
    5fb0:	d016      	beq.n	5fe0 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x48>
    5fb2:	e018      	b.n	5fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5fb4:	7920      	ldrb	r0, [r4, #4]
    5fb6:	2801      	cmp	r0, #1
    5fb8:	d115      	bne.n	5fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5fba:	88e0      	ldrh	r0, [r4, #6]
    5fbc:	2100      	movs	r1, #0
    5fbe:	f007 fb50 	bl	d662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5fc2:	0004      	movs	r4, r0
    5fc4:	d00f      	beq.n	5fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5fc6:	8820      	ldrh	r0, [r4, #0]
    5fc8:	f007 fbae 	bl	d728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5fcc:	8820      	ldrh	r0, [r4, #0]
    5fce:	2100      	movs	r1, #0
    5fd0:	f7fe f920 	bl	4214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5fd4:	b138      	cbz	r0, 5fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    5fd6:	f240 2192 	movw	r1, #658	; 0x292
    5fda:	202b      	movs	r0, #43	; 0x2b
    5fdc:	f7fd fe9c 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fe0:	4620      	mov	r0, r4
    5fe2:	f000 f85b 	bl	609c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    5fe6:	2001      	movs	r0, #1
    5fe8:	bd70      	pop	{r4, r5, r6, pc}
    5fea:	4d09      	ldr	r5, [pc, #36]	; (6010 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x78>)
    5fec:	7868      	ldrb	r0, [r5, #1]
    5fee:	2800      	cmp	r0, #0
    5ff0:	d0fa      	beq.n	5fe8 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x50>
    5ff2:	2600      	movs	r6, #0
    5ff4:	7066      	strb	r6, [r4, #1]
    5ff6:	2014      	movs	r0, #20
    5ff8:	7020      	strb	r0, [r4, #0]
    5ffa:	2220      	movs	r2, #32
    5ffc:	4631      	mov	r1, r6
    5ffe:	1d20      	adds	r0, r4, #4
    6000:	f006 fb0c 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6004:	2002      	movs	r0, #2
    6006:	7120      	strb	r0, [r4, #4]
    6008:	706e      	strb	r6, [r5, #1]
    600a:	e7ec      	b.n	5fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    600c:	20000214 	.word	0x20000214
    6010:	20000f78 	.word	0x20000f78

00006014 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6018:	4c12      	ldr	r4, [pc, #72]	; (6064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    601a:	4607      	mov	r7, r0
    601c:	460e      	mov	r6, r1
    601e:	7de0      	ldrb	r0, [r4, #23]
    6020:	b110      	cbz	r0, 6028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6022:	8b20      	ldrh	r0, [r4, #24]
    6024:	2800      	cmp	r0, #0
    6026:	d012      	beq.n	604e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6028:	480e      	ldr	r0, [pc, #56]	; (6064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    602a:	300e      	adds	r0, #14
    602c:	4680      	mov	r8, r0
    602e:	f007 ffcb 	bl	dfc8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6032:	b9a8      	cbnz	r0, 6060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6034:	89e5      	ldrh	r5, [r4, #14]
    6036:	89e0      	ldrh	r0, [r4, #14]
    6038:	4632      	mov	r2, r6
    603a:	4639      	mov	r1, r7
    603c:	f007 ffc7 	bl	dfce <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x6>
    6040:	b138      	cbz	r0, 6052 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6042:	7de0      	ldrb	r0, [r4, #23]
    6044:	b110      	cbz	r0, 604c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6046:	8b20      	ldrh	r0, [r4, #24]
    6048:	1e40      	subs	r0, r0, #1
    604a:	8320      	strh	r0, [r4, #24]
    604c:	2001      	movs	r0, #1
    604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6052:	4640      	mov	r0, r8
    6054:	f007 ffb8 	bl	dfc8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6058:	b910      	cbnz	r0, 6060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    605a:	89e0      	ldrh	r0, [r4, #14]
    605c:	42a8      	cmp	r0, r5
    605e:	d1ea      	bne.n	6036 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6060:	2000      	movs	r0, #0
    6062:	e7f4      	b.n	604e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6064:	20000f78 	.word	0x20000f78

00006068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    6068:	b510      	push	{r4, lr}
    606a:	7901      	ldrb	r1, [r0, #4]
    606c:	b119      	cbz	r1, 6076 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    606e:	2901      	cmp	r1, #1
    6070:	d006      	beq.n	6080 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6072:	2000      	movs	r0, #0
    6074:	bd10      	pop	{r4, pc}
    6076:	8842      	ldrh	r2, [r0, #2]
    6078:	6883      	ldr	r3, [r0, #8]
    607a:	8800      	ldrh	r0, [r0, #0]
    607c:	2102      	movs	r1, #2
    607e:	e003      	b.n	6088 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6080:	8842      	ldrh	r2, [r0, #2]
    6082:	6883      	ldr	r3, [r0, #8]
    6084:	8800      	ldrh	r0, [r0, #0]
    6086:	2101      	movs	r1, #1
    6088:	f000 f878 	bl	617c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x114>
    608c:	b910      	cbnz	r0, 6094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    608e:	4902      	ldr	r1, [pc, #8]	; (6098 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    6090:	2001      	movs	r0, #1
    6092:	7008      	strb	r0, [r1, #0]
    6094:	2001      	movs	r0, #1
    6096:	bd10      	pop	{r4, pc}
    6098:	20000f78 	.word	0x20000f78
    609c:	b570      	push	{r4, r5, r6, lr}
    609e:	4604      	mov	r4, r0
    60a0:	7800      	ldrb	r0, [r0, #0]
    60a2:	2805      	cmp	r0, #5
    60a4:	d002      	beq.n	60ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x44>
    60a6:	f240 1187 	movw	r1, #391	; 0x187
    60aa:	e059      	b.n	6160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    60ac:	7ba0      	ldrb	r0, [r4, #14]
    60ae:	06c0      	lsls	r0, r0, #27
    60b0:	d402      	bmi.n	60b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x50>
    60b2:	f44f 71c4 	mov.w	r1, #392	; 0x188
    60b6:	e053      	b.n	6160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    60b8:	221c      	movs	r2, #28
    60ba:	1d21      	adds	r1, r4, #4
    60bc:	482e      	ldr	r0, [pc, #184]	; (6178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    60be:	f006 fa33 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    60c2:	482d      	ldr	r0, [pc, #180]	; (6178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    60c4:	7b22      	ldrb	r2, [r4, #12]
    60c6:	f104 0120 	add.w	r1, r4, #32
    60ca:	301c      	adds	r0, #28
    60cc:	f006 fa2c 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    60d0:	4829      	ldr	r0, [pc, #164]	; (6178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    60d2:	f04f 0201 	mov.w	r2, #1
    60d6:	7a81      	ldrb	r1, [r0, #10]
    60d8:	0749      	lsls	r1, r1, #29
    60da:	d502      	bpl.n	60e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7a>
    60dc:	7cc1      	ldrb	r1, [r0, #19]
    60de:	29fe      	cmp	r1, #254	; 0xfe
    60e0:	d00c      	beq.n	60fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x94>
    60e2:	2304      	movs	r3, #4
    60e4:	7023      	strb	r3, [r4, #0]
    60e6:	6801      	ldr	r1, [r0, #0]
    60e8:	6061      	str	r1, [r4, #4]
    60ea:	6841      	ldr	r1, [r0, #4]
    60ec:	60a1      	str	r1, [r4, #8]
    60ee:	8901      	ldrh	r1, [r0, #8]
    60f0:	81a1      	strh	r1, [r4, #12]
    60f2:	7a81      	ldrb	r1, [r0, #10]
    60f4:	070d      	lsls	r5, r1, #28
    60f6:	d519      	bpl.n	612c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    60f8:	73a3      	strb	r3, [r4, #14]
    60fa:	e02c      	b.n	6156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    60fc:	2113      	movs	r1, #19
    60fe:	7021      	strb	r1, [r4, #0]
    6100:	7801      	ldrb	r1, [r0, #0]
    6102:	7121      	strb	r1, [r4, #4]
    6104:	7162      	strb	r2, [r4, #5]
    6106:	7841      	ldrb	r1, [r0, #1]
    6108:	71a1      	strb	r1, [r4, #6]
    610a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    610e:	f8c4 1007 	str.w	r1, [r4, #7]
    6112:	88c1      	ldrh	r1, [r0, #6]
    6114:	f8a4 100b 	strh.w	r1, [r4, #11]
    6118:	21fe      	movs	r1, #254	; 0xfe
    611a:	7361      	strb	r1, [r4, #13]
    611c:	6941      	ldr	r1, [r0, #20]
    611e:	f8c4 100e 	str.w	r1, [r4, #14]
    6122:	8b01      	ldrh	r1, [r0, #24]
    6124:	8261      	strh	r1, [r4, #18]
    6126:	7a40      	ldrb	r0, [r0, #9]
    6128:	7520      	strb	r0, [r4, #20]
    612a:	bd70      	pop	{r4, r5, r6, pc}
    612c:	07cb      	lsls	r3, r1, #31
    612e:	d003      	beq.n	6138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6130:	078b      	lsls	r3, r1, #30
    6132:	d501      	bpl.n	6138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6134:	2100      	movs	r1, #0
    6136:	e00d      	b.n	6154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    6138:	074b      	lsls	r3, r1, #29
    613a:	d501      	bpl.n	6140 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd8>
    613c:	73a2      	strb	r2, [r4, #14]
    613e:	e00a      	b.n	6156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    6140:	07ca      	lsls	r2, r1, #31
    6142:	d002      	beq.n	614a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe2>
    6144:	f240 11cf 	movw	r1, #463	; 0x1cf
    6148:	e00a      	b.n	6160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    614a:	0789      	lsls	r1, r1, #30
    614c:	d501      	bpl.n	6152 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xea>
    614e:	2102      	movs	r1, #2
    6150:	e000      	b.n	6154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    6152:	2103      	movs	r1, #3
    6154:	73a1      	strb	r1, [r4, #14]
    6156:	7a02      	ldrb	r2, [r0, #8]
    6158:	2a1f      	cmp	r2, #31
    615a:	d904      	bls.n	6166 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfe>
    615c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    6160:	202b      	movs	r0, #43	; 0x2b
    6162:	f7fd fdd9 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6166:	f104 000f 	add.w	r0, r4, #15
    616a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    616e:	4902      	ldr	r1, [pc, #8]	; (6178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    6170:	311c      	adds	r1, #28
    6172:	f006 b9d9 	b.w	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6176:	0000      	.short	0x0000
    6178:	20000f3c 	.word	0x20000f3c
    617c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6180:	468a      	mov	sl, r1
    6182:	4699      	mov	r9, r3
    6184:	4615      	mov	r5, r2
    6186:	4604      	mov	r4, r0
    6188:	a901      	add	r1, sp, #4
    618a:	f007 fbe8 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    618e:	bbd8      	cbnz	r0, 6208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    6190:	9f02      	ldr	r7, [sp, #8]
    6192:	2001      	movs	r0, #1
    6194:	3778      	adds	r7, #120	; 0x78
    6196:	b18d      	cbz	r5, 61bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x154>
    6198:	4620      	mov	r0, r4
    619a:	f7fe f9d1 	bl	4540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    619e:	0004      	movs	r4, r0
    61a0:	d00e      	beq.n	61c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x158>
    61a2:	4629      	mov	r1, r5
    61a4:	f007 f8bf 	bl	d326 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    61a8:	0006      	movs	r6, r0
    61aa:	d003      	beq.n	61b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14c>
    61ac:	4819      	ldr	r0, [pc, #100]	; (6214 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ac>)
    61ae:	8880      	ldrh	r0, [r0, #4]
    61b0:	42a8      	cmp	r0, r5
    61b2:	d207      	bcs.n	61c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x15c>
    61b4:	2000      	movs	r0, #0
    61b6:	b004      	add	sp, #16
    61b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61bc:	7538      	strb	r0, [r7, #20]
    61be:	e023      	b.n	6208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    61c0:	2189      	movs	r1, #137	; 0x89
    61c2:	e024      	b.n	620e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a6>
    61c4:	4620      	mov	r0, r4
    61c6:	4631      	mov	r1, r6
    61c8:	aa03      	add	r2, sp, #12
    61ca:	f007 f8a5 	bl	d318 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    61ce:	9803      	ldr	r0, [sp, #12]
    61d0:	f04f 0800 	mov.w	r8, #0
    61d4:	f8a0 8000 	strh.w	r8, [r0]
    61d8:	f880 8002 	strb.w	r8, [r0, #2]
    61dc:	7d39      	ldrb	r1, [r7, #20]
    61de:	b109      	cbz	r1, 61e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17c>
    61e0:	f04f 0a02 	mov.w	sl, #2
    61e4:	4651      	mov	r1, sl
    61e6:	f007 fe69 	bl	debc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    61ea:	4631      	mov	r1, r6
    61ec:	2603      	movs	r6, #3
    61ee:	4620      	mov	r0, r4
    61f0:	464a      	mov	r2, r9
    61f2:	462b      	mov	r3, r5
    61f4:	9600      	str	r6, [sp, #0]
    61f6:	f006 ff4c 	bl	d092 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    61fa:	4620      	mov	r0, r4
    61fc:	4629      	mov	r1, r5
    61fe:	f007 f821 	bl	d244 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6202:	b118      	cbz	r0, 620c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a4>
    6204:	f887 8014 	strb.w	r8, [r7, #20]
    6208:	2001      	movs	r0, #1
    620a:	e7d4      	b.n	61b6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14e>
    620c:	219f      	movs	r1, #159	; 0x9f
    620e:	202b      	movs	r0, #43	; 0x2b
    6210:	f7fd fd82 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6214:	20000f78 	.word	0x20000f78
    6218:	b510      	push	{r4, lr}
    621a:	492c      	ldr	r1, [pc, #176]	; (62cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>)
    621c:	b086      	sub	sp, #24
    621e:	7d8a      	ldrb	r2, [r1, #22]
    6220:	7801      	ldrb	r1, [r0, #0]
    6222:	07d3      	lsls	r3, r2, #31
    6224:	d101      	bne.n	622a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1c2>
    6226:	291d      	cmp	r1, #29
    6228:	d004      	beq.n	6234 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    622a:	291c      	cmp	r1, #28
    622c:	d01e      	beq.n	626c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x204>
    622e:	2915      	cmp	r1, #21
    6230:	d045      	beq.n	62be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x256>
    6232:	e049      	b.n	62c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    6234:	8880      	ldrh	r0, [r0, #4]
    6236:	f8ad 0000 	strh.w	r0, [sp]
    623a:	a902      	add	r1, sp, #8
    623c:	f007 fb8f 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6240:	b108      	cbz	r0, 6246 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1de>
    6242:	2158      	movs	r1, #88	; 0x58
    6244:	e035      	b.n	62b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    6246:	9803      	ldr	r0, [sp, #12]
    6248:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    624c:	f88d 1002 	strb.w	r1, [sp, #2]
    6250:	7841      	ldrb	r1, [r0, #1]
    6252:	f88d 1003 	strb.w	r1, [sp, #3]
    6256:	8840      	ldrh	r0, [r0, #2]
    6258:	f8ad 0004 	strh.w	r0, [sp, #4]
    625c:	2102      	movs	r1, #2
    625e:	4668      	mov	r0, sp
    6260:	f004 fc7e 	bl	ab60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6264:	b340      	cbz	r0, 62b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    6266:	f240 114d 	movw	r1, #333	; 0x14d
    626a:	e022      	b.n	62b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    626c:	0791      	lsls	r1, r2, #30
    626e:	d42b      	bmi.n	62c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    6270:	8884      	ldrh	r4, [r0, #4]
    6272:	a903      	add	r1, sp, #12
    6274:	4620      	mov	r0, r4
    6276:	f008 fe0e 	bl	ee96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    627a:	b110      	cbz	r0, 6282 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21a>
    627c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6280:	e017      	b.n	62b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    6282:	f8ad 4000 	strh.w	r4, [sp]
    6286:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    628a:	f8ad 0002 	strh.w	r0, [sp, #2]
    628e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6292:	f8ad 0004 	strh.w	r0, [sp, #4]
    6296:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    629a:	f8ad 0006 	strh.w	r0, [sp, #6]
    629e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    62a2:	f8ad 0008 	strh.w	r0, [sp, #8]
    62a6:	4668      	mov	r0, sp
    62a8:	f008 fe20 	bl	eeec <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    62ac:	b120      	cbz	r0, 62b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    62ae:	f240 115d 	movw	r1, #349	; 0x15d
    62b2:	202b      	movs	r0, #43	; 0x2b
    62b4:	f7fd fd30 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62b8:	2001      	movs	r0, #1
    62ba:	b006      	add	sp, #24
    62bc:	bd10      	pop	{r4, pc}
    62be:	0751      	lsls	r1, r2, #29
    62c0:	d402      	bmi.n	62c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    62c2:	7b80      	ldrb	r0, [r0, #14]
    62c4:	07c0      	lsls	r0, r0, #31
    62c6:	d0f7      	beq.n	62b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    62c8:	2000      	movs	r0, #0
    62ca:	e7f6      	b.n	62ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x252>
    62cc:	20000f78 	.word	0x20000f78

000062d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>:
    62d0:	b510      	push	{r4, lr}
    62d2:	4603      	mov	r3, r0
    62d4:	4907      	ldr	r1, [pc, #28]	; (62f4 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x24>)
    62d6:	4c08      	ldr	r4, [pc, #32]	; (62f8 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x28>)
    62d8:	2001      	movs	r0, #1
    62da:	780a      	ldrb	r2, [r1, #0]
    62dc:	1c52      	adds	r2, r2, #1
    62de:	f002 021f 	and.w	r2, r2, #31
    62e2:	700a      	strb	r2, [r1, #0]
    62e4:	fa00 f202 	lsl.w	r2, r0, r2
    62e8:	4222      	tst	r2, r4
    62ea:	d0f6      	beq.n	62da <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0xa>
    62ec:	7809      	ldrb	r1, [r1, #0]
    62ee:	4088      	lsls	r0, r1
    62f0:	4058      	eors	r0, r3
    62f2:	bd10      	pop	{r4, pc}
    62f4:	20000295 	.word	0x20000295
    62f8:	abd7aeaa 	.word	0xabd7aeaa

000062fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    62fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    62fe:	f06f 021f 	mvn.w	r2, #31
    6302:	0c01      	lsrs	r1, r0, #16
    6304:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6308:	251f      	movs	r5, #31
    630a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    630e:	3854      	subs	r0, #84	; 0x54
    6310:	d00d      	beq.n	632e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6312:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6316:	3855      	subs	r0, #85	; 0x55
    6318:	d009      	beq.n	632e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    631a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    631e:	38aa      	subs	r0, #170	; 0xaa
    6320:	d005      	beq.n	632e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6322:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    6326:	38aa      	subs	r0, #170	; 0xaa
    6328:	d001      	beq.n	632e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    632a:	2001      	movs	r0, #1
    632c:	e000      	b.n	6330 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    632e:	2000      	movs	r0, #0
    6330:	2200      	movs	r2, #0
    6332:	4613      	mov	r3, r2
    6334:	ea4f 0402 	mov.w	r4, r2
    6338:	ea82 0701 	eor.w	r7, r2, r1
    633c:	43ff      	mvns	r7, r7
    633e:	431f      	orrs	r7, r3
    6340:	1c7f      	adds	r7, r7, #1
    6342:	d00f      	beq.n	6364 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6344:	f006 0701 	and.w	r7, r6, #1
    6348:	0852      	lsrs	r2, r2, #1
    634a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    634e:	f005 0701 	and.w	r7, r5, #1
    6352:	085b      	lsrs	r3, r3, #1
    6354:	0876      	lsrs	r6, r6, #1
    6356:	086d      	lsrs	r5, r5, #1
    6358:	1c64      	adds	r4, r4, #1
    635a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    635e:	2c16      	cmp	r4, #22
    6360:	d3ea      	bcc.n	6338 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6364:	2000      	movs	r0, #0
    6366:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006368 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    6368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    636c:	2500      	movs	r5, #0
    636e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 63fc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x94>
    6372:	f8df 908c 	ldr.w	r9, [pc, #140]	; 6400 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x98>
    6376:	4607      	mov	r7, r0
    6378:	260a      	movs	r6, #10
    637a:	2104      	movs	r1, #4
    637c:	4668      	mov	r0, sp
    637e:	f7fd fd75 	bl	3e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    6382:	9800      	ldr	r0, [sp, #0]
    6384:	ea00 0008 	and.w	r0, r0, r8
    6388:	ea40 0009 	orr.w	r0, r0, r9
    638c:	9000      	str	r0, [sp, #0]
    638e:	2000      	movs	r0, #0
    6390:	f7fd fea6 	bl	40e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6394:	4604      	mov	r4, r0
    6396:	e019      	b.n	63cc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x64>
    6398:	a901      	add	r1, sp, #4
    639a:	2000      	movs	r0, #0
    639c:	f007 f96a 	bl	d674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    63a0:	e00e      	b.n	63c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    63a2:	bf00      	nop
    63a4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    63a8:	42b8      	cmp	r0, r7
    63aa:	d009      	beq.n	63c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    63ac:	9803      	ldr	r0, [sp, #12]
    63ae:	9900      	ldr	r1, [sp, #0]
    63b0:	6900      	ldr	r0, [r0, #16]
    63b2:	4288      	cmp	r0, r1
    63b4:	d104      	bne.n	63c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    63b6:	4608      	mov	r0, r1
    63b8:	f7ff ff8a 	bl	62d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>
    63bc:	9000      	str	r0, [sp, #0]
    63be:	e004      	b.n	63ca <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x62>
    63c0:	a801      	add	r0, sp, #4
    63c2:	f7fd fed9 	bl	4178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    63c6:	0005      	movs	r5, r0
    63c8:	d0ec      	beq.n	63a4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3c>
    63ca:	1e64      	subs	r4, r4, #1
    63cc:	2c00      	cmp	r4, #0
    63ce:	dd01      	ble.n	63d4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x6c>
    63d0:	2d00      	cmp	r5, #0
    63d2:	d0e1      	beq.n	6398 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x30>
    63d4:	2000      	movs	r0, #0
    63d6:	f7fd fe83 	bl	40e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    63da:	b100      	cbz	r0, 63de <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    63dc:	b155      	cbz	r5, 63f4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8c>
    63de:	9800      	ldr	r0, [sp, #0]
    63e0:	f7ff ff8c 	bl	62fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    63e4:	1e76      	subs	r6, r6, #1
    63e6:	d001      	beq.n	63ec <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x84>
    63e8:	2800      	cmp	r0, #0
    63ea:	d0c6      	beq.n	637a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x12>
    63ec:	9800      	ldr	r0, [sp, #0]
    63ee:	b004      	add	sp, #16
    63f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63f4:	2152      	movs	r1, #82	; 0x52
    63f6:	200f      	movs	r0, #15
    63f8:	f7fd fc8e 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63fc:	abd7aeaa 	.word	0xabd7aeaa
    6400:	10204115 	.word	0x10204115

00006404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    6404:	4801      	ldr	r0, [pc, #4]	; (640c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    6406:	6840      	ldr	r0, [r0, #4]
    6408:	3080      	adds	r0, #128	; 0x80
    640a:	4770      	bx	lr
    640c:	200000ec 	.word	0x200000ec

00006410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    6410:	b510      	push	{r4, lr}
    6412:	4c1f      	ldr	r4, [pc, #124]	; (6490 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    6414:	6860      	ldr	r0, [r4, #4]
    6416:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    641a:	f007 ff89 	bl	e330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    641e:	6861      	ldr	r1, [r4, #4]
    6420:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    6424:	3132      	adds	r1, #50	; 0x32
    6426:	f7fe fabd 	bl	49a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    642a:	6860      	ldr	r0, [r4, #4]
    642c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6430:	f007 ff85 	bl	e33e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    6434:	6861      	ldr	r1, [r4, #4]
    6436:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    643a:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    643e:	3132      	adds	r1, #50	; 0x32
    6440:	f007 ff62 	bl	e308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6444:	b930      	cbnz	r0, 6454 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    6446:	6861      	ldr	r1, [r4, #4]
    6448:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    644c:	3132      	adds	r1, #50	; 0x32
    644e:	f007 ff64 	bl	e31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6452:	b108      	cbz	r0, 6458 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    6454:	2101      	movs	r1, #1
    6456:	e000      	b.n	645a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6458:	2100      	movs	r1, #0
    645a:	6860      	ldr	r0, [r4, #4]
    645c:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    6460:	b919      	cbnz	r1, 646a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    6462:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    6466:	2900      	cmp	r1, #0
    6468:	d010      	beq.n	648c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    646a:	2100      	movs	r1, #0
    646c:	6781      	str	r1, [r0, #120]	; 0x78
    646e:	f005 fee6 	bl	c23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6472:	6861      	ldr	r1, [r4, #4]
    6474:	6448      	str	r0, [r1, #68]	; 0x44
    6476:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    647a:	b110      	cbz	r0, 6482 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    647c:	2000      	movs	r0, #0
    647e:	f7ff f883 	bl	5588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    6482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6486:	2000      	movs	r0, #0
    6488:	f000 bddc 	b.w	7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    648c:	bd10      	pop	{r4, pc}
    648e:	0000      	.short	0x0000
    6490:	200000ec 	.word	0x200000ec

00006494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    6494:	b510      	push	{r4, lr}
    6496:	4c09      	ldr	r4, [pc, #36]	; (64bc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    6498:	2803      	cmp	r0, #3
    649a:	6864      	ldr	r4, [r4, #4]
    649c:	d109      	bne.n	64b2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    649e:	63e1      	str	r1, [r4, #60]	; 0x3c
    64a0:	b13b      	cbz	r3, 64b2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    64a2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    64a6:	6819      	ldr	r1, [r3, #0]
    64a8:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    64ac:	8899      	ldrh	r1, [r3, #4]
    64ae:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    64b2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    64b6:	2000      	movs	r0, #0
    64b8:	bd10      	pop	{r4, pc}
    64ba:	0000      	.short	0x0000
    64bc:	200000ec 	.word	0x200000ec

000064c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    64c0:	4807      	ldr	r0, [pc, #28]	; (64e0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    64c2:	b508      	push	{r3, lr}
    64c4:	6840      	ldr	r0, [r0, #4]
    64c6:	7801      	ldrb	r1, [r0, #0]
    64c8:	f88d 1000 	strb.w	r1, [sp]
    64cc:	9900      	ldr	r1, [sp, #0]
    64ce:	9100      	str	r1, [sp, #0]
    64d0:	f89d 1000 	ldrb.w	r1, [sp]
    64d4:	b109      	cbz	r1, 64da <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    64d6:	8880      	ldrh	r0, [r0, #4]
    64d8:	bd08      	pop	{r3, pc}
    64da:	f64f 70ff 	movw	r0, #65535	; 0xffff
    64de:	bd08      	pop	{r3, pc}
    64e0:	200000ec 	.word	0x200000ec

000064e4 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    64e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64e6:	4604      	mov	r4, r0
    64e8:	f007 ff72 	bl	e3d0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    64ec:	bb48      	cbnz	r0, 6542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    64ee:	4e17      	ldr	r6, [pc, #92]	; (654c <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    64f0:	6870      	ldr	r0, [r6, #4]
    64f2:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    64f6:	f88d 1000 	strb.w	r1, [sp]
    64fa:	9900      	ldr	r1, [sp, #0]
    64fc:	9100      	str	r1, [sp, #0]
    64fe:	f89d 1000 	ldrb.w	r1, [sp]
    6502:	2500      	movs	r5, #0
    6504:	b139      	cbz	r1, 6516 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    6506:	7065      	strb	r5, [r4, #1]
    6508:	2107      	movs	r1, #7
    650a:	7021      	strb	r1, [r4, #0]
    650c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    650e:	6061      	str	r1, [r4, #4]
    6510:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    6514:	e015      	b.n	6542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6516:	4620      	mov	r0, r4
    6518:	f000 f9d0 	bl	68bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    651c:	b988      	cbnz	r0, 6542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    651e:	6870      	ldr	r0, [r6, #4]
    6520:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    6524:	f88d 1000 	strb.w	r1, [sp]
    6528:	9900      	ldr	r1, [sp, #0]
    652a:	9100      	str	r1, [sp, #0]
    652c:	f89d 1000 	ldrb.w	r1, [sp]
    6530:	b149      	cbz	r1, 6546 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    6532:	7065      	strb	r5, [r4, #1]
    6534:	2118      	movs	r1, #24
    6536:	7021      	strb	r1, [r4, #0]
    6538:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    653c:	6061      	str	r1, [r4, #4]
    653e:	300a      	adds	r0, #10
    6540:	7785      	strb	r5, [r0, #30]
    6542:	2001      	movs	r0, #1
    6544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6546:	2000      	movs	r0, #0
    6548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    654a:	0000      	.short	0x0000
    654c:	200000ec 	.word	0x200000ec

00006550 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    6550:	4902      	ldr	r1, [pc, #8]	; (655c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    6552:	6849      	ldr	r1, [r1, #4]
    6554:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    6558:	2000      	movs	r0, #0
    655a:	4770      	bx	lr
    655c:	200000ec 	.word	0x200000ec

00006560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    6560:	4809      	ldr	r0, [pc, #36]	; (6588 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    6562:	6841      	ldr	r1, [r0, #4]
    6564:	6d48      	ldr	r0, [r1, #84]	; 0x54
    6566:	b168      	cbz	r0, 6584 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    6568:	f101 0059 	add.w	r0, r1, #89	; 0x59
    656c:	2201      	movs	r2, #1
    656e:	7002      	strb	r2, [r0, #0]
    6570:	2300      	movs	r3, #0
    6572:	654b      	str	r3, [r1, #84]	; 0x54
    6574:	7003      	strb	r3, [r0, #0]
    6576:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    657a:	4082      	lsls	r2, r0
    657c:	4803      	ldr	r0, [pc, #12]	; (658c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    657e:	6002      	str	r2, [r0, #0]
    6580:	2000      	movs	r0, #0
    6582:	4770      	bx	lr
    6584:	200c      	movs	r0, #12
    6586:	4770      	bx	lr
    6588:	200000ec 	.word	0x200000ec
    658c:	4001f508 	.word	0x4001f508

00006590 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    6590:	4909      	ldr	r1, [pc, #36]	; (65b8 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    6592:	b510      	push	{r4, lr}
    6594:	6088      	str	r0, [r1, #8]
    6596:	68c8      	ldr	r0, [r1, #12]
    6598:	b150      	cbz	r0, 65b0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    659a:	f000 ff55 	bl	7448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    659e:	f000 f885 	bl	66ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    65a2:	2800      	cmp	r0, #0
    65a4:	d007      	beq.n	65b6 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    65a6:	f640 0169 	movw	r1, #2153	; 0x869
    65aa:	2032      	movs	r0, #50	; 0x32
    65ac:	f7fd fbb4 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65b0:	f640 0165 	movw	r1, #2149	; 0x865
    65b4:	e7f9      	b.n	65aa <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    65b6:	bd10      	pop	{r4, pc}
    65b8:	200000ec 	.word	0x200000ec

000065bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    65bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65c0:	4c0f      	ldr	r4, [pc, #60]	; (6600 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    65c2:	4605      	mov	r5, r0
    65c4:	4616      	mov	r6, r2
    65c6:	6860      	ldr	r0, [r4, #4]
    65c8:	460f      	mov	r7, r1
    65ca:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    65ce:	f007 feb6 	bl	e33e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    65d2:	b158      	cbz	r0, 65ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    65d4:	b955      	cbnz	r5, 65ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    65d6:	4638      	mov	r0, r7
    65d8:	f007 feaa 	bl	e330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    65dc:	4631      	mov	r1, r6
    65de:	f007 f944 	bl	d86a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    65e2:	2808      	cmp	r0, #8
    65e4:	d002      	beq.n	65ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    65e6:	2001      	movs	r0, #1
    65e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65ec:	6860      	ldr	r0, [r4, #4]
    65ee:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    65f2:	f007 fe9d 	bl	e330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    65f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    65fa:	f7fe b9ff 	b.w	49fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    65fe:	0000      	.short	0x0000
    6600:	200000ec 	.word	0x200000ec

00006604 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    6604:	b570      	push	{r4, r5, r6, lr}
    6606:	4c13      	ldr	r4, [pc, #76]	; (6654 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    6608:	4615      	mov	r5, r2
    660a:	460e      	mov	r6, r1
    660c:	2800      	cmp	r0, #0
    660e:	d016      	beq.n	663e <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    6610:	f04f 0200 	mov.w	r2, #0
    6614:	6861      	ldr	r1, [r4, #4]
    6616:	f801 2f39 	strb.w	r2, [r1, #57]!
    661a:	7248      	strb	r0, [r1, #9]
    661c:	f04f 0008 	mov.w	r0, #8
    6620:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    6624:	d114      	bne.n	6650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6626:	4630      	mov	r0, r6
    6628:	f007 fe82 	bl	e330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    662c:	4629      	mov	r1, r5
    662e:	f007 f91c 	bl	d86a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6632:	6861      	ldr	r1, [r4, #4]
    6634:	2808      	cmp	r0, #8
    6636:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    663a:	d003      	beq.n	6644 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    663c:	e008      	b.n	6650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    663e:	f04f 0201 	mov.w	r2, #1
    6642:	e7e7      	b.n	6614 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    6644:	4630      	mov	r0, r6
    6646:	f007 fe7a 	bl	e33e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    664a:	b108      	cbz	r0, 6650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    664c:	2012      	movs	r0, #18
    664e:	bd70      	pop	{r4, r5, r6, pc}
    6650:	2000      	movs	r0, #0
    6652:	bd70      	pop	{r4, r5, r6, pc}
    6654:	200000ec 	.word	0x200000ec

00006658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    6658:	4902      	ldr	r1, [pc, #8]	; (6664 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    665a:	4801      	ldr	r0, [pc, #4]	; (6660 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    665c:	60c8      	str	r0, [r1, #12]
    665e:	4770      	bx	lr
    6660:	0000768c 	.word	0x0000768c
    6664:	200000ec 	.word	0x200000ec

00006668 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    6668:	4902      	ldr	r1, [pc, #8]	; (6674 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    666a:	6849      	ldr	r1, [r1, #4]
    666c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6670:	4770      	bx	lr
    6672:	0000      	.short	0x0000
    6674:	200000ec 	.word	0x200000ec

00006678 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    6678:	b570      	push	{r4, r5, r6, lr}
    667a:	4605      	mov	r5, r0
    667c:	f7fd ff78 	bl	4570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    6680:	4604      	mov	r4, r0
    6682:	f7fd ff7b 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    6686:	4621      	mov	r1, r4
    6688:	f007 fea0 	bl	e3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    668c:	0001      	movs	r1, r0
    668e:	d006      	beq.n	669e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    6690:	4805      	ldr	r0, [pc, #20]	; (66a8 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    6692:	68c0      	ldr	r0, [r0, #12]
    6694:	6802      	ldr	r2, [r0, #0]
    6696:	4628      	mov	r0, r5
    6698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    669c:	4710      	bx	r2
    669e:	f640 1161 	movw	r1, #2401	; 0x961
    66a2:	2032      	movs	r0, #50	; 0x32
    66a4:	f7fd fb38 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66a8:	200000ec 	.word	0x200000ec

000066ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    66ac:	b570      	push	{r4, r5, r6, lr}
    66ae:	4d19      	ldr	r5, [pc, #100]	; (6714 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    66b0:	6868      	ldr	r0, [r5, #4]
    66b2:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    66b6:	2901      	cmp	r1, #1
    66b8:	d004      	beq.n	66c4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    66ba:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    66be:	b108      	cbz	r0, 66c4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    66c0:	200c      	movs	r0, #12
    66c2:	bd70      	pop	{r4, r5, r6, pc}
    66c4:	f7fd ff7e 	bl	45c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    66c8:	f007 fee6 	bl	e498 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    66cc:	6868      	ldr	r0, [r5, #4]
    66ce:	2400      	movs	r4, #0
    66d0:	7004      	strb	r4, [r0, #0]
    66d2:	f100 0122 	add.w	r1, r0, #34	; 0x22
    66d6:	700c      	strb	r4, [r1, #0]
    66d8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    66dc:	f000 f8b4 	bl	6848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    66e0:	6868      	ldr	r0, [r5, #4]
    66e2:	2201      	movs	r2, #1
    66e4:	2107      	movs	r1, #7
    66e6:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    66ea:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    66ee:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    66f2:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    66f6:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    66fa:	f880 407d 	strb.w	r4, [r0, #125]	; 0x7d
    66fe:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    6702:	f100 0159 	add.w	r1, r0, #89	; 0x59
    6706:	700a      	strb	r2, [r1, #0]
    6708:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    670c:	6544      	str	r4, [r0, #84]	; 0x54
    670e:	700c      	strb	r4, [r1, #0]
    6710:	2000      	movs	r0, #0
    6712:	bd70      	pop	{r4, r5, r6, pc}
    6714:	200000ec 	.word	0x200000ec

00006718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    6718:	4805      	ldr	r0, [pc, #20]	; (6730 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    671a:	b510      	push	{r4, lr}
    671c:	6840      	ldr	r0, [r0, #4]
    671e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6722:	f007 fe05 	bl	e330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    6726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    672a:	f7fe b967 	b.w	49fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    672e:	0000      	.short	0x0000
    6730:	200000ec 	.word	0x200000ec

00006734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    6734:	b140      	cbz	r0, 6748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6736:	2802      	cmp	r0, #2
    6738:	d006      	beq.n	6748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    673a:	2200      	movs	r2, #0
    673c:	4903      	ldr	r1, [pc, #12]	; (674c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    673e:	6849      	ldr	r1, [r1, #4]
    6740:	f801 2f39 	strb.w	r2, [r1, #57]!
    6744:	7208      	strb	r0, [r1, #8]
    6746:	4770      	bx	lr
    6748:	2201      	movs	r2, #1
    674a:	e7f7      	b.n	673c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    674c:	200000ec 	.word	0x200000ec

00006750 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    6750:	4902      	ldr	r1, [pc, #8]	; (675c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    6752:	6849      	ldr	r1, [r1, #4]
    6754:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6758:	4770      	bx	lr
    675a:	0000      	.short	0x0000
    675c:	200000ec 	.word	0x200000ec

00006760 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    6760:	b510      	push	{r4, lr}
    6762:	4604      	mov	r4, r0
    6764:	7800      	ldrb	r0, [r0, #0]
    6766:	07c0      	lsls	r0, r0, #31
    6768:	d007      	beq.n	677a <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    676a:	2300      	movs	r3, #0
    676c:	7860      	ldrb	r0, [r4, #1]
    676e:	461a      	mov	r2, r3
    6770:	4619      	mov	r1, r3
    6772:	f7ff fe8f 	bl	6494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    6776:	2800      	cmp	r0, #0
    6778:	d10c      	bne.n	6794 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    677a:	4b07      	ldr	r3, [pc, #28]	; (6798 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    677c:	78a0      	ldrb	r0, [r4, #2]
    677e:	6859      	ldr	r1, [r3, #4]
    6780:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6784:	78e0      	ldrb	r0, [r4, #3]
    6786:	f7ff ffd5 	bl	6734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    678a:	6859      	ldr	r1, [r3, #4]
    678c:	7920      	ldrb	r0, [r4, #4]
    678e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6792:	2000      	movs	r0, #0
    6794:	bd10      	pop	{r4, pc}
    6796:	0000      	.short	0x0000
    6798:	200000ec 	.word	0x200000ec

0000679c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    679c:	4801      	ldr	r0, [pc, #4]	; (67a4 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    679e:	68c0      	ldr	r0, [r0, #12]
    67a0:	6840      	ldr	r0, [r0, #4]
    67a2:	4700      	bx	r0
    67a4:	200000ec 	.word	0x200000ec

000067a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    67a8:	b510      	push	{r4, lr}
    67aa:	2000      	movs	r0, #0
    67ac:	f000 fc70 	bl	7090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    67b0:	f000 f84a 	bl	6848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    67b4:	f000 fe48 	bl	7448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    67b8:	4803      	ldr	r0, [pc, #12]	; (67c8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    67ba:	6840      	ldr	r0, [r0, #4]
    67bc:	2100      	movs	r1, #0
    67be:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    67c2:	4608      	mov	r0, r1
    67c4:	bd10      	pop	{r4, pc}
    67c6:	0000      	.short	0x0000
    67c8:	200000ec 	.word	0x200000ec

000067cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    67cc:	b510      	push	{r4, lr}
    67ce:	f000 f951 	bl	6a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    67d2:	4909      	ldr	r1, [pc, #36]	; (67f8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    67d4:	2201      	movs	r2, #1
    67d6:	b130      	cbz	r0, 67e6 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    67d8:	6848      	ldr	r0, [r1, #4]
    67da:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    67de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    67e0:	881b      	ldrh	r3, [r3, #0]
    67e2:	8583      	strh	r3, [r0, #44]	; 0x2c
    67e4:	e004      	b.n	67f0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    67e6:	684b      	ldr	r3, [r1, #4]
    67e8:	2000      	movs	r0, #0
    67ea:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    67ee:	8598      	strh	r0, [r3, #44]	; 0x2c
    67f0:	6848      	ldr	r0, [r1, #4]
    67f2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    67f6:	bd10      	pop	{r4, pc}
    67f8:	200000ec 	.word	0x200000ec

000067fc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    67fc:	4802      	ldr	r0, [pc, #8]	; (6808 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    67fe:	6840      	ldr	r0, [r0, #4]
    6800:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6804:	4770      	bx	lr
    6806:	0000      	.short	0x0000
    6808:	200000ec 	.word	0x200000ec

0000680c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    680c:	b510      	push	{r4, lr}
    680e:	f000 f931 	bl	6a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6812:	490c      	ldr	r1, [pc, #48]	; (6844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    6814:	b128      	cbz	r0, 6822 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    6816:	6848      	ldr	r0, [r1, #4]
    6818:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    681c:	2801      	cmp	r0, #1
    681e:	d00e      	beq.n	683e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    6820:	e00c      	b.n	683c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6822:	6849      	ldr	r1, [r1, #4]
    6824:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    6828:	2801      	cmp	r0, #1
    682a:	d001      	beq.n	6830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    682c:	2802      	cmp	r0, #2
    682e:	d105      	bne.n	683c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6830:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    6834:	2801      	cmp	r0, #1
    6836:	d003      	beq.n	6840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6838:	2803      	cmp	r0, #3
    683a:	d001      	beq.n	6840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    683c:	2000      	movs	r0, #0
    683e:	bd10      	pop	{r4, pc}
    6840:	2001      	movs	r0, #1
    6842:	bd10      	pop	{r4, pc}
    6844:	200000ec 	.word	0x200000ec
    6848:	b510      	push	{r4, lr}
    684a:	4c07      	ldr	r4, [pc, #28]	; (6868 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    684c:	6860      	ldr	r0, [r4, #4]
    684e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    6852:	2800      	cmp	r0, #0
    6854:	d007      	beq.n	6866 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    6856:	f004 fe19 	bl	b48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    685a:	f004 fbfb 	bl	b054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    685e:	6861      	ldr	r1, [r4, #4]
    6860:	2000      	movs	r0, #0
    6862:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    6866:	bd10      	pop	{r4, pc}
    6868:	200000ec 	.word	0x200000ec
    686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6870:	4d10      	ldr	r5, [pc, #64]	; (68b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    6872:	4606      	mov	r6, r0
    6874:	460f      	mov	r7, r1
    6876:	6868      	ldr	r0, [r5, #4]
    6878:	490f      	ldr	r1, [pc, #60]	; (68b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    687a:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    687e:	5c0c      	ldrb	r4, [r1, r0]
    6880:	4620      	mov	r0, r4
    6882:	f005 f967 	bl	bb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6886:	6868      	ldr	r0, [r5, #4]
    6888:	2101      	movs	r1, #1
    688a:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    688e:	2025      	movs	r0, #37	; 0x25
    6890:	f008 ffc2 	bl	f818 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    6894:	4638      	mov	r0, r7
    6896:	f005 f86f 	bl	b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    689a:	f04f 0101 	mov.w	r1, #1
    689e:	4608      	mov	r0, r1
    68a0:	b126      	cbz	r6, 68ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    68a2:	f004 fea5 	bl	b5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    68a6:	b918      	cbnz	r0, 68b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    68a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68ac:	f004 fe54 	bl	b558 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    68b0:	2001      	movs	r0, #1
    68b2:	e7f9      	b.n	68a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    68b4:	200000ec 	.word	0x200000ec
    68b8:	0000f954 	.word	0x0000f954
    68bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68be:	4e20      	ldr	r6, [pc, #128]	; (6940 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    68c0:	4604      	mov	r4, r0
    68c2:	6870      	ldr	r0, [r6, #4]
    68c4:	7801      	ldrb	r1, [r0, #0]
    68c6:	f88d 1000 	strb.w	r1, [sp]
    68ca:	9900      	ldr	r1, [sp, #0]
    68cc:	9100      	str	r1, [sp, #0]
    68ce:	f89d 1000 	ldrb.w	r1, [sp]
    68d2:	b389      	cbz	r1, 6938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    68d4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    68d6:	6882      	ldr	r2, [r0, #8]
    68d8:	f841 2f03 	str.w	r2, [r1, #3]!
    68dc:	8982      	ldrh	r2, [r0, #12]
    68de:	808a      	strh	r2, [r1, #4]
    68e0:	79c0      	ldrb	r0, [r0, #7]
    68e2:	f007 fd25 	bl	e330 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    68e6:	6871      	ldr	r1, [r6, #4]
    68e8:	2500      	movs	r5, #0
    68ea:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    68ec:	1c89      	adds	r1, r1, #2
    68ee:	7090      	strb	r0, [r2, #2]
    68f0:	7065      	strb	r5, [r4, #1]
    68f2:	2014      	movs	r0, #20
    68f4:	7020      	strb	r0, [r4, #0]
    68f6:	2220      	movs	r2, #32
    68f8:	1d20      	adds	r0, r4, #4
    68fa:	f005 fe15 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    68fe:	4a11      	ldr	r2, [pc, #68]	; (6944 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    6900:	7225      	strb	r5, [r4, #8]
    6902:	2301      	movs	r3, #1
    6904:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6906:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    690a:	6871      	ldr	r1, [r6, #4]
    690c:	700d      	strb	r5, [r1, #0]
    690e:	f101 0028 	add.w	r0, r1, #40	; 0x28
    6912:	7005      	strb	r5, [r0, #0]
    6914:	88e0      	ldrh	r0, [r4, #6]
    6916:	8490      	strh	r0, [r2, #36]	; 0x24
    6918:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    691a:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    691e:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    6922:	4610      	mov	r0, r2
    6924:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    6928:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    692a:	8800      	ldrh	r0, [r0, #0]
    692c:	f7fd fdf2 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6930:	f006 fd82 	bl	d438 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    6934:	2001      	movs	r0, #1
    6936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6938:	e7ff      	b.n	693a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    693a:	2000      	movs	r0, #0
    693c:	e7fb      	b.n	6936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    693e:	0000      	.short	0x0000
    6940:	200000ec 	.word	0x200000ec
    6944:	20000f94 	.word	0x20000f94
    6948:	b570      	push	{r4, r5, r6, lr}
    694a:	4c1d      	ldr	r4, [pc, #116]	; (69c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b4>)
    694c:	4605      	mov	r5, r0
    694e:	2907      	cmp	r1, #7
    6950:	6860      	ldr	r0, [r4, #4]
    6952:	f890 6039 	ldrb.w	r6, [r0, #57]	; 0x39
    6956:	d301      	bcc.n	695c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x150>
    6958:	2000      	movs	r0, #0
    695a:	bd70      	pop	{r4, r5, r6, pc}
    695c:	7c68      	ldrb	r0, [r5, #17]
    695e:	6869      	ldr	r1, [r5, #4]
    6960:	f007 fcdb 	bl	e31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6964:	6861      	ldr	r1, [r4, #4]
    6966:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    696a:	b141      	cbz	r1, 697e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    696c:	b138      	cbz	r0, 697e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    696e:	f006 ff72 	bl	d856 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6972:	4601      	mov	r1, r0
    6974:	6860      	ldr	r0, [r4, #4]
    6976:	f800 1f64 	strb.w	r1, [r0, #100]!
    697a:	2101      	movs	r1, #1
    697c:	71c1      	strb	r1, [r0, #7]
    697e:	6863      	ldr	r3, [r4, #4]
    6980:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6984:	28ff      	cmp	r0, #255	; 0xff
    6986:	d012      	beq.n	69ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a2>
    6988:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
    698c:	f7fe feaa 	bl	56e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6990:	4330      	orrs	r0, r6
    6992:	6869      	ldr	r1, [r5, #4]
    6994:	2900      	cmp	r1, #0
    6996:	d0e0      	beq.n	695a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14e>
    6998:	6861      	ldr	r1, [r4, #4]
    699a:	7c6a      	ldrb	r2, [r5, #17]
    699c:	f881 2075 	strb.w	r2, [r1, #117]	; 0x75
    69a0:	686a      	ldr	r2, [r5, #4]
    69a2:	6813      	ldr	r3, [r2, #0]
    69a4:	f841 3f6e 	str.w	r3, [r1, #110]!
    69a8:	8892      	ldrh	r2, [r2, #4]
    69aa:	808a      	strh	r2, [r1, #4]
    69ac:	bd70      	pop	{r4, r5, r6, pc}
    69ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    69b2:	7c68      	ldrb	r0, [r5, #17]
    69b4:	3364      	adds	r3, #100	; 0x64
    69b6:	6869      	ldr	r1, [r5, #4]
    69b8:	f7fe ff10 	bl	57dc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>
    69bc:	e7e9      	b.n	6992 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    69be:	0000      	.short	0x0000
    69c0:	200000ec 	.word	0x200000ec
    69c4:	b510      	push	{r4, lr}
    69c6:	4915      	ldr	r1, [pc, #84]	; (6a1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x210>)
    69c8:	6842      	ldr	r2, [r0, #4]
    69ca:	6849      	ldr	r1, [r1, #4]
    69cc:	7813      	ldrb	r3, [r2, #0]
    69ce:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    69d2:	42a3      	cmp	r3, r4
    69d4:	d11f      	bne.n	6a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69d6:	7853      	ldrb	r3, [r2, #1]
    69d8:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    69dc:	42a3      	cmp	r3, r4
    69de:	d11a      	bne.n	6a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69e0:	7893      	ldrb	r3, [r2, #2]
    69e2:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    69e6:	42a3      	cmp	r3, r4
    69e8:	d115      	bne.n	6a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69ea:	78d3      	ldrb	r3, [r2, #3]
    69ec:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    69f0:	42a3      	cmp	r3, r4
    69f2:	d110      	bne.n	6a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69f4:	7913      	ldrb	r3, [r2, #4]
    69f6:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    69fa:	42a3      	cmp	r3, r4
    69fc:	d10b      	bne.n	6a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    69fe:	7952      	ldrb	r2, [r2, #5]
    6a00:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    6a04:	429a      	cmp	r2, r3
    6a06:	d106      	bne.n	6a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a08:	7c40      	ldrb	r0, [r0, #17]
    6a0a:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    6a0e:	4288      	cmp	r0, r1
    6a10:	d101      	bne.n	6a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    6a12:	2001      	movs	r0, #1
    6a14:	bd10      	pop	{r4, pc}
    6a16:	2000      	movs	r0, #0
    6a18:	bd10      	pop	{r4, pc}
    6a1a:	0000      	.short	0x0000
    6a1c:	200000ec 	.word	0x200000ec
    6a20:	b530      	push	{r4, r5, lr}
    6a22:	7801      	ldrb	r1, [r0, #0]
    6a24:	b08b      	sub	sp, #44	; 0x2c
    6a26:	f001 040f 	and.w	r4, r1, #15
    6a2a:	4622      	mov	r2, r4
    6a2c:	a901      	add	r1, sp, #4
    6a2e:	f000 feb9 	bl	77a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6a32:	a801      	add	r0, sp, #4
    6a34:	f7ff ffc6 	bl	69c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>
    6a38:	4605      	mov	r5, r0
    6a3a:	f004 fd45 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6a3e:	f000 fb41 	bl	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    6a42:	2c04      	cmp	r4, #4
    6a44:	d111      	bne.n	6a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    6a46:	b185      	cbz	r5, 6a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    6a48:	a80a      	add	r0, sp, #40	; 0x28
    6a4a:	f000 fb47 	bl	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    6a4e:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6a52:	9000      	str	r0, [sp, #0]
    6a54:	4806      	ldr	r0, [pc, #24]	; (6a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    6a56:	6840      	ldr	r0, [r0, #4]
    6a58:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6a5c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    6a60:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6a64:	a801      	add	r0, sp, #4
    6a66:	f007 fd19 	bl	e49c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6a6a:	b00b      	add	sp, #44	; 0x2c
    6a6c:	2005      	movs	r0, #5
    6a6e:	bd30      	pop	{r4, r5, pc}
    6a70:	200000ec 	.word	0x200000ec
    6a74:	4804      	ldr	r0, [pc, #16]	; (6a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>)
    6a76:	6840      	ldr	r0, [r0, #4]
    6a78:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6a7c:	2803      	cmp	r0, #3
    6a7e:	d001      	beq.n	6a84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    6a80:	2000      	movs	r0, #0
    6a82:	4770      	bx	lr
    6a84:	2001      	movs	r0, #1
    6a86:	4770      	bx	lr
    6a88:	200000ec 	.word	0x200000ec
    6a8c:	4908      	ldr	r1, [pc, #32]	; (6ab0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a4>)
    6a8e:	b510      	push	{r4, lr}
    6a90:	6849      	ldr	r1, [r1, #4]
    6a92:	7c83      	ldrb	r3, [r0, #18]
    6a94:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6a98:	429a      	cmp	r2, r3
    6a9a:	d105      	bne.n	6aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x29c>
    6a9c:	6880      	ldr	r0, [r0, #8]
    6a9e:	2206      	movs	r2, #6
    6aa0:	3132      	adds	r1, #50	; 0x32
    6aa2:	f005 fd2f 	bl	c504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6aa6:	b108      	cbz	r0, 6aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a0>
    6aa8:	2000      	movs	r0, #0
    6aaa:	bd10      	pop	{r4, pc}
    6aac:	2001      	movs	r0, #1
    6aae:	bd10      	pop	{r4, pc}
    6ab0:	200000ec 	.word	0x200000ec
    6ab4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6ab6:	4c3d      	ldr	r4, [pc, #244]	; (6bac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    6ab8:	466f      	mov	r7, sp
    6aba:	6860      	ldr	r0, [r4, #4]
    6abc:	7801      	ldrb	r1, [r0, #0]
    6abe:	f88d 1008 	strb.w	r1, [sp, #8]
    6ac2:	9902      	ldr	r1, [sp, #8]
    6ac4:	9102      	str	r1, [sp, #8]
    6ac6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6aca:	b111      	cbz	r1, 6ad2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c6>
    6acc:	f241 313a 	movw	r1, #4922	; 0x133a
    6ad0:	e04f      	b.n	6b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x366>
    6ad2:	2500      	movs	r5, #0
    6ad4:	7085      	strb	r5, [r0, #2]
    6ad6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6ad8:	880a      	ldrh	r2, [r1, #0]
    6ada:	8082      	strh	r2, [r0, #4]
    6adc:	68c8      	ldr	r0, [r1, #12]
    6ade:	f006 ff4e 	bl	d97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6ae2:	6861      	ldr	r1, [r4, #4]
    6ae4:	8348      	strh	r0, [r1, #26]
    6ae6:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6ae8:	8a82      	ldrh	r2, [r0, #20]
    6aea:	838a      	strh	r2, [r1, #28]
    6aec:	8ac0      	ldrh	r0, [r0, #22]
    6aee:	83c8      	strh	r0, [r1, #30]
    6af0:	f881 5020 	strb.w	r5, [r1, #32]
    6af4:	4669      	mov	r1, sp
    6af6:	68a0      	ldr	r0, [r4, #8]
    6af8:	f007 fa18 	bl	df2c <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6afc:	68a0      	ldr	r0, [r4, #8]
    6afe:	7800      	ldrb	r0, [r0, #0]
    6b00:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6b04:	6860      	ldr	r0, [r4, #4]
    6b06:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6b0a:	b120      	cbz	r0, 6b16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30a>
    6b0c:	4639      	mov	r1, r7
    6b0e:	4630      	mov	r0, r6
    6b10:	f007 fc03 	bl	e31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6b14:	b940      	cbnz	r0, 6b28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x31c>
    6b16:	6860      	ldr	r0, [r4, #4]
    6b18:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6b1c:	b160      	cbz	r0, 6b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    6b1e:	4639      	mov	r1, r7
    6b20:	4630      	mov	r0, r6
    6b22:	f007 fbf1 	bl	e308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6b26:	b138      	cbz	r0, 6b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    6b28:	6860      	ldr	r0, [r4, #4]
    6b2a:	9900      	ldr	r1, [sp, #0]
    6b2c:	f8c0 100e 	str.w	r1, [r0, #14]
    6b30:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6b34:	8241      	strh	r1, [r0, #18]
    6b36:	e003      	b.n	6b40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x334>
    6b38:	6860      	ldr	r0, [r4, #4]
    6b3a:	f8c0 500e 	str.w	r5, [r0, #14]
    6b3e:	8245      	strh	r5, [r0, #18]
    6b40:	6861      	ldr	r1, [r4, #4]
    6b42:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6b46:	28ff      	cmp	r0, #255	; 0xff
    6b48:	d016      	beq.n	6b78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6b4a:	f101 0208 	add.w	r2, r1, #8
    6b4e:	1dc9      	adds	r1, r1, #7
    6b50:	f7fe fdae 	bl	56b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6b54:	b158      	cbz	r0, 6b6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x362>
    6b56:	6860      	ldr	r0, [r4, #4]
    6b58:	79c1      	ldrb	r1, [r0, #7]
    6b5a:	f041 0102 	orr.w	r1, r1, #2
    6b5e:	71c1      	strb	r1, [r0, #7]
    6b60:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6b64:	6141      	str	r1, [r0, #20]
    6b66:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6b6a:	8301      	strh	r1, [r0, #24]
    6b6c:	e00f      	b.n	6b8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x382>
    6b6e:	f241 3165 	movw	r1, #4965	; 0x1365
    6b72:	2032      	movs	r0, #50	; 0x32
    6b74:	f7fd f8d0 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b78:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6b7c:	71c8      	strb	r0, [r1, #7]
    6b7e:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6b82:	6088      	str	r0, [r1, #8]
    6b84:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6b88:	8188      	strh	r0, [r1, #12]
    6b8a:	614d      	str	r5, [r1, #20]
    6b8c:	830d      	strh	r5, [r1, #24]
    6b8e:	6860      	ldr	r0, [r4, #4]
    6b90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6b92:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6b96:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6b9a:	2101      	movs	r1, #1
    6b9c:	7001      	strb	r1, [r0, #0]
    6b9e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6ba0:	8800      	ldrh	r0, [r0, #0]
    6ba2:	f7fd fcb7 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6ba6:	f006 fc4d 	bl	d444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6bac:	200000ec 	.word	0x200000ec
    6bb0:	b570      	push	{r4, r5, r6, lr}
    6bb2:	4d39      	ldr	r5, [pc, #228]	; (6c98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>)
    6bb4:	4601      	mov	r1, r0
    6bb6:	2200      	movs	r2, #0
    6bb8:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6bbc:	365c      	adds	r6, #92	; 0x5c
    6bbe:	8002      	strh	r2, [r0, #0]
    6bc0:	2903      	cmp	r1, #3
    6bc2:	d002      	beq.n	6bca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3be>
    6bc4:	2905      	cmp	r1, #5
    6bc6:	d004      	beq.n	6bd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c6>
    6bc8:	e056      	b.n	6c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    6bca:	2103      	movs	r1, #3
    6bcc:	f007 f9c5 	bl	df5a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6bd0:	e052      	b.n	6c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    6bd2:	2105      	movs	r1, #5
    6bd4:	f007 f9c1 	bl	df5a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6bd8:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6bdc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6bde:	6909      	ldr	r1, [r1, #16]
    6be0:	f844 1f0f 	str.w	r1, [r4, #15]!
    6be4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6be6:	8b0a      	ldrh	r2, [r1, #24]
    6be8:	80a2      	strh	r2, [r4, #4]
    6bea:	7e89      	ldrb	r1, [r1, #26]
    6bec:	71a1      	strb	r1, [r4, #6]
    6bee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6bf0:	68c1      	ldr	r1, [r0, #12]
    6bf2:	8b80      	ldrh	r0, [r0, #28]
    6bf4:	f007 f85f 	bl	dcb6 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6bf8:	71e0      	strb	r0, [r4, #7]
    6bfa:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6bfe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c00:	68c1      	ldr	r1, [r0, #12]
    6c02:	6a00      	ldr	r0, [r0, #32]
    6c04:	f007 f84c 	bl	dca0 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6c08:	75e0      	strb	r0, [r4, #23]
    6c0a:	0a00      	lsrs	r0, r0, #8
    6c0c:	7620      	strb	r0, [r4, #24]
    6c0e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6c12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c14:	68c0      	ldr	r0, [r0, #12]
    6c16:	f006 feb2 	bl	d97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6c1a:	7660      	strb	r0, [r4, #25]
    6c1c:	0a00      	lsrs	r0, r0, #8
    6c1e:	76a0      	strb	r0, [r4, #26]
    6c20:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6c24:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c26:	8a89      	ldrh	r1, [r1, #20]
    6c28:	76e1      	strb	r1, [r4, #27]
    6c2a:	0a09      	lsrs	r1, r1, #8
    6c2c:	7721      	strb	r1, [r4, #28]
    6c2e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c30:	8ac9      	ldrh	r1, [r1, #22]
    6c32:	7761      	strb	r1, [r4, #29]
    6c34:	0a09      	lsrs	r1, r1, #8
    6c36:	77a1      	strb	r1, [r4, #30]
    6c38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6c3a:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6c3e:	f8c4 201f 	str.w	r2, [r4, #31]
    6c42:	7909      	ldrb	r1, [r1, #4]
    6c44:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6c48:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6c4a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6c4e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6c52:	f001 011f 	and.w	r1, r1, #31
    6c56:	f020 001f 	bic.w	r0, r0, #31
    6c5a:	4308      	orrs	r0, r1
    6c5c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6c60:	f004 f9da 	bl	b018 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6c64:	2807      	cmp	r0, #7
    6c66:	d900      	bls.n	6c6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x45e>
    6c68:	2007      	movs	r0, #7
    6c6a:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6c6e:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6c72:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6c76:	7021      	strb	r1, [r4, #0]
    6c78:	f106 0112 	add.w	r1, r6, #18
    6c7c:	68a8      	ldr	r0, [r5, #8]
    6c7e:	f007 f987 	bl	df90 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6c82:	7e71      	ldrb	r1, [r6, #25]
    6c84:	68a8      	ldr	r0, [r5, #8]
    6c86:	f007 f989 	bl	df9c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6c8a:	f000 fba5 	bl	73d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    6c8e:	68a8      	ldr	r0, [r5, #8]
    6c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c94:	f004 be70 	b.w	b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c98:	200000ec 	.word	0x200000ec
    6c9c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6ca0:	4f65      	ldr	r7, [pc, #404]	; (6e38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62c>)
    6ca2:	4604      	mov	r4, r0
    6ca4:	468a      	mov	sl, r1
    6ca6:	6878      	ldr	r0, [r7, #4]
    6ca8:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6cac:	b180      	cbz	r0, 6cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>
    6cae:	2600      	movs	r6, #0
    6cb0:	2500      	movs	r5, #0
    6cb2:	7ca0      	ldrb	r0, [r4, #18]
    6cb4:	68a1      	ldr	r1, [r4, #8]
    6cb6:	f007 fb30 	bl	e31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6cba:	4681      	mov	r9, r0
    6cbc:	f7ff feda 	bl	6a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6cc0:	b140      	cbz	r0, 6cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    6cc2:	6878      	ldr	r0, [r7, #4]
    6cc4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6cc8:	b121      	cbz	r1, 6cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    6cca:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6cce:	e004      	b.n	6cda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    6cd0:	2601      	movs	r6, #1
    6cd2:	e7ed      	b.n	6cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6cd4:	6878      	ldr	r0, [r7, #4]
    6cd6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6cda:	4683      	mov	fp, r0
    6cdc:	f7fe fc3a 	bl	5554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6ce0:	ea5f 0800 	movs.w	r8, r0
    6ce4:	d00c      	beq.n	6d00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    6ce6:	4658      	mov	r0, fp
    6ce8:	f7fe fc28 	bl	553c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6cec:	b100      	cbz	r0, 6cf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e4>
    6cee:	2601      	movs	r6, #1
    6cf0:	f1b9 0f00 	cmp.w	r9, #0
    6cf4:	d004      	beq.n	6d00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    6cf6:	4640      	mov	r0, r8
    6cf8:	68a1      	ldr	r1, [r4, #8]
    6cfa:	f006 fd5f 	bl	d7bc <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6cfe:	4605      	mov	r5, r0
    6d00:	6878      	ldr	r0, [r7, #4]
    6d02:	46b8      	mov	r8, r7
    6d04:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6d08:	b10d      	cbz	r5, 6d0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6d0a:	f047 0702 	orr.w	r7, r7, #2
    6d0e:	f7ff feb1 	bl	6a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6d12:	b3a0      	cbz	r0, 6d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x572>
    6d14:	6860      	ldr	r0, [r4, #4]
    6d16:	f8d8 1004 	ldr.w	r1, [r8, #4]
    6d1a:	7802      	ldrb	r2, [r0, #0]
    6d1c:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6d20:	429a      	cmp	r2, r3
    6d22:	d11f      	bne.n	6d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d24:	7842      	ldrb	r2, [r0, #1]
    6d26:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6d2a:	429a      	cmp	r2, r3
    6d2c:	d11a      	bne.n	6d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d2e:	7882      	ldrb	r2, [r0, #2]
    6d30:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6d34:	429a      	cmp	r2, r3
    6d36:	d115      	bne.n	6d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d38:	78c2      	ldrb	r2, [r0, #3]
    6d3a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6d3e:	429a      	cmp	r2, r3
    6d40:	d110      	bne.n	6d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d42:	7902      	ldrb	r2, [r0, #4]
    6d44:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6d48:	429a      	cmp	r2, r3
    6d4a:	d10b      	bne.n	6d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d4c:	7940      	ldrb	r0, [r0, #5]
    6d4e:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6d52:	4290      	cmp	r0, r2
    6d54:	d106      	bne.n	6d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d56:	7c60      	ldrb	r0, [r4, #17]
    6d58:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6d5c:	4288      	cmp	r0, r1
    6d5e:	d101      	bne.n	6d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    6d60:	2001      	movs	r0, #1
    6d62:	e000      	b.n	6d66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55a>
    6d64:	2000      	movs	r0, #0
    6d66:	4f35      	ldr	r7, [pc, #212]	; (6e3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>)
    6d68:	4681      	mov	r9, r0
    6d6a:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6d6e:	2808      	cmp	r0, #8
    6d70:	d006      	beq.n	6d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    6d72:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6d76:	4288      	cmp	r0, r1
    6d78:	d102      	bne.n	6d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    6d7a:	2001      	movs	r0, #1
    6d7c:	e001      	b.n	6d82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x576>
    6d7e:	e021      	b.n	6dc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b8>
    6d80:	2000      	movs	r0, #0
    6d82:	4680      	mov	r8, r0
    6d84:	b925      	cbnz	r5, 6d90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x584>
    6d86:	b12e      	cbz	r6, 6d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    6d88:	4620      	mov	r0, r4
    6d8a:	f7ff fe7f 	bl	6a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6d8e:	b108      	cbz	r0, 6d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    6d90:	2001      	movs	r0, #1
    6d92:	e000      	b.n	6d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    6d94:	2000      	movs	r0, #0
    6d96:	f1ba 0f00 	cmp.w	sl, #0
    6d9a:	d009      	beq.n	6db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6d9c:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    6da0:	2901      	cmp	r1, #1
    6da2:	d003      	beq.n	6dac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a0>
    6da4:	b921      	cbnz	r1, 6db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6da6:	ea59 0108 	orrs.w	r1, r9, r8
    6daa:	d001      	beq.n	6db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    6dac:	2101      	movs	r1, #1
    6dae:	e000      	b.n	6db2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a6>
    6db0:	2100      	movs	r1, #0
    6db2:	4208      	tst	r0, r1
    6db4:	d003      	beq.n	6dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b2>
    6db6:	200c      	movs	r0, #12
    6db8:	b004      	add	sp, #16
    6dba:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6dbe:	f004 fb83 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6dc2:	e036      	b.n	6e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6dc4:	f004 fb80 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6dc8:	f1ba 0f00 	cmp.w	sl, #0
    6dcc:	d031      	beq.n	6e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6dce:	4620      	mov	r0, r4
    6dd0:	f7ff fe5c 	bl	6a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6dd4:	b900      	cbnz	r0, 6dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5cc>
    6dd6:	b175      	cbz	r5, 6df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ea>
    6dd8:	a803      	add	r0, sp, #12
    6dda:	f000 f97f 	bl	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    6dde:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6de2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6de6:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6dea:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6dee:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6df2:	463b      	mov	r3, r7
    6df4:	e018      	b.n	6e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    6df6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6dfa:	4645      	mov	r5, r8
    6dfc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    6e00:	2803      	cmp	r0, #3
    6e02:	d001      	beq.n	6e08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fc>
    6e04:	2802      	cmp	r0, #2
    6e06:	d114      	bne.n	6e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6e08:	f1b9 0f00 	cmp.w	r9, #0
    6e0c:	d011      	beq.n	6e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    6e0e:	a803      	add	r0, sp, #12
    6e10:	f000 f964 	bl	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    6e14:	686a      	ldr	r2, [r5, #4]
    6e16:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6e1a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6e1e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6e22:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6e26:	23fe      	movs	r3, #254	; 0xfe
    6e28:	2101      	movs	r1, #1
    6e2a:	4620      	mov	r0, r4
    6e2c:	3232      	adds	r2, #50	; 0x32
    6e2e:	f000 fc43 	bl	76b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6e32:	2005      	movs	r0, #5
    6e34:	e7c0      	b.n	6db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6e36:	0000      	.short	0x0000
    6e38:	200000ec 	.word	0x200000ec
    6e3c:	20000f94 	.word	0x20000f94
    6e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6e42:	4605      	mov	r5, r0
    6e44:	2900      	cmp	r1, #0
    6e46:	d06e      	beq.n	6f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    6e48:	4c3c      	ldr	r4, [pc, #240]	; (6f3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x730>)
    6e4a:	6860      	ldr	r0, [r4, #4]
    6e4c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6e50:	2802      	cmp	r0, #2
    6e52:	d02c      	beq.n	6eae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    6e54:	2801      	cmp	r0, #1
    6e56:	d043      	beq.n	6ee0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>
    6e58:	f7ff fe0c 	bl	6a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    6e5c:	2800      	cmp	r0, #0
    6e5e:	d067      	beq.n	6f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x724>
    6e60:	686a      	ldr	r2, [r5, #4]
    6e62:	6861      	ldr	r1, [r4, #4]
    6e64:	7810      	ldrb	r0, [r2, #0]
    6e66:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6e6a:	4298      	cmp	r0, r3
    6e6c:	d14c      	bne.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e6e:	7850      	ldrb	r0, [r2, #1]
    6e70:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6e74:	4298      	cmp	r0, r3
    6e76:	d147      	bne.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e78:	7890      	ldrb	r0, [r2, #2]
    6e7a:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6e7e:	4298      	cmp	r0, r3
    6e80:	d142      	bne.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e82:	78d0      	ldrb	r0, [r2, #3]
    6e84:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6e88:	4298      	cmp	r0, r3
    6e8a:	d13d      	bne.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e8c:	7910      	ldrb	r0, [r2, #4]
    6e8e:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6e92:	4298      	cmp	r0, r3
    6e94:	d138      	bne.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6e96:	7950      	ldrb	r0, [r2, #5]
    6e98:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6e9c:	4290      	cmp	r0, r2
    6e9e:	d133      	bne.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6ea0:	7c68      	ldrb	r0, [r5, #17]
    6ea2:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    6ea6:	4290      	cmp	r0, r2
    6ea8:	d12e      	bne.n	6f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    6eaa:	2001      	movs	r0, #1
    6eac:	e02d      	b.n	6f0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fe>
    6eae:	a803      	add	r0, sp, #12
    6eb0:	f000 f914 	bl	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    6eb4:	6862      	ldr	r2, [r4, #4]
    6eb6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6eba:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6ebe:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6ec2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ec6:	23ff      	movs	r3, #255	; 0xff
    6ec8:	2100      	movs	r1, #0
    6eca:	4628      	mov	r0, r5
    6ecc:	3232      	adds	r2, #50	; 0x32
    6ece:	f000 fbf3 	bl	76b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6ed2:	6861      	ldr	r1, [r4, #4]
    6ed4:	2001      	movs	r0, #1
    6ed6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    6eda:	200b      	movs	r0, #11
    6edc:	b004      	add	sp, #16
    6ede:	bd70      	pop	{r4, r5, r6, pc}
    6ee0:	a803      	add	r0, sp, #12
    6ee2:	f000 f8fb 	bl	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    6ee6:	6862      	ldr	r2, [r4, #4]
    6ee8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6eec:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6ef0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6ef4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6ef8:	23ff      	movs	r3, #255	; 0xff
    6efa:	2100      	movs	r1, #0
    6efc:	4628      	mov	r0, r5
    6efe:	3232      	adds	r2, #50	; 0x32
    6f00:	f000 fbda 	bl	76b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6f04:	2005      	movs	r0, #5
    6f06:	e7e9      	b.n	6edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    6f08:	2000      	movs	r0, #0
    6f0a:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    6f0e:	2901      	cmp	r1, #1
    6f10:	d00c      	beq.n	6f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6f12:	b958      	cbnz	r0, 6f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6f14:	490a      	ldr	r1, [pc, #40]	; (6f40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>)
    6f16:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    6f1a:	2808      	cmp	r0, #8
    6f1c:	d003      	beq.n	6f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    6f1e:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    6f22:	4281      	cmp	r1, r0
    6f24:	d002      	beq.n	6f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    6f26:	f004 facf 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6f2a:	e7eb      	b.n	6f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f8>
    6f2c:	200c      	movs	r0, #12
    6f2e:	e7d5      	b.n	6edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    6f30:	f640 515b 	movw	r1, #3419	; 0xd5b
    6f34:	2032      	movs	r0, #50	; 0x32
    6f36:	f7fc feef 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f3a:	0000      	.short	0x0000
    6f3c:	200000ec 	.word	0x200000ec
    6f40:	20000f94 	.word	0x20000f94
    6f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6f46:	4605      	mov	r5, r0
    6f48:	b139      	cbz	r1, 6f5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74e>
    6f4a:	4c1c      	ldr	r4, [pc, #112]	; (6fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b0>)
    6f4c:	6860      	ldr	r0, [r4, #4]
    6f4e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6f52:	2802      	cmp	r0, #2
    6f54:	d004      	beq.n	6f60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x754>
    6f56:	2801      	cmp	r0, #1
    6f58:	d01b      	beq.n	6f92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x786>
    6f5a:	f004 fab5 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6f5e:	e02a      	b.n	6fb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7aa>
    6f60:	a803      	add	r0, sp, #12
    6f62:	f000 f8bb 	bl	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    6f66:	6862      	ldr	r2, [r4, #4]
    6f68:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6f6c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6f70:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6f74:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6f78:	23ff      	movs	r3, #255	; 0xff
    6f7a:	2106      	movs	r1, #6
    6f7c:	4628      	mov	r0, r5
    6f7e:	3232      	adds	r2, #50	; 0x32
    6f80:	f000 fb9a 	bl	76b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6f84:	6862      	ldr	r2, [r4, #4]
    6f86:	200b      	movs	r0, #11
    6f88:	2100      	movs	r1, #0
    6f8a:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    6f8e:	b004      	add	sp, #16
    6f90:	bd70      	pop	{r4, r5, r6, pc}
    6f92:	a803      	add	r0, sp, #12
    6f94:	f000 f8a2 	bl	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    6f98:	6862      	ldr	r2, [r4, #4]
    6f9a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6f9e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    6fa2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    6fa6:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    6faa:	23ff      	movs	r3, #255	; 0xff
    6fac:	2106      	movs	r1, #6
    6fae:	4628      	mov	r0, r5
    6fb0:	3232      	adds	r2, #50	; 0x32
    6fb2:	f000 fb81 	bl	76b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    6fb6:	2005      	movs	r0, #5
    6fb8:	e7e9      	b.n	6f8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x782>
    6fba:	0000      	.short	0x0000
    6fbc:	200000ec 	.word	0x200000ec
    6fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6fc2:	b389      	cbz	r1, 7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    6fc4:	2901      	cmp	r1, #1
    6fc6:	d035      	beq.n	7034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    6fc8:	2405      	movs	r4, #5
    6fca:	2902      	cmp	r1, #2
    6fcc:	d004      	beq.n	6fd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    6fce:	2906      	cmp	r1, #6
    6fd0:	d024      	beq.n	701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    6fd2:	f004 fa79 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fd6:	e01e      	b.n	7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    6fd8:	4605      	mov	r5, r0
    6fda:	4616      	mov	r6, r2
    6fdc:	f004 fa74 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fe0:	b1ce      	cbz	r6, 7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    6fe2:	4e17      	ldr	r6, [pc, #92]	; (7040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    6fe4:	6870      	ldr	r0, [r6, #4]
    6fe6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6fea:	2801      	cmp	r0, #1
    6fec:	d001      	beq.n	6ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e6>
    6fee:	2802      	cmp	r0, #2
    6ff0:	d111      	bne.n	7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    6ff2:	a803      	add	r0, sp, #12
    6ff4:	f000 f872 	bl	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    6ff8:	6872      	ldr	r2, [r6, #4]
    6ffa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    6ffe:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7002:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7006:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    700a:	23ff      	movs	r3, #255	; 0xff
    700c:	2102      	movs	r1, #2
    700e:	4628      	mov	r0, r5
    7010:	3232      	adds	r2, #50	; 0x32
    7012:	f000 fb51 	bl	76b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7016:	b004      	add	sp, #16
    7018:	4620      	mov	r0, r4
    701a:	bd70      	pop	{r4, r5, r6, pc}
    701c:	b004      	add	sp, #16
    701e:	4611      	mov	r1, r2
    7020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7024:	f7ff bf8e 	b.w	6f44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    7028:	b004      	add	sp, #16
    702a:	4611      	mov	r1, r2
    702c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7030:	f7ff bf06 	b.w	6e40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x634>
    7034:	b004      	add	sp, #16
    7036:	4611      	mov	r1, r2
    7038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    703c:	f7ff be2e 	b.w	6c9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x490>
    7040:	200000ec 	.word	0x200000ec
    7044:	b570      	push	{r4, r5, r6, lr}
    7046:	4c11      	ldr	r4, [pc, #68]	; (708c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7048:	4605      	mov	r5, r0
    704a:	6861      	ldr	r1, [r4, #4]
    704c:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    7050:	2800      	cmp	r0, #0
    7052:	d019      	beq.n	7088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    7054:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    7058:	2800      	cmp	r0, #0
    705a:	d015      	beq.n	7088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    705c:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    7060:	3132      	adds	r1, #50	; 0x32
    7062:	f007 f95a 	bl	e31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7066:	b140      	cbz	r0, 707a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a>
    7068:	f7fe fa3e 	bl	54e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    706c:	6861      	ldr	r1, [r4, #4]
    706e:	462a      	mov	r2, r5
    7070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7074:	3132      	adds	r1, #50	; 0x32
    7076:	f006 bb6c 	b.w	d752 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    707a:	6860      	ldr	r0, [r4, #4]
    707c:	4629      	mov	r1, r5
    707e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7082:	3032      	adds	r0, #50	; 0x32
    7084:	f006 bb54 	b.w	d730 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    7088:	bd70      	pop	{r4, r5, r6, pc}
    708a:	0000      	.short	0x0000
    708c:	200000ec 	.word	0x200000ec
    7090:	4602      	mov	r2, r0
    7092:	480b      	ldr	r0, [pc, #44]	; (70c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    7094:	b082      	sub	sp, #8
    7096:	6840      	ldr	r0, [r0, #4]
    7098:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    709c:	f88d 1000 	strb.w	r1, [sp]
    70a0:	9900      	ldr	r1, [sp, #0]
    70a2:	9100      	str	r1, [sp, #0]
    70a4:	f89d 1000 	ldrb.w	r1, [sp]
    70a8:	2900      	cmp	r1, #0
    70aa:	d107      	bne.n	70bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    70ac:	6d41      	ldr	r1, [r0, #84]	; 0x54
    70ae:	2900      	cmp	r1, #0
    70b0:	d004      	beq.n	70bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    70b2:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    70b6:	b002      	add	sp, #8
    70b8:	f7fb bb0a 	b.w	26d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    70bc:	b002      	add	sp, #8
    70be:	4770      	bx	lr
    70c0:	200000ec 	.word	0x200000ec
    70c4:	b510      	push	{r4, lr}
    70c6:	4804      	ldr	r0, [pc, #16]	; (70d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    70c8:	f004 fd04 	bl	bad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    70cc:	2800      	cmp	r0, #0
    70ce:	d102      	bne.n	70d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    70d0:	4901      	ldr	r1, [pc, #4]	; (70d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    70d2:	207f      	movs	r0, #127	; 0x7f
    70d4:	7008      	strb	r0, [r1, #0]
    70d6:	bd10      	pop	{r4, pc}
    70d8:	200000ec 	.word	0x200000ec
    70dc:	4a07      	ldr	r2, [pc, #28]	; (70fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    70de:	b510      	push	{r4, lr}
    70e0:	f992 1000 	ldrsb.w	r1, [r2]
    70e4:	297f      	cmp	r1, #127	; 0x7f
    70e6:	d003      	beq.n	70f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    70e8:	7001      	strb	r1, [r0, #0]
    70ea:	207f      	movs	r0, #127	; 0x7f
    70ec:	7010      	strb	r0, [r2, #0]
    70ee:	bd10      	pop	{r4, pc}
    70f0:	f240 3172 	movw	r1, #882	; 0x372
    70f4:	2032      	movs	r0, #50	; 0x32
    70f6:	f7fc fe0f 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70fa:	0000      	.short	0x0000
    70fc:	200000ec 	.word	0x200000ec
    7100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7104:	4607      	mov	r7, r0
    7106:	f7fd fa33 	bl	4570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    710a:	4604      	mov	r4, r0
    710c:	f7fd fa36 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7110:	4621      	mov	r1, r4
    7112:	f007 f95b 	bl	e3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    7116:	0005      	movs	r5, r0
    7118:	d012      	beq.n	7140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>
    711a:	4c2d      	ldr	r4, [pc, #180]	; (71d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d0>)
    711c:	6860      	ldr	r0, [r4, #4]
    711e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7122:	2801      	cmp	r0, #1
    7124:	d004      	beq.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    7126:	2802      	cmp	r0, #2
    7128:	d002      	beq.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    712a:	f7ff fca3 	bl	6a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    712e:	b150      	cbz	r0, 7146 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146>
    7130:	f06f 0613 	mvn.w	r6, #19
    7134:	b33f      	cbz	r7, 7186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    7136:	4628      	mov	r0, r5
    7138:	f006 fee0 	bl	defc <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    713c:	b950      	cbnz	r0, 7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    713e:	e005      	b.n	714c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    7140:	f241 310a 	movw	r1, #4874	; 0x130a
    7144:	e03a      	b.n	71bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    7146:	f241 3110 	movw	r1, #4880	; 0x1310
    714a:	e037      	b.n	71bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    714c:	4628      	mov	r0, r5
    714e:	f006 fef7 	bl	df40 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    7152:	b1c0      	cbz	r0, 7186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    7154:	6861      	ldr	r1, [r4, #4]
    7156:	4628      	mov	r0, r5
    7158:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    715c:	2a05      	cmp	r2, #5
    715e:	d202      	bcs.n	7166 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166>
    7160:	f241 2194 	movw	r1, #4756	; 0x1294
    7164:	e02a      	b.n	71bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    7166:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    716a:	2a0b      	cmp	r2, #11
    716c:	d302      	bcc.n	7174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
    716e:	f241 2195 	movw	r1, #4757	; 0x1295
    7172:	e023      	b.n	71bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    7174:	68e2      	ldr	r2, [r4, #12]
    7176:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    717a:	6952      	ldr	r2, [r2, #20]
    717c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    7180:	5851      	ldr	r1, [r2, r1]
    7182:	4788      	blx	r1
    7184:	e016      	b.n	71b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b4>
    7186:	6860      	ldr	r0, [r4, #4]
    7188:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    718c:	2905      	cmp	r1, #5
    718e:	d202      	bcs.n	7196 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196>
    7190:	f44f 5198 	mov.w	r1, #4864	; 0x1300
    7194:	e012      	b.n	71bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    7196:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    719a:	290b      	cmp	r1, #11
    719c:	d302      	bcc.n	71a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>
    719e:	f241 3101 	movw	r1, #4865	; 0x1301
    71a2:	e00b      	b.n	71bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    71a4:	68e1      	ldr	r1, [r4, #12]
    71a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    71aa:	6989      	ldr	r1, [r1, #24]
    71ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    71b0:	5808      	ldr	r0, [r1, r0]
    71b2:	4780      	blx	r0
    71b4:	280f      	cmp	r0, #15
    71b6:	d304      	bcc.n	71c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c2>
    71b8:	f241 3125 	movw	r1, #4901	; 0x1325
    71bc:	2032      	movs	r0, #50	; 0x32
    71be:	f7fc fdab 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71c2:	68e1      	ldr	r1, [r4, #12]
    71c4:	6909      	ldr	r1, [r1, #16]
    71c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    71ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    71ce:	4700      	bx	r0
    71d0:	200000ec 	.word	0x200000ec
    71d4:	b510      	push	{r4, lr}
    71d6:	b118      	cbz	r0, 71e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>
    71d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71dc:	f000 b924 	b.w	7428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    71e0:	2900      	cmp	r1, #0
    71e2:	d01d      	beq.n	7220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>
    71e4:	480f      	ldr	r0, [pc, #60]	; (7224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>)
    71e6:	6841      	ldr	r1, [r0, #4]
    71e8:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    71ec:	2a0b      	cmp	r2, #11
    71ee:	d202      	bcs.n	71f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f6>
    71f0:	f241 31cc 	movw	r1, #5068	; 0x13cc
    71f4:	e005      	b.n	7202 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x202>
    71f6:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    71fa:	2a0f      	cmp	r2, #15
    71fc:	d304      	bcc.n	7208 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x208>
    71fe:	f241 31cd 	movw	r1, #5069	; 0x13cd
    7202:	2032      	movs	r0, #50	; 0x32
    7204:	f7fc fd88 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7208:	68c0      	ldr	r0, [r0, #12]
    720a:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    720e:	6880      	ldr	r0, [r0, #8]
    7210:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    7214:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7218:	5840      	ldr	r0, [r0, r1]
    721a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    721e:	4700      	bx	r0
    7220:	bd10      	pop	{r4, pc}
    7222:	0000      	.short	0x0000
    7224:	200000ec 	.word	0x200000ec
    7228:	b510      	push	{r4, lr}
    722a:	f7ff fb0d 	bl	6848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    722e:	f000 f90b 	bl	7448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    7232:	4805      	ldr	r0, [pc, #20]	; (7248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>)
    7234:	6881      	ldr	r1, [r0, #8]
    7236:	2000      	movs	r0, #0
    7238:	f7ff fc3c 	bl	6ab4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a8>
    723c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7240:	2003      	movs	r0, #3
    7242:	f000 bc97 	b.w	7b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7246:	0000      	.short	0x0000
    7248:	200000ec 	.word	0x200000ec
    724c:	b510      	push	{r4, lr}
    724e:	f7fd f98f 	bl	4570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7252:	4604      	mov	r4, r0
    7254:	f7fd f992 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7258:	4621      	mov	r1, r4
    725a:	f007 f8b7 	bl	e3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    725e:	b150      	cbz	r0, 7276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    7260:	f004 fb8a 	bl	b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7264:	2000      	movs	r0, #0
    7266:	f004 fa3f 	bl	b6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    726a:	4905      	ldr	r1, [pc, #20]	; (7280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>)
    726c:	2006      	movs	r0, #6
    726e:	6849      	ldr	r1, [r1, #4]
    7270:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7274:	bd10      	pop	{r4, pc}
    7276:	f240 41e7 	movw	r1, #1255	; 0x4e7
    727a:	2032      	movs	r0, #50	; 0x32
    727c:	f7fc fd4c 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7280:	200000ec 	.word	0x200000ec
    7284:	490f      	ldr	r1, [pc, #60]	; (72c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c4>)
    7286:	b510      	push	{r4, lr}
    7288:	6848      	ldr	r0, [r1, #4]
    728a:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    728e:	2a06      	cmp	r2, #6
    7290:	d202      	bcs.n	7298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x298>
    7292:	f241 31fa 	movw	r1, #5114	; 0x13fa
    7296:	e005      	b.n	72a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>
    7298:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    729c:	2a0b      	cmp	r2, #11
    729e:	d304      	bcc.n	72aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2aa>
    72a0:	f241 31fb 	movw	r1, #5115	; 0x13fb
    72a4:	2032      	movs	r0, #50	; 0x32
    72a6:	f7fc fd37 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72aa:	68c9      	ldr	r1, [r1, #12]
    72ac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    72b0:	68c9      	ldr	r1, [r1, #12]
    72b2:	f06f 0213 	mvn.w	r2, #19
    72b6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    72ba:	5808      	ldr	r0, [r1, r0]
    72bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72c0:	4700      	bx	r0
    72c2:	0000      	.short	0x0000
    72c4:	200000ec 	.word	0x200000ec
    72c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72cc:	4c31      	ldr	r4, [pc, #196]	; (7394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>)
    72ce:	4605      	mov	r5, r0
    72d0:	460e      	mov	r6, r1
    72d2:	6860      	ldr	r0, [r4, #4]
    72d4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    72d8:	b120      	cbz	r0, 72e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    72da:	2801      	cmp	r0, #1
    72dc:	d002      	beq.n	72e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    72de:	200c      	movs	r0, #12
    72e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72e4:	f004 fab8 	bl	b858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    72e8:	f004 f8d0 	bl	b48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    72ec:	f003 feb2 	bl	b054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    72f0:	f004 fd14 	bl	bd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    72f4:	4828      	ldr	r0, [pc, #160]	; (7398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>)
    72f6:	f004 f9ef 	bl	b6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    72fa:	4828      	ldr	r0, [pc, #160]	; (739c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>)
    72fc:	f004 fc10 	bl	bb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7300:	4827      	ldr	r0, [pc, #156]	; (73a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>)
    7302:	f004 fc03 	bl	bb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7306:	4630      	mov	r0, r6
    7308:	f004 fb36 	bl	b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    730c:	7968      	ldrb	r0, [r5, #5]
    730e:	b110      	cbz	r0, 7316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    7310:	2001      	movs	r0, #1
    7312:	f7ff febd 	bl	7090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    7316:	7928      	ldrb	r0, [r5, #4]
    7318:	2803      	cmp	r0, #3
    731a:	d001      	beq.n	7320 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x320>
    731c:	b118      	cbz	r0, 7326 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x326>
    731e:	e018      	b.n	7352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    7320:	f640 01f7 	movw	r1, #2295	; 0x8f7
    7324:	e033      	b.n	738e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    7326:	6861      	ldr	r1, [r4, #4]
    7328:	2000      	movs	r0, #0
    732a:	2503      	movs	r5, #3
    732c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    7330:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    7334:	1c52      	adds	r2, r2, #1
    7336:	fbb2 f7f5 	udiv	r7, r2, r5
    733a:	fb05 2217 	mls	r2, r5, r7, r2
    733e:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    7342:	fa23 f202 	lsr.w	r2, r3, r2
    7346:	07d2      	lsls	r2, r2, #31
    7348:	d103      	bne.n	7352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    734a:	1c40      	adds	r0, r0, #1
    734c:	b2c0      	uxtb	r0, r0
    734e:	2803      	cmp	r0, #3
    7350:	d3ee      	bcc.n	7330 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x330>
    7352:	6860      	ldr	r0, [r4, #4]
    7354:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    7358:	f004 fb08 	bl	b96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    735c:	4631      	mov	r1, r6
    735e:	2001      	movs	r0, #1
    7360:	f7ff fa84 	bl	686c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    7364:	2800      	cmp	r0, #0
    7366:	d0bb      	beq.n	72e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    7368:	f000 f920 	bl	75ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ac>
    736c:	6860      	ldr	r0, [r4, #4]
    736e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    7372:	b138      	cbz	r0, 7384 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x384>
    7374:	f7fe f8bc 	bl	54f0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    7378:	480a      	ldr	r0, [pc, #40]	; (73a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>)
    737a:	6800      	ldr	r0, [r0, #0]
    737c:	2803      	cmp	r0, #3
    737e:	d004      	beq.n	738a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38a>
    7380:	2000      	movs	r0, #0
    7382:	e7ad      	b.n	72e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    7384:	f7fe faa8 	bl	58d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7388:	e7f6      	b.n	7378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>
    738a:	f640 1109 	movw	r1, #2313	; 0x909
    738e:	2032      	movs	r0, #50	; 0x32
    7390:	f7fc fcc2 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7394:	200000ec 	.word	0x200000ec
    7398:	000076a8 	.word	0x000076a8
    739c:	0000f951 	.word	0x0000f951
    73a0:	8e89bed6 	.word	0x8e89bed6
    73a4:	40001550 	.word	0x40001550
    73a8:	b510      	push	{r4, lr}
    73aa:	2000      	movs	r0, #0
    73ac:	f7ff fe70 	bl	7090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    73b0:	4808      	ldr	r0, [pc, #32]	; (73d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d4>)
    73b2:	6840      	ldr	r0, [r0, #4]
    73b4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    73b8:	b128      	cbz	r0, 73c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c6>
    73ba:	2801      	cmp	r0, #1
    73bc:	d003      	beq.n	73c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c6>
    73be:	2802      	cmp	r0, #2
    73c0:	d004      	beq.n	73cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3cc>
    73c2:	200c      	movs	r0, #12
    73c4:	bd10      	pop	{r4, pc}
    73c6:	f000 f82f 	bl	7428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    73ca:	e001      	b.n	73d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d0>
    73cc:	f000 f844 	bl	7458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    73d0:	2000      	movs	r0, #0
    73d2:	bd10      	pop	{r4, pc}
    73d4:	200000ec 	.word	0x200000ec
    73d8:	b570      	push	{r4, r5, r6, lr}
    73da:	4c12      	ldr	r4, [pc, #72]	; (7424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>)
    73dc:	6860      	ldr	r0, [r4, #4]
    73de:	f100 0532 	add.w	r5, r0, #50	; 0x32
    73e2:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    73e6:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    73ea:	b188      	cbz	r0, 7410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x410>
    73ec:	f7ff fb42 	bl	6a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    73f0:	b130      	cbz	r0, 7400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    73f2:	6860      	ldr	r0, [r4, #4]
    73f4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    73f8:	b111      	cbz	r1, 7400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    73fa:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    73fe:	e002      	b.n	7406 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x406>
    7400:	6860      	ldr	r0, [r4, #4]
    7402:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7406:	f7fe f919 	bl	563c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    740a:	b108      	cbz	r0, 7410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x410>
    740c:	2601      	movs	r6, #1
    740e:	4605      	mov	r5, r0
    7410:	4629      	mov	r1, r5
    7412:	68a0      	ldr	r0, [r4, #8]
    7414:	f006 fdc9 	bl	dfaa <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7418:	4631      	mov	r1, r6
    741a:	68a0      	ldr	r0, [r4, #8]
    741c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7420:	f006 bdc9 	b.w	dfb6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7424:	200000ec 	.word	0x200000ec
    7428:	b510      	push	{r4, lr}
    742a:	f7ff fa0d 	bl	6848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    742e:	4905      	ldr	r1, [pc, #20]	; (7444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x444>)
    7430:	2001      	movs	r0, #1
    7432:	6849      	ldr	r1, [r1, #4]
    7434:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    743c:	2000      	movs	r0, #0
    743e:	f000 bb99 	b.w	7b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7442:	0000      	.short	0x0000
    7444:	200000ec 	.word	0x200000ec
    7448:	4902      	ldr	r1, [pc, #8]	; (7454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>)
    744a:	2000      	movs	r0, #0
    744c:	6849      	ldr	r1, [r1, #4]
    744e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7452:	4770      	bx	lr
    7454:	200000ec 	.word	0x200000ec
    7458:	b570      	push	{r4, r5, r6, lr}
    745a:	f7fd f889 	bl	4570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    745e:	4604      	mov	r4, r0
    7460:	f7fd f88c 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7464:	4621      	mov	r1, r4
    7466:	f006 ffb1 	bl	e3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    746a:	0005      	movs	r5, r0
    746c:	d020      	beq.n	74b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b0>
    746e:	f006 fffd 	bl	e46c <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    7472:	2000      	movs	r0, #0
    7474:	f000 fb4c 	bl	7b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7478:	b1f8      	cbz	r0, 74ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    747a:	4c1d      	ldr	r4, [pc, #116]	; (74f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f0>)
    747c:	6860      	ldr	r0, [r4, #4]
    747e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7482:	2802      	cmp	r0, #2
    7484:	d003      	beq.n	748e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48e>
    7486:	4629      	mov	r1, r5
    7488:	2000      	movs	r0, #0
    748a:	f7ff f9ef 	bl	686c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    748e:	1ce8      	adds	r0, r5, #3
    7490:	f006 f9de 	bl	d850 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7494:	6861      	ldr	r1, [r4, #4]
    7496:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    749a:	b128      	cbz	r0, 74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    749c:	2540      	movs	r5, #64	; 0x40
    749e:	f003 fdf9 	bl	b094 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    74a2:	4628      	mov	r0, r5
    74a4:	f004 f802 	bl	b4ac <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    74a8:	f7ff fae4 	bl	6a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    74ac:	b970      	cbnz	r0, 74cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4cc>
    74ae:	e008      	b.n	74c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c2>
    74b0:	f240 414a 	movw	r1, #1098	; 0x44a
    74b4:	2032      	movs	r0, #50	; 0x32
    74b6:	f7fc fc2f 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    74be:	f7ff bfb3 	b.w	7428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    74c2:	6860      	ldr	r0, [r4, #4]
    74c4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    74c8:	2802      	cmp	r0, #2
    74ca:	d104      	bne.n	74d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d6>
    74cc:	2100      	movs	r1, #0
    74ce:	2201      	movs	r2, #1
    74d0:	4608      	mov	r0, r1
    74d2:	f004 fadb 	bl	ba8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    74d6:	6860      	ldr	r0, [r4, #4]
    74d8:	21ff      	movs	r1, #255	; 0xff
    74da:	f800 1f64 	strb.w	r1, [r0, #100]!
    74de:	7041      	strb	r1, [r0, #1]
    74e0:	2100      	movs	r1, #0
    74e2:	7201      	strb	r1, [r0, #8]
    74e4:	71c1      	strb	r1, [r0, #7]
    74e6:	7641      	strb	r1, [r0, #25]
    74e8:	2105      	movs	r1, #5
    74ea:	f800 1c08 	strb.w	r1, [r0, #-8]
    74ee:	bd70      	pop	{r4, r5, r6, pc}
    74f0:	200000ec 	.word	0x200000ec
    74f4:	b570      	push	{r4, r5, r6, lr}
    74f6:	f7fd f83b 	bl	4570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    74fa:	4604      	mov	r4, r0
    74fc:	f7fd f83e 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7500:	4621      	mov	r1, r4
    7502:	f006 ff63 	bl	e3cc <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    7506:	0005      	movs	r5, r0
    7508:	d028      	beq.n	755c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55c>
    750a:	4e19      	ldr	r6, [pc, #100]	; (7570 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x570>)
    750c:	2004      	movs	r0, #4
    750e:	6874      	ldr	r4, [r6, #4]
    7510:	345c      	adds	r4, #92	; 0x5c
    7512:	f000 fafd 	bl	7b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7516:	b330      	cbz	r0, 7566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    7518:	200c      	movs	r0, #12
    751a:	7020      	strb	r0, [r4, #0]
    751c:	2001      	movs	r0, #1
    751e:	f000 fb29 	bl	7b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7522:	7828      	ldrb	r0, [r5, #0]
    7524:	6871      	ldr	r1, [r6, #4]
    7526:	f3c0 1040 	ubfx	r0, r0, #5, #1
    752a:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    752e:	2005      	movs	r0, #5
    7530:	f7ff fb3e 	bl	6bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    7534:	4a0f      	ldr	r2, [pc, #60]	; (7574 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x574>)
    7536:	68b1      	ldr	r1, [r6, #8]
    7538:	2520      	movs	r5, #32
    753a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    753c:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    7540:	7808      	ldrb	r0, [r1, #0]
    7542:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    7546:	f020 0020 	bic.w	r0, r0, #32
    754a:	4318      	orrs	r0, r3
    754c:	7008      	strb	r0, [r1, #0]
    754e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7550:	7ea2      	ldrb	r2, [r4, #26]
    7552:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    7556:	4011      	ands	r1, r2
    7558:	7001      	strb	r1, [r0, #0]
    755a:	bd70      	pop	{r4, r5, r6, pc}
    755c:	f240 5152 	movw	r1, #1362	; 0x552
    7560:	2032      	movs	r0, #50	; 0x32
    7562:	f7fc fbd9 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    756a:	f7ff bf5d 	b.w	7428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    756e:	0000      	.short	0x0000
    7570:	200000ec 	.word	0x200000ec
    7574:	20000f94 	.word	0x20000f94
    7578:	b510      	push	{r4, lr}
    757a:	2003      	movs	r0, #3
    757c:	f000 fac8 	bl	7b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7580:	b168      	cbz	r0, 759e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59e>
    7582:	2003      	movs	r0, #3
    7584:	f7ff fb14 	bl	6bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    7588:	2201      	movs	r2, #1
    758a:	4611      	mov	r1, r2
    758c:	2000      	movs	r0, #0
    758e:	f004 fa7d 	bl	ba8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7592:	4905      	ldr	r1, [pc, #20]	; (75a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a8>)
    7594:	200b      	movs	r0, #11
    7596:	6849      	ldr	r1, [r1, #4]
    7598:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    759c:	bd10      	pop	{r4, pc}
    759e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75a2:	f7ff bf41 	b.w	7428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    75a6:	0000      	.short	0x0000
    75a8:	200000ec 	.word	0x200000ec
    75ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75b0:	4c1d      	ldr	r4, [pc, #116]	; (7628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>)
    75b2:	2600      	movs	r6, #0
    75b4:	6860      	ldr	r0, [r4, #4]
    75b6:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
    75ba:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    75be:	b911      	cbnz	r1, 75c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c6>
    75c0:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    75c4:	b350      	cbz	r0, 761c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    75c6:	f004 fe3a 	bl	c23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    75ca:	4680      	mov	r8, r0
    75cc:	6860      	ldr	r0, [r4, #4]
    75ce:	4641      	mov	r1, r8
    75d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    75d2:	f7fa f805 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    75d6:	4f15      	ldr	r7, [pc, #84]	; (762c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62c>)
    75d8:	4605      	mov	r5, r0
    75da:	fb90 f0f7 	sdiv	r0, r0, r7
    75de:	fb07 5010 	mls	r0, r7, r0, r5
    75e2:	4241      	negs	r1, r0
    75e4:	4640      	mov	r0, r8
    75e6:	f7f9 ffc9 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    75ea:	6861      	ldr	r1, [r4, #4]
    75ec:	6448      	str	r0, [r1, #68]	; 0x44
    75ee:	fb95 f0f7 	sdiv	r0, r5, r7
    75f2:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    75f4:	4410      	add	r0, r2
    75f6:	6788      	str	r0, [r1, #120]	; 0x78
    75f8:	f7fe f8dc 	bl	57b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    75fc:	6861      	ldr	r1, [r4, #4]
    75fe:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7600:	4290      	cmp	r0, r2
    7602:	d80b      	bhi.n	761c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    7604:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    7608:	678e      	str	r6, [r1, #120]	; 0x78
    760a:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    760e:	b110      	cbz	r0, 7616 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x616>
    7610:	2001      	movs	r0, #1
    7612:	f7fd ffb9 	bl	5588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7616:	2001      	movs	r0, #1
    7618:	f7ff fd14 	bl	7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    761c:	6861      	ldr	r1, [r4, #4]
    761e:	2002      	movs	r0, #2
    7620:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7628:	200000ec 	.word	0x200000ec
    762c:	000f4240 	.word	0x000f4240
    7630:	00007449 	.word	0x00007449
    7634:	00007429 	.word	0x00007429
    7638:	0000e3ad 	.word	0x0000e3ad
    763c:	0000e3ad 	.word	0x0000e3ad
    7640:	0000e3ad 	.word	0x0000e3ad
    7644:	00007459 	.word	0x00007459
    7648:	0000e3ad 	.word	0x0000e3ad
    764c:	0000e3ad 	.word	0x0000e3ad
    7650:	0000e3ad 	.word	0x0000e3ad
    7654:	0000e3ad 	.word	0x0000e3ad
    7658:	0000e3ad 	.word	0x0000e3ad
    765c:	00007579 	.word	0x00007579
    7660:	000074f5 	.word	0x000074f5
    7664:	0000e3ad 	.word	0x0000e3ad
    7668:	0000e3ad 	.word	0x0000e3ad
    766c:	0000724d 	.word	0x0000724d
    7670:	00007229 	.word	0x00007229
    7674:	00000000 	.word	0x00000000
    7678:	0000e3b7 	.word	0x0000e3b7
    767c:	0000e353 	.word	0x0000e353
    7680:	0000e365 	.word	0x0000e365
    7684:	0000e373 	.word	0x0000e373
    7688:	00006a21 	.word	0x00006a21
    768c:	000072c9 	.word	0x000072c9
    7690:	000073a9 	.word	0x000073a9
    7694:	0000766c 	.word	0x0000766c
    7698:	00007674 	.word	0x00007674
    769c:	00007630 	.word	0x00007630
    76a0:	00007684 	.word	0x00007684
    76a4:	0000767c 	.word	0x0000767c
    76a8:	00007285 	.word	0x00007285
    76ac:	00007101 	.word	0x00007101
    76b0:	000071d5 	.word	0x000071d5
    76b4:	0000e3c9 	.word	0x0000e3c9

000076b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    76b8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    76bc:	461d      	mov	r5, r3
    76be:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    76c2:	4616      	mov	r6, r2
    76c4:	4688      	mov	r8, r1
    76c6:	4681      	mov	r9, r0
    76c8:	f7fc ff58 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    76cc:	4604      	mov	r4, r0
    76ce:	f005 fd88 	bl	d1e2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    76d2:	2801      	cmp	r0, #1
    76d4:	d063      	beq.n	779e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    76d6:	4620      	mov	r0, r4
    76d8:	f006 ff41 	bl	e55e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    76dc:	4604      	mov	r4, r0
    76de:	221c      	movs	r2, #28
    76e0:	2100      	movs	r1, #0
    76e2:	f004 ff9b 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    76e6:	2701      	movs	r7, #1
    76e8:	7027      	strb	r7, [r4, #0]
    76ea:	ea5f 0008 	movs.w	r0, r8
    76ee:	d009      	beq.n	7704 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    76f0:	2801      	cmp	r0, #1
    76f2:	d00b      	beq.n	770c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    76f4:	2802      	cmp	r0, #2
    76f6:	d02d      	beq.n	7754 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    76f8:	f1b8 0f06 	cmp.w	r8, #6
    76fc:	d02c      	beq.n	7758 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    76fe:	f240 217b 	movw	r1, #635	; 0x27b
    7702:	e049      	b.n	7798 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    7704:	7aa0      	ldrb	r0, [r4, #10]
    7706:	f040 0001 	orr.w	r0, r0, #1
    770a:	e026      	b.n	775a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    770c:	7aa0      	ldrb	r0, [r4, #10]
    770e:	f040 0005 	orr.w	r0, r0, #5
    7712:	bf00      	nop
    7714:	f040 0010 	orr.w	r0, r0, #16
    7718:	72a0      	strb	r0, [r4, #10]
    771a:	1c63      	adds	r3, r4, #1
    771c:	1ca2      	adds	r2, r4, #2
    771e:	4648      	mov	r0, r9
    7720:	990a      	ldr	r1, [sp, #40]	; 0x28
    7722:	f006 ff01 	bl	e528 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    7726:	f884 a009 	strb.w	sl, [r4, #9]
    772a:	7327      	strb	r7, [r4, #12]
    772c:	2000      	movs	r0, #0
    772e:	7360      	strb	r0, [r4, #13]
    7730:	20ff      	movs	r0, #255	; 0xff
    7732:	73a0      	strb	r0, [r4, #14]
    7734:	7aa1      	ldrb	r1, [r4, #10]
    7736:	0749      	lsls	r1, r1, #29
    7738:	d518      	bpl.n	776c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    773a:	f104 0014 	add.w	r0, r4, #20
    773e:	1e41      	subs	r1, r0, #1
    7740:	2d02      	cmp	r5, #2
    7742:	d00d      	beq.n	7760 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7744:	2d03      	cmp	r5, #3
    7746:	d00b      	beq.n	7760 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7748:	f8d9 2008 	ldr.w	r2, [r9, #8]
    774c:	6813      	ldr	r3, [r2, #0]
    774e:	6003      	str	r3, [r0, #0]
    7750:	8892      	ldrh	r2, [r2, #4]
    7752:	e008      	b.n	7766 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    7754:	7aa0      	ldrb	r0, [r4, #10]
    7756:	e7dd      	b.n	7714 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7758:	7aa0      	ldrb	r0, [r4, #10]
    775a:	f040 0002 	orr.w	r0, r0, #2
    775e:	e7d9      	b.n	7714 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7760:	6832      	ldr	r2, [r6, #0]
    7762:	6002      	str	r2, [r0, #0]
    7764:	88b2      	ldrh	r2, [r6, #4]
    7766:	8082      	strh	r2, [r0, #4]
    7768:	700d      	strb	r5, [r1, #0]
    776a:	e000      	b.n	776e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    776c:	74e0      	strb	r0, [r4, #19]
    776e:	207f      	movs	r0, #127	; 0x7f
    7770:	76a0      	strb	r0, [r4, #26]
    7772:	f884 b01b 	strb.w	fp, [r4, #27]
    7776:	f7fc fefb 	bl	4570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    777a:	4604      	mov	r4, r0
    777c:	f7fc fefe 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7780:	2201      	movs	r2, #1
    7782:	4621      	mov	r1, r4
    7784:	f006 fef4 	bl	e570 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    7788:	b120      	cbz	r0, 7794 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    778a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    778e:	2005      	movs	r0, #5
    7790:	f000 b9f0 	b.w	7b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    7794:	f240 219b 	movw	r1, #667	; 0x29b
    7798:	2033      	movs	r0, #51	; 0x33
    779a:	f7fc fabd 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    779e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

000077a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    77a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77a8:	4616      	mov	r6, r2
    77aa:	460c      	mov	r4, r1
    77ac:	4605      	mov	r5, r0
    77ae:	f006 fbc3 	bl	df38 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    77b2:	7460      	strb	r0, [r4, #17]
    77b4:	4628      	mov	r0, r5
    77b6:	f006 fbb6 	bl	df26 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    77ba:	74a0      	strb	r0, [r4, #18]
    77bc:	1cea      	adds	r2, r5, #3
    77be:	4b14      	ldr	r3, [pc, #80]	; (7810 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    77c0:	1d90      	adds	r0, r2, #6
    77c2:	2100      	movs	r1, #0
    77c4:	2e07      	cmp	r6, #7
    77c6:	d21f      	bcs.n	7808 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    77c8:	e8df f006 	tbb	[pc, r6]
    77cc:	1e110b04 	.word	0x1e110b04
    77d0:	00041e13 	.word	0x00041e13
    77d4:	781b      	ldrb	r3, [r3, #0]
    77d6:	e00d      	b.n	77f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    77d8:	60e0      	str	r0, [r4, #12]
    77da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77de:	60e1      	str	r1, [r4, #12]
    77e0:	e7fb      	b.n	77da <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    77e2:	785b      	ldrb	r3, [r3, #1]
    77e4:	7063      	strb	r3, [r4, #1]
    77e6:	e9c4 2001 	strd	r2, r0, [r4, #4]
    77ea:	7421      	strb	r1, [r4, #16]
    77ec:	e7f7      	b.n	77de <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    77ee:	789b      	ldrb	r3, [r3, #2]
    77f0:	e000      	b.n	77f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    77f2:	78db      	ldrb	r3, [r3, #3]
    77f4:	7063      	strb	r3, [r4, #1]
    77f6:	e9c4 2101 	strd	r2, r1, [r4, #4]
    77fa:	786a      	ldrb	r2, [r5, #1]
    77fc:	1f92      	subs	r2, r2, #6
    77fe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7802:	7422      	strb	r2, [r4, #16]
    7804:	d0eb      	beq.n	77de <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7806:	e7e7      	b.n	77d8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    7808:	7061      	strb	r1, [r4, #1]
    780a:	6061      	str	r1, [r4, #4]
    780c:	60a1      	str	r1, [r4, #8]
    780e:	e7ec      	b.n	77ea <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    7810:	0000f957 	.word	0x0000f957

00007814 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>:
    7814:	b508      	push	{r3, lr}
    7816:	2244      	movs	r2, #68	; 0x44
    7818:	2100      	movs	r1, #0
    781a:	480c      	ldr	r0, [pc, #48]	; (784c <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    781c:	f004 fefe 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7820:	f7fe fdf0 	bl	6404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7824:	2120      	movs	r1, #32
    7826:	7001      	strb	r1, [r0, #0]
    7828:	4808      	ldr	r0, [pc, #32]	; (784c <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    782a:	3810      	subs	r0, #16
    782c:	2100      	movs	r1, #0
    782e:	6001      	str	r1, [r0, #0]
    7830:	6041      	str	r1, [r0, #4]
    7832:	6081      	str	r1, [r0, #8]
    7834:	60c1      	str	r1, [r0, #12]
    7836:	f000 f871 	bl	791c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    783a:	f242 7010 	movw	r0, #10000	; 0x2710
    783e:	9000      	str	r0, [sp, #0]
    7840:	2201      	movs	r2, #1
    7842:	4669      	mov	r1, sp
    7844:	1080      	asrs	r0, r0, #2
    7846:	f000 fbb1 	bl	7fac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    784a:	bd08      	pop	{r3, pc}
    784c:	20001028 	.word	0x20001028

00007850 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>:
    7850:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7854:	4c1e      	ldr	r4, [pc, #120]	; (78d0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x80>)
    7856:	4607      	mov	r7, r0
    7858:	460e      	mov	r6, r1
    785a:	7820      	ldrb	r0, [r4, #0]
    785c:	b118      	cbz	r0, 7866 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x16>
    785e:	200c      	movs	r0, #12
    7860:	b004      	add	sp, #16
    7862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7866:	f7fe fdcd 	bl	6404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    786a:	4605      	mov	r5, r0
    786c:	61a7      	str	r7, [r4, #24]
    786e:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    7872:	b110      	cbz	r0, 787a <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x2a>
    7874:	f240 4129 	movw	r1, #1065	; 0x429
    7878:	e026      	b.n	78c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    787a:	2005      	movs	r0, #5
    787c:	7020      	strb	r0, [r4, #0]
    787e:	2000      	movs	r0, #0
    7880:	7060      	strb	r0, [r4, #1]
    7882:	7720      	strb	r0, [r4, #28]
    7884:	4630      	mov	r0, r6
    7886:	f000 f9f7 	bl	7c78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    788a:	f000 fd27 	bl	82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
    788e:	6320      	str	r0, [r4, #48]	; 0x30
    7890:	2100      	movs	r1, #0
    7892:	4810      	ldr	r0, [pc, #64]	; (78d4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x84>)
    7894:	f7fa fd5c 	bl	2350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7898:	7028      	strb	r0, [r5, #0]
    789a:	2820      	cmp	r0, #32
    789c:	d00c      	beq.n	78b8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x68>
    789e:	2200      	movs	r2, #0
    78a0:	2101      	movs	r1, #1
    78a2:	4668      	mov	r0, sp
    78a4:	f000 fdb4 	bl	8410 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x410>
    78a8:	b148      	cbz	r0, 78be <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x6e>
    78aa:	7828      	ldrb	r0, [r5, #0]
    78ac:	4669      	mov	r1, sp
    78ae:	f006 feab 	bl	e608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    78b2:	b138      	cbz	r0, 78c4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x74>
    78b4:	2000      	movs	r0, #0
    78b6:	e7d3      	b.n	7860 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x10>
    78b8:	f44f 6187 	mov.w	r1, #1080	; 0x438
    78bc:	e004      	b.n	78c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    78be:	f240 413b 	movw	r1, #1083	; 0x43b
    78c2:	e001      	b.n	78c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    78c4:	f240 413c 	movw	r1, #1084	; 0x43c
    78c8:	2035      	movs	r0, #53	; 0x35
    78ca:	f7fc fa25 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78ce:	0000      	.short	0x0000
    78d0:	20001028 	.word	0x20001028
    78d4:	00007d15 	.word	0x00007d15

000078d8 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>:
    78d8:	4902      	ldr	r1, [pc, #8]	; (78e4 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q+0xc>)
    78da:	6989      	ldr	r1, [r1, #24]
    78dc:	6001      	str	r1, [r0, #0]
    78de:	f000 b865 	b.w	79ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    78e2:	0000      	.short	0x0000
    78e4:	20001028 	.word	0x20001028

000078e8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    78e8:	4901      	ldr	r1, [pc, #4]	; (78f0 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    78ea:	7048      	strb	r0, [r1, #1]
    78ec:	4770      	bx	lr
    78ee:	0000      	.short	0x0000
    78f0:	20001018 	.word	0x20001018

000078f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    78f4:	b570      	push	{r4, r5, r6, lr}
    78f6:	4605      	mov	r5, r0
    78f8:	4907      	ldr	r1, [pc, #28]	; (7918 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x24>)
    78fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    78fe:	fbb1 f4f0 	udiv	r4, r1, r0
    7902:	f006 fed1 	bl	e6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    7906:	1901      	adds	r1, r0, r4
    7908:	4628      	mov	r0, r5
    790a:	f501 719b 	add.w	r1, r1, #310	; 0x136
    790e:	f006 fc95 	bl	e23c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7912:	b280      	uxth	r0, r0
    7914:	bd70      	pop	{r4, r5, r6, pc}
    7916:	0000      	.short	0x0000
    7918:	00012105 	.word	0x00012105

0000791c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>:
    791c:	4804      	ldr	r0, [pc, #16]	; (7930 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0x14>)
    791e:	b510      	push	{r4, lr}
    7920:	7800      	ldrb	r0, [r0, #0]
    7922:	b108      	cbz	r0, 7928 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0xc>
    7924:	f000 f842 	bl	79ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    7928:	f000 f972 	bl	7c10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9c>
    792c:	2000      	movs	r0, #0
    792e:	bd10      	pop	{r4, pc}
    7930:	20001028 	.word	0x20001028

00007934 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>:
    7934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7936:	4606      	mov	r6, r0
    7938:	b111      	cbz	r1, 7940 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0xc>
    793a:	2011      	movs	r0, #17
    793c:	b004      	add	sp, #16
    793e:	bd70      	pop	{r4, r5, r6, pc}
    7940:	4c18      	ldr	r4, [pc, #96]	; (79a4 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x70>)
    7942:	7820      	ldrb	r0, [r4, #0]
    7944:	b108      	cbz	r0, 794a <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x16>
    7946:	200c      	movs	r0, #12
    7948:	e7f8      	b.n	793c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    794a:	f7fe fd5b 	bl	6404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    794e:	4605      	mov	r5, r0
    7950:	2000      	movs	r0, #0
    7952:	7060      	strb	r0, [r4, #1]
    7954:	2004      	movs	r0, #4
    7956:	7020      	strb	r0, [r4, #0]
    7958:	4630      	mov	r0, r6
    795a:	f000 f98d 	bl	7c78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    795e:	f000 fcbd 	bl	82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
    7962:	6320      	str	r0, [r4, #48]	; 0x30
    7964:	2100      	movs	r1, #0
    7966:	4810      	ldr	r0, [pc, #64]	; (79a8 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x74>)
    7968:	f7fa fcf2 	bl	2350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    796c:	7028      	strb	r0, [r5, #0]
    796e:	2820      	cmp	r0, #32
    7970:	d00c      	beq.n	798c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x58>
    7972:	2200      	movs	r2, #0
    7974:	2101      	movs	r1, #1
    7976:	4668      	mov	r0, sp
    7978:	f000 fd4a 	bl	8410 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x410>
    797c:	b148      	cbz	r0, 7992 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x5e>
    797e:	7828      	ldrb	r0, [r5, #0]
    7980:	4669      	mov	r1, sp
    7982:	f006 fe41 	bl	e608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7986:	b138      	cbz	r0, 7998 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x64>
    7988:	2000      	movs	r0, #0
    798a:	e7d7      	b.n	793c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    798c:	f240 419f 	movw	r1, #1183	; 0x49f
    7990:	e004      	b.n	799c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    7992:	f240 41a1 	movw	r1, #1185	; 0x4a1
    7996:	e001      	b.n	799c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    7998:	f240 41a2 	movw	r1, #1186	; 0x4a2
    799c:	2035      	movs	r0, #53	; 0x35
    799e:	f7fc f9bb 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79a2:	0000      	.short	0x0000
    79a4:	20001028 	.word	0x20001028
    79a8:	00007d15 	.word	0x00007d15

000079ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>:
    79ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79b0:	2700      	movs	r7, #0
    79b2:	f7fe fd27 	bl	6404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    79b6:	4c17      	ldr	r4, [pc, #92]	; (7a14 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x68>)
    79b8:	4605      	mov	r5, r0
    79ba:	7820      	ldrb	r0, [r4, #0]
    79bc:	2804      	cmp	r0, #4
    79be:	d005      	beq.n	79cc <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    79c0:	7820      	ldrb	r0, [r4, #0]
    79c2:	2805      	cmp	r0, #5
    79c4:	d002      	beq.n	79cc <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    79c6:	200c      	movs	r0, #12
    79c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79cc:	2001      	movs	r0, #1
    79ce:	7060      	strb	r0, [r4, #1]
    79d0:	7b20      	ldrb	r0, [r4, #12]
    79d2:	b160      	cbz	r0, 79ee <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x42>
    79d4:	f3ef 8610 	mrs	r6, PRIMASK
    79d8:	b672      	cpsid	i
    79da:	7b20      	ldrb	r0, [r4, #12]
    79dc:	b128      	cbz	r0, 79ea <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    79de:	7b60      	ldrb	r0, [r4, #13]
    79e0:	b118      	cbz	r0, 79ea <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    79e2:	f7fe fee1 	bl	67a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    79e6:	f000 fad1 	bl	7f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    79ea:	b126      	cbz	r6, 79f6 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4a>
    79ec:	e004      	b.n	79f8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    79ee:	7828      	ldrb	r0, [r5, #0]
    79f0:	f7fa fa64 	bl	1ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    79f4:	e000      	b.n	79f8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    79f6:	b662      	cpsie	i
    79f8:	7828      	ldrb	r0, [r5, #0]
    79fa:	f7fa fb9d 	bl	2138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    79fe:	f000 fe37 	bl	8670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x670>
    7a02:	2000      	movs	r0, #0
    7a04:	7060      	strb	r0, [r4, #1]
    7a06:	7f20      	ldrb	r0, [r4, #28]
    7a08:	b100      	cbz	r0, 7a0c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x60>
    7a0a:	270c      	movs	r7, #12
    7a0c:	f000 fe5a 	bl	86c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c4>
    7a10:	4638      	mov	r0, r7
    7a12:	e7d9      	b.n	79c8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x1c>
    7a14:	20001028 	.word	0x20001028

00007a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    7a18:	4801      	ldr	r0, [pc, #4]	; (7a20 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    7a1a:	7800      	ldrb	r0, [r0, #0]
    7a1c:	4770      	bx	lr
    7a1e:	0000      	.short	0x0000
    7a20:	20001028 	.word	0x20001028

00007a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>:
    7a24:	490c      	ldr	r1, [pc, #48]	; (7a58 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x34>)
    7a26:	b508      	push	{r3, lr}
    7a28:	7809      	ldrb	r1, [r1, #0]
    7a2a:	b121      	cbz	r1, 7a36 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x12>
    7a2c:	f44f 618b 	mov.w	r1, #1112	; 0x458
    7a30:	2035      	movs	r0, #53	; 0x35
    7a32:	f7fc f971 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a36:	2300      	movs	r3, #0
    7a38:	9300      	str	r3, [sp, #0]
    7a3a:	7801      	ldrb	r1, [r0, #0]
    7a3c:	461a      	mov	r2, r3
    7a3e:	07c9      	lsls	r1, r1, #31
    7a40:	d003      	beq.n	7a4a <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x26>
    7a42:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7a46:	2201      	movs	r2, #1
    7a48:	9000      	str	r0, [sp, #0]
    7a4a:	4669      	mov	r1, sp
    7a4c:	4618      	mov	r0, r3
    7a4e:	f000 faad 	bl	7fac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    7a52:	2000      	movs	r0, #0
    7a54:	bd08      	pop	{r3, pc}
    7a56:	0000      	.short	0x0000
    7a58:	20001028 	.word	0x20001028

00007a5c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    7a5c:	b570      	push	{r4, r5, r6, lr}
    7a5e:	f003 fe9b 	bl	b798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7a62:	4c0e      	ldr	r4, [pc, #56]	; (7a9c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    7a64:	4606      	mov	r6, r0
    7a66:	7860      	ldrb	r0, [r4, #1]
    7a68:	b170      	cbz	r0, 7a88 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a6a:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    7a6e:	4632      	mov	r2, r6
    7a70:	4628      	mov	r0, r5
    7a72:	f005 ff8a 	bl	d98a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7a76:	6060      	str	r0, [r4, #4]
    7a78:	42a8      	cmp	r0, r5
    7a7a:	d005      	beq.n	7a88 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a7c:	68e1      	ldr	r1, [r4, #12]
    7a7e:	1b40      	subs	r0, r0, r5
    7a80:	4408      	add	r0, r1
    7a82:	60e0      	str	r0, [r4, #12]
    7a84:	f7fa fd6e 	bl	2564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7a88:	6860      	ldr	r0, [r4, #4]
    7a8a:	42b0      	cmp	r0, r6
    7a8c:	d301      	bcc.n	7a92 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    7a8e:	7820      	ldrb	r0, [r4, #0]
    7a90:	b108      	cbz	r0, 7a96 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7a92:	2000      	movs	r0, #0
    7a94:	bd70      	pop	{r4, r5, r6, pc}
    7a96:	2001      	movs	r0, #1
    7a98:	bd70      	pop	{r4, r5, r6, pc}
    7a9a:	0000      	.short	0x0000
    7a9c:	20001018 	.word	0x20001018

00007aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7aa0:	b510      	push	{r4, lr}
    7aa2:	2905      	cmp	r1, #5
    7aa4:	d22d      	bcs.n	7b02 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    7aa6:	e8df f001 	tbb	[pc, r1]
    7aaa:	0a05      	.short	0x0a05
    7aac:	00280e03 	.word	0x00280e03
    7ab0:	2100      	movs	r1, #0
    7ab2:	e000      	b.n	7ab6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7ab4:	2101      	movs	r1, #1
    7ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7aba:	f000 b9d1 	b.w	7e60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ec>
    7abe:	2103      	movs	r1, #3
    7ac0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7ac4:	bd10      	pop	{r4, pc}
    7ac6:	4911      	ldr	r1, [pc, #68]	; (7b0c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    7ac8:	4604      	mov	r4, r0
    7aca:	68c0      	ldr	r0, [r0, #12]
    7acc:	6008      	str	r0, [r1, #0]
    7ace:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7ad2:	6220      	str	r0, [r4, #32]
    7ad4:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    7ad8:	83a0      	strh	r0, [r4, #28]
    7ada:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7ade:	60e0      	str	r0, [r4, #12]
    7ae0:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7ae4:	82a0      	strh	r0, [r4, #20]
    7ae6:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    7aea:	82e0      	strh	r0, [r4, #22]
    7aec:	4620      	mov	r0, r4
    7aee:	f006 fd79 	bl	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    7af2:	2002      	movs	r0, #2
    7af4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7af8:	bd10      	pop	{r4, pc}
    7afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7afe:	f006 bd71 	b.w	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    7b02:	f640 3158 	movw	r1, #2904	; 0xb58
    7b06:	2035      	movs	r0, #53	; 0x35
    7b08:	f7fc f906 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b0c:	200000fc 	.word	0x200000fc

00007b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    7b10:	b570      	push	{r4, r5, r6, lr}
    7b12:	4605      	mov	r5, r0
    7b14:	f003 fe40 	bl	b798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7b18:	4604      	mov	r4, r0
    7b1a:	b155      	cbz	r5, 7b32 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x22>
    7b1c:	2d03      	cmp	r5, #3
    7b1e:	d00d      	beq.n	7b3c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    7b20:	2d04      	cmp	r5, #4
    7b22:	d00e      	beq.n	7b42 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x32>
    7b24:	2d06      	cmp	r5, #6
    7b26:	d01e      	beq.n	7b66 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x56>
    7b28:	f240 5194 	movw	r1, #1428	; 0x594
    7b2c:	2035      	movs	r0, #53	; 0x35
    7b2e:	f7fc f8f3 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b32:	2001      	movs	r0, #1
    7b34:	f006 fd3a 	bl	e5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    7b38:	3098      	adds	r0, #152	; 0x98
    7b3a:	e004      	b.n	7b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7b3c:	f44f 7057 	mov.w	r0, #860	; 0x35c
    7b40:	e001      	b.n	7b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7b42:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    7b46:	4e0a      	ldr	r6, [pc, #40]	; (7b70 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>)
    7b48:	1825      	adds	r5, r4, r0
    7b4a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7b4c:	38f0      	subs	r0, #240	; 0xf0
    7b4e:	4285      	cmp	r5, r0
    7b50:	d307      	bcc.n	7b62 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x52>
    7b52:	2400      	movs	r4, #0
    7b54:	f000 fc12 	bl	837c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37c>
    7b58:	b140      	cbz	r0, 7b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    7b5a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    7b5c:	38f0      	subs	r0, #240	; 0xf0
    7b5e:	4285      	cmp	r5, r0
    7b60:	d203      	bcs.n	7b6a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    7b62:	2401      	movs	r4, #1
    7b64:	e002      	b.n	7b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    7b66:	2001      	movs	r0, #1
    7b68:	bd70      	pop	{r4, r5, r6, pc}
    7b6a:	2400      	movs	r4, #0
    7b6c:	4620      	mov	r0, r4
    7b6e:	bd70      	pop	{r4, r5, r6, pc}
    7b70:	20001028 	.word	0x20001028

00007b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    7b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7b76:	2501      	movs	r5, #1
    7b78:	4c24      	ldr	r4, [pc, #144]	; (7c0c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7b7a:	2806      	cmp	r0, #6
    7b7c:	d243      	bcs.n	7c06 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7b7e:	e8df f000 	tbb	[pc, r0]
    7b82:	1903      	.short	0x1903
    7b84:	3e232319 	.word	0x3e232319
    7b88:	f002 fcfa 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7b8c:	7860      	ldrb	r0, [r4, #1]
    7b8e:	bb88      	cbnz	r0, 7bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7b90:	2200      	movs	r2, #0
    7b92:	4611      	mov	r1, r2
    7b94:	4668      	mov	r0, sp
    7b96:	f000 fc3b 	bl	8410 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x410>
    7b9a:	b148      	cbz	r0, 7bb0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7b9c:	f7fe fc32 	bl	6404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7ba0:	7800      	ldrb	r0, [r0, #0]
    7ba2:	4669      	mov	r1, sp
    7ba4:	f006 fd30 	bl	e608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7ba8:	bb20      	cbnz	r0, 7bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7baa:	f640 2163 	movw	r1, #2659	; 0xa63
    7bae:	e01c      	b.n	7bea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7bb0:	70e5      	strb	r5, [r4, #3]
    7bb2:	e020      	b.n	7bf6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7bb4:	2802      	cmp	r0, #2
    7bb6:	d005      	beq.n	7bc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7bb8:	2000      	movs	r0, #0
    7bba:	b004      	add	sp, #16
    7bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bc0:	f000 b96a 	b.w	7e98 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x324>
    7bc4:	2001      	movs	r0, #1
    7bc6:	e7f8      	b.n	7bba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7bc8:	2804      	cmp	r0, #4
    7bca:	d011      	beq.n	7bf0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7bcc:	f05f 0600 	movs.w	r6, #0
    7bd0:	f002 fcd6 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bd4:	7725      	strb	r5, [r4, #28]
    7bd6:	7766      	strb	r6, [r4, #29]
    7bd8:	69a1      	ldr	r1, [r4, #24]
    7bda:	2000      	movs	r0, #0
    7bdc:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7be0:	f000 f85a 	bl	7c98 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x124>
    7be4:	b130      	cbz	r0, 7bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7be6:	f640 3118 	movw	r1, #2840	; 0xb18
    7bea:	2035      	movs	r0, #53	; 0x35
    7bec:	f7fc f894 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bf0:	2601      	movs	r6, #1
    7bf2:	e7ed      	b.n	7bd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7bf4:	e7ff      	b.n	7bf6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7bf6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7bfa:	f000 b9c7 	b.w	7f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    7bfe:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7c02:	f002 bcbd 	b.w	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c06:	f640 31b2 	movw	r1, #2994	; 0xbb2
    7c0a:	e7ee      	b.n	7bea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7c0c:	20001028 	.word	0x20001028
    7c10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7c12:	4c18      	ldr	r4, [pc, #96]	; (7c74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x100>)
    7c14:	2001      	movs	r0, #1
    7c16:	7020      	strb	r0, [r4, #0]
    7c18:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7c1c:	e00b      	b.n	7c36 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc2>
    7c1e:	2100      	movs	r1, #0
    7c20:	f005 fd1f 	bl	d662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7c24:	0006      	movs	r6, r0
    7c26:	d010      	beq.n	7c4a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd6>
    7c28:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7c2c:	f7fa fa84 	bl	2138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7c30:	4630      	mov	r0, r6
    7c32:	f006 fd01 	bl	e638 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    7c36:	4669      	mov	r1, sp
    7c38:	2000      	movs	r0, #0
    7c3a:	f005 fd1b 	bl	d674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7c3e:	b180      	cbz	r0, 7c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7c40:	f240 2145 	movw	r1, #581	; 0x245
    7c44:	2035      	movs	r0, #53	; 0x35
    7c46:	f7fc f867 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c4a:	f240 514a 	movw	r1, #1354	; 0x54a
    7c4e:	e7f9      	b.n	7c44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd0>
    7c50:	9802      	ldr	r0, [sp, #8]
    7c52:	b130      	cbz	r0, 7c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7c54:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7c58:	b119      	cbz	r1, 7c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    7c5a:	8800      	ldrh	r0, [r0, #0]
    7c5c:	42a8      	cmp	r0, r5
    7c5e:	d1de      	bne.n	7c1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaa>
    7c60:	e004      	b.n	7c6c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xf8>
    7c62:	4668      	mov	r0, sp
    7c64:	f7fc fa88 	bl	4178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7c68:	2800      	cmp	r0, #0
    7c6a:	d0f1      	beq.n	7c50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xdc>
    7c6c:	2000      	movs	r0, #0
    7c6e:	7020      	strb	r0, [r4, #0]
    7c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7c72:	0000      	.short	0x0000
    7c74:	20001018 	.word	0x20001018
    7c78:	4906      	ldr	r1, [pc, #24]	; (7c94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x120>)
    7c7a:	b140      	cbz	r0, 7c8e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x11a>
    7c7c:	2201      	movs	r2, #1
    7c7e:	708a      	strb	r2, [r1, #2]
    7c80:	f242 7210 	movw	r2, #10000	; 0x2710
    7c84:	4350      	muls	r0, r2
    7c86:	684a      	ldr	r2, [r1, #4]
    7c88:	4410      	add	r0, r2
    7c8a:	6208      	str	r0, [r1, #32]
    7c8c:	4770      	bx	lr
    7c8e:	2000      	movs	r0, #0
    7c90:	7088      	strb	r0, [r1, #2]
    7c92:	4770      	bx	lr
    7c94:	20001028 	.word	0x20001028
    7c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7c9a:	4c1c      	ldr	r4, [pc, #112]	; (7d0c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x198>)
    7c9c:	7820      	ldrb	r0, [r4, #0]
    7c9e:	2805      	cmp	r0, #5
    7ca0:	d002      	beq.n	7ca8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x134>
    7ca2:	200c      	movs	r0, #12
    7ca4:	b004      	add	sp, #16
    7ca6:	bd10      	pop	{r4, pc}
    7ca8:	69a1      	ldr	r1, [r4, #24]
    7caa:	b129      	cbz	r1, 7cb8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x144>
    7cac:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    7cb0:	b128      	cbz	r0, 7cbe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x14a>
    7cb2:	f240 5103 	movw	r1, #1283	; 0x503
    7cb6:	e025      	b.n	7d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7cb8:	f240 5102 	movw	r1, #1282	; 0x502
    7cbc:	e022      	b.n	7d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7cbe:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    7cc2:	2820      	cmp	r0, #32
    7cc4:	d002      	beq.n	7ccc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x158>
    7cc6:	f240 5105 	movw	r1, #1285	; 0x505
    7cca:	e01b      	b.n	7d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7ccc:	4810      	ldr	r0, [pc, #64]	; (7d10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x19c>)
    7cce:	f7fa fb3f 	bl	2350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7cd2:	69a1      	ldr	r1, [r4, #24]
    7cd4:	2820      	cmp	r0, #32
    7cd6:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    7cda:	d00e      	beq.n	7cfa <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x186>
    7cdc:	2300      	movs	r3, #0
    7cde:	2201      	movs	r2, #1
    7ce0:	4668      	mov	r0, sp
    7ce2:	f000 fa09 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    7ce6:	69a0      	ldr	r0, [r4, #24]
    7ce8:	4669      	mov	r1, sp
    7cea:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    7cee:	f006 fc8b 	bl	e608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7cf2:	b128      	cbz	r0, 7d00 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x18c>
    7cf4:	2000      	movs	r0, #0
    7cf6:	61a0      	str	r0, [r4, #24]
    7cf8:	e7d4      	b.n	7ca4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x130>
    7cfa:	f240 5109 	movw	r1, #1289	; 0x509
    7cfe:	e001      	b.n	7d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    7d00:	f240 510c 	movw	r1, #1292	; 0x50c
    7d04:	2035      	movs	r0, #53	; 0x35
    7d06:	f7fc f807 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d0a:	0000      	.short	0x0000
    7d0c:	20001028 	.word	0x20001028
    7d10:	00008001 	.word	0x00008001
    7d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7d16:	460d      	mov	r5, r1
    7d18:	2001      	movs	r0, #1
    7d1a:	f006 fc30 	bl	e57e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7d1e:	b2c4      	uxtb	r4, r0
    7d20:	200b      	movs	r0, #11
    7d22:	f006 fc2c 	bl	e57e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7d26:	b2c0      	uxtb	r0, r0
    7d28:	4284      	cmp	r4, r0
    7d2a:	d002      	beq.n	7d32 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1be>
    7d2c:	f240 21ce 	movw	r1, #718	; 0x2ce
    7d30:	e073      	b.n	7e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7d32:	f7fe fb67 	bl	6404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d36:	2601      	movs	r6, #1
    7d38:	4c3b      	ldr	r4, [pc, #236]	; (7e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    7d3a:	2d09      	cmp	r5, #9
    7d3c:	d270      	bcs.n	7e20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ac>
    7d3e:	e8df f005 	tbb	[pc, r5]
    7d42:	3605      	.short	0x3605
    7d44:	6f464a4a 	.word	0x6f464a4a
    7d48:	006a665e 	.word	0x006a665e
    7d4c:	7326      	strb	r6, [r4, #12]
    7d4e:	7861      	ldrb	r1, [r4, #1]
    7d50:	2900      	cmp	r1, #0
    7d52:	d12b      	bne.n	7dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7d54:	7800      	ldrb	r0, [r0, #0]
    7d56:	f7f9 fc67 	bl	1628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7d5a:	4605      	mov	r5, r0
    7d5c:	6120      	str	r0, [r4, #16]
    7d5e:	f000 fccb 	bl	86f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f8>
    7d62:	b118      	cbz	r0, 7d6c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1f8>
    7d64:	2000      	movs	r0, #0
    7d66:	f88d 0004 	strb.w	r0, [sp, #4]
    7d6a:	e001      	b.n	7d70 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1fc>
    7d6c:	f88d 6004 	strb.w	r6, [sp, #4]
    7d70:	4629      	mov	r1, r5
    7d72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7d74:	f7f9 fc34 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7d78:	6861      	ldr	r1, [r4, #4]
    7d7a:	fbb0 f2f1 	udiv	r2, r0, r1
    7d7e:	fb01 0012 	mls	r0, r1, r2, r0
    7d82:	b150      	cbz	r0, 7d9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x226>
    7d84:	f05f 0000 	movs.w	r0, #0
    7d88:	f88d 0005 	strb.w	r0, [sp, #5]
    7d8c:	4668      	mov	r0, sp
    7d8e:	f7fe fc73 	bl	6678 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7d92:	b120      	cbz	r0, 7d9e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x22a>
    7d94:	f44f 7142 	mov.w	r1, #776	; 0x308
    7d98:	e03f      	b.n	7e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7d9a:	2001      	movs	r0, #1
    7d9c:	e7f4      	b.n	7d88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x214>
    7d9e:	4922      	ldr	r1, [pc, #136]	; (7e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    7da0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7da2:	3910      	subs	r1, #16
    7da4:	38df      	subs	r0, #223	; 0xdf
    7da6:	60c8      	str	r0, [r1, #12]
    7da8:	f7fa fbdc 	bl	2564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7dac:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7dae:	7860      	ldrb	r0, [r4, #1]
    7db0:	b128      	cbz	r0, 7dbe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x24a>
    7db2:	f7fe fcf9 	bl	67a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7db6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7dba:	f000 b8e7 	b.w	7f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    7dbe:	7366      	strb	r6, [r4, #13]
    7dc0:	f7fe fcec 	bl	679c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7dc4:	2800      	cmp	r0, #0
    7dc6:	d0f1      	beq.n	7dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7dc8:	f240 311b 	movw	r1, #795	; 0x31b
    7dcc:	e025      	b.n	7e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7dce:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7dd2:	f003 bec5 	b.w	bb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7dd6:	7805      	ldrb	r5, [r0, #0]
    7dd8:	2201      	movs	r2, #1
    7dda:	2100      	movs	r1, #0
    7ddc:	4668      	mov	r0, sp
    7dde:	f000 fb17 	bl	8410 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x410>
    7de2:	b140      	cbz	r0, 7df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x282>
    7de4:	4669      	mov	r1, sp
    7de6:	4628      	mov	r0, r5
    7de8:	f006 fc0e 	bl	e608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    7dec:	2800      	cmp	r0, #0
    7dee:	d1dd      	bne.n	7dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    7df0:	f640 217f 	movw	r1, #2687	; 0xa7f
    7df4:	e011      	b.n	7e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7df6:	70e6      	strb	r6, [r4, #3]
    7df8:	f000 f818 	bl	7e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    7dfc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7dfe:	f000 fabd 	bl	837c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37c>
    7e02:	2800      	cmp	r0, #0
    7e04:	d1fa      	bne.n	7dfc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x288>
    7e06:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e0a:	f006 baa0 	b.w	e34e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7e0e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7e12:	f000 b80b 	b.w	7e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    7e16:	f240 313f 	movw	r1, #831	; 0x33f
    7e1a:	2035      	movs	r0, #53	; 0x35
    7e1c:	f7fb ff7c 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e20:	f240 3143 	movw	r1, #835	; 0x343
    7e24:	e7f9      	b.n	7e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    7e26:	0000      	.short	0x0000
    7e28:	20001028 	.word	0x20001028
    7e2c:	b510      	push	{r4, lr}
    7e2e:	4c0b      	ldr	r4, [pc, #44]	; (7e5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e8>)
    7e30:	7820      	ldrb	r0, [r4, #0]
    7e32:	b130      	cbz	r0, 7e42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ce>
    7e34:	f000 fc1c 	bl	8670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x670>
    7e38:	78e0      	ldrb	r0, [r4, #3]
    7e3a:	b158      	cbz	r0, 7e54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    7e3c:	7f20      	ldrb	r0, [r4, #28]
    7e3e:	b128      	cbz	r0, 7e4c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2d8>
    7e40:	e008      	b.n	7e54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    7e42:	f240 21ba 	movw	r1, #698	; 0x2ba
    7e46:	2035      	movs	r0, #53	; 0x35
    7e48:	f7fb ff66 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e4c:	f7fe fcbe 	bl	67cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    7e50:	f002 fb96 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e58:	f000 bc34 	b.w	86c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c4>
    7e5c:	20001028 	.word	0x20001028
    7e60:	b510      	push	{r4, lr}
    7e62:	4604      	mov	r4, r0
    7e64:	2901      	cmp	r1, #1
    7e66:	d102      	bne.n	7e6e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2fa>
    7e68:	480a      	ldr	r0, [pc, #40]	; (7e94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x320>)
    7e6a:	7800      	ldrb	r0, [r0, #0]
    7e6c:	b140      	cbz	r0, 7e80 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x30c>
    7e6e:	2004      	movs	r0, #4
    7e70:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7e74:	f003 fcc4 	bl	b800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e7c:	f7fa ba90 	b.w	23a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7e80:	2200      	movs	r2, #0
    7e82:	2101      	movs	r1, #1
    7e84:	4620      	mov	r0, r4
    7e86:	f006 fbef 	bl	e668 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    7e8a:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    7e8e:	1c40      	adds	r0, r0, #1
    7e90:	8020      	strh	r0, [r4, #0]
    7e92:	e7ef      	b.n	7e74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x300>
    7e94:	20001018 	.word	0x20001018
    7e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e9c:	4c39      	ldr	r4, [pc, #228]	; (7f84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x410>)
    7e9e:	4682      	mov	sl, r0
    7ea0:	6926      	ldr	r6, [r4, #16]
    7ea2:	f003 fc79 	bl	b798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7ea6:	4605      	mov	r5, r0
    7ea8:	69a0      	ldr	r0, [r4, #24]
    7eaa:	2201      	movs	r2, #1
    7eac:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    7eb0:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    7eb4:	3062      	adds	r0, #98	; 0x62
    7eb6:	2101      	movs	r1, #1
    7eb8:	7281      	strb	r1, [r0, #10]
    7eba:	69a0      	ldr	r0, [r4, #24]
    7ebc:	2100      	movs	r1, #0
    7ebe:	302c      	adds	r0, #44	; 0x2c
    7ec0:	f006 f9a3 	bl	e20a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7ec4:	2101      	movs	r1, #1
    7ec6:	2000      	movs	r0, #0
    7ec8:	f006 fbfa 	bl	e6c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    7ecc:	69a7      	ldr	r7, [r4, #24]
    7ece:	1971      	adds	r1, r6, r5
    7ed0:	4408      	add	r0, r1
    7ed2:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    7ed6:	f8d7 800c 	ldr.w	r8, [r7, #12]
    7eda:	f002 fb29 	bl	a530 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    7ede:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    7ee2:	4288      	cmp	r0, r1
    7ee4:	d00a      	beq.n	7efc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x388>
    7ee6:	464a      	mov	r2, r9
    7ee8:	4641      	mov	r1, r8
    7eea:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    7eee:	f006 fd15 	bl	e91c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    7ef2:	4540      	cmp	r0, r8
    7ef4:	d903      	bls.n	7efe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x38a>
    7ef6:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
    7efa:	e022      	b.n	7f42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3ce>
    7efc:	2000      	movs	r0, #0
    7efe:	4922      	ldr	r1, [pc, #136]	; (7f88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x414>)
    7f00:	4607      	mov	r7, r0
    7f02:	6849      	ldr	r1, [r1, #4]
    7f04:	4288      	cmp	r0, r1
    7f06:	69a0      	ldr	r0, [r4, #24]
    7f08:	68c1      	ldr	r1, [r0, #12]
    7f0a:	d202      	bcs.n	7f12 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x39e>
    7f0c:	440f      	add	r7, r1
    7f0e:	6201      	str	r1, [r0, #32]
    7f10:	e008      	b.n	7f24 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3b0>
    7f12:	4638      	mov	r0, r7
    7f14:	f005 fec4 	bl	dca0 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7f18:	69a1      	ldr	r1, [r4, #24]
    7f1a:	68c9      	ldr	r1, [r1, #12]
    7f1c:	f005 febc 	bl	dc98 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7f20:	69a1      	ldr	r1, [r4, #24]
    7f22:	6208      	str	r0, [r1, #32]
    7f24:	69a0      	ldr	r0, [r4, #24]
    7f26:	68c1      	ldr	r1, [r0, #12]
    7f28:	2005      	movs	r0, #5
    7f2a:	f005 febf 	bl	dcac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7f2e:	69a1      	ldr	r1, [r4, #24]
    7f30:	b280      	uxth	r0, r0
    7f32:	8388      	strh	r0, [r1, #28]
    7f34:	69a1      	ldr	r1, [r4, #24]
    7f36:	6a09      	ldr	r1, [r1, #32]
    7f38:	1a79      	subs	r1, r7, r1
    7f3a:	4288      	cmp	r0, r1
    7f3c:	d804      	bhi.n	7f48 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3d4>
    7f3e:	f640 21ee 	movw	r1, #2798	; 0xaee
    7f42:	2035      	movs	r0, #53	; 0x35
    7f44:	f7fb fee8 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f48:	2101      	movs	r1, #1
    7f4a:	4650      	mov	r0, sl
    7f4c:	f006 fbb8 	bl	e6c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    7f50:	4428      	add	r0, r5
    7f52:	19c5      	adds	r5, r0, r7
    7f54:	2101      	movs	r1, #1
    7f56:	4650      	mov	r0, sl
    7f58:	f005 fdd4 	bl	db04 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7f5c:	4405      	add	r5, r0
    7f5e:	2001      	movs	r0, #1
    7f60:	f007 fc4a 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7f64:	f64a 2113 	movw	r1, #43539	; 0xaa13
    7f68:	4408      	add	r0, r1
    7f6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7f6e:	fbb0 f0f1 	udiv	r0, r0, r1
    7f72:	1a29      	subs	r1, r5, r0
    7f74:	4630      	mov	r0, r6
    7f76:	f7f9 fb01 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7f7a:	69a1      	ldr	r1, [r4, #24]
    7f7c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    7f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f84:	20001028 	.word	0x20001028
    7f88:	200000fc 	.word	0x200000fc
    7f8c:	b510      	push	{r4, lr}
    7f8e:	4c06      	ldr	r4, [pc, #24]	; (7fa8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x434>)
    7f90:	7b20      	ldrb	r0, [r4, #12]
    7f92:	2800      	cmp	r0, #0
    7f94:	d006      	beq.n	7fa4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x430>
    7f96:	f003 fc33 	bl	b800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    7f9a:	f7fa fa01 	bl	23a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    7f9e:	2000      	movs	r0, #0
    7fa0:	7320      	strb	r0, [r4, #12]
    7fa2:	7360      	strb	r0, [r4, #13]
    7fa4:	bd10      	pop	{r4, pc}
    7fa6:	0000      	.short	0x0000
    7fa8:	20001028 	.word	0x20001028
    7fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fb0:	4d11      	ldr	r5, [pc, #68]	; (7ff8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x484>)
    7fb2:	4616      	mov	r6, r2
    7fb4:	460f      	mov	r7, r1
    7fb6:	2400      	movs	r4, #0
    7fb8:	6068      	str	r0, [r5, #4]
    7fba:	f006 fb75 	bl	e6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    7fbe:	f8df c03c 	ldr.w	ip, [pc, #60]	; 7ffc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x488>
    7fc2:	2100      	movs	r1, #0
    7fc4:	f81c 2001 	ldrb.w	r2, [ip, r1]
    7fc8:	4232      	tst	r2, r6
    7fca:	d007      	beq.n	7fdc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x468>
    7fcc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    7fd0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    7fd4:	1a1b      	subs	r3, r3, r0
    7fd6:	1c64      	adds	r4, r4, #1
    7fd8:	b2e4      	uxtb	r4, r4
    7fda:	6093      	str	r3, [r2, #8]
    7fdc:	1c49      	adds	r1, r1, #1
    7fde:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    7fe2:	d0ef      	beq.n	7fc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x450>
    7fe4:	f016 0f0e 	tst.w	r6, #14
    7fe8:	d004      	beq.n	7ff4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x480>
    7fea:	f640 11b8 	movw	r1, #2488	; 0x9b8
    7fee:	2035      	movs	r0, #53	; 0x35
    7ff0:	f7fb fe92 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ff8:	20001028 	.word	0x20001028
    7ffc:	0000f95b 	.word	0x0000f95b
    8000:	b570      	push	{r4, r5, r6, lr}
    8002:	460d      	mov	r5, r1
    8004:	0004      	movs	r4, r0
    8006:	d00c      	beq.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
    8008:	2001      	movs	r0, #1
    800a:	f006 fab8 	bl	e57e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    800e:	b2c6      	uxtb	r6, r0
    8010:	200b      	movs	r0, #11
    8012:	f006 fab4 	bl	e57e <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8016:	b2c0      	uxtb	r0, r0
    8018:	4286      	cmp	r6, r0
    801a:	d005      	beq.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    801c:	f44f 711a 	mov.w	r1, #616	; 0x268
    8020:	e061      	b.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
    8022:	f240 2165 	movw	r1, #613	; 0x265
    8026:	e05e      	b.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
    8028:	2d09      	cmp	r5, #9
    802a:	d25f      	bcs.n	80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>
    802c:	e8df f005 	tbb	[pc, r5]
    8030:	3d3d3505 	.word	0x3d3d3505
    8034:	4b445e39 	.word	0x4b445e39
    8038:	0059      	.short	0x0059
    803a:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    803e:	b348      	cbz	r0, 8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
    8040:	4620      	mov	r0, r4
    8042:	f000 fd69 	bl	8b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    8046:	f006 fb2f 	bl	e6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    804a:	f200 1037 	addw	r0, r0, #311	; 0x137
    804e:	b285      	uxth	r5, r0
    8050:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8054:	2128      	movs	r1, #40	; 0x28
    8056:	f006 fac3 	bl	e5e0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x44>
    805a:	182e      	adds	r6, r5, r0
    805c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    805e:	68e0      	ldr	r0, [r4, #12]
    8060:	4288      	cmp	r0, r1
    8062:	d200      	bcs.n	8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
    8064:	4601      	mov	r1, r0
    8066:	4632      	mov	r2, r6
    8068:	4620      	mov	r0, r4
    806a:	f006 f857 	bl	e11c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    806e:	4d21      	ldr	r5, [pc, #132]	; (80f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf4>)
    8070:	4632      	mov	r2, r6
    8072:	6068      	str	r0, [r5, #4]
    8074:	4620      	mov	r0, r4
    8076:	68e1      	ldr	r1, [r4, #12]
    8078:	f006 f850 	bl	e11c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    807c:	60a8      	str	r0, [r5, #8]
    807e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8082:	f006 f8ac 	bl	e1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8086:	f5a0 7093 	sub.w	r0, r0, #294	; 0x126
    808a:	60e8      	str	r0, [r5, #12]
    808c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8090:	f7fa ba68 	b.w	2564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8094:	f240 216e 	movw	r1, #622	; 0x26e
    8098:	e025      	b.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
    809a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    809e:	f006 bb95 	b.w	e7cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    80a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80a6:	f003 bd5b 	b.w	bb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    80aa:	4620      	mov	r0, r4
    80ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80b0:	2201      	movs	r2, #1
    80b2:	2100      	movs	r1, #0
    80b4:	f006 bad8 	b.w	e668 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    80b8:	2001      	movs	r0, #1
    80ba:	f7f9 f933 	bl	1324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    80be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80c2:	f005 bba9 	b.w	d818 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    80c6:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    80ca:	2804      	cmp	r0, #4
    80cc:	d002      	beq.n	80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>
    80ce:	f240 21a2 	movw	r1, #674	; 0x2a2
    80d2:	e008      	b.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
    80d4:	4620      	mov	r0, r4
    80d6:	f006 faaf 	bl	e638 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    80da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80de:	f002 ba4f 	b.w	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    80e2:	f240 21ad 	movw	r1, #685	; 0x2ad
    80e6:	2035      	movs	r0, #53	; 0x35
    80e8:	f7fb fe16 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80ec:	f240 21b1 	movw	r1, #689	; 0x2b1
    80f0:	e7f9      	b.n	80e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe6>
    80f2:	0000      	.short	0x0000
    80f4:	20001018 	.word	0x20001018
    80f8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    80fc:	4605      	mov	r5, r0
    80fe:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    8102:	2600      	movs	r6, #0
    8104:	f8d1 b020 	ldr.w	fp, [r1, #32]
    8108:	469a      	mov	sl, r3
    810a:	460c      	mov	r4, r1
    810c:	280d      	cmp	r0, #13
    810e:	d020      	beq.n	8152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x152>
    8110:	280c      	cmp	r0, #12
    8112:	d01e      	beq.n	8152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x152>
    8114:	2824      	cmp	r0, #36	; 0x24
    8116:	d01c      	beq.n	8152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x152>
    8118:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    811c:	2824      	cmp	r0, #36	; 0x24
    811e:	d018      	beq.n	8152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x152>
    8120:	2000      	movs	r0, #0
    8122:	4680      	mov	r8, r0
    8124:	f006 fab5 	bl	e692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    8128:	4681      	mov	r9, r0
    812a:	f1ba 0f00 	cmp.w	sl, #0
    812e:	d003      	beq.n	8138 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138>
    8130:	2101      	movs	r1, #1
    8132:	4620      	mov	r0, r4
    8134:	f006 faf1 	bl	e71a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8138:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    813c:	2701      	movs	r7, #1
    813e:	b150      	cbz	r0, 8156 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x156>
    8140:	2801      	cmp	r0, #1
    8142:	d01b      	beq.n	817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>
    8144:	2802      	cmp	r0, #2
    8146:	d011      	beq.n	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
    8148:	2803      	cmp	r0, #3
    814a:	d017      	beq.n	817c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c>
    814c:	f640 113b 	movw	r1, #2363	; 0x93b
    8150:	e07b      	b.n	824a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24a>
    8152:	2001      	movs	r0, #1
    8154:	e7e5      	b.n	8122 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x122>
    8156:	9802      	ldr	r0, [sp, #8]
    8158:	b128      	cbz	r0, 8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    815a:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    815e:	4620      	mov	r0, r4
    8160:	f006 fa40 	bl	e5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    8164:	e00b      	b.n	817e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17e>
    8166:	f640 1101 	movw	r1, #2305	; 0x901
    816a:	e06e      	b.n	824a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24a>
    816c:	4838      	ldr	r0, [pc, #224]	; (8250 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x250>)
    816e:	6801      	ldr	r1, [r0, #0]
    8170:	2003      	movs	r0, #3
    8172:	eb01 060b 	add.w	r6, r1, fp
    8176:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    817a:	e000      	b.n	817e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17e>
    817c:	68e6      	ldr	r6, [r4, #12]
    817e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    8182:	4631      	mov	r1, r6
    8184:	f7f9 f9fa 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8188:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    818c:	60e8      	str	r0, [r5, #12]
    818e:	2000      	movs	r0, #0
    8190:	7028      	strb	r0, [r5, #0]
    8192:	f8a5 9008 	strh.w	r9, [r5, #8]
    8196:	4620      	mov	r0, r4
    8198:	f000 fc0c 	bl	89b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    819c:	f1a8 0101 	sub.w	r1, r8, #1
    81a0:	4208      	tst	r0, r1
    81a2:	d101      	bne.n	81a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a8>
    81a4:	72af      	strb	r7, [r5, #10]
    81a6:	e005      	b.n	81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
    81a8:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    81ac:	2801      	cmp	r0, #1
    81ae:	d017      	beq.n	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
    81b0:	2003      	movs	r0, #3
    81b2:	72a8      	strb	r0, [r5, #10]
    81b4:	46b9      	mov	r9, r7
    81b6:	72ef      	strb	r7, [r5, #11]
    81b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    81bc:	f006 f80f 	bl	e1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    81c0:	6068      	str	r0, [r5, #4]
    81c2:	f1ba 0f00 	cmp.w	sl, #0
    81c6:	d03c      	beq.n	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
    81c8:	4631      	mov	r1, r6
    81ca:	4628      	mov	r0, r5
    81cc:	f005 fcf9 	bl	dbc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    81d0:	b287      	uxth	r7, r0
    81d2:	4620      	mov	r0, r4
    81d4:	f000 fbee 	bl	89b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    81d8:	f1b8 0f00 	cmp.w	r8, #0
    81dc:	d002      	beq.n	81e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e4>
    81de:	e014      	b.n	820a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20a>
    81e0:	2002      	movs	r0, #2
    81e2:	e7e6      	b.n	81b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b2>
    81e4:	42b8      	cmp	r0, r7
    81e6:	d810      	bhi.n	820a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20a>
    81e8:	4607      	mov	r7, r0
    81ea:	f885 900a 	strb.w	r9, [r5, #10]
    81ee:	fb06 f107 	mul.w	r1, r6, r7
    81f2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    81f6:	f7f9 f9c1 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    81fa:	60e8      	str	r0, [r5, #12]
    81fc:	b31e      	cbz	r6, 8246 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x246>
    81fe:	4631      	mov	r1, r6
    8200:	4628      	mov	r0, r5
    8202:	f005 fcde 	bl	dbc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8206:	4438      	add	r0, r7
    8208:	b287      	uxth	r7, r0
    820a:	4639      	mov	r1, r7
    820c:	4620      	mov	r0, r4
    820e:	f006 fa84 	bl	e71a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8212:	68e8      	ldr	r0, [r5, #12]
    8214:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8218:	6f20      	ldr	r0, [r4, #112]	; 0x70
    821a:	2800      	cmp	r0, #0
    821c:	d011      	beq.n	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
    821e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8222:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    8226:	1a40      	subs	r0, r0, r1
    8228:	b202      	sxth	r2, r0
    822a:	2a00      	cmp	r2, #0
    822c:	dd09      	ble.n	8242 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x242>
    822e:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    8232:	4402      	add	r2, r0
    8234:	1e52      	subs	r2, r2, #1
    8236:	fb92 f2f0 	sdiv	r2, r2, r0
    823a:	b292      	uxth	r2, r2
    823c:	fb02 1000 	mla	r0, r2, r0, r1
    8240:	86e0      	strh	r0, [r4, #54]	; 0x36
    8242:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    8246:	f640 1176 	movw	r1, #2422	; 0x976
    824a:	2035      	movs	r0, #53	; 0x35
    824c:	f7fb fd64 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8250:	200000fc 	.word	0x200000fc
    8254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8258:	460d      	mov	r5, r1
    825a:	4607      	mov	r7, r0
    825c:	f000 fa58 	bl	8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>
    8260:	4c1d      	ldr	r4, [pc, #116]	; (82d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d8>)
    8262:	6861      	ldr	r1, [r4, #4]
    8264:	f7f9 f98a 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8268:	4606      	mov	r6, r0
    826a:	4601      	mov	r1, r0
    826c:	4638      	mov	r0, r7
    826e:	f7f9 f9b7 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8272:	4607      	mov	r7, r0
    8274:	f006 fa1e 	bl	e6b4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    8278:	4287      	cmp	r7, r0
    827a:	da10      	bge.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    827c:	6960      	ldr	r0, [r4, #20]
    827e:	f000 fa47 	bl	8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>
    8282:	4631      	mov	r1, r6
    8284:	f7f9 f9ac 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8288:	6861      	ldr	r1, [r4, #4]
    828a:	fbb0 f0f1 	udiv	r0, r0, r1
    828e:	6028      	str	r0, [r5, #0]
    8290:	6861      	ldr	r1, [r4, #4]
    8292:	b004      	add	sp, #16
    8294:	4630      	mov	r0, r6
    8296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    829a:	f7f9 b96f 	b.w	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    829e:	2000      	movs	r0, #0
    82a0:	f88d 0000 	strb.w	r0, [sp]
    82a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    82a6:	9001      	str	r0, [sp, #4]
    82a8:	f006 f9f3 	bl	e692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    82ac:	f8ad 0008 	strh.w	r0, [sp, #8]
    82b0:	2001      	movs	r0, #1
    82b2:	f88d 000b 	strb.w	r0, [sp, #11]
    82b6:	6960      	ldr	r0, [r4, #20]
    82b8:	f000 fa2a 	bl	8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>
    82bc:	9003      	str	r0, [sp, #12]
    82be:	f000 f9c1 	bl	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    82c2:	f88d 000a 	strb.w	r0, [sp, #10]
    82c6:	4668      	mov	r0, sp
    82c8:	6861      	ldr	r1, [r4, #4]
    82ca:	f005 fc7a 	bl	dbc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    82ce:	6028      	str	r0, [r5, #0]
    82d0:	9803      	ldr	r0, [sp, #12]
    82d2:	b004      	add	sp, #16
    82d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82d8:	20001028 	.word	0x20001028
    82dc:	b510      	push	{r4, lr}
    82de:	2400      	movs	r4, #0
    82e0:	f006 f9e2 	bl	e6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    82e4:	4a06      	ldr	r2, [pc, #24]	; (8300 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x300>)
    82e6:	2100      	movs	r1, #0
    82e8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    82ec:	4404      	add	r4, r0
    82ee:	689b      	ldr	r3, [r3, #8]
    82f0:	1c49      	adds	r1, r1, #1
    82f2:	441c      	add	r4, r3
    82f4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    82f8:	d0f6      	beq.n	82e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e8>
    82fa:	4620      	mov	r0, r4
    82fc:	bd10      	pop	{r4, pc}
    82fe:	0000      	.short	0x0000
    8300:	20001028 	.word	0x20001028
    8304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8306:	4c1b      	ldr	r4, [pc, #108]	; (8374 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x374>)
    8308:	4606      	mov	r6, r0
    830a:	460d      	mov	r5, r1
    830c:	78a0      	ldrb	r0, [r4, #2]
    830e:	b360      	cbz	r0, 836a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36a>
    8310:	4919      	ldr	r1, [pc, #100]	; (8378 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x378>)
    8312:	6a20      	ldr	r0, [r4, #32]
    8314:	4288      	cmp	r0, r1
    8316:	d828      	bhi.n	836a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36a>
    8318:	2000      	movs	r0, #0
    831a:	f88d 0000 	strb.w	r0, [sp]
    831e:	9501      	str	r5, [sp, #4]
    8320:	f006 f9b7 	bl	e692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    8324:	f8ad 0008 	strh.w	r0, [sp, #8]
    8328:	2001      	movs	r0, #1
    832a:	f88d 000b 	strb.w	r0, [sp, #11]
    832e:	f006 f9c1 	bl	e6b4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    8332:	4601      	mov	r1, r0
    8334:	4630      	mov	r0, r6
    8336:	f7f9 f921 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    833a:	9003      	str	r0, [sp, #12]
    833c:	2003      	movs	r0, #3
    833e:	f88d 000a 	strb.w	r0, [sp, #10]
    8342:	4668      	mov	r0, sp
    8344:	f7f9 fc58 	bl	1bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    8348:	4606      	mov	r6, r0
    834a:	4629      	mov	r1, r5
    834c:	9803      	ldr	r0, [sp, #12]
    834e:	f7f9 f915 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8352:	4605      	mov	r5, r0
    8354:	6a21      	ldr	r1, [r4, #32]
    8356:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8358:	f7f9 f910 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    835c:	4601      	mov	r1, r0
    835e:	b13e      	cbz	r6, 8370 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x370>
    8360:	4628      	mov	r0, r5
    8362:	f7f9 f93d 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8366:	2800      	cmp	r0, #0
    8368:	db02      	blt.n	8370 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x370>
    836a:	2001      	movs	r0, #1
    836c:	b004      	add	sp, #16
    836e:	bd70      	pop	{r4, r5, r6, pc}
    8370:	2000      	movs	r0, #0
    8372:	e7fb      	b.n	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
    8374:	20001028 	.word	0x20001028
    8378:	07a12000 	.word	0x07a12000
    837c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8380:	f003 ff5d 	bl	c23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8384:	4c21      	ldr	r4, [pc, #132]	; (840c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40c>)
    8386:	4607      	mov	r7, r0
    8388:	6920      	ldr	r0, [r4, #16]
    838a:	f000 f95b 	bl	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    838e:	4606      	mov	r6, r0
    8390:	f7f9 f89a 	bl	14c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    8394:	4605      	mov	r5, r0
    8396:	2864      	cmp	r0, #100	; 0x64
    8398:	d326      	bcc.n	83e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e8>
    839a:	1c68      	adds	r0, r5, #1
    839c:	d027      	beq.n	83ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ee>
    839e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    83a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    83a2:	1948      	adds	r0, r1, r5
    83a4:	4282      	cmp	r2, r0
    83a6:	d800      	bhi.n	83aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3aa>
    83a8:	1a55      	subs	r5, r2, r1
    83aa:	f06f 0138 	mvn.w	r1, #56	; 0x38
    83ae:	4638      	mov	r0, r7
    83b0:	f7f9 f8e4 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83b4:	4629      	mov	r1, r5
    83b6:	f000 f9bd 	bl	8734 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x734>
    83ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    83bc:	4408      	add	r0, r1
    83be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    83c0:	1a45      	subs	r5, r0, r1
    83c2:	f241 3088 	movw	r0, #5000	; 0x1388
    83c6:	4285      	cmp	r5, r0
    83c8:	d900      	bls.n	83cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3cc>
    83ca:	4605      	mov	r5, r0
    83cc:	f003 ff37 	bl	c23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    83d0:	4601      	mov	r1, r0
    83d2:	4638      	mov	r0, r7
    83d4:	f7f9 f904 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    83d8:	309b      	adds	r0, #155	; 0x9b
    83da:	4285      	cmp	r5, r0
    83dc:	d304      	bcc.n	83e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e8>
    83de:	4631      	mov	r1, r6
    83e0:	4628      	mov	r0, r5
    83e2:	f7f8 ffaf 	bl	1344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    83e6:	b120      	cbz	r0, 83f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f2>
    83e8:	2000      	movs	r0, #0
    83ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    83f0:	e7e5      	b.n	83be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3be>
    83f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    83f4:	4905      	ldr	r1, [pc, #20]	; (840c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40c>)
    83f6:	4428      	add	r0, r5
    83f8:	3910      	subs	r1, #16
    83fa:	6260      	str	r0, [r4, #36]	; 0x24
    83fc:	68c8      	ldr	r0, [r1, #12]
    83fe:	4428      	add	r0, r5
    8400:	60c8      	str	r0, [r1, #12]
    8402:	f7fa f8af 	bl	2564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8406:	2001      	movs	r0, #1
    8408:	e7ef      	b.n	83ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ea>
    840a:	0000      	.short	0x0000
    840c:	20001028 	.word	0x20001028
    8410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8414:	b08c      	sub	sp, #48	; 0x30
    8416:	4616      	mov	r6, r2
    8418:	4607      	mov	r7, r0
    841a:	f003 ff10 	bl	c23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    841e:	4c87      	ldr	r4, [pc, #540]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    8420:	9002      	str	r0, [sp, #8]
    8422:	2500      	movs	r5, #0
    8424:	f8d4 a008 	ldr.w	sl, [r4, #8]
    8428:	f006 f93e 	bl	e6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    842c:	68a1      	ldr	r1, [r4, #8]
    842e:	4408      	add	r0, r1
    8430:	6861      	ldr	r1, [r4, #4]
    8432:	4288      	cmp	r0, r1
    8434:	d101      	bne.n	843a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43a>
    8436:	2001      	movs	r0, #1
    8438:	e000      	b.n	843c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43c>
    843a:	2000      	movs	r0, #0
    843c:	4683      	mov	fp, r0
    843e:	980d      	ldr	r0, [sp, #52]	; 0x34
    8440:	ea06 090b 	and.w	r9, r6, fp
    8444:	2800      	cmp	r0, #0
    8446:	d065      	beq.n	8514 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x514>
    8448:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    844c:	9802      	ldr	r0, [sp, #8]
    844e:	f7f9 f895 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8452:	9000      	str	r0, [sp, #0]
    8454:	f002 f872 	bl	a53c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    8458:	4680      	mov	r8, r0
    845a:	4878      	ldr	r0, [pc, #480]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    845c:	7800      	ldrb	r0, [r0, #0]
    845e:	4e77      	ldr	r6, [pc, #476]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    8460:	362c      	adds	r6, #44	; 0x2c
    8462:	2805      	cmp	r0, #5
    8464:	d12e      	bne.n	84c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c4>
    8466:	4875      	ldr	r0, [pc, #468]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    8468:	6980      	ldr	r0, [r0, #24]
    846a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    846e:	f002 f845 	bl	a4fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    8472:	4604      	mov	r4, r0
    8474:	4540      	cmp	r0, r8
    8476:	d009      	beq.n	848c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48c>
    8478:	4870      	ldr	r0, [pc, #448]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    847a:	4621      	mov	r1, r4
    847c:	6980      	ldr	r0, [r0, #24]
    847e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8482:	f001 ffff 	bl	a484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8486:	2000      	movs	r0, #0
    8488:	6170      	str	r0, [r6, #20]
    848a:	e00c      	b.n	84a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a6>
    848c:	496b      	ldr	r1, [pc, #428]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    848e:	6988      	ldr	r0, [r1, #24]
    8490:	f500 7084 	add.w	r0, r0, #264	; 0x108
    8494:	6170      	str	r0, [r6, #20]
    8496:	698a      	ldr	r2, [r1, #24]
    8498:	6b08      	ldr	r0, [r1, #48]	; 0x30
    849a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    849e:	4290      	cmp	r0, r2
    84a0:	d200      	bcs.n	84a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a4>
    84a2:	4610      	mov	r0, r2
    84a4:	6308      	str	r0, [r1, #48]	; 0x30
    84a6:	4865      	ldr	r0, [pc, #404]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    84a8:	6980      	ldr	r0, [r0, #24]
    84aa:	b130      	cbz	r0, 84ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ba>
    84ac:	b144      	cbz	r4, 84c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c0>
    84ae:	e9d4 1200 	ldrd	r1, r2, [r4]
    84b2:	4411      	add	r1, r2
    84b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    84b8:	e004      	b.n	84c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c4>
    84ba:	f240 51c7 	movw	r1, #1479	; 0x5c7
    84be:	e017      	b.n	84f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f0>
    84c0:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    84c4:	4641      	mov	r1, r8
    84c6:	4630      	mov	r0, r6
    84c8:	f001 ffdc 	bl	a484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    84cc:	ea5f 0008 	movs.w	r0, r8
    84d0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>
    84d4:	9a00      	ldr	r2, [sp, #0]
    84d6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    84da:	d00c      	beq.n	84f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f6>
    84dc:	e9d0 1000 	ldrd	r1, r0, [r0]
    84e0:	4408      	add	r0, r1
    84e2:	4621      	mov	r1, r4
    84e4:	f006 fa1a 	bl	e91c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    84e8:	42a0      	cmp	r0, r4
    84ea:	d904      	bls.n	84f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f6>
    84ec:	f240 51e5 	movw	r1, #1509	; 0x5e5
    84f0:	2035      	movs	r0, #53	; 0x35
    84f2:	f7fb fc11 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84f6:	4601      	mov	r1, r0
    84f8:	9800      	ldr	r0, [sp, #0]
    84fa:	f7f9 f83f 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    84fe:	4606      	mov	r6, r0
    8500:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8504:	4644      	mov	r4, r8
    8506:	4241      	negs	r1, r0
    8508:	4630      	mov	r0, r6
    850a:	f7f9 f837 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    850e:	62e0      	str	r0, [r4, #44]	; 0x2c
    8510:	2001      	movs	r0, #1
    8512:	e042      	b.n	859a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59a>
    8514:	f1b9 0f00 	cmp.w	r9, #0
    8518:	d018      	beq.n	854c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54c>
    851a:	2001      	movs	r0, #1
    851c:	f006 f846 	bl	e5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    8520:	4604      	mov	r4, r0
    8522:	2001      	movs	r0, #1
    8524:	f007 f968 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8528:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    852c:	4401      	add	r1, r0
    852e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8532:	fbb1 f0f0 	udiv	r0, r1, r0
    8536:	1821      	adds	r1, r4, r0
    8538:	31f0      	adds	r1, #240	; 0xf0
    853a:	9802      	ldr	r0, [sp, #8]
    853c:	f7ff fee2 	bl	8304 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x304>
    8540:	b908      	cbnz	r0, 8546 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x546>
    8542:	f04f 0a00 	mov.w	sl, #0
    8546:	9e02      	ldr	r6, [sp, #8]
    8548:	9508      	str	r5, [sp, #32]
    854a:	e027      	b.n	859c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59c>
    854c:	b12e      	cbz	r6, 855a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55a>
    854e:	a908      	add	r1, sp, #32
    8550:	9802      	ldr	r0, [sp, #8]
    8552:	f7ff fe7f 	bl	8254 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x254>
    8556:	4606      	mov	r6, r0
    8558:	e020      	b.n	859c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59c>
    855a:	9802      	ldr	r0, [sp, #8]
    855c:	f000 f8d8 	bl	8710 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x710>
    8560:	4c36      	ldr	r4, [pc, #216]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    8562:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    8566:	f7f9 f809 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    856a:	4606      	mov	r6, r0
    856c:	6920      	ldr	r0, [r4, #16]
    856e:	f000 f8c3 	bl	86f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f8>
    8572:	6861      	ldr	r1, [r4, #4]
    8574:	4348      	muls	r0, r1
    8576:	78a1      	ldrb	r1, [r4, #2]
    8578:	b131      	cbz	r1, 8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    857a:	6a21      	ldr	r1, [r4, #32]
    857c:	4281      	cmp	r1, r0
    857e:	d302      	bcc.n	8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
    8580:	1a09      	subs	r1, r1, r0
    8582:	6221      	str	r1, [r4, #32]
    8584:	e000      	b.n	8588 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x588>
    8586:	6225      	str	r5, [r4, #32]
    8588:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    858a:	4601      	mov	r1, r0
    858c:	4610      	mov	r0, r2
    858e:	f7f8 fff5 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8592:	62e0      	str	r0, [r4, #44]	; 0x2c
    8594:	4630      	mov	r0, r6
    8596:	f000 f8af 	bl	86f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f8>
    859a:	9008      	str	r0, [sp, #32]
    859c:	2001      	movs	r0, #1
    859e:	f006 f805 	bl	e5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    85a2:	4604      	mov	r4, r0
    85a4:	2001      	movs	r0, #1
    85a6:	f007 f927 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    85aa:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    85ae:	4401      	add	r1, r0
    85b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    85b4:	fbb1 f0f0 	udiv	r0, r1, r0
    85b8:	4404      	add	r4, r0
    85ba:	4651      	mov	r1, sl
    85bc:	4630      	mov	r0, r6
    85be:	34f0      	adds	r4, #240	; 0xf0
    85c0:	f000 f8b8 	bl	8734 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x734>
    85c4:	491d      	ldr	r1, [pc, #116]	; (863c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x63c>)
    85c6:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    85ca:	6892      	ldr	r2, [r2, #8]
    85cc:	4282      	cmp	r2, r0
    85ce:	d800      	bhi.n	85d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5d2>
    85d0:	4610      	mov	r0, r2
    85d2:	6288      	str	r0, [r1, #40]	; 0x28
    85d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    85d6:	b102      	cbz	r2, 85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>
    85d8:	610e      	str	r6, [r1, #16]
    85da:	4688      	mov	r8, r1
    85dc:	614e      	str	r6, [r1, #20]
    85de:	f1bb 0f00 	cmp.w	fp, #0
    85e2:	d002      	beq.n	85ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ea>
    85e4:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    85e8:	e001      	b.n	85ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ee>
    85ea:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    85ee:	f04f 0a01 	mov.w	sl, #1
    85f2:	f887 a00b 	strb.w	sl, [r7, #11]
    85f6:	f006 f84c 	bl	e692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    85fa:	8138      	strh	r0, [r7, #8]
    85fc:	4630      	mov	r0, r6
    85fe:	f000 f821 	bl	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    8602:	72b8      	strb	r0, [r7, #10]
    8604:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    8608:	6078      	str	r0, [r7, #4]
    860a:	f1b9 0f00 	cmp.w	r9, #0
    860e:	d008      	beq.n	8622 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x622>
    8610:	f887 a000 	strb.w	sl, [r7]
    8614:	490a      	ldr	r1, [pc, #40]	; (8640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x640>)
    8616:	9802      	ldr	r0, [sp, #8]
    8618:	f000 f88c 	bl	8734 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x734>
    861c:	1b00      	subs	r0, r0, r4
    861e:	60f8      	str	r0, [r7, #12]
    8620:	e001      	b.n	8626 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x626>
    8622:	703d      	strb	r5, [r7, #0]
    8624:	60fe      	str	r6, [r7, #12]
    8626:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    862a:	42a0      	cmp	r0, r4
    862c:	d303      	bcc.n	8636 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x636>
    862e:	2001      	movs	r0, #1
    8630:	b00f      	add	sp, #60	; 0x3c
    8632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8636:	2000      	movs	r0, #0
    8638:	e7fa      	b.n	8630 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x630>
    863a:	0000      	.short	0x0000
    863c:	20001028 	.word	0x20001028
    8640:	07a12000 	.word	0x07a12000
    8644:	4a09      	ldr	r2, [pc, #36]	; (866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>)
    8646:	b510      	push	{r4, lr}
    8648:	7811      	ldrb	r1, [r2, #0]
    864a:	2904      	cmp	r1, #4
    864c:	d10c      	bne.n	8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>
    864e:	6851      	ldr	r1, [r2, #4]
    8650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    8652:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8656:	004c      	lsls	r4, r1, #1
    8658:	4601      	mov	r1, r0
    865a:	4610      	mov	r0, r2
    865c:	f7f8 ffc0 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8660:	42a0      	cmp	r0, r4
    8662:	d201      	bcs.n	8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>
    8664:	2003      	movs	r0, #3
    8666:	bd10      	pop	{r4, pc}
    8668:	2002      	movs	r0, #2
    866a:	bd10      	pop	{r4, pc}
    866c:	20001028 	.word	0x20001028
    8670:	b570      	push	{r4, r5, r6, lr}
    8672:	4d13      	ldr	r5, [pc, #76]	; (86c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c0>)
    8674:	7f28      	ldrb	r0, [r5, #28]
    8676:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    867a:	2800      	cmp	r0, #0
    867c:	7828      	ldrb	r0, [r5, #0]
    867e:	d00f      	beq.n	86a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a0>
    8680:	2805      	cmp	r0, #5
    8682:	d004      	beq.n	868e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68e>
    8684:	f44f 7166 	mov.w	r1, #920	; 0x398
    8688:	2035      	movs	r0, #53	; 0x35
    868a:	f7fb fb45 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    868e:	4620      	mov	r0, r4
    8690:	f005 ff87 	bl	e5a2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    8694:	b178      	cbz	r0, 86b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b6>
    8696:	4620      	mov	r0, r4
    8698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    869c:	f001 bed0 	b.w	a440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    86a0:	2805      	cmp	r0, #5
    86a2:	d108      	bne.n	86b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b6>
    86a4:	4620      	mov	r0, r4
    86a6:	f005 ff7c 	bl	e5a2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    86aa:	b920      	cbnz	r0, 86b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6b6>
    86ac:	69a8      	ldr	r0, [r5, #24]
    86ae:	f500 7084 	add.w	r0, r0, #264	; 0x108
    86b2:	f001 ff07 	bl	a4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    86b6:	4620      	mov	r0, r4
    86b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    86bc:	f001 bf02 	b.w	a4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    86c0:	20001028 	.word	0x20001028
    86c4:	b510      	push	{r4, lr}
    86c6:	f7fd ff4b 	bl	6560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    86ca:	490a      	ldr	r1, [pc, #40]	; (86f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f4>)
    86cc:	2000      	movs	r0, #0
    86ce:	70c8      	strb	r0, [r1, #3]
    86d0:	7708      	strb	r0, [r1, #28]
    86d2:	6188      	str	r0, [r1, #24]
    86d4:	7008      	strb	r0, [r1, #0]
    86d6:	f7fd fe95 	bl	6404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    86da:	4604      	mov	r4, r0
    86dc:	7800      	ldrb	r0, [r0, #0]
    86de:	f7f9 fd09 	bl	20f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    86e2:	b110      	cbz	r0, 86ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ea>
    86e4:	2020      	movs	r0, #32
    86e6:	7020      	strb	r0, [r4, #0]
    86e8:	bd10      	pop	{r4, pc}
    86ea:	f240 5131 	movw	r1, #1329	; 0x531
    86ee:	2035      	movs	r0, #53	; 0x35
    86f0:	f7fb fb12 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86f4:	20001028 	.word	0x20001028
    86f8:	b510      	push	{r4, lr}
    86fa:	4c04      	ldr	r4, [pc, #16]	; (870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>)
    86fc:	4601      	mov	r1, r0
    86fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8700:	f7f8 ff6e 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8704:	6861      	ldr	r1, [r4, #4]
    8706:	fbb0 f0f1 	udiv	r0, r0, r1
    870a:	bd10      	pop	{r4, pc}
    870c:	20001028 	.word	0x20001028
    8710:	b510      	push	{r4, lr}
    8712:	4c07      	ldr	r4, [pc, #28]	; (8730 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x730>)
    8714:	4601      	mov	r1, r0
    8716:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8718:	f7f8 ff62 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    871c:	6861      	ldr	r1, [r4, #4]
    871e:	fbb0 f2f1 	udiv	r2, r0, r1
    8722:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8728:	4351      	muls	r1, r2
    872a:	f7f8 bf27 	b.w	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    872e:	0000      	.short	0x0000
    8730:	20001028 	.word	0x20001028
    8734:	b570      	push	{r4, r5, r6, lr}
    8736:	4605      	mov	r5, r0
    8738:	480d      	ldr	r0, [pc, #52]	; (8770 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x770>)
    873a:	460c      	mov	r4, r1
    873c:	7881      	ldrb	r1, [r0, #2]
    873e:	b1a9      	cbz	r1, 876c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76c>
    8740:	4a0c      	ldr	r2, [pc, #48]	; (8774 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x774>)
    8742:	6a01      	ldr	r1, [r0, #32]
    8744:	4291      	cmp	r1, r2
    8746:	d211      	bcs.n	876c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76c>
    8748:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    874a:	f7f8 ff17 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    874e:	4606      	mov	r6, r0
    8750:	4621      	mov	r1, r4
    8752:	4628      	mov	r0, r5
    8754:	f7f8 ff12 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8758:	4601      	mov	r1, r0
    875a:	4630      	mov	r0, r6
    875c:	f7f8 ff40 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8760:	2800      	cmp	r0, #0
    8762:	dd03      	ble.n	876c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76c>
    8764:	1a20      	subs	r0, r4, r0
    8766:	d500      	bpl.n	876a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76a>
    8768:	2000      	movs	r0, #0
    876a:	bd70      	pop	{r4, r5, r6, pc}
    876c:	4620      	mov	r0, r4
    876e:	bd70      	pop	{r4, r5, r6, pc}
    8770:	20001028 	.word	0x20001028
    8774:	07a12000 	.word	0x07a12000

00008778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    8778:	4806      	ldr	r0, [pc, #24]	; (8794 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    877a:	4905      	ldr	r1, [pc, #20]	; (8790 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    877c:	6501      	str	r1, [r0, #80]	; 0x50
    877e:	4906      	ldr	r1, [pc, #24]	; (8798 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    8780:	6541      	str	r1, [r0, #84]	; 0x54
    8782:	4807      	ldr	r0, [pc, #28]	; (87a0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    8784:	4905      	ldr	r1, [pc, #20]	; (879c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    8786:	6501      	str	r1, [r0, #80]	; 0x50
    8788:	4906      	ldr	r1, [pc, #24]	; (87a4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    878a:	6541      	str	r1, [r0, #84]	; 0x54
    878c:	4770      	bx	lr
    878e:	0000      	.short	0x0000
    8790:	000098d5 	.word	0x000098d5
    8794:	20000114 	.word	0x20000114
    8798:	000099a1 	.word	0x000099a1
    879c:	00009fd1 	.word	0x00009fd1
    87a0:	20000178 	.word	0x20000178
    87a4:	0000a001 	.word	0x0000a001

000087a8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    87a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87aa:	460d      	mov	r5, r1
    87ac:	4607      	mov	r7, r0
    87ae:	2100      	movs	r1, #0
    87b0:	f004 ff57 	bl	d662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    87b4:	1e04      	subs	r4, r0, #0
    87b6:	d051      	beq.n	885c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    87b8:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    87bc:	2800      	cmp	r0, #0
    87be:	d04d      	beq.n	885c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    87c0:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    87c4:	f88d 0000 	strb.w	r0, [sp]
    87c8:	9800      	ldr	r0, [sp, #0]
    87ca:	9000      	str	r0, [sp, #0]
    87cc:	f89d 0000 	ldrb.w	r0, [sp]
    87d0:	2600      	movs	r6, #0
    87d2:	b158      	cbz	r0, 87ec <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    87d4:	706e      	strb	r6, [r5, #1]
    87d6:	2009      	movs	r0, #9
    87d8:	7028      	strb	r0, [r5, #0]
    87da:	220a      	movs	r2, #10
    87dc:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    87e0:	1d28      	adds	r0, r5, #4
    87e2:	f003 fea1 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    87e6:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    87ea:	e0e1      	b.n	89b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    87ec:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    87f0:	280e      	cmp	r0, #14
    87f2:	d01d      	beq.n	8830 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    87f4:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    87f8:	280d      	cmp	r0, #13
    87fa:	d027      	beq.n	884c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    87fc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8800:	f88d 0000 	strb.w	r0, [sp]
    8804:	9800      	ldr	r0, [sp, #0]
    8806:	9000      	str	r0, [sp, #0]
    8808:	f89d 0000 	ldrb.w	r0, [sp]
    880c:	b3b0      	cbz	r0, 887c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    880e:	706e      	strb	r6, [r5, #1]
    8810:	2008      	movs	r0, #8
    8812:	7028      	strb	r0, [r5, #0]
    8814:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    8818:	6068      	str	r0, [r5, #4]
    881a:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    881e:	60a8      	str	r0, [r5, #8]
    8820:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    8824:	60e8      	str	r0, [r5, #12]
    8826:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    882a:	f804 6c02 	strb.w	r6, [r4, #-2]
    882e:	e0bf      	b.n	89b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8830:	8820      	ldrh	r0, [r4, #0]
    8832:	f7fb fe6f 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8836:	4607      	mov	r7, r0
    8838:	f004 fde3 	bl	d402 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    883c:	b968      	cbnz	r0, 885a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    883e:	706e      	strb	r6, [r5, #1]
    8840:	200e      	movs	r0, #14
    8842:	7028      	strb	r0, [r5, #0]
    8844:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8848:	6068      	str	r0, [r5, #4]
    884a:	e011      	b.n	8870 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    884c:	8820      	ldrh	r0, [r4, #0]
    884e:	f7fb fe61 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8852:	4607      	mov	r7, r0
    8854:	f004 fdd5 	bl	d402 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8858:	b108      	cbz	r0, 885e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    885a:	2000      	movs	r0, #0
    885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    885e:	706e      	strb	r6, [r5, #1]
    8860:	200d      	movs	r0, #13
    8862:	7028      	strb	r0, [r5, #0]
    8864:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8868:	6068      	str	r0, [r5, #4]
    886a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    886e:	8128      	strh	r0, [r5, #8]
    8870:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8874:	4638      	mov	r0, r7
    8876:	f004 fddf 	bl	d438 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    887a:	e099      	b.n	89b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    887c:	e7ff      	b.n	887e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    887e:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    8882:	f88d 0000 	strb.w	r0, [sp]
    8886:	9800      	ldr	r0, [sp, #0]
    8888:	9000      	str	r0, [sp, #0]
    888a:	f89d 0000 	ldrb.w	r0, [sp]
    888e:	b130      	cbz	r0, 889e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    8890:	706e      	strb	r6, [r5, #1]
    8892:	2010      	movs	r0, #16
    8894:	7028      	strb	r0, [r5, #0]
    8896:	80af      	strh	r7, [r5, #4]
    8898:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    889c:	e088      	b.n	89b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    889e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    88a2:	f88d 0000 	strb.w	r0, [sp]
    88a6:	9800      	ldr	r0, [sp, #0]
    88a8:	9000      	str	r0, [sp, #0]
    88aa:	f89d 0000 	ldrb.w	r0, [sp]
    88ae:	b1c8      	cbz	r0, 88e4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    88b0:	706e      	strb	r6, [r5, #1]
    88b2:	2015      	movs	r0, #21
    88b4:	7028      	strb	r0, [r5, #0]
    88b6:	e00a      	b.n	88ce <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    88b8:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    88bc:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    88c0:	6068      	str	r0, [r5, #4]
    88c2:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    88c6:	60a8      	str	r0, [r5, #8]
    88c8:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    88cc:	60e8      	str	r0, [r5, #12]
    88ce:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    88d2:	f88d 0000 	strb.w	r0, [sp]
    88d6:	9800      	ldr	r0, [sp, #0]
    88d8:	9000      	str	r0, [sp, #0]
    88da:	f89d 0000 	ldrb.w	r0, [sp]
    88de:	2800      	cmp	r0, #0
    88e0:	d1ea      	bne.n	88b8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    88e2:	e065      	b.n	89b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    88e4:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    88e8:	f88d 0000 	strb.w	r0, [sp]
    88ec:	9800      	ldr	r0, [sp, #0]
    88ee:	9000      	str	r0, [sp, #0]
    88f0:	f89d 0000 	ldrb.w	r0, [sp]
    88f4:	b158      	cbz	r0, 890e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    88f6:	706e      	strb	r6, [r5, #1]
    88f8:	201c      	movs	r0, #28
    88fa:	7028      	strb	r0, [r5, #0]
    88fc:	220a      	movs	r2, #10
    88fe:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    8902:	1d28      	adds	r0, r5, #4
    8904:	f003 fe10 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8908:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    890c:	e050      	b.n	89b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    890e:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    8912:	f88d 0000 	strb.w	r0, [sp]
    8916:	9800      	ldr	r0, [sp, #0]
    8918:	9000      	str	r0, [sp, #0]
    891a:	f89d 0000 	ldrb.w	r0, [sp]
    891e:	b140      	cbz	r0, 8932 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    8920:	706e      	strb	r6, [r5, #1]
    8922:	201d      	movs	r0, #29
    8924:	7028      	strb	r0, [r5, #0]
    8926:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    892a:	6068      	str	r0, [r5, #4]
    892c:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    8930:	e03e      	b.n	89b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8932:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8936:	f88d 0000 	strb.w	r0, [sp]
    893a:	9800      	ldr	r0, [sp, #0]
    893c:	9000      	str	r0, [sp, #0]
    893e:	f89d 0000 	ldrb.w	r0, [sp]
    8942:	b198      	cbz	r0, 896c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    8944:	706e      	strb	r6, [r5, #1]
    8946:	201a      	movs	r0, #26
    8948:	7028      	strb	r0, [r5, #0]
    894a:	e004      	b.n	8956 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    894c:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    8950:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    8954:	6068      	str	r0, [r5, #4]
    8956:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    895a:	f88d 0000 	strb.w	r0, [sp]
    895e:	9800      	ldr	r0, [sp, #0]
    8960:	9000      	str	r0, [sp, #0]
    8962:	f89d 0000 	ldrb.w	r0, [sp]
    8966:	2800      	cmp	r0, #0
    8968:	d1f0      	bne.n	894c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    896a:	e021      	b.n	89b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    896c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8970:	f88d 0000 	strb.w	r0, [sp]
    8974:	9800      	ldr	r0, [sp, #0]
    8976:	9000      	str	r0, [sp, #0]
    8978:	f89d 0000 	ldrb.w	r0, [sp]
    897c:	2800      	cmp	r0, #0
    897e:	f43f af6d 	beq.w	885c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8982:	706e      	strb	r6, [r5, #1]
    8984:	2016      	movs	r0, #22
    8986:	7028      	strb	r0, [r5, #0]
    8988:	e008      	b.n	899c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    898a:	bf00      	nop
    898c:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    8990:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    8994:	6068      	str	r0, [r5, #4]
    8996:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    899a:	8128      	strh	r0, [r5, #8]
    899c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    89a0:	f88d 0000 	strb.w	r0, [sp]
    89a4:	9800      	ldr	r0, [sp, #0]
    89a6:	9000      	str	r0, [sp, #0]
    89a8:	f89d 0000 	ldrb.w	r0, [sp]
    89ac:	2800      	cmp	r0, #0
    89ae:	d1ed      	bne.n	898c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    89b0:	2001      	movs	r0, #1
    89b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000089b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    89b4:	b570      	push	{r4, r5, r6, lr}
    89b6:	4605      	mov	r5, r0
    89b8:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    89bc:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    89c0:	b1c9      	cbz	r1, 89f6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    89c2:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    89c6:	1a0c      	subs	r4, r1, r0
    89c8:	f1b4 0404 	subs.w	r4, r4, #4
    89cc:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    89d0:	b140      	cbz	r0, 89e4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    89d2:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    89d6:	2300      	movs	r3, #0
    89d8:	2109      	movs	r1, #9
    89da:	f105 0078 	add.w	r0, r5, #120	; 0x78
    89de:	f004 ffe7 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89e2:	b160      	cbz	r0, 89fe <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    89e4:	4628      	mov	r0, r5
    89e6:	f005 ff8a 	bl	e8fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    89ea:	b138      	cbz	r0, 89fc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    89ec:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    89f0:	1a40      	subs	r0, r0, r1
    89f2:	1f00      	subs	r0, r0, #4
    89f4:	e003      	b.n	89fe <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    89f6:	f1c0 0402 	rsb	r4, r0, #2
    89fa:	e7e7      	b.n	89cc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    89fc:	4620      	mov	r0, r4
    89fe:	42a0      	cmp	r0, r4
    8a00:	da00      	bge.n	8a04 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    8a02:	4604      	mov	r4, r0
    8a04:	2c00      	cmp	r4, #0
    8a06:	dc01      	bgt.n	8a0c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    8a08:	2000      	movs	r0, #0
    8a0a:	bd70      	pop	{r4, r5, r6, pc}
    8a0c:	b2a0      	uxth	r0, r4
    8a0e:	bd70      	pop	{r4, r5, r6, pc}

00008a10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    8a10:	481b      	ldr	r0, [pc, #108]	; (8a80 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    8a12:	491a      	ldr	r1, [pc, #104]	; (8a7c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    8a14:	6081      	str	r1, [r0, #8]
    8a16:	491b      	ldr	r1, [pc, #108]	; (8a84 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    8a18:	61c1      	str	r1, [r0, #28]
    8a1a:	491b      	ldr	r1, [pc, #108]	; (8a88 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    8a1c:	62c1      	str	r1, [r0, #44]	; 0x2c
    8a1e:	491b      	ldr	r1, [pc, #108]	; (8a8c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    8a20:	6101      	str	r1, [r0, #16]
    8a22:	491b      	ldr	r1, [pc, #108]	; (8a90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    8a24:	6141      	str	r1, [r0, #20]
    8a26:	491b      	ldr	r1, [pc, #108]	; (8a94 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    8a28:	6441      	str	r1, [r0, #68]	; 0x44
    8a2a:	491b      	ldr	r1, [pc, #108]	; (8a98 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    8a2c:	6181      	str	r1, [r0, #24]
    8a2e:	491b      	ldr	r1, [pc, #108]	; (8a9c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    8a30:	6301      	str	r1, [r0, #48]	; 0x30
    8a32:	491b      	ldr	r1, [pc, #108]	; (8aa0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    8a34:	6241      	str	r1, [r0, #36]	; 0x24
    8a36:	491b      	ldr	r1, [pc, #108]	; (8aa4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    8a38:	64c1      	str	r1, [r0, #76]	; 0x4c
    8a3a:	491b      	ldr	r1, [pc, #108]	; (8aa8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    8a3c:	6481      	str	r1, [r0, #72]	; 0x48
    8a3e:	491b      	ldr	r1, [pc, #108]	; (8aac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    8a40:	6341      	str	r1, [r0, #52]	; 0x34
    8a42:	481c      	ldr	r0, [pc, #112]	; (8ab4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    8a44:	491a      	ldr	r1, [pc, #104]	; (8ab0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    8a46:	6081      	str	r1, [r0, #8]
    8a48:	491b      	ldr	r1, [pc, #108]	; (8ab8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    8a4a:	61c1      	str	r1, [r0, #28]
    8a4c:	491b      	ldr	r1, [pc, #108]	; (8abc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    8a4e:	6201      	str	r1, [r0, #32]
    8a50:	491b      	ldr	r1, [pc, #108]	; (8ac0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    8a52:	6041      	str	r1, [r0, #4]
    8a54:	491b      	ldr	r1, [pc, #108]	; (8ac4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    8a56:	6001      	str	r1, [r0, #0]
    8a58:	491b      	ldr	r1, [pc, #108]	; (8ac8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    8a5a:	6281      	str	r1, [r0, #40]	; 0x28
    8a5c:	491b      	ldr	r1, [pc, #108]	; (8acc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    8a5e:	62c1      	str	r1, [r0, #44]	; 0x2c
    8a60:	491b      	ldr	r1, [pc, #108]	; (8ad0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    8a62:	60c1      	str	r1, [r0, #12]
    8a64:	491b      	ldr	r1, [pc, #108]	; (8ad4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    8a66:	6181      	str	r1, [r0, #24]
    8a68:	491b      	ldr	r1, [pc, #108]	; (8ad8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    8a6a:	6301      	str	r1, [r0, #48]	; 0x30
    8a6c:	491b      	ldr	r1, [pc, #108]	; (8adc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    8a6e:	6481      	str	r1, [r0, #72]	; 0x48
    8a70:	491b      	ldr	r1, [pc, #108]	; (8ae0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    8a72:	64c1      	str	r1, [r0, #76]	; 0x4c
    8a74:	491b      	ldr	r1, [pc, #108]	; (8ae4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    8a76:	6441      	str	r1, [r0, #68]	; 0x44
    8a78:	4770      	bx	lr
    8a7a:	0000      	.short	0x0000
    8a7c:	00009d5d 	.word	0x00009d5d
    8a80:	20000114 	.word	0x20000114
    8a84:	00009d99 	.word	0x00009d99
    8a88:	00009a71 	.word	0x00009a71
    8a8c:	000097b1 	.word	0x000097b1
    8a90:	00009ca9 	.word	0x00009ca9
    8a94:	00009c0d 	.word	0x00009c0d
    8a98:	00009ce9 	.word	0x00009ce9
    8a9c:	00009e35 	.word	0x00009e35
    8aa0:	000097e9 	.word	0x000097e9
    8aa4:	00009a45 	.word	0x00009a45
    8aa8:	00009a11 	.word	0x00009a11
    8aac:	00009c99 	.word	0x00009c99
    8ab0:	0000a1b5 	.word	0x0000a1b5
    8ab4:	20000178 	.word	0x20000178
    8ab8:	0000a1e5 	.word	0x0000a1e5
    8abc:	00009fa1 	.word	0x00009fa1
    8ac0:	00009f05 	.word	0x00009f05
    8ac4:	00009f35 	.word	0x00009f35
    8ac8:	0000a071 	.word	0x0000a071
    8acc:	0000a0a5 	.word	0x0000a0a5
    8ad0:	00009f65 	.word	0x00009f65
    8ad4:	0000a191 	.word	0x0000a191
    8ad8:	0000a225 	.word	0x0000a225
    8adc:	0000a031 	.word	0x0000a031
    8ae0:	0000a061 	.word	0x0000a061
    8ae4:	0000a17d 	.word	0x0000a17d

00008ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    8ae8:	4806      	ldr	r0, [pc, #24]	; (8b04 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    8aea:	4905      	ldr	r1, [pc, #20]	; (8b00 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    8aec:	6581      	str	r1, [r0, #88]	; 0x58
    8aee:	4906      	ldr	r1, [pc, #24]	; (8b08 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    8af0:	65c1      	str	r1, [r0, #92]	; 0x5c
    8af2:	4807      	ldr	r0, [pc, #28]	; (8b10 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    8af4:	4905      	ldr	r1, [pc, #20]	; (8b0c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    8af6:	6581      	str	r1, [r0, #88]	; 0x58
    8af8:	4906      	ldr	r1, [pc, #24]	; (8b14 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    8afa:	6601      	str	r1, [r0, #96]	; 0x60
    8afc:	4770      	bx	lr
    8afe:	0000      	.short	0x0000
    8b00:	00009a95 	.word	0x00009a95
    8b04:	20000114 	.word	0x20000114
    8b08:	00009ba5 	.word	0x00009ba5
    8b0c:	0000a0d1 	.word	0x0000a0d1
    8b10:	20000178 	.word	0x20000178
    8b14:	0000a101 	.word	0x0000a101

00008b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    8b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b1a:	4d36      	ldr	r5, [pc, #216]	; (8bf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    8b1c:	2600      	movs	r6, #0
    8b1e:	4604      	mov	r4, r0
    8b20:	6068      	str	r0, [r5, #4]
    8b22:	806e      	strh	r6, [r5, #2]
    8b24:	706e      	strb	r6, [r5, #1]
    8b26:	702e      	strb	r6, [r5, #0]
    8b28:	8800      	ldrh	r0, [r0, #0]
    8b2a:	f7fb ff17 	bl	495c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8b2e:	6868      	ldr	r0, [r5, #4]
    8b30:	8800      	ldrh	r0, [r0, #0]
    8b32:	f7fb febb 	bl	48ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8b36:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8b3a:	6869      	ldr	r1, [r5, #4]
    8b3c:	1c40      	adds	r0, r0, #1
    8b3e:	b282      	uxth	r2, r0
    8b40:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8b44:	f005 f8ee 	bl	dd24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8b48:	b120      	cbz	r0, 8b54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    8b4a:	f44f 71ac 	mov.w	r1, #344	; 0x158
    8b4e:	2036      	movs	r0, #54	; 0x36
    8b50:	f7fb f8e2 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b54:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    8b58:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8b5c:	4630      	mov	r0, r6
    8b5e:	2924      	cmp	r1, #36	; 0x24
    8b60:	d10a      	bne.n	8b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8b62:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8b66:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8b6a:	1a51      	subs	r1, r2, r1
    8b6c:	b209      	sxth	r1, r1
    8b6e:	2900      	cmp	r1, #0
    8b70:	db02      	blt.n	8b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8b72:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8b76:	e00f      	b.n	8b98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8b78:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8b7c:	2924      	cmp	r1, #36	; 0x24
    8b7e:	d001      	beq.n	8b84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8b80:	2925      	cmp	r1, #37	; 0x25
    8b82:	d10c      	bne.n	8b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8b84:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8b88:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8b8c:	1a51      	subs	r1, r2, r1
    8b8e:	b209      	sxth	r1, r1
    8b90:	2900      	cmp	r1, #0
    8b92:	db04      	blt.n	8b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8b94:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8b98:	f000 fd5a 	bl	9650 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8b9c:	b318      	cbz	r0, 8be6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8b9e:	f000 fbfd 	bl	939c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8ba2:	2800      	cmp	r0, #0
    8ba4:	d125      	bne.n	8bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8ba6:	6868      	ldr	r0, [r5, #4]
    8ba8:	3078      	adds	r0, #120	; 0x78
    8baa:	f005 fe1d 	bl	e7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8bae:	b120      	cbz	r0, 8bba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8bb0:	6868      	ldr	r0, [r5, #4]
    8bb2:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8bb6:	f000 faad 	bl	9114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8bba:	480f      	ldr	r0, [pc, #60]	; (8bf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8bbc:	9000      	str	r0, [sp, #0]
    8bbe:	4b0f      	ldr	r3, [pc, #60]	; (8bfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8bc0:	4a0f      	ldr	r2, [pc, #60]	; (8c00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8bc2:	4621      	mov	r1, r4
    8bc4:	4630      	mov	r0, r6
    8bc6:	f7fb ff73 	bl	4ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8bca:	6868      	ldr	r0, [r5, #4]
    8bcc:	2300      	movs	r3, #0
    8bce:	2105      	movs	r1, #5
    8bd0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8bd4:	3078      	adds	r0, #120	; 0x78
    8bd6:	f004 feeb 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8bda:	2800      	cmp	r0, #0
    8bdc:	d009      	beq.n	8bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8be2:	f7fb bf5f 	b.w	4aa4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8bea:	2100      	movs	r1, #0
    8bec:	4608      	mov	r0, r1
    8bee:	f000 bb81 	b.w	92f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8bf4:	20000104 	.word	0x20000104
    8bf8:	000092f5 	.word	0x000092f5
    8bfc:	00008d25 	.word	0x00008d25
    8c00:	000095c9 	.word	0x000095c9
    8c04:	4411      	add	r1, r2
    8c06:	78c2      	ldrb	r2, [r0, #3]
    8c08:	480c      	ldr	r0, [pc, #48]	; (8c3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8c0a:	1d89      	adds	r1, r1, #6
    8c0c:	b289      	uxth	r1, r1
    8c0e:	6840      	ldr	r0, [r0, #4]
    8c10:	2a01      	cmp	r2, #1
    8c12:	d006      	beq.n	8c22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8c14:	b142      	cbz	r2, 8c28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8c16:	2a18      	cmp	r2, #24
    8c18:	d105      	bne.n	8c26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8c1a:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8c1e:	b132      	cbz	r2, 8c2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8c20:	e009      	b.n	8c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8c22:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8c26:	4770      	bx	lr
    8c28:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8c2c:	4770      	bx	lr
    8c2e:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8c32:	b902      	cbnz	r2, 8c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8c34:	2100      	movs	r1, #0
    8c36:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8c3a:	4770      	bx	lr
    8c3c:	20000104 	.word	0x20000104
    8c40:	490b      	ldr	r1, [pc, #44]	; (8c70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8c42:	78c2      	ldrb	r2, [r0, #3]
    8c44:	6849      	ldr	r1, [r1, #4]
    8c46:	2a01      	cmp	r2, #1
    8c48:	d006      	beq.n	8c58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8c4a:	b15a      	cbz	r2, 8c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8c4c:	2a18      	cmp	r2, #24
    8c4e:	d108      	bne.n	8c62 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8c50:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8c54:	f005 b94c 	b.w	def0 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8c58:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8c5c:	7241      	strb	r1, [r0, #9]
    8c5e:	0a09      	lsrs	r1, r1, #8
    8c60:	7281      	strb	r1, [r0, #10]
    8c62:	4770      	bx	lr
    8c64:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8c68:	7341      	strb	r1, [r0, #13]
    8c6a:	0a09      	lsrs	r1, r1, #8
    8c6c:	7381      	strb	r1, [r0, #14]
    8c6e:	4770      	bx	lr
    8c70:	20000104 	.word	0x20000104
    8c74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8c76:	4c2a      	ldr	r4, [pc, #168]	; (8d20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8c78:	2300      	movs	r3, #0
    8c7a:	4619      	mov	r1, r3
    8c7c:	6860      	ldr	r0, [r4, #4]
    8c7e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8c82:	3078      	adds	r0, #120	; 0x78
    8c84:	f004 fe94 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c88:	2800      	cmp	r0, #0
    8c8a:	d048      	beq.n	8d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8c8c:	6860      	ldr	r0, [r4, #4]
    8c8e:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8c92:	f88d 1000 	strb.w	r1, [sp]
    8c96:	9900      	ldr	r1, [sp, #0]
    8c98:	9100      	str	r1, [sp, #0]
    8c9a:	f89d 1000 	ldrb.w	r1, [sp]
    8c9e:	2900      	cmp	r1, #0
    8ca0:	d03d      	beq.n	8d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ca2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8ca6:	f004 fedc 	bl	da62 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8caa:	2800      	cmp	r0, #0
    8cac:	d137      	bne.n	8d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8cae:	6860      	ldr	r0, [r4, #4]
    8cb0:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8cb4:	280a      	cmp	r0, #10
    8cb6:	d932      	bls.n	8d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8cb8:	4668      	mov	r0, sp
    8cba:	f7fc ff9d 	bl	5bf8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8cbe:	2800      	cmp	r0, #0
    8cc0:	d02d      	beq.n	8d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8cc2:	6861      	ldr	r1, [r4, #4]
    8cc4:	2205      	movs	r2, #5
    8cc6:	4668      	mov	r0, sp
    8cc8:	318e      	adds	r1, #142	; 0x8e
    8cca:	f003 fc1b 	bl	c504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8cce:	2500      	movs	r5, #0
    8cd0:	b310      	cbz	r0, 8d18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8cd2:	6860      	ldr	r0, [r4, #4]
    8cd4:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8cd8:	7808      	ldrb	r0, [r1, #0]
    8cda:	b158      	cbz	r0, 8cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8cdc:	2205      	movs	r2, #5
    8cde:	4668      	mov	r0, sp
    8ce0:	1c49      	adds	r1, r1, #1
    8ce2:	f003 fc0f 	bl	c504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8ce6:	2800      	cmp	r0, #0
    8ce8:	d119      	bne.n	8d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8cea:	6860      	ldr	r0, [r4, #4]
    8cec:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8cf0:	7800      	ldrb	r0, [r0, #0]
    8cf2:	b940      	cbnz	r0, 8d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8cf4:	6860      	ldr	r0, [r4, #4]
    8cf6:	9900      	ldr	r1, [sp, #0]
    8cf8:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8cfc:	f8c0 1001 	str.w	r1, [r0, #1]
    8d00:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8d04:	7141      	strb	r1, [r0, #5]
    8d06:	6860      	ldr	r0, [r4, #4]
    8d08:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8d0c:	7808      	ldrb	r0, [r1, #0]
    8d0e:	1c40      	adds	r0, r0, #1
    8d10:	7008      	strb	r0, [r1, #0]
    8d12:	2001      	movs	r0, #1
    8d14:	f000 fd04 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8d18:	6860      	ldr	r0, [r4, #4]
    8d1a:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8d1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8d20:	20000104 	.word	0x20000104
    8d24:	4a0c      	ldr	r2, [pc, #48]	; (8d58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8d26:	7851      	ldrb	r1, [r2, #1]
    8d28:	b999      	cbnz	r1, 8d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8d2a:	4611      	mov	r1, r2
    8d2c:	2801      	cmp	r0, #1
    8d2e:	6849      	ldr	r1, [r1, #4]
    8d30:	d008      	beq.n	8d44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8d32:	7890      	ldrb	r0, [r2, #2]
    8d34:	0740      	lsls	r0, r0, #29
    8d36:	d503      	bpl.n	8d40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8d38:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8d3c:	2807      	cmp	r0, #7
    8d3e:	d008      	beq.n	8d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8d40:	2001      	movs	r0, #1
    8d42:	4770      	bx	lr
    8d44:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8d48:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8d4a:	4288      	cmp	r0, r1
    8d4c:	d801      	bhi.n	8d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8d4e:	f7fe be85 	b.w	7a5c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8d52:	2000      	movs	r0, #0
    8d54:	4770      	bx	lr
    8d56:	0000      	.short	0x0000
    8d58:	20000104 	.word	0x20000104
    8d5c:	b538      	push	{r3, r4, r5, lr}
    8d5e:	4c87      	ldr	r4, [pc, #540]	; (8f7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8d60:	6860      	ldr	r0, [r4, #4]
    8d62:	3078      	adds	r0, #120	; 0x78
    8d64:	f005 fd40 	bl	e7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8d68:	2800      	cmp	r0, #0
    8d6a:	d15b      	bne.n	8e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8d6c:	6860      	ldr	r0, [r4, #4]
    8d6e:	2300      	movs	r3, #0
    8d70:	2101      	movs	r1, #1
    8d72:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8d76:	3078      	adds	r0, #120	; 0x78
    8d78:	f004 fe1a 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d7c:	2800      	cmp	r0, #0
    8d7e:	d151      	bne.n	8e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8d80:	6860      	ldr	r0, [r4, #4]
    8d82:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8d86:	f88d 1000 	strb.w	r1, [sp]
    8d8a:	9900      	ldr	r1, [sp, #0]
    8d8c:	9100      	str	r1, [sp, #0]
    8d8e:	f89d 1000 	ldrb.w	r1, [sp]
    8d92:	b109      	cbz	r1, 8d98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8d94:	2002      	movs	r0, #2
    8d96:	e038      	b.n	8e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8d98:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8d9c:	2300      	movs	r3, #0
    8d9e:	4619      	mov	r1, r3
    8da0:	3078      	adds	r0, #120	; 0x78
    8da2:	f004 fe05 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8da6:	b128      	cbz	r0, 8db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8da8:	6860      	ldr	r0, [r4, #4]
    8daa:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8dae:	b108      	cbz	r0, 8db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8db0:	2012      	movs	r0, #18
    8db2:	e02a      	b.n	8e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8db4:	6860      	ldr	r0, [r4, #4]
    8db6:	2500      	movs	r5, #0
    8db8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8dbc:	2a12      	cmp	r2, #18
    8dbe:	d01d      	beq.n	8dfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8dc0:	dc04      	bgt.n	8dcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8dc2:	2a03      	cmp	r2, #3
    8dc4:	d025      	beq.n	8e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8dc6:	2a11      	cmp	r2, #17
    8dc8:	d104      	bne.n	8dd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8dca:	e019      	b.n	8e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    8dcc:	2a18      	cmp	r2, #24
    8dce:	d01b      	beq.n	8e08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    8dd0:	2a23      	cmp	r2, #35	; 0x23
    8dd2:	d028      	beq.n	8e26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    8dd4:	2300      	movs	r3, #0
    8dd6:	2104      	movs	r1, #4
    8dd8:	3078      	adds	r0, #120	; 0x78
    8dda:	f004 fde9 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dde:	2800      	cmp	r0, #0
    8de0:	d120      	bne.n	8e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8de2:	6860      	ldr	r0, [r4, #4]
    8de4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    8de8:	2919      	cmp	r1, #25
    8dea:	d07c      	beq.n	8ee6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    8dec:	dc22      	bgt.n	8e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    8dee:	2901      	cmp	r1, #1
    8df0:	d02c      	beq.n	8e4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    8df2:	2902      	cmp	r1, #2
    8df4:	d037      	beq.n	8e66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    8df6:	2903      	cmp	r1, #3
    8df8:	d134      	bne.n	8e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    8dfa:	e022      	b.n	8e42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    8dfc:	200b      	movs	r0, #11
    8dfe:	e004      	b.n	8e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e04:	f000 bba0 	b.w	9548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    8e08:	2006      	movs	r0, #6
    8e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8e0e:	f000 bc87 	b.w	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e12:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    8e16:	7101      	strb	r1, [r0, #4]
    8e18:	2007      	movs	r0, #7
    8e1a:	f000 fc81 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e1e:	6860      	ldr	r0, [r4, #4]
    8e20:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    8e24:	bd38      	pop	{r3, r4, r5, pc}
    8e26:	2018      	movs	r0, #24
    8e28:	f000 fc7a 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e2c:	6860      	ldr	r0, [r4, #4]
    8e2e:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    8e32:	bd38      	pop	{r3, r4, r5, pc}
    8e34:	291d      	cmp	r1, #29
    8e36:	d018      	beq.n	8e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8e38:	291e      	cmp	r1, #30
    8e3a:	d016      	beq.n	8e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    8e3c:	2921      	cmp	r1, #33	; 0x21
    8e3e:	d176      	bne.n	8f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8e40:	e056      	b.n	8ef0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    8e42:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    8e46:	7141      	strb	r1, [r0, #5]
    8e48:	2007      	movs	r0, #7
    8e4a:	e07e      	b.n	8f4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    8e4c:	200c      	movs	r0, #12
    8e4e:	f000 fc67 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8e52:	6860      	ldr	r0, [r4, #4]
    8e54:	f820 5fba 	strh.w	r5, [r0, #186]!
    8e58:	7981      	ldrb	r1, [r0, #6]
    8e5a:	f041 0101 	orr.w	r1, r1, #1
    8e5e:	7181      	strb	r1, [r0, #6]
    8e60:	f800 5c34 	strb.w	r5, [r0, #-52]
    8e64:	e063      	b.n	8f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8e66:	2013      	movs	r0, #19
    8e68:	e037      	b.n	8eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    8e6a:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    8e6e:	f88d 2000 	strb.w	r2, [sp]
    8e72:	9a00      	ldr	r2, [sp, #0]
    8e74:	9200      	str	r2, [sp, #0]
    8e76:	f89d 2000 	ldrb.w	r2, [sp]
    8e7a:	bbaa      	cbnz	r2, 8ee8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    8e7c:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    8e80:	f88d 2000 	strb.w	r2, [sp]
    8e84:	9a00      	ldr	r2, [sp, #0]
    8e86:	9200      	str	r2, [sp, #0]
    8e88:	f89d 2000 	ldrb.w	r2, [sp]
    8e8c:	b1aa      	cbz	r2, 8eba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    8e8e:	2924      	cmp	r1, #36	; 0x24
    8e90:	d011      	beq.n	8eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8e92:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    8e96:	2924      	cmp	r1, #36	; 0x24
    8e98:	d00d      	beq.n	8eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    8e9a:	2300      	movs	r3, #0
    8e9c:	f500 7293 	add.w	r2, r0, #294	; 0x126
    8ea0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    8ea4:	f005 f92c 	bl	e100 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8ea8:	6860      	ldr	r0, [r4, #4]
    8eaa:	211e      	movs	r1, #30
    8eac:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    8eb0:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    8eb4:	e003      	b.n	8ebe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    8eb6:	2301      	movs	r3, #1
    8eb8:	e7f0      	b.n	8e9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    8eba:	291e      	cmp	r1, #30
    8ebc:	d137      	bne.n	8f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8ebe:	6860      	ldr	r0, [r4, #4]
    8ec0:	f005 f939 	bl	e136 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8ec4:	f000 f85c 	bl	8f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    8ec8:	6861      	ldr	r1, [r4, #4]
    8eca:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8ece:	8bc2      	ldrh	r2, [r0, #30]
    8ed0:	f821 2ffe 	strh.w	r2, [r1, #254]!
    8ed4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8ed6:	8048      	strh	r0, [r1, #2]
    8ed8:	2015      	movs	r0, #21
    8eda:	f000 fc21 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8ede:	6860      	ldr	r0, [r4, #4]
    8ee0:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    8ee4:	e001      	b.n	8eea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    8ee6:	e02f      	b.n	8f48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    8ee8:	e021      	b.n	8f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8eea:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    8eee:	e01e      	b.n	8f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8ef0:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8ef4:	2901      	cmp	r1, #1
    8ef6:	d108      	bne.n	8f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    8ef8:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    8efc:	f88d 1000 	strb.w	r1, [sp]
    8f00:	9900      	ldr	r1, [sp, #0]
    8f02:	9100      	str	r1, [sp, #0]
    8f04:	f89d 1000 	ldrb.w	r1, [sp]
    8f08:	b121      	cbz	r1, 8f14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    8f0a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    8f0e:	2902      	cmp	r1, #2
    8f10:	d005      	beq.n	8f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    8f12:	e00c      	b.n	8f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    8f14:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    8f18:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    8f1c:	e002      	b.n	8f24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    8f1e:	f850 1f62 	ldr.w	r1, [r0, #98]!
    8f22:	6840      	ldr	r0, [r0, #4]
    8f24:	f000 fc1e 	bl	9764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    8f28:	2018      	movs	r0, #24
    8f2a:	f000 fbf9 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f2e:	6860      	ldr	r0, [r4, #4]
    8f30:	3078      	adds	r0, #120	; 0x78
    8f32:	f005 fc59 	bl	e7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f36:	2800      	cmp	r0, #0
    8f38:	f47f af7b 	bne.w	8e32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    8f3c:	6860      	ldr	r0, [r4, #4]
    8f3e:	3078      	adds	r0, #120	; 0x78
    8f40:	f005 fc52 	bl	e7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f44:	b128      	cbz	r0, 8f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    8f46:	e00f      	b.n	8f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8f48:	2011      	movs	r0, #17
    8f4a:	f000 fbe9 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f4e:	6860      	ldr	r0, [r4, #4]
    8f50:	e7c8      	b.n	8ee4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    8f52:	6860      	ldr	r0, [r4, #4]
    8f54:	2300      	movs	r3, #0
    8f56:	4619      	mov	r1, r3
    8f58:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8f5c:	3078      	adds	r0, #120	; 0x78
    8f5e:	f004 fd27 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f62:	b108      	cbz	r0, 8f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    8f64:	f000 fa44 	bl	93f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    8f68:	6860      	ldr	r0, [r4, #4]
    8f6a:	3078      	adds	r0, #120	; 0x78
    8f6c:	f005 fc3c 	bl	e7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f70:	2800      	cmp	r0, #0
    8f72:	d1e1      	bne.n	8f38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    8f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f78:	f7ff be7c 	b.w	8c74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    8f7c:	20000104 	.word	0x20000104
    8f80:	480a      	ldr	r0, [pc, #40]	; (8fac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    8f82:	b510      	push	{r4, lr}
    8f84:	6841      	ldr	r1, [r0, #4]
    8f86:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    8f8a:	2801      	cmp	r0, #1
    8f8c:	d009      	beq.n	8fa2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    8f8e:	8808      	ldrh	r0, [r1, #0]
    8f90:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    8f94:	312c      	adds	r1, #44	; 0x2c
    8f96:	f005 f88f 	bl	e0b8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f9e:	f001 baef 	b.w	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8fa2:	2002      	movs	r0, #2
    8fa4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8fa8:	bd10      	pop	{r4, pc}
    8faa:	0000      	.short	0x0000
    8fac:	20000104 	.word	0x20000104
    8fb0:	b570      	push	{r4, r5, r6, lr}
    8fb2:	4c22      	ldr	r4, [pc, #136]	; (903c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    8fb4:	f04f 0500 	mov.w	r5, #0
    8fb8:	8861      	ldrh	r1, [r4, #2]
    8fba:	0748      	lsls	r0, r1, #29
    8fbc:	d510      	bpl.n	8fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    8fbe:	6860      	ldr	r0, [r4, #4]
    8fc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8fc4:	2a03      	cmp	r2, #3
    8fc6:	d004      	beq.n	8fd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    8fc8:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8fcc:	2a07      	cmp	r2, #7
    8fce:	d107      	bne.n	8fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    8fd0:	e002      	b.n	8fd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    8fd2:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    8fd6:	e026      	b.n	9026 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    8fd8:	2201      	movs	r2, #1
    8fda:	7022      	strb	r2, [r4, #0]
    8fdc:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    8fe0:	0788      	lsls	r0, r1, #30
    8fe2:	d508      	bpl.n	8ff6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    8fe4:	68a0      	ldr	r0, [r4, #8]
    8fe6:	78c0      	ldrb	r0, [r0, #3]
    8fe8:	2819      	cmp	r0, #25
    8fea:	d21a      	bcs.n	9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    8fec:	4914      	ldr	r1, [pc, #80]	; (9040 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    8fee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8ff2:	b1b0      	cbz	r0, 9022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    8ff4:	4780      	blx	r0
    8ff6:	f000 f867 	bl	90c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    8ffa:	f000 f823 	bl	9044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    8ffe:	4606      	mov	r6, r0
    9000:	7860      	ldrb	r0, [r4, #1]
    9002:	0700      	lsls	r0, r0, #28
    9004:	d515      	bpl.n	9032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    9006:	6860      	ldr	r0, [r4, #4]
    9008:	2300      	movs	r3, #0
    900a:	2105      	movs	r1, #5
    900c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9010:	3078      	adds	r0, #120	; 0x78
    9012:	f004 fccd 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9016:	b148      	cbz	r0, 902c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    9018:	6860      	ldr	r0, [r4, #4]
    901a:	2608      	movs	r6, #8
    901c:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    9020:	e007      	b.n	9032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    9022:	f240 61b1 	movw	r1, #1713	; 0x6b1
    9026:	2036      	movs	r0, #54	; 0x36
    9028:	f7fa fe76 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    902c:	2000      	movs	r0, #0
    902e:	f7fb fe21 	bl	4c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9032:	6860      	ldr	r0, [r4, #4]
    9034:	f005 fc08 	bl	e848 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    9038:	4630      	mov	r0, r6
    903a:	bd70      	pop	{r4, r5, r6, pc}
    903c:	20000104 	.word	0x20000104
    9040:	20000178 	.word	0x20000178
    9044:	b570      	push	{r4, r5, r6, lr}
    9046:	4c1e      	ldr	r4, [pc, #120]	; (90c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    9048:	2000      	movs	r0, #0
    904a:	78a1      	ldrb	r1, [r4, #2]
    904c:	07c9      	lsls	r1, r1, #31
    904e:	d01b      	beq.n	9088 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    9050:	68e0      	ldr	r0, [r4, #12]
    9052:	2300      	movs	r3, #0
    9054:	2105      	movs	r1, #5
    9056:	78c5      	ldrb	r5, [r0, #3]
    9058:	6860      	ldr	r0, [r4, #4]
    905a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    905e:	3078      	adds	r0, #120	; 0x78
    9060:	f004 fca6 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9064:	b188      	cbz	r0, 908a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9066:	2d06      	cmp	r5, #6
    9068:	d00f      	beq.n	908a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    906a:	dc06      	bgt.n	907a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    906c:	2d02      	cmp	r5, #2
    906e:	d00c      	beq.n	908a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9070:	2d04      	cmp	r5, #4
    9072:	d00a      	beq.n	908a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9074:	2d05      	cmp	r5, #5
    9076:	d106      	bne.n	9086 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    9078:	e007      	b.n	908a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    907a:	2d0b      	cmp	r5, #11
    907c:	d005      	beq.n	908a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    907e:	2d0d      	cmp	r5, #13
    9080:	d003      	beq.n	908a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9082:	2d11      	cmp	r5, #17
    9084:	d001      	beq.n	908a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    9086:	2008      	movs	r0, #8
    9088:	bd70      	pop	{r4, r5, r6, pc}
    908a:	68e0      	ldr	r0, [r4, #12]
    908c:	f7fc fe70 	bl	5d70 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9090:	b148      	cbz	r0, 90a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    9092:	68e0      	ldr	r0, [r4, #12]
    9094:	78c0      	ldrb	r0, [r0, #3]
    9096:	2819      	cmp	r0, #25
    9098:	d205      	bcs.n	90a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    909a:	490a      	ldr	r1, [pc, #40]	; (90c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    909c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    90a0:	b108      	cbz	r0, 90a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    90a2:	4780      	blx	r0
    90a4:	e002      	b.n	90ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    90a6:	2000      	movs	r0, #0
    90a8:	f000 fbdc 	bl	9864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    90ac:	6861      	ldr	r1, [r4, #4]
    90ae:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    90b2:	1c52      	adds	r2, r2, #1
    90b4:	f143 0300 	adc.w	r3, r3, #0
    90b8:	e9c1 2300 	strd	r2, r3, [r1]
    90bc:	bd70      	pop	{r4, r5, r6, pc}
    90be:	0000      	.short	0x0000
    90c0:	20000104 	.word	0x20000104
    90c4:	20000114 	.word	0x20000114
    90c8:	b510      	push	{r4, lr}
    90ca:	4c11      	ldr	r4, [pc, #68]	; (9110 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    90cc:	78a0      	ldrb	r0, [r4, #2]
    90ce:	0700      	lsls	r0, r0, #28
    90d0:	d517      	bpl.n	9102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    90d2:	6860      	ldr	r0, [r4, #4]
    90d4:	2100      	movs	r1, #0
    90d6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    90da:	f001 f97b 	bl	a3d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    90de:	6860      	ldr	r0, [r4, #4]
    90e0:	3078      	adds	r0, #120	; 0x78
    90e2:	f005 fb81 	bl	e7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    90e6:	b168      	cbz	r0, 9104 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    90e8:	6860      	ldr	r0, [r4, #4]
    90ea:	21fe      	movs	r1, #254	; 0xfe
    90ec:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    90f0:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    90f4:	2908      	cmp	r1, #8
    90f6:	d104      	bne.n	9102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    90f8:	2102      	movs	r1, #2
    90fa:	7021      	strb	r1, [r4, #0]
    90fc:	2100      	movs	r1, #0
    90fe:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    9102:	bd10      	pop	{r4, pc}
    9104:	f240 61bd 	movw	r1, #1725	; 0x6bd
    9108:	2036      	movs	r0, #54	; 0x36
    910a:	f7fa fe05 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    910e:	0000      	.short	0x0000
    9110:	20000104 	.word	0x20000104
    9114:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9116:	4605      	mov	r5, r0
    9118:	4668      	mov	r0, sp
    911a:	f7fb fc09 	bl	4930 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    911e:	b318      	cbz	r0, 9168 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    9120:	2222      	movs	r2, #34	; 0x22
    9122:	2100      	movs	r1, #0
    9124:	9800      	ldr	r0, [sp, #0]
    9126:	f003 fa79 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    912a:	2103      	movs	r1, #3
    912c:	9800      	ldr	r0, [sp, #0]
    912e:	f004 fec5 	bl	debc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9132:	9800      	ldr	r0, [sp, #0]
    9134:	7801      	ldrb	r1, [r0, #0]
    9136:	f021 0110 	bic.w	r1, r1, #16
    913a:	7001      	strb	r1, [r0, #0]
    913c:	4629      	mov	r1, r5
    913e:	f7fc fe27 	bl	5d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9142:	2100      	movs	r1, #0
    9144:	4c6a      	ldr	r4, [pc, #424]	; (92f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    9146:	2d19      	cmp	r5, #25
    9148:	d270      	bcs.n	922c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    914a:	e8df f005 	tbb	[pc, r5]
    914e:	1c24      	.short	0x1c24
    9150:	c9c94c10 	.word	0xc9c94c10
    9154:	c97016c2 	.word	0xc97016c2
    9158:	c964c2c2 	.word	0xc964c2c2
    915c:	b6c9c9c9 	.word	0xb6c9c9c9
    9160:	8181c2c2 	.word	0x8181c2c2
    9164:	00a3c99a 	.word	0x00a3c99a
    9168:	f640 014f 	movw	r1, #2127	; 0x84f
    916c:	e0bd      	b.n	92ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    916e:	6860      	ldr	r0, [r4, #4]
    9170:	9900      	ldr	r1, [sp, #0]
    9172:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    9176:	7108      	strb	r0, [r1, #4]
    9178:	e0ab      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    917a:	6861      	ldr	r1, [r4, #4]
    917c:	9800      	ldr	r0, [sp, #0]
    917e:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9182:	7101      	strb	r1, [r0, #4]
    9184:	e0a5      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9186:	6860      	ldr	r0, [r4, #4]
    9188:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    918c:	9800      	ldr	r0, [sp, #0]
    918e:	1c49      	adds	r1, r1, #1
    9190:	f004 fe74 	bl	de7c <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    9194:	e09d      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9196:	6860      	ldr	r0, [r4, #4]
    9198:	9d00      	ldr	r5, [sp, #0]
    919a:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    919e:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    91a2:	f004 fd88 	bl	dcb6 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    91a6:	7128      	strb	r0, [r5, #4]
    91a8:	6860      	ldr	r0, [r4, #4]
    91aa:	9d00      	ldr	r5, [sp, #0]
    91ac:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    91b0:	c803      	ldmia	r0, {r0, r1}
    91b2:	f004 fd75 	bl	dca0 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    91b6:	7168      	strb	r0, [r5, #5]
    91b8:	0a00      	lsrs	r0, r0, #8
    91ba:	71a8      	strb	r0, [r5, #6]
    91bc:	6860      	ldr	r0, [r4, #4]
    91be:	9d00      	ldr	r5, [sp, #0]
    91c0:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    91c4:	f004 fbdb 	bl	d97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    91c8:	71e8      	strb	r0, [r5, #7]
    91ca:	0a00      	lsrs	r0, r0, #8
    91cc:	7228      	strb	r0, [r5, #8]
    91ce:	6862      	ldr	r2, [r4, #4]
    91d0:	9800      	ldr	r0, [sp, #0]
    91d2:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    91d6:	7241      	strb	r1, [r0, #9]
    91d8:	0a09      	lsrs	r1, r1, #8
    91da:	7281      	strb	r1, [r0, #10]
    91dc:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    91e0:	f004 fe51 	bl	de86 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    91e4:	e075      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    91e6:	6861      	ldr	r1, [r4, #4]
    91e8:	9800      	ldr	r0, [sp, #0]
    91ea:	f201 115b 	addw	r1, r1, #347	; 0x15b
    91ee:	f004 fe55 	bl	de9c <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    91f2:	6861      	ldr	r1, [r4, #4]
    91f4:	9800      	ldr	r0, [sp, #0]
    91f6:	f201 1163 	addw	r1, r1, #355	; 0x163
    91fa:	f004 fe48 	bl	de8e <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    91fe:	6861      	ldr	r1, [r4, #4]
    9200:	9800      	ldr	r0, [sp, #0]
    9202:	f201 1175 	addw	r1, r1, #373	; 0x175
    9206:	f004 fe4e 	bl	dea6 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    920a:	6861      	ldr	r1, [r4, #4]
    920c:	9800      	ldr	r0, [sp, #0]
    920e:	31f0      	adds	r1, #240	; 0xf0
    9210:	f004 fe40 	bl	de94 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    9214:	e05d      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9216:	9800      	ldr	r0, [sp, #0]
    9218:	220b      	movs	r2, #11
    921a:	7102      	strb	r2, [r0, #4]
    921c:	2259      	movs	r2, #89	; 0x59
    921e:	7142      	strb	r2, [r0, #5]
    9220:	7181      	strb	r1, [r0, #6]
    9222:	21b0      	movs	r1, #176	; 0xb0
    9224:	71c1      	strb	r1, [r0, #7]
    9226:	2112      	movs	r1, #18
    9228:	7201      	strb	r1, [r0, #8]
    922a:	e052      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    922c:	e058      	b.n	92e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    922e:	9101      	str	r1, [sp, #4]
    9230:	9102      	str	r1, [sp, #8]
    9232:	f001 fec7 	bl	afc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9236:	f644 112f 	movw	r1, #18735	; 0x492f
    923a:	4008      	ands	r0, r1
    923c:	f88d 0004 	strb.w	r0, [sp, #4]
    9240:	0a00      	lsrs	r0, r0, #8
    9242:	f88d 0005 	strb.w	r0, [sp, #5]
    9246:	a901      	add	r1, sp, #4
    9248:	9800      	ldr	r0, [sp, #0]
    924a:	f004 fe32 	bl	deb2 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    924e:	e040      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9250:	6860      	ldr	r0, [r4, #4]
    9252:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    9256:	9800      	ldr	r0, [sp, #0]
    9258:	f004 fe42 	bl	dee0 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    925c:	6860      	ldr	r0, [r4, #4]
    925e:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    9262:	9800      	ldr	r0, [sp, #0]
    9264:	f004 fe40 	bl	dee8 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9268:	6860      	ldr	r0, [r4, #4]
    926a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    926e:	9800      	ldr	r0, [sp, #0]
    9270:	f004 fe2e 	bl	ded0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9274:	6860      	ldr	r0, [r4, #4]
    9276:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    927a:	9800      	ldr	r0, [sp, #0]
    927c:	f004 fe2c 	bl	ded8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9280:	e027      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9282:	6861      	ldr	r1, [r4, #4]
    9284:	9800      	ldr	r0, [sp, #0]
    9286:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    928a:	7102      	strb	r2, [r0, #4]
    928c:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    9290:	7141      	strb	r1, [r0, #5]
    9292:	e01e      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9294:	6860      	ldr	r0, [r4, #4]
    9296:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    929a:	f004 fc2d 	bl	daf8 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    929e:	4601      	mov	r1, r0
    92a0:	9800      	ldr	r0, [sp, #0]
    92a2:	f004 fe29 	bl	def8 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    92a6:	6860      	ldr	r0, [r4, #4]
    92a8:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    92ac:	f004 fc24 	bl	daf8 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    92b0:	4601      	mov	r1, r0
    92b2:	9800      	ldr	r0, [sp, #0]
    92b4:	f004 fe0a 	bl	decc <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    92b8:	e00b      	b.n	92d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    92ba:	6860      	ldr	r0, [r4, #4]
    92bc:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    92c0:	9800      	ldr	r0, [sp, #0]
    92c2:	f004 fdd7 	bl	de74 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    92c6:	6860      	ldr	r0, [r4, #4]
    92c8:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    92cc:	9800      	ldr	r0, [sp, #0]
    92ce:	f004 fdd3 	bl	de78 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    92d2:	f7fb fb07 	bl	48e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    92d6:	b130      	cbz	r0, 92e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    92d8:	9800      	ldr	r0, [sp, #0]
    92da:	f7ff fcb1 	bl	8c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    92de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    92e0:	f640 01db 	movw	r1, #2267	; 0x8db
    92e4:	e001      	b.n	92ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    92e6:	f640 01e1 	movw	r1, #2273	; 0x8e1
    92ea:	2036      	movs	r0, #54	; 0x36
    92ec:	f7fa fd14 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92f0:	20000104 	.word	0x20000104
    92f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92f8:	4c27      	ldr	r4, [pc, #156]	; (9398 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    92fa:	4680      	mov	r8, r0
    92fc:	460d      	mov	r5, r1
    92fe:	8860      	ldrh	r0, [r4, #2]
    9300:	f04f 0600 	mov.w	r6, #0
    9304:	05c1      	lsls	r1, r0, #23
    9306:	4620      	mov	r0, r4
    9308:	6840      	ldr	r0, [r0, #4]
    930a:	d502      	bpl.n	9312 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    930c:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    9310:	e004      	b.n	931c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    9312:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    9316:	1c49      	adds	r1, r1, #1
    9318:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    931c:	f005 faef 	bl	e8fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    9320:	2701      	movs	r7, #1
    9322:	b1e0      	cbz	r0, 935e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9324:	8860      	ldrh	r0, [r4, #2]
    9326:	0500      	lsls	r0, r0, #20
    9328:	d506      	bpl.n	9338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    932a:	6860      	ldr	r0, [r4, #4]
    932c:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9330:	b111      	cbz	r1, 9338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    9332:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    9336:	e012      	b.n	935e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9338:	6860      	ldr	r0, [r4, #4]
    933a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    933e:	1c49      	adds	r1, r1, #1
    9340:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9344:	f005 fa71 	bl	e82a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    9348:	6860      	ldr	r0, [r4, #4]
    934a:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    934e:	4291      	cmp	r1, r2
    9350:	d305      	bcc.n	935e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9352:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    9356:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    935a:	f001 f911 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    935e:	8860      	ldrh	r0, [r4, #2]
    9360:	f410 7f40 	tst.w	r0, #768	; 0x300
    9364:	d008      	beq.n	9378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    9366:	6860      	ldr	r0, [r4, #4]
    9368:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    936c:	b921      	cbnz	r1, 9378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    936e:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9372:	2101      	movs	r1, #1
    9374:	f7fe fb94 	bl	7aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9378:	ea58 0005 	orrs.w	r0, r8, r5
    937c:	d104      	bne.n	9388 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    937e:	f7ff fe17 	bl	8fb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    9382:	4605      	mov	r5, r0
    9384:	f7ff fcea 	bl	8d5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    9388:	4629      	mov	r1, r5
    938a:	4640      	mov	r0, r8
    938c:	f000 ff7a 	bl	a284 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    9390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9394:	f7fb ba90 	b.w	48b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9398:	20000104 	.word	0x20000104
    939c:	4813      	ldr	r0, [pc, #76]	; (93ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    939e:	6840      	ldr	r0, [r0, #4]
    93a0:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    93a4:	b129      	cbz	r1, 93b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    93a6:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    93aa:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    93ae:	4291      	cmp	r1, r2
    93b0:	d215      	bcs.n	93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    93b2:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    93b6:	b129      	cbz	r1, 93c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    93b8:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    93bc:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    93c0:	4291      	cmp	r1, r2
    93c2:	d20c      	bcs.n	93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    93c4:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    93c8:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    93cc:	428a      	cmp	r2, r1
    93ce:	d206      	bcs.n	93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    93d0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    93d4:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    93d8:	b11a      	cbz	r2, 93e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    93da:	4288      	cmp	r0, r1
    93dc:	d303      	bcc.n	93e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    93de:	2001      	movs	r0, #1
    93e0:	4770      	bx	lr
    93e2:	2806      	cmp	r0, #6
    93e4:	d2fb      	bcs.n	93de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    93e6:	2000      	movs	r0, #0
    93e8:	4770      	bx	lr
    93ea:	0000      	.short	0x0000
    93ec:	20000104 	.word	0x20000104
    93f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    93f2:	4c54      	ldr	r4, [pc, #336]	; (9544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    93f4:	6860      	ldr	r0, [r4, #4]
    93f6:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    93fa:	f88d 1000 	strb.w	r1, [sp]
    93fe:	9900      	ldr	r1, [sp, #0]
    9400:	9100      	str	r1, [sp, #0]
    9402:	f89d 1000 	ldrb.w	r1, [sp]
    9406:	b129      	cbz	r1, 9414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    9408:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    940c:	f004 fb29 	bl	da62 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9410:	2800      	cmp	r0, #0
    9412:	d00a      	beq.n	942a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    9414:	6860      	ldr	r0, [r4, #4]
    9416:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    941a:	b181      	cbz	r1, 943e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    941c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9420:	b149      	cbz	r1, 9436 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    9422:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    9426:	b108      	cbz	r0, 942c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    9428:	200a      	movs	r0, #10
    942a:	e087      	b.n	953c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    942c:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    9430:	2036      	movs	r0, #54	; 0x36
    9432:	f7fa fc71 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9436:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    943a:	f000 b885 	b.w	9548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    943e:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    9442:	b109      	cbz	r1, 9448 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    9444:	2008      	movs	r0, #8
    9446:	e079      	b.n	953c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9448:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    944c:	2500      	movs	r5, #0
    944e:	b181      	cbz	r1, 9472 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    9450:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9454:	0780      	lsls	r0, r0, #30
    9456:	d10b      	bne.n	9470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    9458:	200c      	movs	r0, #12
    945a:	f000 f961 	bl	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    945e:	6860      	ldr	r0, [r4, #4]
    9460:	2101      	movs	r1, #1
    9462:	f820 5fb4 	strh.w	r5, [r0, #180]!
    9466:	7101      	strb	r1, [r0, #4]
    9468:	7b01      	ldrb	r1, [r0, #12]
    946a:	f041 0101 	orr.w	r1, r1, #1
    946e:	7301      	strb	r1, [r0, #12]
    9470:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9472:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    9476:	f88d 1004 	strb.w	r1, [sp, #4]
    947a:	9901      	ldr	r1, [sp, #4]
    947c:	9101      	str	r1, [sp, #4]
    947e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9482:	b141      	cbz	r1, 9496 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    9484:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    9488:	f88d 1000 	strb.w	r1, [sp]
    948c:	9900      	ldr	r1, [sp, #0]
    948e:	9100      	str	r1, [sp, #0]
    9490:	f89d 1000 	ldrb.w	r1, [sp]
    9494:	b391      	cbz	r1, 94fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    9496:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    949a:	2901      	cmp	r1, #1
    949c:	d1e8      	bne.n	9470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    949e:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    94a2:	f88d 1000 	strb.w	r1, [sp]
    94a6:	9900      	ldr	r1, [sp, #0]
    94a8:	9100      	str	r1, [sp, #0]
    94aa:	f89d 1000 	ldrb.w	r1, [sp]
    94ae:	2900      	cmp	r1, #0
    94b0:	d1de      	bne.n	9470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    94b2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    94b6:	f004 fad4 	bl	da62 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    94ba:	2800      	cmp	r0, #0
    94bc:	d1d8      	bne.n	9470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    94be:	6860      	ldr	r0, [r4, #4]
    94c0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    94c4:	f005 f998 	bl	e7f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    94c8:	4605      	mov	r5, r0
    94ca:	6860      	ldr	r0, [r4, #4]
    94cc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    94d0:	f005 f992 	bl	e7f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    94d4:	4606      	mov	r6, r0
    94d6:	6860      	ldr	r0, [r4, #4]
    94d8:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    94dc:	4628      	mov	r0, r5
    94de:	f005 f996 	bl	e80e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    94e2:	b350      	cbz	r0, 953a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    94e4:	6860      	ldr	r0, [r4, #4]
    94e6:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    94ea:	4630      	mov	r0, r6
    94ec:	f005 f98f 	bl	e80e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    94f0:	b318      	cbz	r0, 953a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    94f2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    94f6:	2000      	movs	r0, #0
    94f8:	f000 b8ee 	b.w	96d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    94fc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9500:	2924      	cmp	r1, #36	; 0x24
    9502:	d018      	beq.n	9536 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9504:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9508:	2924      	cmp	r1, #36	; 0x24
    950a:	d014      	beq.n	9536 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    950c:	f05f 0300 	movs.w	r3, #0
    9510:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9514:	f500 7199 	add.w	r1, r0, #306	; 0x132
    9518:	f004 fdf2 	bl	e100 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    951c:	6860      	ldr	r0, [r4, #4]
    951e:	4602      	mov	r2, r0
    9520:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9524:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    9528:	8bc8      	ldrh	r0, [r1, #30]
    952a:	f822 0ffe 	strh.w	r0, [r2, #254]!
    952e:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    9530:	8050      	strh	r0, [r2, #2]
    9532:	2014      	movs	r0, #20
    9534:	e002      	b.n	953c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9536:	2301      	movs	r3, #1
    9538:	e7ea      	b.n	9510 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    953a:	2016      	movs	r0, #22
    953c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9540:	f000 b8ee 	b.w	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9544:	20000104 	.word	0x20000104
    9548:	b510      	push	{r4, lr}
    954a:	4c1e      	ldr	r4, [pc, #120]	; (95c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    954c:	6862      	ldr	r2, [r4, #4]
    954e:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9552:	2808      	cmp	r0, #8
    9554:	d20d      	bcs.n	9572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    9556:	f1c0 0108 	rsb	r1, r0, #8
    955a:	4410      	add	r0, r2
    955c:	b2c9      	uxtb	r1, r1
    955e:	f200 1075 	addw	r0, r0, #373	; 0x175
    9562:	f7fa fc67 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9566:	6861      	ldr	r1, [r4, #4]
    9568:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    956c:	4410      	add	r0, r2
    956e:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9572:	6862      	ldr	r2, [r4, #4]
    9574:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9578:	3808      	subs	r0, #8
    957a:	2804      	cmp	r0, #4
    957c:	d20c      	bcs.n	9598 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    957e:	f1c0 0104 	rsb	r1, r0, #4
    9582:	4410      	add	r0, r2
    9584:	b2c9      	uxtb	r1, r1
    9586:	30f0      	adds	r0, #240	; 0xf0
    9588:	f7fa fc54 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    958c:	6861      	ldr	r1, [r4, #4]
    958e:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    9592:	4410      	add	r0, r2
    9594:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    9598:	6860      	ldr	r0, [r4, #4]
    959a:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    959e:	290c      	cmp	r1, #12
    95a0:	d30e      	bcc.n	95c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    95a2:	d005      	beq.n	95b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    95a4:	f640 1131 	movw	r1, #2353	; 0x931
    95a8:	f04f 0036 	mov.w	r0, #54	; 0x36
    95ac:	f7fa fbb4 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95b0:	2100      	movs	r1, #0
    95b2:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    95b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95ba:	2003      	movs	r0, #3
    95bc:	f000 b8b0 	b.w	9720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    95c0:	bd10      	pop	{r4, pc}
    95c2:	0000      	.short	0x0000
    95c4:	20000104 	.word	0x20000104
    95c8:	b570      	push	{r4, r5, r6, lr}
    95ca:	4b20      	ldr	r3, [pc, #128]	; (964c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    95cc:	4602      	mov	r2, r0
    95ce:	460c      	mov	r4, r1
    95d0:	8858      	ldrh	r0, [r3, #2]
    95d2:	4310      	orrs	r0, r2
    95d4:	8058      	strh	r0, [r3, #2]
    95d6:	4618      	mov	r0, r3
    95d8:	0791      	lsls	r1, r2, #30
    95da:	6840      	ldr	r0, [r0, #4]
    95dc:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    95e0:	d507      	bpl.n	95f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    95e2:	b121      	cbz	r1, 95ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    95e4:	f640 21c5 	movw	r1, #2757	; 0xac5
    95e8:	2036      	movs	r0, #54	; 0x36
    95ea:	f7fa fb95 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95ee:	609c      	str	r4, [r3, #8]
    95f0:	e003      	b.n	95fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    95f2:	b101      	cbz	r1, 95f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    95f4:	60dc      	str	r4, [r3, #12]
    95f6:	0791      	lsls	r1, r2, #30
    95f8:	d515      	bpl.n	9626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    95fa:	78e1      	ldrb	r1, [r4, #3]
    95fc:	2906      	cmp	r1, #6
    95fe:	d002      	beq.n	9606 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    9600:	290b      	cmp	r1, #11
    9602:	d110      	bne.n	9626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9604:	e008      	b.n	9618 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    9606:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    960a:	2918      	cmp	r1, #24
    960c:	d10b      	bne.n	9626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    960e:	2100      	movs	r1, #0
    9610:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    9614:	2101      	movs	r1, #1
    9616:	e004      	b.n	9622 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    9618:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    961c:	2912      	cmp	r1, #18
    961e:	d102      	bne.n	9626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9620:	2100      	movs	r1, #0
    9622:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    9626:	0691      	lsls	r1, r2, #26
    9628:	d501      	bpl.n	962e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    962a:	2108      	movs	r1, #8
    962c:	7059      	strb	r1, [r3, #1]
    962e:	0611      	lsls	r1, r2, #24
    9630:	d50a      	bpl.n	9648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    9632:	8a82      	ldrh	r2, [r0, #20]
    9634:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9638:	4620      	mov	r0, r4
    963a:	f7ff fae3 	bl	8c04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    963e:	4620      	mov	r0, r4
    9640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9644:	f7ff bafc 	b.w	8c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9648:	bd70      	pop	{r4, r5, r6, pc}
    964a:	0000      	.short	0x0000
    964c:	20000104 	.word	0x20000104
    9650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9654:	4c1f      	ldr	r4, [pc, #124]	; (96d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    9656:	2501      	movs	r5, #1
    9658:	6862      	ldr	r2, [r4, #4]
    965a:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    965e:	b908      	cbnz	r0, 9664 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    9660:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9664:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    9668:	b909      	cbnz	r1, 966e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    966a:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    966e:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    9672:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    9676:	3262      	adds	r2, #98	; 0x62
    9678:	2001      	movs	r0, #1
    967a:	7290      	strb	r0, [r2, #10]
    967c:	2000      	movs	r0, #0
    967e:	f000 f82b 	bl	96d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9682:	6860      	ldr	r0, [r4, #4]
    9684:	302c      	adds	r0, #44	; 0x2c
    9686:	f004 fdaa 	bl	e1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    968a:	4606      	mov	r6, r0
    968c:	6860      	ldr	r0, [r4, #4]
    968e:	f004 fd52 	bl	e136 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9692:	b1c0      	cbz	r0, 96c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    9694:	6860      	ldr	r0, [r4, #4]
    9696:	302c      	adds	r0, #44	; 0x2c
    9698:	f004 fda1 	bl	e1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    969c:	6861      	ldr	r1, [r4, #4]
    969e:	4607      	mov	r7, r0
    96a0:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    96a4:	8808      	ldrh	r0, [r1, #0]
    96a6:	312c      	adds	r1, #44	; 0x2c
    96a8:	f004 fd06 	bl	e0b8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    96ac:	42be      	cmp	r6, r7
    96ae:	d20a      	bcs.n	96c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    96b0:	f7f7 ff54 	bl	155c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    96b4:	4601      	mov	r1, r0
    96b6:	1bb8      	subs	r0, r7, r6
    96b8:	2864      	cmp	r0, #100	; 0x64
    96ba:	d200      	bcs.n	96be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    96bc:	2064      	movs	r0, #100	; 0x64
    96be:	f7f7 fe41 	bl	1344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    96c2:	b100      	cbz	r0, 96c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    96c4:	2500      	movs	r5, #0
    96c6:	2104      	movs	r1, #4
    96c8:	6860      	ldr	r0, [r4, #4]
    96ca:	f7fe f9e9 	bl	7aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    96ce:	4628      	mov	r0, r5
    96d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96d4:	20000104 	.word	0x20000104
    96d8:	b510      	push	{r4, lr}
    96da:	4c10      	ldr	r4, [pc, #64]	; (971c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    96dc:	6861      	ldr	r1, [r4, #4]
    96de:	880a      	ldrh	r2, [r1, #0]
    96e0:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    96e4:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    96e8:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    96ec:	f005 f884 	bl	e7f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    96f0:	6861      	ldr	r1, [r4, #4]
    96f2:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    96f6:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    96fa:	f005 f87d 	bl	e7f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    96fe:	6862      	ldr	r2, [r4, #4]
    9700:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    9704:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    9708:	2001      	movs	r0, #1
    970a:	7008      	strb	r0, [r1, #0]
    970c:	2000      	movs	r0, #0
    970e:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    9712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9716:	f000 bf33 	b.w	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    971a:	0000      	.short	0x0000
    971c:	20000104 	.word	0x20000104
    9720:	490f      	ldr	r1, [pc, #60]	; (9760 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    9722:	280c      	cmp	r0, #12
    9724:	6849      	ldr	r1, [r1, #4]
    9726:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    972a:	d014      	beq.n	9756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    972c:	2813      	cmp	r0, #19
    972e:	d012      	beq.n	9756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9730:	2818      	cmp	r0, #24
    9732:	d010      	beq.n	9756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9734:	2200      	movs	r2, #0
    9736:	2811      	cmp	r0, #17
    9738:	d00e      	beq.n	9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    973a:	2807      	cmp	r0, #7
    973c:	d00b      	beq.n	9756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    973e:	2815      	cmp	r0, #21
    9740:	d00a      	beq.n	9758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    9742:	2801      	cmp	r0, #1
    9744:	d007      	beq.n	9756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9746:	2800      	cmp	r0, #0
    9748:	d005      	beq.n	9756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    974a:	2802      	cmp	r0, #2
    974c:	d003      	beq.n	9756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    974e:	f821 2fb4 	strh.w	r2, [r1, #180]!
    9752:	2001      	movs	r0, #1
    9754:	7108      	strb	r0, [r1, #4]
    9756:	4770      	bx	lr
    9758:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    975c:	4770      	bx	lr
    975e:	0000      	.short	0x0000
    9760:	20000104 	.word	0x20000104
    9764:	b538      	push	{r3, r4, r5, lr}
    9766:	4c11      	ldr	r4, [pc, #68]	; (97ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    9768:	6862      	ldr	r2, [r4, #4]
    976a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    976e:	f8ad 2000 	strh.w	r2, [sp]
    9772:	f004 f9f6 	bl	db62 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    9776:	f89d 3000 	ldrb.w	r3, [sp]
    977a:	b2c2      	uxtb	r2, r0
    977c:	2100      	movs	r1, #0
    977e:	4293      	cmp	r3, r2
    9780:	d003      	beq.n	978a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    9782:	6863      	ldr	r3, [r4, #4]
    9784:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    9788:	e002      	b.n	9790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    978a:	6862      	ldr	r2, [r4, #4]
    978c:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    9790:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9794:	f3c0 2007 	ubfx	r0, r0, #8, #8
    9798:	4282      	cmp	r2, r0
    979a:	d003      	beq.n	97a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    979c:	6861      	ldr	r1, [r4, #4]
    979e:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    97a2:	bd38      	pop	{r3, r4, r5, pc}
    97a4:	6860      	ldr	r0, [r4, #4]
    97a6:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    97aa:	bd38      	pop	{r3, r4, r5, pc}
    97ac:	20000104 	.word	0x20000104
    97b0:	b510      	push	{r4, lr}
    97b2:	4c0c      	ldr	r4, [pc, #48]	; (97e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    97b4:	6861      	ldr	r1, [r4, #4]
    97b6:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    97ba:	2813      	cmp	r0, #19
    97bc:	d001      	beq.n	97c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    97be:	2002      	movs	r0, #2
    97c0:	bd10      	pop	{r4, pc}
    97c2:	f201 117d 	addw	r1, r1, #381	; 0x17d
    97c6:	68e0      	ldr	r0, [r4, #12]
    97c8:	f004 fb06 	bl	ddd8 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    97cc:	6861      	ldr	r1, [r4, #4]
    97ce:	68e0      	ldr	r0, [r4, #12]
    97d0:	31f4      	adds	r1, #244	; 0xf4
    97d2:	f004 fafe 	bl	ddd2 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    97d6:	6861      	ldr	r1, [r4, #4]
    97d8:	2016      	movs	r0, #22
    97da:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    97de:	2000      	movs	r0, #0
    97e0:	bd10      	pop	{r4, pc}
    97e2:	0000      	.short	0x0000
    97e4:	20000104 	.word	0x20000104
    97e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    97ea:	4c1d      	ldr	r4, [pc, #116]	; (9860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    97ec:	2300      	movs	r3, #0
    97ee:	2107      	movs	r1, #7
    97f0:	6860      	ldr	r0, [r4, #4]
    97f2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    97f6:	3078      	adds	r0, #120	; 0x78
    97f8:	f004 f8da 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97fc:	b370      	cbz	r0, 985c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    97fe:	4669      	mov	r1, sp
    9800:	68e0      	ldr	r0, [r4, #12]
    9802:	f004 faee 	bl	dde2 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    9806:	f001 fbdd 	bl	afc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    980a:	f644 112f 	movw	r1, #18735	; 0x492f
    980e:	4008      	ands	r0, r1
    9810:	f89d 2000 	ldrb.w	r2, [sp]
    9814:	6861      	ldr	r1, [r4, #4]
    9816:	4002      	ands	r2, r0
    9818:	2500      	movs	r5, #0
    981a:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    981e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9822:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9826:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    982a:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    982e:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    9832:	8808      	ldrh	r0, [r1, #0]
    9834:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    9838:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    983c:	9a00      	ldr	r2, [sp, #0]
    983e:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    9842:	9a01      	ldr	r2, [sp, #4]
    9844:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    9848:	2001      	movs	r0, #1
    984a:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    984e:	f000 fe97 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9852:	6860      	ldr	r0, [r4, #4]
    9854:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9858:	2000      	movs	r0, #0
    985a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    985c:	2001      	movs	r0, #1
    985e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9860:	20000104 	.word	0x20000104
    9864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9868:	4c19      	ldr	r4, [pc, #100]	; (98d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    986a:	2600      	movs	r6, #0
    986c:	2703      	movs	r7, #3
    986e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    9872:	2501      	movs	r5, #1
    9874:	b1a0      	cbz	r0, 98a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    9876:	68e0      	ldr	r0, [r4, #12]
    9878:	78c0      	ldrb	r0, [r0, #3]
    987a:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    987e:	fa05 f000 	lsl.w	r0, r5, r0
    9882:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    9886:	b130      	cbz	r0, 9896 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    9888:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    988c:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    9890:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9894:	e017      	b.n	98c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    9896:	f240 5143 	movw	r1, #1347	; 0x543
    989a:	2036      	movs	r0, #54	; 0x36
    989c:	f7fa fa3c 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98a0:	2300      	movs	r3, #0
    98a2:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    98a6:	4619      	mov	r1, r3
    98a8:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    98ac:	f004 f880 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98b0:	b160      	cbz	r0, 98cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    98b2:	68e0      	ldr	r0, [r4, #12]
    98b4:	78c1      	ldrb	r1, [r0, #3]
    98b6:	6860      	ldr	r0, [r4, #4]
    98b8:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    98bc:	f800 7f86 	strb.w	r7, [r0, #134]!
    98c0:	8686      	strh	r6, [r0, #52]	; 0x34
    98c2:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    98c6:	2000      	movs	r0, #0
    98c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98cc:	2001      	movs	r0, #1
    98ce:	e7fb      	b.n	98c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    98d0:	20000104 	.word	0x20000104
    98d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    98d8:	4c30      	ldr	r4, [pc, #192]	; (999c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    98da:	2300      	movs	r3, #0
    98dc:	4619      	mov	r1, r3
    98de:	6860      	ldr	r0, [r4, #4]
    98e0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    98e4:	3078      	adds	r0, #120	; 0x78
    98e6:	f004 f863 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98ea:	b308      	cbz	r0, 9930 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    98ec:	68e0      	ldr	r0, [r4, #12]
    98ee:	f004 fa8d 	bl	de0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    98f2:	b300      	cbz	r0, 9936 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    98f4:	68e0      	ldr	r0, [r4, #12]
    98f6:	f004 fa7f 	bl	ddf8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    98fa:	4607      	mov	r7, r0
    98fc:	68e0      	ldr	r0, [r4, #12]
    98fe:	f004 fa7f 	bl	de00 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9902:	4606      	mov	r6, r0
    9904:	68e0      	ldr	r0, [r4, #12]
    9906:	f004 fa75 	bl	ddf4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    990a:	4605      	mov	r5, r0
    990c:	68e0      	ldr	r0, [r4, #12]
    990e:	f004 fa75 	bl	ddfc <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9912:	4601      	mov	r1, r0
    9914:	9700      	str	r7, [sp, #0]
    9916:	6860      	ldr	r0, [r4, #4]
    9918:	4633      	mov	r3, r6
    991a:	462a      	mov	r2, r5
    991c:	302c      	adds	r0, #44	; 0x2c
    991e:	f004 fc98 	bl	e252 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9922:	6861      	ldr	r1, [r4, #4]
    9924:	2501      	movs	r5, #1
    9926:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    992a:	281c      	cmp	r0, #28
    992c:	d008      	beq.n	9940 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    992e:	e009      	b.n	9944 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    9930:	2001      	movs	r0, #1
    9932:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9936:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    993a:	2000      	movs	r0, #0
    993c:	f7ff bf92 	b.w	9864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9940:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    9944:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9948:	2801      	cmp	r0, #1
    994a:	d011      	beq.n	9970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    994c:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    9950:	f88d 0004 	strb.w	r0, [sp, #4]
    9954:	9801      	ldr	r0, [sp, #4]
    9956:	9001      	str	r0, [sp, #4]
    9958:	f89d 0004 	ldrb.w	r0, [sp, #4]
    995c:	b940      	cbnz	r0, 9970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    995e:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    9962:	f88d 0000 	strb.w	r0, [sp]
    9966:	9800      	ldr	r0, [sp, #0]
    9968:	9000      	str	r0, [sp, #0]
    996a:	f89d 0000 	ldrb.w	r0, [sp]
    996e:	b118      	cbz	r0, 9978 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    9970:	201e      	movs	r0, #30
    9972:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9976:	e00a      	b.n	998e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    9978:	201d      	movs	r0, #29
    997a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    997e:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    9982:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9986:	f004 fc6b 	bl	e260 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    998a:	f000 fdf9 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    998e:	6860      	ldr	r0, [r4, #4]
    9990:	2100      	movs	r1, #0
    9992:	f820 1fba 	strh.w	r1, [r0, #186]!
    9996:	7085      	strb	r5, [r0, #2]
    9998:	4608      	mov	r0, r1
    999a:	e7ca      	b.n	9932 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    999c:	20000104 	.word	0x20000104
    99a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99a2:	4c1a      	ldr	r4, [pc, #104]	; (9a0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    99a4:	2300      	movs	r3, #0
    99a6:	210a      	movs	r1, #10
    99a8:	6860      	ldr	r0, [r4, #4]
    99aa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    99ae:	3078      	adds	r0, #120	; 0x78
    99b0:	f003 fffe 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99b4:	b338      	cbz	r0, 9a06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    99b6:	68e0      	ldr	r0, [r4, #12]
    99b8:	f004 fa28 	bl	de0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    99bc:	b1c8      	cbz	r0, 99f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    99be:	68e0      	ldr	r0, [r4, #12]
    99c0:	f004 fa1a 	bl	ddf8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    99c4:	4607      	mov	r7, r0
    99c6:	68e0      	ldr	r0, [r4, #12]
    99c8:	f004 fa1a 	bl	de00 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    99cc:	4606      	mov	r6, r0
    99ce:	68e0      	ldr	r0, [r4, #12]
    99d0:	f004 fa10 	bl	ddf4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    99d4:	4605      	mov	r5, r0
    99d6:	68e0      	ldr	r0, [r4, #12]
    99d8:	f004 fa10 	bl	ddfc <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    99dc:	4601      	mov	r1, r0
    99de:	9700      	str	r7, [sp, #0]
    99e0:	6860      	ldr	r0, [r4, #4]
    99e2:	4633      	mov	r3, r6
    99e4:	462a      	mov	r2, r5
    99e6:	302c      	adds	r0, #44	; 0x2c
    99e8:	f004 fc33 	bl	e252 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    99ec:	6860      	ldr	r0, [r4, #4]
    99ee:	f004 fba2 	bl	e136 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    99f2:	6861      	ldr	r1, [r4, #4]
    99f4:	2000      	movs	r0, #0
    99f6:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    99fa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    99fe:	f7ff fabf 	bl	8f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9a02:	2000      	movs	r0, #0
    9a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a06:	2001      	movs	r0, #1
    9a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a0a:	0000      	.short	0x0000
    9a0c:	20000104 	.word	0x20000104
    9a10:	b510      	push	{r4, lr}
    9a12:	4c0b      	ldr	r4, [pc, #44]	; (9a40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    9a14:	2300      	movs	r3, #0
    9a16:	4619      	mov	r1, r3
    9a18:	6860      	ldr	r0, [r4, #4]
    9a1a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a1e:	3078      	adds	r0, #120	; 0x78
    9a20:	f003 ffc6 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a24:	b150      	cbz	r0, 9a3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    9a26:	6860      	ldr	r0, [r4, #4]
    9a28:	2100      	movs	r1, #0
    9a2a:	f820 1fba 	strh.w	r1, [r0, #186]!
    9a2e:	2101      	movs	r1, #1
    9a30:	7081      	strb	r1, [r0, #2]
    9a32:	2102      	movs	r1, #2
    9a34:	f800 1c34 	strb.w	r1, [r0, #-52]
    9a38:	2000      	movs	r0, #0
    9a3a:	bd10      	pop	{r4, pc}
    9a3c:	2001      	movs	r0, #1
    9a3e:	bd10      	pop	{r4, pc}
    9a40:	20000104 	.word	0x20000104
    9a44:	b510      	push	{r4, lr}
    9a46:	4c09      	ldr	r4, [pc, #36]	; (9a6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    9a48:	2300      	movs	r3, #0
    9a4a:	2109      	movs	r1, #9
    9a4c:	6860      	ldr	r0, [r4, #4]
    9a4e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9a52:	3078      	adds	r0, #120	; 0x78
    9a54:	f003 ffac 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a58:	2800      	cmp	r0, #0
    9a5a:	d006      	beq.n	9a6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    9a5c:	6861      	ldr	r1, [r4, #4]
    9a5e:	2000      	movs	r0, #0
    9a60:	f801 0fac 	strb.w	r0, [r1, #172]!
    9a64:	7308      	strb	r0, [r1, #12]
    9a66:	f801 0c27 	strb.w	r0, [r1, #-39]
    9a6a:	bd10      	pop	{r4, pc}
    9a6c:	20000104 	.word	0x20000104
    9a70:	4807      	ldr	r0, [pc, #28]	; (9a90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    9a72:	6840      	ldr	r0, [r0, #4]
    9a74:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9a78:	290f      	cmp	r1, #15
    9a7a:	d001      	beq.n	9a80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    9a7c:	2002      	movs	r0, #2
    9a7e:	4770      	bx	lr
    9a80:	2100      	movs	r1, #0
    9a82:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9a86:	2112      	movs	r1, #18
    9a88:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9a8c:	2000      	movs	r0, #0
    9a8e:	4770      	bx	lr
    9a90:	20000104 	.word	0x20000104
    9a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a96:	4c42      	ldr	r4, [pc, #264]	; (9ba0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    9a98:	2600      	movs	r6, #0
    9a9a:	b087      	sub	sp, #28
    9a9c:	6860      	ldr	r0, [r4, #4]
    9a9e:	4633      	mov	r3, r6
    9aa0:	4631      	mov	r1, r6
    9aa2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9aa6:	3078      	adds	r0, #120	; 0x78
    9aa8:	f003 ff82 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9aac:	b180      	cbz	r0, 9ad0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    9aae:	6860      	ldr	r0, [r4, #4]
    9ab0:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9ab4:	2823      	cmp	r0, #35	; 0x23
    9ab6:	d00e      	beq.n	9ad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9ab8:	2824      	cmp	r0, #36	; 0x24
    9aba:	d00c      	beq.n	9ad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9abc:	4668      	mov	r0, sp
    9abe:	f7fa ff25 	bl	490c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    9ac2:	b150      	cbz	r0, 9ada <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    9ac4:	9800      	ldr	r0, [sp, #0]
    9ac6:	a901      	add	r1, sp, #4
    9ac8:	78c0      	ldrb	r0, [r0, #3]
    9aca:	f88d 0004 	strb.w	r0, [sp, #4]
    9ace:	e005      	b.n	9adc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    9ad0:	2001      	movs	r0, #1
    9ad2:	b007      	add	sp, #28
    9ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ad6:	2020      	movs	r0, #32
    9ad8:	e7fb      	b.n	9ad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9ada:	2100      	movs	r1, #0
    9adc:	6860      	ldr	r0, [r4, #4]
    9ade:	ab04      	add	r3, sp, #16
    9ae0:	2216      	movs	r2, #22
    9ae2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9ae6:	f004 f81f 	bl	db28 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    9aea:	2700      	movs	r7, #0
    9aec:	2501      	movs	r5, #1
    9aee:	b178      	cbz	r0, 9b10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    9af0:	6860      	ldr	r0, [r4, #4]
    9af2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9af6:	2216      	movs	r2, #22
    9af8:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    9afc:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9b00:	2119      	movs	r1, #25
    9b02:	f800 1f86 	strb.w	r1, [r0, #134]!
    9b06:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9b0a:	8687      	strh	r7, [r0, #52]	; 0x34
    9b0c:	2000      	movs	r0, #0
    9b0e:	e7e0      	b.n	9ad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9b10:	68e0      	ldr	r0, [r4, #12]
    9b12:	f004 f997 	bl	de44 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9b16:	b1a8      	cbz	r0, 9b44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    9b18:	68e1      	ldr	r1, [r4, #12]
    9b1a:	7908      	ldrb	r0, [r1, #4]
    9b1c:	f000 0207 	and.w	r2, r0, #7
    9b20:	6860      	ldr	r0, [r4, #4]
    9b22:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    9b26:	7949      	ldrb	r1, [r1, #5]
    9b28:	f001 0107 	and.w	r1, r1, #7
    9b2c:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    9b30:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    9b34:	f88d 3018 	strb.w	r3, [sp, #24]
    9b38:	9b06      	ldr	r3, [sp, #24]
    9b3a:	9301      	str	r3, [sp, #4]
    9b3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9b40:	bb23      	cbnz	r3, 9b8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9b42:	e004      	b.n	9b4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    9b44:	2000      	movs	r0, #0
    9b46:	f7ff fe8d 	bl	9864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9b4a:	4606      	mov	r6, r0
    9b4c:	e025      	b.n	9b9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    9b4e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    9b52:	2b01      	cmp	r3, #1
    9b54:	d01a      	beq.n	9b8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9b56:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    9b5a:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9b5e:	4594      	cmp	ip, r2
    9b60:	d106      	bne.n	9b70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9b62:	781a      	ldrb	r2, [r3, #0]
    9b64:	428a      	cmp	r2, r1
    9b66:	d103      	bne.n	9b70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9b68:	2102      	movs	r1, #2
    9b6a:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    9b6e:	e00d      	b.n	9b8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9b70:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    9b74:	8802      	ldrh	r2, [r0, #0]
    9b76:	f821 2902 	strh.w	r2, [r1], #-2
    9b7a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9b7e:	710a      	strb	r2, [r1, #4]
    9b80:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9b84:	7148      	strb	r0, [r1, #5]
    9b86:	700d      	strb	r5, [r1, #0]
    9b88:	f000 fcfa 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9b8c:	6860      	ldr	r0, [r4, #4]
    9b8e:	2121      	movs	r1, #33	; 0x21
    9b90:	f800 1f86 	strb.w	r1, [r0, #134]!
    9b94:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9b98:	8687      	strh	r7, [r0, #52]	; 0x34
    9b9a:	4630      	mov	r0, r6
    9b9c:	e799      	b.n	9ad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9b9e:	0000      	.short	0x0000
    9ba0:	20000104 	.word	0x20000104
    9ba4:	b570      	push	{r4, r5, r6, lr}
    9ba6:	4c18      	ldr	r4, [pc, #96]	; (9c08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    9ba8:	6860      	ldr	r0, [r4, #4]
    9baa:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9bae:	281f      	cmp	r0, #31
    9bb0:	d001      	beq.n	9bb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    9bb2:	2001      	movs	r0, #1
    9bb4:	bd70      	pop	{r4, r5, r6, pc}
    9bb6:	68e0      	ldr	r0, [r4, #12]
    9bb8:	f004 f94e 	bl	de58 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    9bbc:	b1d8      	cbz	r0, 9bf6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    9bbe:	68e0      	ldr	r0, [r4, #12]
    9bc0:	2201      	movs	r2, #1
    9bc2:	7901      	ldrb	r1, [r0, #4]
    9bc4:	7940      	ldrb	r0, [r0, #5]
    9bc6:	f001 0107 	and.w	r1, r1, #7
    9bca:	f361 0507 	bfi	r5, r1, #0, #8
    9bce:	4629      	mov	r1, r5
    9bd0:	f000 0007 	and.w	r0, r0, #7
    9bd4:	f360 210f 	bfi	r1, r0, #8, #8
    9bd8:	6860      	ldr	r0, [r4, #4]
    9bda:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    9bde:	2200      	movs	r2, #0
    9be0:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    9be4:	2223      	movs	r2, #35	; 0x23
    9be6:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    9bea:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9bee:	f7ff fdb9 	bl	9764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9bf2:	2000      	movs	r0, #0
    9bf4:	bd70      	pop	{r4, r5, r6, pc}
    9bf6:	2001      	movs	r0, #1
    9bf8:	f7ff fe34 	bl	9864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9bfc:	4604      	mov	r4, r0
    9bfe:	201e      	movs	r0, #30
    9c00:	f7ff fd6a 	bl	96d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9c04:	4620      	mov	r0, r4
    9c06:	bd70      	pop	{r4, r5, r6, pc}
    9c08:	20000104 	.word	0x20000104
    9c0c:	b570      	push	{r4, r5, r6, lr}
    9c0e:	4d07      	ldr	r5, [pc, #28]	; (9c2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    9c10:	2400      	movs	r4, #0
    9c12:	68e8      	ldr	r0, [r5, #12]
    9c14:	f004 f92a 	bl	de6c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9c18:	2803      	cmp	r0, #3
    9c1a:	d105      	bne.n	9c28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    9c1c:	68e8      	ldr	r0, [r5, #12]
    9c1e:	f004 f927 	bl	de70 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9c22:	f000 f805 	bl	9c30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9c26:	4604      	mov	r4, r0
    9c28:	4620      	mov	r0, r4
    9c2a:	bd70      	pop	{r4, r5, r6, pc}
    9c2c:	20000104 	.word	0x20000104
    9c30:	b570      	push	{r4, r5, r6, lr}
    9c32:	4d18      	ldr	r5, [pc, #96]	; (9c94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    9c34:	6869      	ldr	r1, [r5, #4]
    9c36:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    9c3a:	2a16      	cmp	r2, #22
    9c3c:	d001      	beq.n	9c42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    9c3e:	2a13      	cmp	r2, #19
    9c40:	d102      	bne.n	9c48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    9c42:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    9c46:	b10a      	cbz	r2, 9c4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    9c48:	2002      	movs	r0, #2
    9c4a:	bd70      	pop	{r4, r5, r6, pc}
    9c4c:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    9c50:	2400      	movs	r4, #0
    9c52:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    9c56:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    9c5a:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    9c5e:	b122      	cbz	r2, 9c6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    9c60:	f240 21eb 	movw	r1, #747	; 0x2eb
    9c64:	2036      	movs	r0, #54	; 0x36
    9c66:	f7fa f857 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c6a:	880a      	ldrh	r2, [r1, #0]
    9c6c:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    9c70:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    9c74:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    9c78:	200d      	movs	r0, #13
    9c7a:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    9c7e:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    9c82:	f000 fb9b 	bl	a3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9c86:	f000 fc7b 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9c8a:	6868      	ldr	r0, [r5, #4]
    9c8c:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9c90:	2000      	movs	r0, #0
    9c92:	bd70      	pop	{r4, r5, r6, pc}
    9c94:	20000104 	.word	0x20000104
    9c98:	4802      	ldr	r0, [pc, #8]	; (9ca4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    9c9a:	68c0      	ldr	r0, [r0, #12]
    9c9c:	7900      	ldrb	r0, [r0, #4]
    9c9e:	f7ff bfc7 	b.w	9c30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9ca2:	0000      	.short	0x0000
    9ca4:	20000104 	.word	0x20000104
    9ca8:	b510      	push	{r4, lr}
    9caa:	4c0e      	ldr	r4, [pc, #56]	; (9ce4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    9cac:	6860      	ldr	r0, [r4, #4]
    9cae:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9cb2:	2916      	cmp	r1, #22
    9cb4:	d001      	beq.n	9cba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    9cb6:	2002      	movs	r0, #2
    9cb8:	bd10      	pop	{r4, pc}
    9cba:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9cbe:	f200 1175 	addw	r1, r0, #373	; 0x175
    9cc2:	2200      	movs	r2, #0
    9cc4:	f200 1065 	addw	r0, r0, #357	; 0x165
    9cc8:	f003 fdf4 	bl	d8b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9ccc:	6860      	ldr	r0, [r4, #4]
    9cce:	2100      	movs	r1, #0
    9cd0:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9cd4:	2101      	movs	r1, #1
    9cd6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9cda:	2118      	movs	r1, #24
    9cdc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9ce0:	2000      	movs	r0, #0
    9ce2:	bd10      	pop	{r4, pc}
    9ce4:	20000104 	.word	0x20000104
    9ce8:	b570      	push	{r4, r5, r6, lr}
    9cea:	4d1b      	ldr	r5, [pc, #108]	; (9d58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    9cec:	6868      	ldr	r0, [r5, #4]
    9cee:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9cf2:	291a      	cmp	r1, #26
    9cf4:	d001      	beq.n	9cfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    9cf6:	2002      	movs	r0, #2
    9cf8:	bd70      	pop	{r4, r5, r6, pc}
    9cfa:	2400      	movs	r4, #0
    9cfc:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    9d00:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    9d04:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    9d08:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    9d0c:	b121      	cbz	r1, 9d18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    9d0e:	f240 3113 	movw	r1, #787	; 0x313
    9d12:	2036      	movs	r0, #54	; 0x36
    9d14:	f7fa f800 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d18:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9d1c:	b141      	cbz	r1, 9d30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    9d1e:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    9d22:	8801      	ldrh	r1, [r0, #0]
    9d24:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9d28:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9d2c:	210e      	movs	r1, #14
    9d2e:	e008      	b.n	9d42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    9d30:	8801      	ldrh	r1, [r0, #0]
    9d32:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9d36:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9d3a:	2101      	movs	r1, #1
    9d3c:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    9d40:	210d      	movs	r1, #13
    9d42:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    9d46:	f000 fb39 	bl	a3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9d4a:	f000 fc19 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d4e:	6868      	ldr	r0, [r5, #4]
    9d50:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9d54:	2000      	movs	r0, #0
    9d56:	bd70      	pop	{r4, r5, r6, pc}
    9d58:	20000104 	.word	0x20000104
    9d5c:	b510      	push	{r4, lr}
    9d5e:	4c0d      	ldr	r4, [pc, #52]	; (9d94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    9d60:	2300      	movs	r3, #0
    9d62:	2101      	movs	r1, #1
    9d64:	6860      	ldr	r0, [r4, #4]
    9d66:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9d6a:	3078      	adds	r0, #120	; 0x78
    9d6c:	f003 fe20 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d70:	b108      	cbz	r0, 9d76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    9d72:	2000      	movs	r0, #0
    9d74:	bd10      	pop	{r4, pc}
    9d76:	68e0      	ldr	r0, [r4, #12]
    9d78:	f004 f844 	bl	de04 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9d7c:	6861      	ldr	r1, [r4, #4]
    9d7e:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    9d82:	2007      	movs	r0, #7
    9d84:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    9d88:	2000      	movs	r0, #0
    9d8a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    9d8e:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9d92:	e7ee      	b.n	9d72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    9d94:	20000104 	.word	0x20000104
    9d98:	b570      	push	{r4, r5, r6, lr}
    9d9a:	4c25      	ldr	r4, [pc, #148]	; (9e30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    9d9c:	2600      	movs	r6, #0
    9d9e:	2109      	movs	r1, #9
    9da0:	6860      	ldr	r0, [r4, #4]
    9da2:	4633      	mov	r3, r6
    9da4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9da8:	3078      	adds	r0, #120	; 0x78
    9daa:	f003 fe01 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dae:	2500      	movs	r5, #0
    9db0:	b118      	cbz	r0, 9dba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    9db2:	68e0      	ldr	r0, [r4, #12]
    9db4:	7900      	ldrb	r0, [r0, #4]
    9db6:	2812      	cmp	r0, #18
    9db8:	d011      	beq.n	9dde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    9dba:	6860      	ldr	r0, [r4, #4]
    9dbc:	210a      	movs	r1, #10
    9dbe:	2300      	movs	r3, #0
    9dc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9dc4:	3078      	adds	r0, #120	; 0x78
    9dc6:	f003 fdf3 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dca:	b118      	cbz	r0, 9dd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    9dcc:	68e0      	ldr	r0, [r4, #12]
    9dce:	7900      	ldrb	r0, [r0, #4]
    9dd0:	2814      	cmp	r0, #20
    9dd2:	d008      	beq.n	9de6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    9dd4:	68e0      	ldr	r0, [r4, #12]
    9dd6:	7900      	ldrb	r0, [r0, #4]
    9dd8:	2816      	cmp	r0, #22
    9dda:	d012      	beq.n	9e02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    9ddc:	e026      	b.n	9e2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9dde:	f7ff fe31 	bl	9a44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    9de2:	4606      	mov	r6, r0
    9de4:	e022      	b.n	9e2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9de6:	6860      	ldr	r0, [r4, #4]
    9de8:	2105      	movs	r1, #5
    9dea:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9dee:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9df2:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9df6:	30c6      	adds	r0, #198	; 0xc6
    9df8:	f004 fc81 	bl	e6fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9dfc:	f7ff f8c0 	bl	8f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9e00:	e014      	b.n	9e2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9e02:	6860      	ldr	r0, [r4, #4]
    9e04:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9e08:	291f      	cmp	r1, #31
    9e0a:	d10f      	bne.n	9e2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    9e0c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9e10:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9e14:	2108      	movs	r1, #8
    9e16:	30c6      	adds	r0, #198	; 0xc6
    9e18:	f004 fc71 	bl	e6fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9e1c:	6860      	ldr	r0, [r4, #4]
    9e1e:	210b      	movs	r1, #11
    9e20:	30c6      	adds	r0, #198	; 0xc6
    9e22:	f004 fc6c 	bl	e6fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    9e26:	201a      	movs	r0, #26
    9e28:	f7ff fc56 	bl	96d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9e2c:	4630      	mov	r0, r6
    9e2e:	bd70      	pop	{r4, r5, r6, pc}
    9e30:	20000104 	.word	0x20000104
    9e34:	b570      	push	{r4, r5, r6, lr}
    9e36:	4c32      	ldr	r4, [pc, #200]	; (9f00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    9e38:	2300      	movs	r3, #0
    9e3a:	4619      	mov	r1, r3
    9e3c:	6860      	ldr	r0, [r4, #4]
    9e3e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9e42:	3078      	adds	r0, #120	; 0x78
    9e44:	f003 fdb4 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e48:	b940      	cbnz	r0, 9e5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    9e4a:	6860      	ldr	r0, [r4, #4]
    9e4c:	2300      	movs	r3, #0
    9e4e:	2108      	movs	r1, #8
    9e50:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e54:	3078      	adds	r0, #120	; 0x78
    9e56:	f003 fdab 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e5a:	b1f8      	cbz	r0, 9e9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    9e5c:	6860      	ldr	r0, [r4, #4]
    9e5e:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9e62:	0780      	lsls	r0, r0, #30
    9e64:	d412      	bmi.n	9e8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    9e66:	68e0      	ldr	r0, [r4, #12]
    9e68:	f003 ffce 	bl	de08 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    9e6c:	6861      	ldr	r1, [r4, #4]
    9e6e:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    9e72:	68e0      	ldr	r0, [r4, #12]
    9e74:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    9e78:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    9e7c:	8840      	ldrh	r0, [r0, #2]
    9e7e:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    9e82:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    9e86:	f040 0002 	orr.w	r0, r0, #2
    9e8a:	7008      	strb	r0, [r1, #0]
    9e8c:	6860      	ldr	r0, [r4, #4]
    9e8e:	f04f 0500 	mov.w	r5, #0
    9e92:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    9e96:	07c9      	lsls	r1, r1, #31
    9e98:	d002      	beq.n	9ea0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    9e9a:	e010      	b.n	9ebe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    9e9c:	2001      	movs	r0, #1
    9e9e:	bd70      	pop	{r4, r5, r6, pc}
    9ea0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9ea4:	2300      	movs	r3, #0
    9ea6:	4619      	mov	r1, r3
    9ea8:	3078      	adds	r0, #120	; 0x78
    9eaa:	f003 fd81 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9eae:	b160      	cbz	r0, 9eca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    9eb0:	6860      	ldr	r0, [r4, #4]
    9eb2:	2101      	movs	r1, #1
    9eb4:	f800 1f86 	strb.w	r1, [r0, #134]!
    9eb8:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    9ebc:	8685      	strh	r5, [r0, #52]	; 0x34
    9ebe:	6860      	ldr	r0, [r4, #4]
    9ec0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9ec4:	2901      	cmp	r1, #1
    9ec6:	d005      	beq.n	9ed4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    9ec8:	e00a      	b.n	9ee0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    9eca:	f240 314e 	movw	r1, #846	; 0x34e
    9ece:	2036      	movs	r0, #54	; 0x36
    9ed0:	f7f9 ff22 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ed4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9ed8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9edc:	f000 fb50 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ee0:	6860      	ldr	r0, [r4, #4]
    9ee2:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9ee6:	b149      	cbz	r1, 9efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9ee8:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    9eec:	f000 fb48 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ef0:	6860      	ldr	r0, [r4, #4]
    9ef2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9ef6:	b909      	cbnz	r1, 9efc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    9ef8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    9efc:	2000      	movs	r0, #0
    9efe:	bd70      	pop	{r4, r5, r6, pc}
    9f00:	20000104 	.word	0x20000104
    9f04:	b510      	push	{r4, lr}
    9f06:	4c0a      	ldr	r4, [pc, #40]	; (9f30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    9f08:	2300      	movs	r3, #0
    9f0a:	4619      	mov	r1, r3
    9f0c:	6860      	ldr	r0, [r4, #4]
    9f0e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f12:	3078      	adds	r0, #120	; 0x78
    9f14:	f003 fd4c 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f18:	b120      	cbz	r0, 9f24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    9f1a:	6861      	ldr	r1, [r4, #4]
    9f1c:	200c      	movs	r0, #12
    9f1e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9f22:	bd10      	pop	{r4, pc}
    9f24:	f240 51fa 	movw	r1, #1530	; 0x5fa
    9f28:	2036      	movs	r0, #54	; 0x36
    9f2a:	f7f9 fef5 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f2e:	0000      	.short	0x0000
    9f30:	20000104 	.word	0x20000104
    9f34:	b510      	push	{r4, lr}
    9f36:	4c0a      	ldr	r4, [pc, #40]	; (9f60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    9f38:	2300      	movs	r3, #0
    9f3a:	4619      	mov	r1, r3
    9f3c:	6860      	ldr	r0, [r4, #4]
    9f3e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f42:	3078      	adds	r0, #120	; 0x78
    9f44:	f003 fd34 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f48:	b120      	cbz	r0, 9f54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    9f4a:	6861      	ldr	r1, [r4, #4]
    9f4c:	200d      	movs	r0, #13
    9f4e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9f52:	bd10      	pop	{r4, pc}
    9f54:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    9f58:	2036      	movs	r0, #54	; 0x36
    9f5a:	f7f9 fedd 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f5e:	0000      	.short	0x0000
    9f60:	20000104 	.word	0x20000104
    9f64:	b510      	push	{r4, lr}
    9f66:	4c0d      	ldr	r4, [pc, #52]	; (9f9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    9f68:	2300      	movs	r3, #0
    9f6a:	4619      	mov	r1, r3
    9f6c:	6860      	ldr	r0, [r4, #4]
    9f6e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f72:	3078      	adds	r0, #120	; 0x78
    9f74:	f003 fd1c 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f78:	b918      	cbnz	r0, 9f82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    9f7a:	6860      	ldr	r0, [r4, #4]
    9f7c:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    9f80:	b138      	cbz	r0, 9f92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    9f82:	6860      	ldr	r0, [r4, #4]
    9f84:	2101      	movs	r1, #1
    9f86:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    9f8a:	2113      	movs	r1, #19
    9f8c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9f90:	bd10      	pop	{r4, pc}
    9f92:	f240 6115 	movw	r1, #1557	; 0x615
    9f96:	2036      	movs	r0, #54	; 0x36
    9f98:	f7f9 febe 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f9c:	20000104 	.word	0x20000104
    9fa0:	b510      	push	{r4, lr}
    9fa2:	4c0a      	ldr	r4, [pc, #40]	; (9fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    9fa4:	2300      	movs	r3, #0
    9fa6:	4619      	mov	r1, r3
    9fa8:	6860      	ldr	r0, [r4, #4]
    9faa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fae:	3078      	adds	r0, #120	; 0x78
    9fb0:	f003 fcfe 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fb4:	b120      	cbz	r0, 9fc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    9fb6:	6861      	ldr	r1, [r4, #4]
    9fb8:	2004      	movs	r0, #4
    9fba:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9fbe:	bd10      	pop	{r4, pc}
    9fc0:	f240 51f4 	movw	r1, #1524	; 0x5f4
    9fc4:	2036      	movs	r0, #54	; 0x36
    9fc6:	f7f9 fea7 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9fca:	0000      	.short	0x0000
    9fcc:	20000104 	.word	0x20000104
    9fd0:	b510      	push	{r4, lr}
    9fd2:	4c0a      	ldr	r4, [pc, #40]	; (9ffc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    9fd4:	2300      	movs	r3, #0
    9fd6:	4619      	mov	r1, r3
    9fd8:	6860      	ldr	r0, [r4, #4]
    9fda:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fde:	3078      	adds	r0, #120	; 0x78
    9fe0:	f003 fce6 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fe4:	b120      	cbz	r0, 9ff0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    9fe6:	6861      	ldr	r1, [r4, #4]
    9fe8:	201c      	movs	r0, #28
    9fea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9fee:	bd10      	pop	{r4, pc}
    9ff0:	f240 614c 	movw	r1, #1612	; 0x64c
    9ff4:	2036      	movs	r0, #54	; 0x36
    9ff6:	f7f9 fe8f 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ffa:	0000      	.short	0x0000
    9ffc:	20000104 	.word	0x20000104
    a000:	b510      	push	{r4, lr}
    a002:	4c0a      	ldr	r4, [pc, #40]	; (a02c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    a004:	2300      	movs	r3, #0
    a006:	4619      	mov	r1, r3
    a008:	6860      	ldr	r0, [r4, #4]
    a00a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a00e:	3078      	adds	r0, #120	; 0x78
    a010:	f003 fcce 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a014:	b120      	cbz	r0, a020 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    a016:	6861      	ldr	r1, [r4, #4]
    a018:	2000      	movs	r0, #0
    a01a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a01e:	bd10      	pop	{r4, pc}
    a020:	f240 6153 	movw	r1, #1619	; 0x653
    a024:	2036      	movs	r0, #54	; 0x36
    a026:	f7f9 fe77 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a02a:	0000      	.short	0x0000
    a02c:	20000104 	.word	0x20000104
    a030:	b510      	push	{r4, lr}
    a032:	4c0a      	ldr	r4, [pc, #40]	; (a05c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    a034:	2300      	movs	r3, #0
    a036:	4619      	mov	r1, r3
    a038:	6860      	ldr	r0, [r4, #4]
    a03a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a03e:	3078      	adds	r0, #120	; 0x78
    a040:	f003 fcb6 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a044:	b120      	cbz	r0, a050 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    a046:	6861      	ldr	r1, [r4, #4]
    a048:	2005      	movs	r0, #5
    a04a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a04e:	bd10      	pop	{r4, pc}
    a050:	f240 613f 	movw	r1, #1599	; 0x63f
    a054:	2036      	movs	r0, #54	; 0x36
    a056:	f7f9 fe5f 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a05a:	0000      	.short	0x0000
    a05c:	20000104 	.word	0x20000104
    a060:	4902      	ldr	r1, [pc, #8]	; (a06c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    a062:	2000      	movs	r0, #0
    a064:	6849      	ldr	r1, [r1, #4]
    a066:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a06a:	4770      	bx	lr
    a06c:	20000104 	.word	0x20000104
    a070:	b510      	push	{r4, lr}
    a072:	4c0b      	ldr	r4, [pc, #44]	; (a0a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    a074:	2300      	movs	r3, #0
    a076:	4619      	mov	r1, r3
    a078:	6860      	ldr	r0, [r4, #4]
    a07a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a07e:	3078      	adds	r0, #120	; 0x78
    a080:	f003 fc96 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a084:	b138      	cbz	r0, a096 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    a086:	6860      	ldr	r0, [r4, #4]
    a088:	2101      	movs	r1, #1
    a08a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a08e:	210f      	movs	r1, #15
    a090:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a094:	bd10      	pop	{r4, pc}
    a096:	f240 6106 	movw	r1, #1542	; 0x606
    a09a:	2036      	movs	r0, #54	; 0x36
    a09c:	f7f9 fe3c 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0a0:	20000104 	.word	0x20000104
    a0a4:	4809      	ldr	r0, [pc, #36]	; (a0cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    a0a6:	b510      	push	{r4, lr}
    a0a8:	6840      	ldr	r0, [r0, #4]
    a0aa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a0ae:	2912      	cmp	r1, #18
    a0b0:	d004      	beq.n	a0bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    a0b2:	f240 610e 	movw	r1, #1550	; 0x60e
    a0b6:	2036      	movs	r0, #54	; 0x36
    a0b8:	f7f9 fe2e 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0bc:	2101      	movs	r1, #1
    a0be:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a0c2:	2111      	movs	r1, #17
    a0c4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a0c8:	bd10      	pop	{r4, pc}
    a0ca:	0000      	.short	0x0000
    a0cc:	20000104 	.word	0x20000104
    a0d0:	b510      	push	{r4, lr}
    a0d2:	4c0a      	ldr	r4, [pc, #40]	; (a0fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    a0d4:	2300      	movs	r3, #0
    a0d6:	4619      	mov	r1, r3
    a0d8:	6860      	ldr	r0, [r4, #4]
    a0da:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a0de:	3078      	adds	r0, #120	; 0x78
    a0e0:	f003 fc66 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0e4:	b120      	cbz	r0, a0f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    a0e6:	6861      	ldr	r1, [r4, #4]
    a0e8:	201f      	movs	r0, #31
    a0ea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a0ee:	bd10      	pop	{r4, pc}
    a0f0:	f240 615c 	movw	r1, #1628	; 0x65c
    a0f4:	2036      	movs	r0, #54	; 0x36
    a0f6:	f7f9 fe0f 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0fa:	0000      	.short	0x0000
    a0fc:	20000104 	.word	0x20000104
    a100:	b570      	push	{r4, r5, r6, lr}
    a102:	4c1d      	ldr	r4, [pc, #116]	; (a178 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    a104:	6860      	ldr	r0, [r4, #4]
    a106:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a10a:	b911      	cbnz	r1, a112 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    a10c:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a110:	b179      	cbz	r1, a132 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    a112:	2100      	movs	r1, #0
    a114:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a118:	2224      	movs	r2, #36	; 0x24
    a11a:	2500      	movs	r5, #0
    a11c:	2b21      	cmp	r3, #33	; 0x21
    a11e:	d00a      	beq.n	a136 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    a120:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    a124:	2b23      	cmp	r3, #35	; 0x23
    a126:	d01a      	beq.n	a15e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    a128:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    a12c:	2036      	movs	r0, #54	; 0x36
    a12e:	f7f9 fdf3 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a132:	2101      	movs	r1, #1
    a134:	e7ee      	b.n	a114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    a136:	b161      	cbz	r1, a152 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    a138:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    a13c:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    a140:	2801      	cmp	r0, #1
    a142:	d102      	bne.n	a14a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    a144:	2000      	movs	r0, #0
    a146:	f7ff fac7 	bl	96d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a14a:	6860      	ldr	r0, [r4, #4]
    a14c:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    a150:	e001      	b.n	a156 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    a152:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    a156:	6860      	ldr	r0, [r4, #4]
    a158:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a15c:	bd70      	pop	{r4, r5, r6, pc}
    a15e:	b129      	cbz	r1, a16c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    a160:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a164:	2000      	movs	r0, #0
    a166:	f7ff fab7 	bl	96d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a16a:	e001      	b.n	a170 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    a16c:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    a170:	6860      	ldr	r0, [r4, #4]
    a172:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a176:	bd70      	pop	{r4, r5, r6, pc}
    a178:	20000104 	.word	0x20000104
    a17c:	4903      	ldr	r1, [pc, #12]	; (a18c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    a17e:	2000      	movs	r0, #0
    a180:	6849      	ldr	r1, [r1, #4]
    a182:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a186:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a18a:	4770      	bx	lr
    a18c:	20000104 	.word	0x20000104
    a190:	4807      	ldr	r0, [pc, #28]	; (a1b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    a192:	b510      	push	{r4, lr}
    a194:	6840      	ldr	r0, [r0, #4]
    a196:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a19a:	2918      	cmp	r1, #24
    a19c:	d004      	beq.n	a1a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    a19e:	f240 611e 	movw	r1, #1566	; 0x61e
    a1a2:	2036      	movs	r0, #54	; 0x36
    a1a4:	f7f9 fdb8 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1a8:	211a      	movs	r1, #26
    a1aa:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a1ae:	bd10      	pop	{r4, pc}
    a1b0:	20000104 	.word	0x20000104
    a1b4:	b510      	push	{r4, lr}
    a1b6:	4c0a      	ldr	r4, [pc, #40]	; (a1e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    a1b8:	2300      	movs	r3, #0
    a1ba:	2101      	movs	r1, #1
    a1bc:	6860      	ldr	r0, [r4, #4]
    a1be:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a1c2:	3078      	adds	r0, #120	; 0x78
    a1c4:	f003 fbf4 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1c8:	2800      	cmp	r0, #0
    a1ca:	d108      	bne.n	a1de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    a1cc:	6860      	ldr	r0, [r4, #4]
    a1ce:	2108      	movs	r1, #8
    a1d0:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a1d4:	2100      	movs	r1, #0
    a1d6:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a1da:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a1de:	bd10      	pop	{r4, pc}
    a1e0:	20000104 	.word	0x20000104
    a1e4:	b570      	push	{r4, r5, r6, lr}
    a1e6:	4c0e      	ldr	r4, [pc, #56]	; (a220 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    a1e8:	2300      	movs	r3, #0
    a1ea:	4619      	mov	r1, r3
    a1ec:	6860      	ldr	r0, [r4, #4]
    a1ee:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a1f2:	3078      	adds	r0, #120	; 0x78
    a1f4:	f003 fbdc 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1f8:	2500      	movs	r5, #0
    a1fa:	b110      	cbz	r0, a202 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    a1fc:	6860      	ldr	r0, [r4, #4]
    a1fe:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a202:	6860      	ldr	r0, [r4, #4]
    a204:	2300      	movs	r3, #0
    a206:	4619      	mov	r1, r3
    a208:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a20c:	3078      	adds	r0, #120	; 0x78
    a20e:	f003 fbcf 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a212:	2800      	cmp	r0, #0
    a214:	d002      	beq.n	a21c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    a216:	6860      	ldr	r0, [r4, #4]
    a218:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a21c:	bd70      	pop	{r4, r5, r6, pc}
    a21e:	0000      	.short	0x0000
    a220:	20000104 	.word	0x20000104
    a224:	b570      	push	{r4, r5, r6, lr}
    a226:	4d16      	ldr	r5, [pc, #88]	; (a280 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    a228:	f04f 0400 	mov.w	r4, #0
    a22c:	6868      	ldr	r0, [r5, #4]
    a22e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a232:	0789      	lsls	r1, r1, #30
    a234:	d411      	bmi.n	a25a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    a236:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a23a:	2300      	movs	r3, #0
    a23c:	4619      	mov	r1, r3
    a23e:	3078      	adds	r0, #120	; 0x78
    a240:	f003 fbb6 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a244:	b120      	cbz	r0, a250 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    a246:	6869      	ldr	r1, [r5, #4]
    a248:	2001      	movs	r0, #1
    a24a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a24e:	e008      	b.n	a262 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    a250:	f240 612b 	movw	r1, #1579	; 0x62b
    a254:	2036      	movs	r0, #54	; 0x36
    a256:	f7f9 fd5f 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a25a:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    a25e:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    a262:	6868      	ldr	r0, [r5, #4]
    a264:	2300      	movs	r3, #0
    a266:	4619      	mov	r1, r3
    a268:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a26c:	3078      	adds	r0, #120	; 0x78
    a26e:	f003 fb9f 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a272:	2800      	cmp	r0, #0
    a274:	d002      	beq.n	a27c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    a276:	6868      	ldr	r0, [r5, #4]
    a278:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a27c:	bd70      	pop	{r4, r5, r6, pc}
    a27e:	0000      	.short	0x0000
    a280:	20000104 	.word	0x20000104
    a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a286:	4d4c      	ldr	r5, [pc, #304]	; (a3b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    a288:	4607      	mov	r7, r0
    a28a:	460e      	mov	r6, r1
    a28c:	6868      	ldr	r0, [r5, #4]
    a28e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    a292:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    a296:	f88d 0000 	strb.w	r0, [sp]
    a29a:	9800      	ldr	r0, [sp, #0]
    a29c:	9000      	str	r0, [sp, #0]
    a29e:	f89d 0000 	ldrb.w	r0, [sp]
    a2a2:	b930      	cbnz	r0, a2b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    a2a4:	7c22      	ldrb	r2, [r4, #16]
    a2a6:	2300      	movs	r3, #0
    a2a8:	2101      	movs	r1, #1
    a2aa:	4620      	mov	r0, r4
    a2ac:	f003 fb80 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2b0:	b110      	cbz	r0, a2b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    a2b2:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    a2b4:	1c40      	adds	r0, r0, #1
    a2b6:	8760      	strh	r0, [r4, #58]	; 0x3a
    a2b8:	2001      	movs	r0, #1
    a2ba:	213d      	movs	r1, #61	; 0x3d
    a2bc:	bbf7      	cbnz	r7, a33c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    a2be:	782a      	ldrb	r2, [r5, #0]
    a2c0:	2a02      	cmp	r2, #2
    a2c2:	d006      	beq.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    a2c4:	2a01      	cmp	r2, #1
    a2c6:	d006      	beq.n	a2d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    a2c8:	b1c6      	cbz	r6, a2fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    a2ca:	06f2      	lsls	r2, r6, #27
    a2cc:	d507      	bpl.n	a2de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    a2ce:	211e      	movs	r1, #30
    a2d0:	e043      	b.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2d2:	2116      	movs	r1, #22
    a2d4:	e041      	b.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2d6:	6869      	ldr	r1, [r5, #4]
    a2d8:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    a2dc:	e03d      	b.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2de:	0732      	lsls	r2, r6, #28
    a2e0:	d43b      	bmi.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2e2:	07b1      	lsls	r1, r6, #30
    a2e4:	d001      	beq.n	a2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    a2e6:	212a      	movs	r1, #42	; 0x2a
    a2e8:	e037      	b.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2ea:	06b1      	lsls	r1, r6, #26
    a2ec:	d404      	bmi.n	a2f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    a2ee:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    a2f2:	2036      	movs	r0, #54	; 0x36
    a2f4:	f7f9 fd10 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2f8:	2123      	movs	r1, #35	; 0x23
    a2fa:	e02e      	b.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a2fc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    a300:	b129      	cbz	r1, a30e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    a302:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    a304:	1c4a      	adds	r2, r1, #1
    a306:	87a2      	strh	r2, [r4, #60]	; 0x3c
    a308:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a30a:	4291      	cmp	r1, r2
    a30c:	d21d      	bcs.n	a34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a30e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    a312:	b139      	cbz	r1, a324 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    a314:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    a318:	1c4a      	adds	r2, r1, #1
    a31a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    a31e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a320:	4291      	cmp	r1, r2
    a322:	d212      	bcs.n	a34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a324:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    a326:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    a328:	428a      	cmp	r2, r1
    a32a:	d30b      	bcc.n	a344 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    a32c:	686b      	ldr	r3, [r5, #4]
    a32e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    a332:	f88d 3000 	strb.w	r3, [sp]
    a336:	9b00      	ldr	r3, [sp, #0]
    a338:	9300      	str	r3, [sp, #0]
    a33a:	e000      	b.n	a33e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    a33c:	e00d      	b.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a33e:	f89d 3000 	ldrb.w	r3, [sp]
    a342:	b913      	cbnz	r3, a34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a344:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    a346:	429a      	cmp	r2, r3
    a348:	d301      	bcc.n	a34e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    a34a:	2122      	movs	r1, #34	; 0x22
    a34c:	e005      	b.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a34e:	7c62      	ldrb	r2, [r4, #17]
    a350:	b1f2      	cbz	r2, a390 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    a352:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    a354:	428a      	cmp	r2, r1
    a356:	d304      	bcc.n	a362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a358:	2108      	movs	r1, #8
    a35a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    a35e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    a362:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a366:	f88d 0000 	strb.w	r0, [sp]
    a36a:	9800      	ldr	r0, [sp, #0]
    a36c:	9000      	str	r0, [sp, #0]
    a36e:	f89d 0000 	ldrb.w	r0, [sp]
    a372:	b1d8      	cbz	r0, a3ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    a374:	2000      	movs	r0, #0
    a376:	7360      	strb	r0, [r4, #13]
    a378:	73a0      	strb	r0, [r4, #14]
    a37a:	7460      	strb	r0, [r4, #17]
    a37c:	2102      	movs	r1, #2
    a37e:	6868      	ldr	r0, [r5, #4]
    a380:	f7fd fb8e 	bl	7aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a384:	6868      	ldr	r0, [r5, #4]
    a386:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    a38a:	2901      	cmp	r1, #1
    a38c:	d005      	beq.n	a39a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    a38e:	e009      	b.n	a3a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    a390:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    a392:	2906      	cmp	r1, #6
    a394:	d3e5      	bcc.n	a362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a396:	213e      	movs	r1, #62	; 0x3e
    a398:	e7df      	b.n	a35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a39a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    a39e:	7801      	ldrb	r1, [r0, #0]
    a3a0:	1e49      	subs	r1, r1, #1
    a3a2:	7001      	strb	r1, [r0, #0]
    a3a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a3a8:	f000 b8ea 	b.w	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a3ac:	6868      	ldr	r0, [r5, #4]
    a3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a3b2:	2100      	movs	r1, #0
    a3b4:	f7fd bb74 	b.w	7aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a3b8:	20000104 	.word	0x20000104
    a3bc:	4804      	ldr	r0, [pc, #16]	; (a3d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    a3be:	b510      	push	{r4, lr}
    a3c0:	6840      	ldr	r0, [r0, #4]
    a3c2:	8800      	ldrh	r0, [r0, #0]
    a3c4:	f7fa f8a6 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3cc:	f003 b83a 	b.w	d444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a3d0:	20000104 	.word	0x20000104
    a3d4:	4a19      	ldr	r2, [pc, #100]	; (a43c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    a3d6:	2901      	cmp	r1, #1
    a3d8:	6852      	ldr	r2, [r2, #4]
    a3da:	d010      	beq.n	a3fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    a3dc:	2100      	movs	r1, #0
    a3de:	b1c8      	cbz	r0, a414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    a3e0:	2801      	cmp	r0, #1
    a3e2:	d022      	beq.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    a3e4:	2803      	cmp	r0, #3
    a3e6:	d109      	bne.n	a3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3e8:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a3ec:	2813      	cmp	r0, #19
    a3ee:	d005      	beq.n	a3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3f0:	2816      	cmp	r0, #22
    a3f2:	d003      	beq.n	a3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3f4:	2818      	cmp	r0, #24
    a3f6:	d001      	beq.n	a3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a3f8:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    a3fc:	4770      	bx	lr
    a3fe:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    a402:	2801      	cmp	r0, #1
    a404:	d0fa      	beq.n	a3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a406:	bf00      	nop
    a408:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    a40c:	7801      	ldrb	r1, [r0, #0]
    a40e:	1e49      	subs	r1, r1, #1
    a410:	7001      	strb	r1, [r0, #0]
    a412:	4770      	bx	lr
    a414:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a418:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    a41c:	1ac0      	subs	r0, r0, r3
    a41e:	b200      	sxth	r0, r0
    a420:	2800      	cmp	r0, #0
    a422:	dbf6      	blt.n	a412 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    a424:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    a428:	4770      	bx	lr
    a42a:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a42e:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    a432:	1a40      	subs	r0, r0, r1
    a434:	b200      	sxth	r0, r0
    a436:	2800      	cmp	r0, #0
    a438:	dae6      	bge.n	a408 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    a43a:	4770      	bx	lr
    a43c:	20000104 	.word	0x20000104

0000a440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a440:	b510      	push	{r4, lr}
    a442:	6941      	ldr	r1, [r0, #20]
    a444:	b119      	cbz	r1, a44e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a446:	6842      	ldr	r2, [r0, #4]
    a448:	684b      	ldr	r3, [r1, #4]
    a44a:	429a      	cmp	r2, r3
    a44c:	d203      	bcs.n	a456 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a44e:	21c1      	movs	r1, #193	; 0xc1
    a450:	2037      	movs	r0, #55	; 0x37
    a452:	f7f9 fc61 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a456:	6902      	ldr	r2, [r0, #16]
    a458:	610a      	str	r2, [r1, #16]
    a45a:	68c3      	ldr	r3, [r0, #12]
    a45c:	60cb      	str	r3, [r1, #12]
    a45e:	b10a      	cbz	r2, a464 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    a460:	60d1      	str	r1, [r2, #12]
    a462:	e001      	b.n	a468 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    a464:	4a06      	ldr	r2, [pc, #24]	; (a480 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    a466:	6011      	str	r1, [r2, #0]
    a468:	68ca      	ldr	r2, [r1, #12]
    a46a:	b132      	cbz	r2, a47a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    a46c:	6111      	str	r1, [r2, #16]
    a46e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    a472:	4410      	add	r0, r2
    a474:	684a      	ldr	r2, [r1, #4]
    a476:	1a80      	subs	r0, r0, r2
    a478:	e000      	b.n	a47c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    a47a:	2000      	movs	r0, #0
    a47c:	6088      	str	r0, [r1, #8]
    a47e:	bd10      	pop	{r4, pc}
    a480:	200001dc 	.word	0x200001dc

0000a484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a484:	b510      	push	{r4, lr}
    a486:	2200      	movs	r2, #0
    a488:	6101      	str	r1, [r0, #16]
    a48a:	b189      	cbz	r1, a4b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    a48c:	68cb      	ldr	r3, [r1, #12]
    a48e:	60c8      	str	r0, [r1, #12]
    a490:	60c3      	str	r3, [r0, #12]
    a492:	b103      	cbz	r3, a496 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a494:	6118      	str	r0, [r3, #16]
    a496:	6901      	ldr	r1, [r0, #16]
    a498:	6082      	str	r2, [r0, #8]
    a49a:	2900      	cmp	r1, #0
    a49c:	d00f      	beq.n	a4be <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a49e:	688b      	ldr	r3, [r1, #8]
    a4a0:	b163      	cbz	r3, a4bc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    a4a2:	6844      	ldr	r4, [r0, #4]
    a4a4:	42a3      	cmp	r3, r4
    a4a6:	d207      	bcs.n	a4b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    a4a8:	212a      	movs	r1, #42	; 0x2a
    a4aa:	2037      	movs	r0, #55	; 0x37
    a4ac:	f7f9 fc34 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4b0:	4903      	ldr	r1, [pc, #12]	; (a4c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    a4b2:	60c2      	str	r2, [r0, #12]
    a4b4:	6008      	str	r0, [r1, #0]
    a4b6:	e7ee      	b.n	a496 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a4b8:	1b1b      	subs	r3, r3, r4
    a4ba:	6083      	str	r3, [r0, #8]
    a4bc:	608a      	str	r2, [r1, #8]
    a4be:	bd10      	pop	{r4, pc}
    a4c0:	200001dc 	.word	0x200001dc

0000a4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a4c4:	6901      	ldr	r1, [r0, #16]
    a4c6:	b149      	cbz	r1, a4dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a4c8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a4cc:	441a      	add	r2, r3
    a4ce:	688b      	ldr	r3, [r1, #8]
    a4d0:	441a      	add	r2, r3
    a4d2:	608a      	str	r2, [r1, #8]
    a4d4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    a4d8:	60d1      	str	r1, [r2, #12]
    a4da:	e002      	b.n	a4e2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a4dc:	4a06      	ldr	r2, [pc, #24]	; (a4f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a4de:	68c1      	ldr	r1, [r0, #12]
    a4e0:	6011      	str	r1, [r2, #0]
    a4e2:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    a4e6:	b109      	cbz	r1, a4ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    a4e8:	6108      	str	r0, [r1, #16]
    a4ea:	4770      	bx	lr
    a4ec:	2800      	cmp	r0, #0
    a4ee:	d0fc      	beq.n	a4ea <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    a4f0:	2100      	movs	r1, #0
    a4f2:	6081      	str	r1, [r0, #8]
    a4f4:	4770      	bx	lr
    a4f6:	0000      	.short	0x0000
    a4f8:	200001dc 	.word	0x200001dc

0000a4fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a4fc:	b510      	push	{r4, lr}
    a4fe:	4604      	mov	r4, r0
    a500:	490a      	ldr	r1, [pc, #40]	; (a52c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a502:	2000      	movs	r0, #0
    a504:	4602      	mov	r2, r0
    a506:	6809      	ldr	r1, [r1, #0]
    a508:	1e43      	subs	r3, r0, #1
    a50a:	e008      	b.n	a51e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    a50c:	688a      	ldr	r2, [r1, #8]
    a50e:	42a2      	cmp	r2, r4
    a510:	d303      	bcc.n	a51a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a512:	429a      	cmp	r2, r3
    a514:	d201      	bcs.n	a51a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a516:	4613      	mov	r3, r2
    a518:	4608      	mov	r0, r1
    a51a:	460a      	mov	r2, r1
    a51c:	68c9      	ldr	r1, [r1, #12]
    a51e:	2900      	cmp	r1, #0
    a520:	d1f4      	bne.n	a50c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    a522:	2800      	cmp	r0, #0
    a524:	d100      	bne.n	a528 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    a526:	4610      	mov	r0, r2
    a528:	bd10      	pop	{r4, pc}
    a52a:	0000      	.short	0x0000
    a52c:	200001dc 	.word	0x200001dc

0000a530 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    a530:	4801      	ldr	r0, [pc, #4]	; (a538 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    a532:	6800      	ldr	r0, [r0, #0]
    a534:	4770      	bx	lr
    a536:	0000      	.short	0x0000
    a538:	200001dc 	.word	0x200001dc

0000a53c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a53c:	4804      	ldr	r0, [pc, #16]	; (a550 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    a53e:	6801      	ldr	r1, [r0, #0]
    a540:	2000      	movs	r0, #0
    a542:	e001      	b.n	a548 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a544:	4608      	mov	r0, r1
    a546:	68c9      	ldr	r1, [r1, #12]
    a548:	2900      	cmp	r1, #0
    a54a:	d1fb      	bne.n	a544 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    a54c:	4770      	bx	lr
    a54e:	0000      	.short	0x0000
    a550:	200001dc 	.word	0x200001dc

0000a554 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a554:	4801      	ldr	r0, [pc, #4]	; (a55c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    a556:	2100      	movs	r1, #0
    a558:	6001      	str	r1, [r0, #0]
    a55a:	4770      	bx	lr
    a55c:	200001dc 	.word	0x200001dc

0000a560 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a560:	4903      	ldr	r1, [pc, #12]	; (a570 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    a562:	2000      	movs	r0, #0
    a564:	6809      	ldr	r1, [r1, #0]
    a566:	2900      	cmp	r1, #0
    a568:	d000      	beq.n	a56c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    a56a:	200c      	movs	r0, #12
    a56c:	4770      	bx	lr
    a56e:	0000      	.short	0x0000
    a570:	200001dc 	.word	0x200001dc

0000a574 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    a574:	4901      	ldr	r1, [pc, #4]	; (a57c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    a576:	7008      	strb	r0, [r1, #0]
    a578:	4770      	bx	lr
    a57a:	0000      	.short	0x0000
    a57c:	20000296 	.word	0x20000296

0000a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    a580:	4801      	ldr	r0, [pc, #4]	; (a588 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    a582:	7800      	ldrb	r0, [r0, #0]
    a584:	f7f9 b9bc 	b.w	3900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a588:	20000296 	.word	0x20000296

0000a58c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    a58c:	b500      	push	{lr}
    a58e:	7941      	ldrb	r1, [r0, #5]
    a590:	b095      	sub	sp, #84	; 0x54
    a592:	b141      	cbz	r1, a5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a594:	2901      	cmp	r1, #1
    a596:	d006      	beq.n	a5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a598:	2902      	cmp	r1, #2
    a59a:	d004      	beq.n	a5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a59c:	2903      	cmp	r1, #3
    a59e:	d002      	beq.n	a5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a5a0:	2012      	movs	r0, #18
    a5a2:	b015      	add	sp, #84	; 0x54
    a5a4:	bd00      	pop	{pc}
    a5a6:	7901      	ldrb	r1, [r0, #4]
    a5a8:	f88d 1000 	strb.w	r1, [sp]
    a5ac:	7b01      	ldrb	r1, [r0, #12]
    a5ae:	f88d 1001 	strb.w	r1, [sp, #1]
    a5b2:	7942      	ldrb	r2, [r0, #5]
    a5b4:	2100      	movs	r1, #0
    a5b6:	2301      	movs	r3, #1
    a5b8:	b3e2      	cbz	r2, a634 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    a5ba:	2a02      	cmp	r2, #2
    a5bc:	d03b      	beq.n	a636 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a5be:	f88d 3002 	strb.w	r3, [sp, #2]
    a5c2:	bf00      	nop
    a5c4:	f8d0 2006 	ldr.w	r2, [r0, #6]
    a5c8:	f8cd 2003 	str.w	r2, [sp, #3]
    a5cc:	8942      	ldrh	r2, [r0, #10]
    a5ce:	f8ad 2007 	strh.w	r2, [sp, #7]
    a5d2:	f88d 3009 	strb.w	r3, [sp, #9]
    a5d6:	f830 2b01 	ldrh.w	r2, [r0], #1
    a5da:	f240 2371 	movw	r3, #625	; 0x271
    a5de:	435a      	muls	r2, r3
    a5e0:	9203      	str	r2, [sp, #12]
    a5e2:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    a5e6:	435a      	muls	r2, r3
    a5e8:	9206      	str	r2, [sp, #24]
    a5ea:	8982      	ldrh	r2, [r0, #12]
    a5ec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    a5f0:	89c2      	ldrh	r2, [r0, #14]
    a5f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a5f6:	8a02      	ldrh	r2, [r0, #16]
    a5f8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    a5fc:	8a42      	ldrh	r2, [r0, #18]
    a5fe:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    a602:	8a82      	ldrh	r2, [r0, #20]
    a604:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    a608:	8ac0      	ldrh	r0, [r0, #22]
    a60a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    a60e:	2007      	movs	r0, #7
    a610:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    a614:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    a618:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    a61c:	9806      	ldr	r0, [sp, #24]
    a61e:	f000 fbd7 	bl	add0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    a622:	b158      	cbz	r0, a63c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a624:	9803      	ldr	r0, [sp, #12]
    a626:	f000 fbc7 	bl	adb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    a62a:	b138      	cbz	r0, a63c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a62c:	4668      	mov	r0, sp
    a62e:	f000 f8cb 	bl	a7c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    a632:	e7b6      	b.n	a5a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    a634:	e7ff      	b.n	a636 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a636:	f88d 1002 	strb.w	r1, [sp, #2]
    a63a:	e7c3      	b.n	a5c4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    a63c:	2030      	movs	r0, #48	; 0x30
    a63e:	e7b0      	b.n	a5a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000a640 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    a640:	b538      	push	{r3, r4, r5, lr}
    a642:	4c14      	ldr	r4, [pc, #80]	; (a694 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x54>)
    a644:	7860      	ldrb	r0, [r4, #1]
    a646:	b970      	cbnz	r0, a666 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    a648:	f7fd f9e6 	bl	7a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    a64c:	2805      	cmp	r0, #5
    a64e:	d005      	beq.n	a65c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    a650:	f7fb ff36 	bl	64c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a654:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a658:	39ff      	subs	r1, #255	; 0xff
    a65a:	d004      	beq.n	a666 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    a65c:	4668      	mov	r0, sp
    a65e:	f7fd f93b 	bl	78d8 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>
    a662:	b110      	cbz	r0, a66a <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    a664:	e014      	b.n	a690 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x50>
    a666:	200c      	movs	r0, #12
    a668:	bd38      	pop	{r3, r4, r5, pc}
    a66a:	9800      	ldr	r0, [sp, #0]
    a66c:	8800      	ldrh	r0, [r0, #0]
    a66e:	f003 f85b 	bl	d728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    a672:	9800      	ldr	r0, [sp, #0]
    a674:	2100      	movs	r1, #0
    a676:	8800      	ldrh	r0, [r0, #0]
    a678:	f7f9 fdcc 	bl	4214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a67c:	b120      	cbz	r0, a688 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    a67e:	f640 7172 	movw	r1, #3954	; 0xf72
    a682:	2039      	movs	r0, #57	; 0x39
    a684:	f7f9 fb48 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a688:	2001      	movs	r0, #1
    a68a:	7060      	strb	r0, [r4, #1]
    a68c:	f7ff ff78 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a690:	2000      	movs	r0, #0
    a692:	bd38      	pop	{r3, r4, r5, pc}
    a694:	20000f78 	.word	0x20000f78

0000a698 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a698:	4903      	ldr	r1, [pc, #12]	; (a6a8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a69a:	888a      	ldrh	r2, [r1, #4]
    a69c:	8002      	strh	r2, [r0, #0]
    a69e:	7889      	ldrb	r1, [r1, #2]
    a6a0:	7081      	strb	r1, [r0, #2]
    a6a2:	2000      	movs	r0, #0
    a6a4:	4770      	bx	lr
    a6a6:	0000      	.short	0x0000
    a6a8:	20000f78 	.word	0x20000f78

0000a6ac <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a6ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a6ae:	460c      	mov	r4, r1
    a6b0:	4605      	mov	r5, r0
    a6b2:	8800      	ldrh	r0, [r0, #0]
    a6b4:	4669      	mov	r1, sp
    a6b6:	f003 f952 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a6ba:	0001      	movs	r1, r0
    a6bc:	f04f 0000 	mov.w	r0, #0
    a6c0:	d005      	beq.n	a6ce <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    a6c2:	f8c4 0002 	str.w	r0, [r4, #2]
    a6c6:	71a0      	strb	r0, [r4, #6]
    a6c8:	8020      	strh	r0, [r4, #0]
    a6ca:	2002      	movs	r0, #2
    a6cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a6ce:	9901      	ldr	r1, [sp, #4]
    a6d0:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    a6d4:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    a6d8:	f8d1 2016 	ldr.w	r2, [r1, #22]
    a6dc:	f8c4 2002 	str.w	r2, [r4, #2]
    a6e0:	7e8a      	ldrb	r2, [r1, #26]
    a6e2:	71a2      	strb	r2, [r4, #6]
    a6e4:	882a      	ldrh	r2, [r5, #0]
    a6e6:	8022      	strh	r2, [r4, #0]
    a6e8:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    a6ec:	f88d 2008 	strb.w	r2, [sp, #8]
    a6f0:	9a02      	ldr	r2, [sp, #8]
    a6f2:	9202      	str	r2, [sp, #8]
    a6f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a6f8:	2a00      	cmp	r2, #0
    a6fa:	d1eb      	bne.n	a6d4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    a6fc:	2000      	movs	r0, #0
    a6fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a700:	b51c      	push	{r2, r3, r4, lr}
    a702:	8800      	ldrh	r0, [r0, #0]
    a704:	4669      	mov	r1, sp
    a706:	f003 f92a 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a70a:	2800      	cmp	r0, #0
    a70c:	d106      	bne.n	a71c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    a70e:	f89d 0000 	ldrb.w	r0, [sp]
    a712:	b120      	cbz	r0, a71e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    a714:	480b      	ldr	r0, [pc, #44]	; (a744 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    a716:	7800      	ldrb	r0, [r0, #0]
    a718:	b190      	cbz	r0, a740 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    a71a:	2002      	movs	r0, #2
    a71c:	bd1c      	pop	{r2, r3, r4, pc}
    a71e:	9801      	ldr	r0, [sp, #4]
    a720:	f004 fec3 	bl	f4aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    a724:	2800      	cmp	r0, #0
    a726:	d0f8      	beq.n	a71a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    a728:	9801      	ldr	r0, [sp, #4]
    a72a:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    a72e:	b108      	cbz	r0, a734 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    a730:	203a      	movs	r0, #58	; 0x3a
    a732:	bd1c      	pop	{r2, r3, r4, pc}
    a734:	9901      	ldr	r1, [sp, #4]
    a736:	2001      	movs	r0, #1
    a738:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    a73c:	2000      	movs	r0, #0
    a73e:	bd1c      	pop	{r2, r3, r4, pc}
    a740:	2011      	movs	r0, #17
    a742:	bd1c      	pop	{r2, r3, r4, pc}
    a744:	200001e0 	.word	0x200001e0

0000a748 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a748:	b510      	push	{r4, lr}
    a74a:	4604      	mov	r4, r0
    a74c:	f004 fea4 	bl	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    a750:	b130      	cbz	r0, a760 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a752:	4804      	ldr	r0, [pc, #16]	; (a764 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a754:	8881      	ldrh	r1, [r0, #4]
    a756:	8021      	strh	r1, [r4, #0]
    a758:	88c0      	ldrh	r0, [r0, #6]
    a75a:	8060      	strh	r0, [r4, #2]
    a75c:	2000      	movs	r0, #0
    a75e:	bd10      	pop	{r4, pc}
    a760:	2001      	movs	r0, #1
    a762:	bd10      	pop	{r4, pc}
    a764:	200001ee 	.word	0x200001ee

0000a768 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a768:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a76a:	4605      	mov	r5, r0
    a76c:	f000 fc2a 	bl	afc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a770:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a774:	b310      	cbz	r0, a7bc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a776:	2400      	movs	r4, #0
    a778:	a802      	add	r0, sp, #8
    a77a:	f88d 4004 	strb.w	r4, [sp, #4]
    a77e:	f88d 4008 	strb.w	r4, [sp, #8]
    a782:	9000      	str	r0, [sp, #0]
    a784:	78aa      	ldrb	r2, [r5, #2]
    a786:	7869      	ldrb	r1, [r5, #1]
    a788:	7828      	ldrb	r0, [r5, #0]
    a78a:	ab01      	add	r3, sp, #4
    a78c:	f004 ff2a 	bl	f5e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    a790:	2800      	cmp	r0, #0
    a792:	d112      	bne.n	a7ba <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a794:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a798:	f004 fca1 	bl	f0de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a79c:	b180      	cbz	r0, a7c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a79e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a7a2:	f004 fc9c 	bl	f0de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a7a6:	b158      	cbz	r0, a7c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a7a8:	4806      	ldr	r0, [pc, #24]	; (a7c4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a7aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a7ae:	7481      	strb	r1, [r0, #18]
    a7b0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a7b4:	74c1      	strb	r1, [r0, #19]
    a7b6:	8284      	strh	r4, [r0, #20]
    a7b8:	2000      	movs	r0, #0
    a7ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a7bc:	2001      	movs	r0, #1
    a7be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a7c0:	2011      	movs	r0, #17
    a7c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a7c4:	20000f78 	.word	0x20000f78

0000a7c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7cc:	a1a2      	add	r1, pc, #648	; (adr r1, aa58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x290>)
    a7ce:	4605      	mov	r5, r0
    a7d0:	e9d1 8700 	ldrd	r8, r7, [r1]
    a7d4:	7a40      	ldrb	r0, [r0, #9]
    a7d6:	b087      	sub	sp, #28
    a7d8:	0781      	lsls	r1, r0, #30
    a7da:	d502      	bpl.n	a7e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    a7dc:	f040 0001 	orr.w	r0, r0, #1
    a7e0:	7268      	strb	r0, [r5, #9]
    a7e2:	4628      	mov	r0, r5
    a7e4:	f004 fcda 	bl	f19c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    a7e8:	2800      	cmp	r0, #0
    a7ea:	d10c      	bne.n	a806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a7ec:	f004 fe71 	bl	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    a7f0:	b940      	cbnz	r0, a804 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a7f2:	4e9b      	ldr	r6, [pc, #620]	; (aa60 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    a7f4:	7870      	ldrb	r0, [r6, #1]
    a7f6:	b928      	cbnz	r0, a804 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a7f8:	f7fb fe62 	bl	64c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a7fc:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a800:	39ff      	subs	r1, #255	; 0xff
    a802:	d003      	beq.n	a80c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    a804:	200c      	movs	r0, #12
    a806:	b007      	add	sp, #28
    a808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a80c:	7828      	ldrb	r0, [r5, #0]
    a80e:	f04f 0b00 	mov.w	fp, #0
    a812:	f04f 0a01 	mov.w	sl, #1
    a816:	b9e8      	cbnz	r0, a854 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    a818:	78a8      	ldrb	r0, [r5, #2]
    a81a:	9000      	str	r0, [sp, #0]
    a81c:	f105 0903 	add.w	r9, r5, #3
    a820:	a902      	add	r1, sp, #8
    a822:	2000      	movs	r0, #0
    a824:	f002 ff26 	bl	d674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a828:	b178      	cbz	r0, a84a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    a82a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    a82e:	e10e      	b.n	aa4e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    a830:	9c04      	ldr	r4, [sp, #16]
    a832:	9800      	ldr	r0, [sp, #0]
    a834:	f004 f890 	bl	e958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a838:	78a1      	ldrb	r1, [r4, #2]
    a83a:	4288      	cmp	r0, r1
    a83c:	d105      	bne.n	a84a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    a83e:	2206      	movs	r2, #6
    a840:	4649      	mov	r1, r9
    a842:	1ce0      	adds	r0, r4, #3
    a844:	f001 fe5e 	bl	c504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    a848:	b320      	cbz	r0, a894 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    a84a:	a802      	add	r0, sp, #8
    a84c:	f7f9 fc94 	bl	4178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    a850:	2800      	cmp	r0, #0
    a852:	d0ed      	beq.n	a830 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x68>
    a854:	2103      	movs	r1, #3
    a856:	f105 0018 	add.w	r0, r5, #24
    a85a:	f000 fac5 	bl	ade8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    a85e:	2200      	movs	r2, #0
    a860:	4611      	mov	r1, r2
    a862:	a801      	add	r0, sp, #4
    a864:	f7f9 fcae 	bl	41c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a868:	0004      	movs	r4, r0
    a86a:	d015      	beq.n	a898 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    a86c:	2100      	movs	r1, #0
    a86e:	f7fb f953 	bl	5b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    a872:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a876:	8020      	strh	r0, [r4, #0]
    a878:	487a      	ldr	r0, [pc, #488]	; (aa64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    a87a:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    a87e:	f004 fe0b 	bl	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    a882:	2800      	cmp	r0, #0
    a884:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a888:	d008      	beq.n	a89c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    a88a:	88b1      	ldrh	r1, [r6, #4]
    a88c:	88f2      	ldrh	r2, [r6, #6]
    a88e:	84c1      	strh	r1, [r0, #38]	; 0x26
    a890:	8502      	strh	r2, [r0, #40]	; 0x28
    a892:	e006      	b.n	a8a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    a894:	200b      	movs	r0, #11
    a896:	e7b6      	b.n	a806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a898:	2009      	movs	r0, #9
    a89a:	e7b4      	b.n	a806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a89c:	221b      	movs	r2, #27
    a89e:	84c2      	strh	r2, [r0, #38]	; 0x26
    a8a0:	8502      	strh	r2, [r0, #40]	; 0x28
    a8a2:	78f1      	ldrb	r1, [r6, #3]
    a8a4:	9100      	str	r1, [sp, #0]
    a8a6:	46b1      	mov	r9, r6
    a8a8:	78b3      	ldrb	r3, [r6, #2]
    a8aa:	88f2      	ldrh	r2, [r6, #6]
    a8ac:	88b1      	ldrh	r1, [r6, #4]
    a8ae:	8820      	ldrh	r0, [r4, #0]
    a8b0:	f7f9 fd6a 	bl	4388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a8b4:	b110      	cbz	r0, a8bc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf4>
    a8b6:	f640 618b 	movw	r1, #3723	; 0xe8b
    a8ba:	e0c8      	b.n	aa4e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    a8bc:	8820      	ldrh	r0, [r4, #0]
    a8be:	f7fb fd53 	bl	6368 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    a8c2:	6120      	str	r0, [r4, #16]
    a8c4:	a068      	add	r0, pc, #416	; (adr r0, aa68 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    a8c6:	f104 0618 	add.w	r6, r4, #24
    a8ca:	6800      	ldr	r0, [r0, #0]
    a8cc:	9000      	str	r0, [sp, #0]
    a8ce:	2103      	movs	r1, #3
    a8d0:	4668      	mov	r0, sp
    a8d2:	f7f9 fabd 	bl	3e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    a8d6:	2000      	movs	r0, #0
    a8d8:	4669      	mov	r1, sp
    a8da:	5c0a      	ldrb	r2, [r1, r0]
    a8dc:	5432      	strb	r2, [r6, r0]
    a8de:	1c40      	adds	r0, r0, #1
    a8e0:	b2c0      	uxtb	r0, r0
    a8e2:	2803      	cmp	r0, #3
    a8e4:	d3f9      	bcc.n	a8da <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x112>
    a8e6:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    a8e8:	f003 f845 	bl	d976 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    a8ec:	60e0      	str	r0, [r4, #12]
    a8ee:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    a8f0:	82a0      	strh	r0, [r4, #20]
    a8f2:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    a8f4:	82e0      	strh	r0, [r4, #22]
    a8f6:	7a68      	ldrb	r0, [r5, #9]
    a8f8:	f004 fbd0 	bl	f09c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    a8fc:	f8d9 1008 	ldr.w	r1, [r9, #8]
    a900:	464e      	mov	r6, r9
    a902:	4620      	mov	r0, r4
    a904:	62e1      	str	r1, [r4, #44]	; 0x2c
    a906:	f003 fe49 	bl	e59c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>
    a90a:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    a90e:	46d1      	mov	r9, sl
    a910:	4650      	mov	r0, sl
    a912:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    a916:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    a91a:	4852      	ldr	r0, [pc, #328]	; (aa64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    a91c:	3808      	subs	r0, #8
    a91e:	6843      	ldr	r3, [r0, #4]
    a920:	b123      	cbz	r3, a92c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x164>
    a922:	2201      	movs	r2, #1
    a924:	f504 7199 	add.w	r1, r4, #306	; 0x132
    a928:	4620      	mov	r0, r4
    a92a:	4798      	blx	r3
    a92c:	8821      	ldrh	r1, [r4, #0]
    a92e:	f8ad 1008 	strh.w	r1, [sp, #8]
    a932:	7cb1      	ldrb	r1, [r6, #18]
    a934:	f88d 100a 	strb.w	r1, [sp, #10]
    a938:	7cf1      	ldrb	r1, [r6, #19]
    a93a:	f88d 100b 	strb.w	r1, [sp, #11]
    a93e:	8ab1      	ldrh	r1, [r6, #20]
    a940:	f8ad 100c 	strh.w	r1, [sp, #12]
    a944:	a905      	add	r1, sp, #20
    a946:	9100      	str	r1, [sp, #0]
    a948:	2000      	movs	r0, #0
    a94a:	ab04      	add	r3, sp, #16
    a94c:	aa02      	add	r2, sp, #8
    a94e:	4621      	mov	r1, r4
    a950:	f004 fd63 	bl	f41a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    a954:	0006      	movs	r6, r0
    a956:	d10f      	bne.n	a978 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b0>
    a958:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a95c:	f88d 0018 	strb.w	r0, [sp, #24]
    a960:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a964:	f88d 0019 	strb.w	r0, [sp, #25]
    a968:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a96c:	f8ad 001a 	strh.w	r0, [sp, #26]
    a970:	a906      	add	r1, sp, #24
    a972:	4620      	mov	r0, r4
    a974:	f003 f8bc 	bl	daf0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a978:	46d8      	mov	r8, fp
    a97a:	f88d b000 	strb.w	fp, [sp]
    a97e:	2101      	movs	r1, #1
    a980:	4668      	mov	r0, sp
    a982:	f7f9 fa65 	bl	3e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    a986:	f89d 0000 	ldrb.w	r0, [sp]
    a98a:	f000 0107 	and.w	r1, r0, #7
    a98e:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    a992:	4411      	add	r1, r2
    a994:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a998:	4408      	add	r0, r1
    a99a:	f88d 0000 	strb.w	r0, [sp]
    a99e:	1d40      	adds	r0, r0, #5
    a9a0:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    a9a4:	2809      	cmp	r0, #9
    a9a6:	d202      	bcs.n	a9ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e6>
    a9a8:	3008      	adds	r0, #8
    a9aa:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    a9ae:	2101      	movs	r1, #1
    a9b0:	4620      	mov	r0, r4
    a9b2:	f7fb f8b1 	bl	5b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    a9b6:	7868      	ldrb	r0, [r5, #1]
    a9b8:	f7fb fe56 	bl	6668 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    a9bc:	bbee      	cbnz	r6, aa3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a9be:	78a9      	ldrb	r1, [r5, #2]
    a9c0:	7828      	ldrb	r0, [r5, #0]
    a9c2:	1cea      	adds	r2, r5, #3
    a9c4:	f7fb fdfa 	bl	65bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    a9c8:	b148      	cbz	r0, a9de <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x216>
    a9ca:	f7fb fd21 	bl	6410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    a9ce:	78a9      	ldrb	r1, [r5, #2]
    a9d0:	7828      	ldrb	r0, [r5, #0]
    a9d2:	1cea      	adds	r2, r5, #3
    a9d4:	f7fb fe16 	bl	6604 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    a9d8:	0006      	movs	r6, r0
    a9da:	d002      	beq.n	a9e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21a>
    a9dc:	e02d      	b.n	aa3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a9de:	2612      	movs	r6, #18
    a9e0:	e02b      	b.n	aa3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a9e2:	78a8      	ldrb	r0, [r5, #2]
    a9e4:	f003 ffb8 	bl	e958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a9e8:	4602      	mov	r2, r0
    a9ea:	1ceb      	adds	r3, r5, #3
    a9ec:	4621      	mov	r1, r4
    a9ee:	2003      	movs	r0, #3
    a9f0:	f7fb fd50 	bl	6494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    a9f4:	0006      	movs	r6, r0
    a9f6:	d120      	bne.n	aa3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    a9f8:	464f      	mov	r7, r9
    a9fa:	4648      	mov	r0, r9
    a9fc:	f7fb fda8 	bl	6550 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    aa00:	0006      	movs	r6, r0
    aa02:	d11a      	bne.n	aa3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aa04:	f88d 8008 	strb.w	r8, [sp, #8]
    aa08:	7a68      	ldrb	r0, [r5, #9]
    aa0a:	07c0      	lsls	r0, r0, #31
    aa0c:	d005      	beq.n	aa1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x252>
    aa0e:	68e8      	ldr	r0, [r5, #12]
    aa10:	9003      	str	r0, [sp, #12]
    aa12:	69a8      	ldr	r0, [r5, #24]
    aa14:	9004      	str	r0, [sp, #16]
    aa16:	f88d 7008 	strb.w	r7, [sp, #8]
    aa1a:	a802      	add	r0, sp, #8
    aa1c:	f7fd f802 	bl	7a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    aa20:	4606      	mov	r6, r0
    aa22:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    aa26:	f7fb fe93 	bl	6750 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    aa2a:	b936      	cbnz	r6, aa3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    aa2c:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    aa30:	4620      	mov	r0, r4
    aa32:	f7fc ff0d 	bl	7850 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>
    aa36:	0006      	movs	r6, r0
    aa38:	d00c      	beq.n	aa54 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    aa3a:	8820      	ldrh	r0, [r4, #0]
    aa3c:	f002 fe74 	bl	d728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    aa40:	8820      	ldrh	r0, [r4, #0]
    aa42:	2100      	movs	r1, #0
    aa44:	f7f9 fbe6 	bl	4214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    aa48:	b120      	cbz	r0, aa54 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    aa4a:	f640 7152 	movw	r1, #3922	; 0xf52
    aa4e:	2039      	movs	r0, #57	; 0x39
    aa50:	f7f9 f962 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa54:	4630      	mov	r0, r6
    aa56:	e6d6      	b.n	a806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aa58:	ffffffff 	.word	0xffffffff
    aa5c:	0000001f 	.word	0x0000001f
    aa60:	20000f78 	.word	0x20000f78
    aa64:	200001e8 	.word	0x200001e8
    aa68:	00332211 	.word	0x00332211

0000aa6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    aa6c:	7801      	ldrb	r1, [r0, #0]
    aa6e:	b179      	cbz	r1, aa90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa70:	7841      	ldrb	r1, [r0, #1]
    aa72:	b169      	cbz	r1, aa90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa74:	8841      	ldrh	r1, [r0, #2]
    aa76:	291b      	cmp	r1, #27
    aa78:	d30a      	bcc.n	aa90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa7a:	8881      	ldrh	r1, [r0, #4]
    aa7c:	291b      	cmp	r1, #27
    aa7e:	d307      	bcc.n	aa90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    aa80:	4904      	ldr	r1, [pc, #16]	; (aa94 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    aa82:	6802      	ldr	r2, [r0, #0]
    aa84:	f8c1 2002 	str.w	r2, [r1, #2]
    aa88:	8880      	ldrh	r0, [r0, #4]
    aa8a:	80c8      	strh	r0, [r1, #6]
    aa8c:	2000      	movs	r0, #0
    aa8e:	4770      	bx	lr
    aa90:	2012      	movs	r0, #18
    aa92:	4770      	bx	lr
    aa94:	20000f78 	.word	0x20000f78

0000aa98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    aa98:	6800      	ldr	r0, [r0, #0]
    aa9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    aa9e:	4288      	cmp	r0, r1
    aaa0:	d303      	bcc.n	aaaa <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    aaa2:	4903      	ldr	r1, [pc, #12]	; (aab0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    aaa4:	6088      	str	r0, [r1, #8]
    aaa6:	2000      	movs	r0, #0
    aaa8:	4770      	bx	lr
    aaaa:	2012      	movs	r0, #18
    aaac:	4770      	bx	lr
    aaae:	0000      	.short	0x0000
    aab0:	20000f78 	.word	0x20000f78

0000aab4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    aab4:	b510      	push	{r4, lr}
    aab6:	b086      	sub	sp, #24
    aab8:	4604      	mov	r4, r0
    aaba:	f004 fbe6 	bl	f28a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    aabe:	2800      	cmp	r0, #0
    aac0:	d103      	bne.n	aaca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    aac2:	f004 fd06 	bl	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    aac6:	b110      	cbz	r0, aace <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    aac8:	200c      	movs	r0, #12
    aaca:	b006      	add	sp, #24
    aacc:	bd10      	pop	{r4, pc}
    aace:	2102      	movs	r1, #2
    aad0:	f104 0010 	add.w	r0, r4, #16
    aad4:	f000 f988 	bl	ade8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    aad8:	78a0      	ldrb	r0, [r4, #2]
    aada:	f88d 0008 	strb.w	r0, [sp, #8]
    aade:	78a0      	ldrb	r0, [r4, #2]
    aae0:	f88d 0000 	strb.w	r0, [sp]
    aae4:	7860      	ldrb	r0, [r4, #1]
    aae6:	f88d 0003 	strb.w	r0, [sp, #3]
    aaea:	7820      	ldrb	r0, [r4, #0]
    aaec:	f88d 0002 	strb.w	r0, [sp, #2]
    aaf0:	7e20      	ldrb	r0, [r4, #24]
    aaf2:	f88d 0004 	strb.w	r0, [sp, #4]
    aaf6:	78a0      	ldrb	r0, [r4, #2]
    aaf8:	07c0      	lsls	r0, r0, #31
    aafa:	d00b      	beq.n	ab14 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    aafc:	78e0      	ldrb	r0, [r4, #3]
    aafe:	2801      	cmp	r0, #1
    ab00:	d011      	beq.n	ab26 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    ab02:	b190      	cbz	r0, ab2a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    ab04:	f05f 0000 	movs.w	r0, #0
    ab08:	f88d 0001 	strb.w	r0, [sp, #1]
    ab0c:	68a0      	ldr	r0, [r4, #8]
    ab0e:	9003      	str	r0, [sp, #12]
    ab10:	6920      	ldr	r0, [r4, #16]
    ab12:	9004      	str	r0, [sp, #16]
    ab14:	a802      	add	r0, sp, #8
    ab16:	f7fc ff85 	bl	7a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    ab1a:	2800      	cmp	r0, #0
    ab1c:	d1d5      	bne.n	aaca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab1e:	4668      	mov	r0, sp
    ab20:	f7fb fe1e 	bl	6760 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    ab24:	e7d1      	b.n	aaca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ab26:	2002      	movs	r0, #2
    ab28:	e7ee      	b.n	ab08 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    ab2a:	2001      	movs	r0, #1
    ab2c:	e7ec      	b.n	ab08 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000ab30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ab30:	4a03      	ldr	r2, [pc, #12]	; (ab40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ab32:	e9d2 1200 	ldrd	r1, r2, [r2]
    ab36:	6001      	str	r1, [r0, #0]
    ab38:	6042      	str	r2, [r0, #4]
    ab3a:	2000      	movs	r0, #0
    ab3c:	4770      	bx	lr
    ab3e:	0000      	.short	0x0000
    ab40:	0000ae74 	.word	0x0000ae74

0000ab44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    ab44:	b510      	push	{r4, lr}
    ab46:	2005      	movs	r0, #5
    ab48:	f000 fa32 	bl	afb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ab4c:	f7fd fe14 	bl	8778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    ab50:	4902      	ldr	r1, [pc, #8]	; (ab5c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    ab52:	4801      	ldr	r0, [pc, #4]	; (ab58 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    ab54:	6048      	str	r0, [r1, #4]
    ab56:	bd10      	pop	{r4, pc}
    ab58:	0000acbd 	.word	0x0000acbd
    ab5c:	200001e0 	.word	0x200001e0

0000ab60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    ab60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ab64:	b086      	sub	sp, #24
    ab66:	468a      	mov	sl, r1
    ab68:	4606      	mov	r6, r0
    ab6a:	8800      	ldrh	r0, [r0, #0]
    ab6c:	a901      	add	r1, sp, #4
    ab6e:	f002 fef6 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ab72:	2800      	cmp	r0, #0
    ab74:	d139      	bne.n	abea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ab76:	9802      	ldr	r0, [sp, #8]
    ab78:	f04f 0801 	mov.w	r8, #1
    ab7c:	4601      	mov	r1, r0
    ab7e:	4689      	mov	r9, r1
    ab80:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    ab84:	f88d 1000 	strb.w	r1, [sp]
    ab88:	9900      	ldr	r1, [sp, #0]
    ab8a:	9100      	str	r1, [sp, #0]
    ab8c:	f89d 5000 	ldrb.w	r5, [sp]
    ab90:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ab94:	3078      	adds	r0, #120	; 0x78
    ab96:	2921      	cmp	r1, #33	; 0x21
    ab98:	d100      	bne.n	ab9c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ab9a:	b13d      	cbz	r5, abac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ab9c:	2400      	movs	r4, #0
    ab9e:	304e      	adds	r0, #78	; 0x4e
    aba0:	2108      	movs	r1, #8
    aba2:	4607      	mov	r7, r0
    aba4:	f003 fece 	bl	e944 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    aba8:	b110      	cbz	r0, abb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    abaa:	e007      	b.n	abbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    abac:	2401      	movs	r4, #1
    abae:	e7f6      	b.n	ab9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    abb0:	210b      	movs	r1, #11
    abb2:	4638      	mov	r0, r7
    abb4:	f003 fec6 	bl	e944 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    abb8:	b900      	cbnz	r0, abbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    abba:	b1ac      	cbz	r4, abe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    abbc:	a804      	add	r0, sp, #16
    abbe:	9000      	str	r0, [sp, #0]
    abc0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    abc4:	ab03      	add	r3, sp, #12
    abc6:	4632      	mov	r2, r6
    abc8:	4649      	mov	r1, r9
    abca:	f004 fc26 	bl	f41a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    abce:	0007      	movs	r7, r0
    abd0:	d10b      	bne.n	abea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    abd2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    abd6:	9c02      	ldr	r4, [sp, #8]
    abd8:	b150      	cbz	r0, abf0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    abda:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    abde:	bf00      	nop
    abe0:	f884 8001 	strb.w	r8, [r4, #1]
    abe4:	b94d      	cbnz	r5, abfa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    abe6:	e006      	b.n	abf6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    abe8:	201a      	movs	r0, #26
    abea:	b006      	add	sp, #24
    abec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abf0:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    abf4:	e7f4      	b.n	abe0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    abf6:	7820      	ldrb	r0, [r4, #0]
    abf8:	b108      	cbz	r0, abfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    abfa:	273a      	movs	r7, #58	; 0x3a
    abfc:	e012      	b.n	ac24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    abfe:	f884 a000 	strb.w	sl, [r4]
    ac02:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ac06:	70a0      	strb	r0, [r4, #2]
    ac08:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ac0c:	70e1      	strb	r1, [r4, #3]
    ac0e:	f88d 0000 	strb.w	r0, [sp]
    ac12:	f88d 1001 	strb.w	r1, [sp, #1]
    ac16:	88b0      	ldrh	r0, [r6, #4]
    ac18:	f8ad 0002 	strh.w	r0, [sp, #2]
    ac1c:	4669      	mov	r1, sp
    ac1e:	4648      	mov	r0, r9
    ac20:	f002 ff66 	bl	daf0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ac24:	2000      	movs	r0, #0
    ac26:	7060      	strb	r0, [r4, #1]
    ac28:	4638      	mov	r0, r7
    ac2a:	e7de      	b.n	abea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000ac2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    ac2c:	b510      	push	{r4, lr}
    ac2e:	f002 fd8f 	bl	d750 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ac32:	f7fa fd17 	bl	5664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ac36:	f000 f9d5 	bl	afe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    ac3a:	4811      	ldr	r0, [pc, #68]	; (ac80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    ac3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ac40:	4b10      	ldr	r3, [pc, #64]	; (ac84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    ac42:	81c1      	strh	r1, [r0, #14]
    ac44:	8201      	strh	r1, [r0, #16]
    ac46:	2100      	movs	r1, #0
    ac48:	75c1      	strb	r1, [r0, #23]
    ac4a:	8301      	strh	r1, [r0, #24]
    ac4c:	8001      	strh	r1, [r0, #0]
    ac4e:	221b      	movs	r2, #27
    ac50:	801a      	strh	r2, [r3, #0]
    ac52:	f44f 74a4 	mov.w	r4, #328	; 0x148
    ac56:	805c      	strh	r4, [r3, #2]
    ac58:	809a      	strh	r2, [r3, #4]
    ac5a:	80dc      	strh	r4, [r3, #6]
    ac5c:	7481      	strb	r1, [r0, #18]
    ac5e:	74c1      	strb	r1, [r0, #19]
    ac60:	2303      	movs	r3, #3
    ac62:	7083      	strb	r3, [r0, #2]
    ac64:	2302      	movs	r3, #2
    ac66:	70c3      	strb	r3, [r0, #3]
    ac68:	8082      	strh	r2, [r0, #4]
    ac6a:	80c2      	strh	r2, [r0, #6]
    ac6c:	f640 62a6 	movw	r2, #3750	; 0xea6
    ac70:	6082      	str	r2, [r0, #8]
    ac72:	4a04      	ldr	r2, [pc, #16]	; (ac84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    ac74:	1f92      	subs	r2, r2, #6
    ac76:	7011      	strb	r1, [r2, #0]
    ac78:	7581      	strb	r1, [r0, #22]
    ac7a:	7301      	strb	r1, [r0, #12]
    ac7c:	bd10      	pop	{r4, pc}
    ac7e:	0000      	.short	0x0000
    ac80:	20000f78 	.word	0x20000f78
    ac84:	200001ee 	.word	0x200001ee

0000ac88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    ac88:	b510      	push	{r4, lr}
    ac8a:	b158      	cbz	r0, aca4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    ac8c:	490a      	ldr	r1, [pc, #40]	; (acb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    ac8e:	780a      	ldrb	r2, [r1, #0]
    ac90:	b16a      	cbz	r2, acae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    ac92:	2200      	movs	r2, #0
    ac94:	7042      	strb	r2, [r0, #1]
    ac96:	2303      	movs	r3, #3
    ac98:	7003      	strb	r3, [r0, #0]
    ac9a:	2301      	movs	r3, #1
    ac9c:	7103      	strb	r3, [r0, #4]
    ac9e:	700a      	strb	r2, [r1, #0]
    aca0:	4618      	mov	r0, r3
    aca2:	bd10      	pop	{r4, pc}
    aca4:	f641 1146 	movw	r1, #6470	; 0x1946
    aca8:	2039      	movs	r0, #57	; 0x39
    acaa:	f7f9 f835 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    acb2:	f7fb b881 	b.w	5db8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    acb6:	0000      	.short	0x0000
    acb8:	20000f78 	.word	0x20000f78
    acbc:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acc0:	4692      	mov	sl, r2
    acc2:	460f      	mov	r7, r1
    acc4:	4681      	mov	r9, r0
    acc6:	f004 fbe7 	bl	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    acca:	2800      	cmp	r0, #0
    accc:	d063      	beq.n	ad96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    acce:	4933      	ldr	r1, [pc, #204]	; (ad9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    acd0:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    acd4:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    acd8:	8808      	ldrh	r0, [r1, #0]
    acda:	4290      	cmp	r0, r2
    acdc:	d300      	bcc.n	ace0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    acde:	4610      	mov	r0, r2
    ace0:	4680      	mov	r8, r0
    ace2:	8888      	ldrh	r0, [r1, #4]
    ace4:	42b0      	cmp	r0, r6
    ace6:	d200      	bcs.n	acea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    ace8:	4606      	mov	r6, r0
    acea:	884c      	ldrh	r4, [r1, #2]
    acec:	f640 0048 	movw	r0, #2120	; 0x848
    acf0:	4284      	cmp	r4, r0
    acf2:	d300      	bcc.n	acf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    acf4:	4604      	mov	r4, r0
    acf6:	88cd      	ldrh	r5, [r1, #6]
    acf8:	4285      	cmp	r5, r0
    acfa:	d300      	bcc.n	acfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    acfc:	4605      	mov	r5, r0
    acfe:	4284      	cmp	r4, r0
    ad00:	d300      	bcc.n	ad04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    ad02:	4604      	mov	r4, r0
    ad04:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ad08:	2e1b      	cmp	r6, #27
    ad0a:	d001      	beq.n	ad10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    ad0c:	428d      	cmp	r5, r1
    ad0e:	d104      	bne.n	ad1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    ad10:	f1b8 0f1b 	cmp.w	r8, #27
    ad14:	d03f      	beq.n	ad96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ad16:	428c      	cmp	r4, r1
    ad18:	d03d      	beq.n	ad96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ad1a:	466a      	mov	r2, sp
    ad1c:	4651      	mov	r1, sl
    ad1e:	4648      	mov	r0, r9
    ad20:	f004 fb3e 	bl	f3a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    ad24:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ad28:	4641      	mov	r1, r8
    ad2a:	4540      	cmp	r0, r8
    ad2c:	d900      	bls.n	ad30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    ad2e:	4608      	mov	r0, r1
    ad30:	80f8      	strh	r0, [r7, #6]
    ad32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ad36:	42a1      	cmp	r1, r4
    ad38:	d800      	bhi.n	ad3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    ad3a:	460c      	mov	r4, r1
    ad3c:	813c      	strh	r4, [r7, #8]
    ad3e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ad42:	42b1      	cmp	r1, r6
    ad44:	d800      	bhi.n	ad48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    ad46:	460e      	mov	r6, r1
    ad48:	807e      	strh	r6, [r7, #2]
    ad4a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ad4e:	42a9      	cmp	r1, r5
    ad50:	d900      	bls.n	ad54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    ad52:	4629      	mov	r1, r5
    ad54:	80b9      	strh	r1, [r7, #4]
    ad56:	2201      	movs	r2, #1
    ad58:	703a      	strb	r2, [r7, #0]
    ad5a:	381b      	subs	r0, #27
    ad5c:	28e0      	cmp	r0, #224	; 0xe0
    ad5e:	d902      	bls.n	ad66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    ad60:	f640 4172 	movw	r1, #3186	; 0xc72
    ad64:	e014      	b.n	ad90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ad66:	3e1b      	subs	r6, #27
    ad68:	2ee0      	cmp	r6, #224	; 0xe0
    ad6a:	d902      	bls.n	ad72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    ad6c:	f640 4174 	movw	r1, #3188	; 0xc74
    ad70:	e00e      	b.n	ad90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ad72:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    ad76:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    ad7a:	4284      	cmp	r4, r0
    ad7c:	d902      	bls.n	ad84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    ad7e:	f640 4176 	movw	r1, #3190	; 0xc76
    ad82:	e005      	b.n	ad90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    ad84:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    ad88:	4281      	cmp	r1, r0
    ad8a:	d904      	bls.n	ad96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ad8c:	f640 4178 	movw	r1, #3192	; 0xc78
    ad90:	2039      	movs	r0, #57	; 0x39
    ad92:	f7f8 ffc1 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad96:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad9a:	0000      	.short	0x0000
    ad9c:	200001ee 	.word	0x200001ee
    ada0:	4904      	ldr	r1, [pc, #16]	; (adb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    ada2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    ada6:	4288      	cmp	r0, r1
    ada8:	d301      	bcc.n	adae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    adaa:	2000      	movs	r0, #0
    adac:	4770      	bx	lr
    adae:	2001      	movs	r0, #1
    adb0:	4770      	bx	lr
    adb2:	0000      	.short	0x0000
    adb4:	0270f3cc 	.word	0x0270f3cc
    adb8:	4904      	ldr	r1, [pc, #16]	; (adcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>)
    adba:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    adbe:	4288      	cmp	r0, r1
    adc0:	d301      	bcc.n	adc6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    adc2:	2000      	movs	r0, #0
    adc4:	4770      	bx	lr
    adc6:	2001      	movs	r0, #1
    adc8:	4770      	bx	lr
    adca:	0000      	.short	0x0000
    adcc:	009c363d 	.word	0x009c363d
    add0:	4904      	ldr	r1, [pc, #16]	; (ade4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>)
    add2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    add6:	4288      	cmp	r0, r1
    add8:	d301      	bcc.n	adde <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    adda:	2000      	movs	r0, #0
    addc:	4770      	bx	lr
    adde:	2001      	movs	r0, #1
    ade0:	4770      	bx	lr
    ade2:	0000      	.short	0x0000
    ade4:	009c363d 	.word	0x009c363d
    ade8:	b530      	push	{r4, r5, lr}
    adea:	2200      	movs	r2, #0
    adec:	4d07      	ldr	r5, [pc, #28]	; (ae0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    adee:	e009      	b.n	ae04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    adf0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    adf4:	462b      	mov	r3, r5
    adf6:	429c      	cmp	r4, r3
    adf8:	d800      	bhi.n	adfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    adfa:	4623      	mov	r3, r4
    adfc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    ae00:	1c52      	adds	r2, r2, #1
    ae02:	b2d2      	uxtb	r2, r2
    ae04:	428a      	cmp	r2, r1
    ae06:	d3f3      	bcc.n	adf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x168>
    ae08:	bd30      	pop	{r4, r5, pc}
    ae0a:	0000      	.short	0x0000
    ae0c:	00f42400 	.word	0x00f42400
    ae10:	4a09      	ldr	r2, [pc, #36]	; (ae38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    ae12:	4290      	cmp	r0, r2
    ae14:	d80b      	bhi.n	ae2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a6>
    ae16:	2901      	cmp	r1, #1
    ae18:	d002      	beq.n	ae20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    ae1a:	2904      	cmp	r1, #4
    ae1c:	d003      	beq.n	ae26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    ae1e:	e008      	b.n	ae32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    ae20:	f240 7153 	movw	r1, #1875	; 0x753
    ae24:	e001      	b.n	ae2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a2>
    ae26:	f640 11c4 	movw	r1, #2500	; 0x9c4
    ae2a:	4288      	cmp	r0, r1
    ae2c:	d201      	bcs.n	ae32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    ae2e:	2000      	movs	r0, #0
    ae30:	4770      	bx	lr
    ae32:	2001      	movs	r0, #1
    ae34:	4770      	bx	lr
    ae36:	0000      	.short	0x0000
    ae38:	0270fd8f 	.word	0x0270fd8f
    ae3c:	b510      	push	{r4, lr}
    ae3e:	4604      	mov	r4, r0
    ae40:	88c1      	ldrh	r1, [r0, #6]
    ae42:	8880      	ldrh	r0, [r0, #4]
    ae44:	f004 f960 	bl	f108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    ae48:	2800      	cmp	r0, #0
    ae4a:	d10f      	bne.n	ae6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    ae4c:	8861      	ldrh	r1, [r4, #2]
    ae4e:	8820      	ldrh	r0, [r4, #0]
    ae50:	f004 f95a 	bl	f108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    ae54:	2800      	cmp	r0, #0
    ae56:	d109      	bne.n	ae6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    ae58:	4805      	ldr	r0, [pc, #20]	; (ae70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e8>)
    ae5a:	88a1      	ldrh	r1, [r4, #4]
    ae5c:	8081      	strh	r1, [r0, #4]
    ae5e:	8821      	ldrh	r1, [r4, #0]
    ae60:	8001      	strh	r1, [r0, #0]
    ae62:	88e1      	ldrh	r1, [r4, #6]
    ae64:	80c1      	strh	r1, [r0, #6]
    ae66:	8861      	ldrh	r1, [r4, #2]
    ae68:	8041      	strh	r1, [r0, #2]
    ae6a:	2000      	movs	r0, #0
    ae6c:	bd10      	pop	{r4, pc}
    ae6e:	0000      	.short	0x0000
    ae70:	200001ee 	.word	0x200001ee
    ae74:	0b12b00b 	.word	0x0b12b00b
    ae78:	12b00059 	.word	0x12b00059
    ae7c:	05060708 	.word	0x05060708
    ae80:	00020304 	.word	0x00020304
    ae84:	f0f4f8fc 	.word	0xf0f4f8fc
    ae88:	0304d8ec 	.word	0x0304d8ec
    ae8c:	f4f8fc00 	.word	0xf4f8fc00
    ae90:	00d8ecf0 	.word	0x00d8ecf0

0000ae94 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    ae94:	b510      	push	{r4, lr}
    ae96:	460c      	mov	r4, r1
    ae98:	f7ff fb6c 	bl	a574 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    ae9c:	4804      	ldr	r0, [pc, #16]	; (aeb0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    ae9e:	6004      	str	r4, [r0, #0]
    aea0:	6840      	ldr	r0, [r0, #4]
    aea2:	f004 fbce 	bl	f642 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    aea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aeaa:	f004 b8c2 	b.w	f032 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    aeae:	0000      	.short	0x0000
    aeb0:	200001f8 	.word	0x200001f8

0000aeb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    aeb4:	b510      	push	{r4, lr}
    aeb6:	4c07      	ldr	r4, [pc, #28]	; (aed4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    aeb8:	68a0      	ldr	r0, [r4, #8]
    aeba:	f004 fbc2 	bl	f642 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    aebe:	68e0      	ldr	r0, [r4, #12]
    aec0:	f004 fbbf 	bl	f642 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    aec4:	f002 fc44 	bl	d750 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    aec8:	f7fa fbcc 	bl	5664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    aecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aed0:	f7ff beac 	b.w	ac2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    aed4:	200001f8 	.word	0x200001f8

0000aed8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    aed8:	b500      	push	{lr}
    aeda:	4905      	ldr	r1, [pc, #20]	; (aef0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    aedc:	4805      	ldr	r0, [pc, #20]	; (aef4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    aede:	f004 fba3 	bl	f628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    aee2:	4804      	ldr	r0, [pc, #16]	; (aef4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    aee4:	4904      	ldr	r1, [pc, #16]	; (aef8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    aee6:	1d00      	adds	r0, r0, #4
    aee8:	f85d eb04 	ldr.w	lr, [sp], #4
    aeec:	f004 bb9c 	b.w	f628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    aef0:	20000238 	.word	0x20000238
    aef4:	200001fc 	.word	0x200001fc
    aef8:	20000240 	.word	0x20000240

0000aefc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    aefc:	b500      	push	{lr}
    aefe:	4908      	ldr	r1, [pc, #32]	; (af20 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    af00:	4808      	ldr	r0, [pc, #32]	; (af24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af02:	f004 fb91 	bl	f628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af06:	4807      	ldr	r0, [pc, #28]	; (af24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af08:	4907      	ldr	r1, [pc, #28]	; (af28 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    af0a:	1d00      	adds	r0, r0, #4
    af0c:	f004 fb8c 	bl	f628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af10:	4804      	ldr	r0, [pc, #16]	; (af24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    af12:	4906      	ldr	r1, [pc, #24]	; (af2c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    af14:	3008      	adds	r0, #8
    af16:	f85d eb04 	ldr.w	lr, [sp], #4
    af1a:	f004 bb85 	b.w	f628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    af1e:	0000      	.short	0x0000
    af20:	20000228 	.word	0x20000228
    af24:	200001fc 	.word	0x200001fc
    af28:	20000230 	.word	0x20000230
    af2c:	20000220 	.word	0x20000220
    af30:	b510      	push	{r4, lr}
    af32:	f002 fbfb 	bl	d72c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    af36:	4809      	ldr	r0, [pc, #36]	; (af5c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    af38:	f7f9 fda0 	bl	4a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    af3c:	2000      	movs	r0, #0
    af3e:	f7f9 f8b3 	bl	40a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    af42:	4908      	ldr	r1, [pc, #32]	; (af64 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x68>)
    af44:	4806      	ldr	r0, [pc, #24]	; (af60 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>)
    af46:	6008      	str	r0, [r1, #0]
    af48:	f7fd fd62 	bl	8a10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    af4c:	4907      	ldr	r1, [pc, #28]	; (af6c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x70>)
    af4e:	4806      	ldr	r0, [pc, #24]	; (af68 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x6c>)
    af50:	6008      	str	r0, [r1, #0]
    af52:	4908      	ldr	r1, [pc, #32]	; (af74 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x78>)
    af54:	4806      	ldr	r0, [pc, #24]	; (af70 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    af56:	6008      	str	r0, [r1, #0]
    af58:	bd10      	pop	{r4, pc}
    af5a:	0000      	.short	0x0000
    af5c:	200012bd 	.word	0x200012bd
    af60:	00004a29 	.word	0x00004a29
    af64:	2000021c 	.word	0x2000021c
    af68:	000087a9 	.word	0x000087a9
    af6c:	20000210 	.word	0x20000210
    af70:	00005e5d 	.word	0x00005e5d
    af74:	2000020c 	.word	0x2000020c
    af78:	b510      	push	{r4, lr}
    af7a:	f7fb fb6d 	bl	6658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    af7e:	f7ff fae9 	bl	a554 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    af82:	f7fc fc47 	bl	7814 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>
    af86:	4805      	ldr	r0, [pc, #20]	; (af9c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa0>)
    af88:	f7fb fb02 	bl	6590 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    af8c:	4905      	ldr	r1, [pc, #20]	; (afa4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa8>)
    af8e:	4804      	ldr	r0, [pc, #16]	; (afa0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa4>)
    af90:	6008      	str	r0, [r1, #0]
    af92:	4906      	ldr	r1, [pc, #24]	; (afac <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xb0>)
    af94:	4804      	ldr	r0, [pc, #16]	; (afa8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xac>)
    af96:	6008      	str	r0, [r1, #0]
    af98:	bd10      	pop	{r4, pc}
    af9a:	0000      	.short	0x0000
    af9c:	200012bd 	.word	0x200012bd
    afa0:	000064e5 	.word	0x000064e5
    afa4:	20000214 	.word	0x20000214
    afa8:	00005f99 	.word	0x00005f99
    afac:	20000218 	.word	0x20000218

0000afb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    afb0:	2101      	movs	r1, #1
    afb2:	4081      	lsls	r1, r0
    afb4:	4802      	ldr	r0, [pc, #8]	; (afc0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    afb6:	6802      	ldr	r2, [r0, #0]
    afb8:	4311      	orrs	r1, r2
    afba:	6001      	str	r1, [r0, #0]
    afbc:	4770      	bx	lr
    afbe:	0000      	.short	0x0000
    afc0:	20000248 	.word	0x20000248

0000afc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    afc4:	4801      	ldr	r0, [pc, #4]	; (afcc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    afc6:	6800      	ldr	r0, [r0, #0]
    afc8:	4770      	bx	lr
    afca:	0000      	.short	0x0000
    afcc:	20000248 	.word	0x20000248

0000afd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    afd0:	4803      	ldr	r0, [pc, #12]	; (afe0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    afd2:	8800      	ldrh	r0, [r0, #0]
    afd4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    afd8:	0040      	lsls	r0, r0, #1
    afda:	1c40      	adds	r0, r0, #1
    afdc:	4770      	bx	lr
    afde:	0000      	.short	0x0000
    afe0:	20000248 	.word	0x20000248

0000afe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    afe4:	b510      	push	{r4, lr}
    afe6:	f7f8 faf5 	bl	35d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    afea:	2200      	movs	r2, #0
    afec:	4b08      	ldr	r3, [pc, #32]	; (b010 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    afee:	4611      	mov	r1, r2
    aff0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    aff4:	4284      	cmp	r4, r0
    aff6:	d303      	bcc.n	b000 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    aff8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    affc:	7882      	ldrb	r2, [r0, #2]
    affe:	e003      	b.n	b008 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b000:	1c49      	adds	r1, r1, #1
    b002:	b2c9      	uxtb	r1, r1
    b004:	290c      	cmp	r1, #12
    b006:	d3f3      	bcc.n	aff0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b008:	4802      	ldr	r0, [pc, #8]	; (b014 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b00a:	7002      	strb	r2, [r0, #0]
    b00c:	bd10      	pop	{r4, pc}
    b00e:	0000      	.short	0x0000
    b010:	0000f6ae 	.word	0x0000f6ae
    b014:	20000297 	.word	0x20000297

0000b018 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    b018:	4801      	ldr	r0, [pc, #4]	; (b020 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    b01a:	7800      	ldrb	r0, [r0, #0]
    b01c:	4770      	bx	lr
    b01e:	0000      	.short	0x0000
    b020:	20000297 	.word	0x20000297

0000b024 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b024:	b570      	push	{r4, r5, r6, lr}
    b026:	4605      	mov	r5, r0
    b028:	4616      	mov	r6, r2
    b02a:	460c      	mov	r4, r1
    b02c:	2002      	movs	r0, #2
    b02e:	f000 f9f9 	bl	b424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b032:	4906      	ldr	r1, [pc, #24]	; (b04c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b034:	2001      	movs	r0, #1
    b036:	1ef6      	subs	r6, r6, #3
    b038:	7008      	strb	r0, [r1, #0]
    b03a:	4805      	ldr	r0, [pc, #20]	; (b050 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b03c:	6006      	str	r6, [r0, #0]
    b03e:	4804      	ldr	r0, [pc, #16]	; (b050 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b040:	3808      	subs	r0, #8
    b042:	6005      	str	r5, [r0, #0]
    b044:	1f00      	subs	r0, r0, #4
    b046:	6004      	str	r4, [r0, #0]
    b048:	bd70      	pop	{r4, r5, r6, pc}
    b04a:	0000      	.short	0x0000
    b04c:	20000298 	.word	0x20000298
    b050:	4000f510 	.word	0x4000f510

0000b054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b054:	b510      	push	{r4, lr}
    b056:	4c0c      	ldr	r4, [pc, #48]	; (b088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b058:	7820      	ldrb	r0, [r4, #0]
    b05a:	b180      	cbz	r0, b07e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b05c:	490b      	ldr	r1, [pc, #44]	; (b08c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b05e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b062:	6008      	str	r0, [r1, #0]
    b064:	f000 f86a 	bl	b13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b068:	2100      	movs	r1, #0
    b06a:	b120      	cbz	r0, b076 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b06c:	2001      	movs	r0, #1
    b06e:	7060      	strb	r0, [r4, #1]
    b070:	4807      	ldr	r0, [pc, #28]	; (b090 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b072:	6800      	ldr	r0, [r0, #0]
    b074:	e001      	b.n	b07a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b076:	7061      	strb	r1, [r4, #1]
    b078:	2010      	movs	r0, #16
    b07a:	70a0      	strb	r0, [r4, #2]
    b07c:	7021      	strb	r1, [r4, #0]
    b07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b082:	2000      	movs	r0, #0
    b084:	f000 b9ce 	b.w	b424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b088:	20000298 	.word	0x20000298
    b08c:	4001f508 	.word	0x4001f508
    b090:	4000f400 	.word	0x4000f400

0000b094 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b094:	b510      	push	{r4, lr}
    b096:	2002      	movs	r0, #2
    b098:	f000 f9c4 	bl	b424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b09c:	4904      	ldr	r1, [pc, #16]	; (b0b0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b09e:	2001      	movs	r0, #1
    b0a0:	7008      	strb	r0, [r1, #0]
    b0a2:	f000 f859 	bl	b158 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b0a6:	4903      	ldr	r1, [pc, #12]	; (b0b4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b0a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b0ac:	6008      	str	r0, [r1, #0]
    b0ae:	bd10      	pop	{r4, pc}
    b0b0:	20000298 	.word	0x20000298
    b0b4:	4001f504 	.word	0x4001f504

0000b0b8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b0b8:	4803      	ldr	r0, [pc, #12]	; (b0c8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b0ba:	2100      	movs	r1, #0
    b0bc:	7001      	strb	r1, [r0, #0]
    b0be:	7041      	strb	r1, [r0, #1]
    b0c0:	2110      	movs	r1, #16
    b0c2:	7081      	strb	r1, [r0, #2]
    b0c4:	4770      	bx	lr
    b0c6:	0000      	.short	0x0000
    b0c8:	20000298 	.word	0x20000298

0000b0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b0cc:	4807      	ldr	r0, [pc, #28]	; (b0ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b0ce:	b510      	push	{r4, lr}
    b0d0:	7801      	ldrb	r1, [r0, #0]
    b0d2:	b141      	cbz	r1, b0e6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b0d4:	f000 f832 	bl	b13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b0d8:	b118      	cbz	r0, b0e2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b0da:	4805      	ldr	r0, [pc, #20]	; (b0f0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b0dc:	6800      	ldr	r0, [r0, #0]
    b0de:	b2c0      	uxtb	r0, r0
    b0e0:	bd10      	pop	{r4, pc}
    b0e2:	2010      	movs	r0, #16
    b0e4:	bd10      	pop	{r4, pc}
    b0e6:	7880      	ldrb	r0, [r0, #2]
    b0e8:	bd10      	pop	{r4, pc}
    b0ea:	0000      	.short	0x0000
    b0ec:	20000298 	.word	0x20000298
    b0f0:	4000f400 	.word	0x4000f400

0000b0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b0f4:	4808      	ldr	r0, [pc, #32]	; (b118 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b0f6:	b510      	push	{r4, lr}
    b0f8:	7801      	ldrb	r1, [r0, #0]
    b0fa:	b159      	cbz	r1, b114 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b0fc:	4807      	ldr	r0, [pc, #28]	; (b11c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b0fe:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b102:	b128      	cbz	r0, b110 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b104:	f000 f80c 	bl	b120 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b108:	2800      	cmp	r0, #0
    b10a:	d000      	beq.n	b10e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b10c:	2001      	movs	r0, #1
    b10e:	bd10      	pop	{r4, pc}
    b110:	2002      	movs	r0, #2
    b112:	bd10      	pop	{r4, pc}
    b114:	7840      	ldrb	r0, [r0, #1]
    b116:	bd10      	pop	{r4, pc}
    b118:	20000298 	.word	0x20000298
    b11c:	4000f000 	.word	0x4000f000
    b120:	4805      	ldr	r0, [pc, #20]	; (b138 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b122:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b126:	b111      	cbz	r1, b12e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b128:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b12c:	b108      	cbz	r0, b132 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b12e:	2000      	movs	r0, #0
    b130:	4770      	bx	lr
    b132:	2001      	movs	r0, #1
    b134:	4770      	bx	lr
    b136:	0000      	.short	0x0000
    b138:	4000f000 	.word	0x4000f000
    b13c:	4805      	ldr	r0, [pc, #20]	; (b154 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b13e:	b510      	push	{r4, lr}
    b140:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b144:	b120      	cbz	r0, b150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b146:	f7ff ffeb 	bl	b120 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b14a:	b108      	cbz	r0, b150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b14c:	2001      	movs	r0, #1
    b14e:	bd10      	pop	{r4, pc}
    b150:	2000      	movs	r0, #0
    b152:	bd10      	pop	{r4, pc}
    b154:	4000f000 	.word	0x4000f000
    b158:	4804      	ldr	r0, [pc, #16]	; (b16c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b15a:	2100      	movs	r1, #0
    b15c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b160:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b164:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b168:	4770      	bx	lr
    b16a:	0000      	.short	0x0000
    b16c:	4000f000 	.word	0x4000f000

0000b170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b170:	4a08      	ldr	r2, [pc, #32]	; (b194 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b172:	b510      	push	{r4, lr}
    b174:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b178:	4907      	ldr	r1, [pc, #28]	; (b198 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b17a:	4610      	mov	r0, r2
    b17c:	f7f8 fc6c 	bl	3a58 <mpsl_fem_lna_configuration_set>
    b180:	2800      	cmp	r0, #0
    b182:	d005      	beq.n	b190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b184:	1c40      	adds	r0, r0, #1
    b186:	d003      	beq.n	b190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b188:	217d      	movs	r1, #125	; 0x7d
    b18a:	2040      	movs	r0, #64	; 0x40
    b18c:	f7f8 fdc4 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b190:	bd10      	pop	{r4, pc}
    b192:	0000      	.short	0x0000
    b194:	2000024c 	.word	0x2000024c
    b198:	0000b1c8 	.word	0x0000b1c8

0000b19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b19c:	4a08      	ldr	r2, [pc, #32]	; (b1c0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b19e:	b510      	push	{r4, lr}
    b1a0:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b1a4:	4907      	ldr	r1, [pc, #28]	; (b1c4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b1a6:	4610      	mov	r0, r2
    b1a8:	f7f8 fc62 	bl	3a70 <mpsl_fem_pa_configuration_set>
    b1ac:	2800      	cmp	r0, #0
    b1ae:	d005      	beq.n	b1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b1b0:	1c40      	adds	r0, r0, #1
    b1b2:	d003      	beq.n	b1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b1b4:	2172      	movs	r1, #114	; 0x72
    b1b6:	2040      	movs	r0, #64	; 0x40
    b1b8:	f7f8 fdae 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1bc:	bd10      	pop	{r4, pc}
    b1be:	0000      	.short	0x0000
    b1c0:	2000024c 	.word	0x2000024c
    b1c4:	0000b1c8 	.word	0x0000b1c8
    b1c8:	00000001 	.word	0x00000001
    b1cc:	40001110 	.word	0x40001110
	...

0000b1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b1e0:	4a07      	ldr	r2, [pc, #28]	; (b200 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b1e2:	b510      	push	{r4, lr}
    b1e4:	7853      	ldrb	r3, [r2, #1]
    b1e6:	b133      	cbz	r3, b1f6 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b1e8:	4b06      	ldr	r3, [pc, #24]	; (b204 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b1ea:	6019      	str	r1, [r3, #0]
    b1ec:	1d19      	adds	r1, r3, #4
    b1ee:	6008      	str	r0, [r1, #0]
    b1f0:	2001      	movs	r0, #1
    b1f2:	7090      	strb	r0, [r2, #2]
    b1f4:	bd10      	pop	{r4, pc}
    b1f6:	21ba      	movs	r1, #186	; 0xba
    b1f8:	203c      	movs	r0, #60	; 0x3c
    b1fa:	f7f8 fd8d 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1fe:	0000      	.short	0x0000
    b200:	2000029b 	.word	0x2000029b
    b204:	4000f50c 	.word	0x4000f50c

0000b208 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b208:	4809      	ldr	r0, [pc, #36]	; (b230 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b20a:	b510      	push	{r4, lr}
    b20c:	7801      	ldrb	r1, [r0, #0]
    b20e:	b151      	cbz	r1, b226 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b210:	7880      	ldrb	r0, [r0, #2]
    b212:	b140      	cbz	r0, b226 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b214:	4907      	ldr	r1, [pc, #28]	; (b234 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b216:	2000      	movs	r0, #0
    b218:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b21c:	4906      	ldr	r1, [pc, #24]	; (b238 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b21e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b222:	6008      	str	r0, [r1, #0]
    b224:	bd10      	pop	{r4, pc}
    b226:	21e1      	movs	r1, #225	; 0xe1
    b228:	203c      	movs	r0, #60	; 0x3c
    b22a:	f7f8 fd75 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b22e:	0000      	.short	0x0000
    b230:	2000029b 	.word	0x2000029b
    b234:	4000f000 	.word	0x4000f000
    b238:	4001f504 	.word	0x4001f504

0000b23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b23c:	b570      	push	{r4, r5, r6, lr}
    b23e:	4c0b      	ldr	r4, [pc, #44]	; (b26c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b240:	2500      	movs	r5, #0
    b242:	7820      	ldrb	r0, [r4, #0]
    b244:	b158      	cbz	r0, b25e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b246:	f000 f8e5 	bl	b414 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b24a:	4809      	ldr	r0, [pc, #36]	; (b270 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b24c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b250:	b118      	cbz	r0, b25a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b252:	4808      	ldr	r0, [pc, #32]	; (b274 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b254:	6800      	ldr	r0, [r0, #0]
    b256:	70e0      	strb	r0, [r4, #3]
    b258:	e000      	b.n	b25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b25a:	70e5      	strb	r5, [r4, #3]
    b25c:	7025      	strb	r5, [r4, #0]
    b25e:	2000      	movs	r0, #0
    b260:	f000 f8e0 	bl	b424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b264:	7065      	strb	r5, [r4, #1]
    b266:	70a5      	strb	r5, [r4, #2]
    b268:	bd70      	pop	{r4, r5, r6, pc}
    b26a:	0000      	.short	0x0000
    b26c:	2000029b 	.word	0x2000029b
    b270:	4000f000 	.word	0x4000f000
    b274:	4000f400 	.word	0x4000f400

0000b278 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b278:	480d      	ldr	r0, [pc, #52]	; (b2b0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b27a:	b510      	push	{r4, lr}
    b27c:	7801      	ldrb	r1, [r0, #0]
    b27e:	b191      	cbz	r1, b2a6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b280:	7880      	ldrb	r0, [r0, #2]
    b282:	b180      	cbz	r0, b2a6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b284:	490b      	ldr	r1, [pc, #44]	; (b2b4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b286:	2000      	movs	r0, #0
    b288:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b28c:	4a0a      	ldr	r2, [pc, #40]	; (b2b8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b28e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b292:	6010      	str	r0, [r2, #0]
    b294:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b298:	2a01      	cmp	r2, #1
    b29a:	d103      	bne.n	b2a4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b29c:	604a      	str	r2, [r1, #4]
    b29e:	4906      	ldr	r1, [pc, #24]	; (b2b8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b2a0:	1d09      	adds	r1, r1, #4
    b2a2:	6008      	str	r0, [r1, #0]
    b2a4:	bd10      	pop	{r4, pc}
    b2a6:	21d1      	movs	r1, #209	; 0xd1
    b2a8:	203c      	movs	r0, #60	; 0x3c
    b2aa:	f7f8 fd35 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ae:	0000      	.short	0x0000
    b2b0:	2000029b 	.word	0x2000029b
    b2b4:	4000f000 	.word	0x4000f000
    b2b8:	4001f504 	.word	0x4001f504

0000b2bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b2bc:	4803      	ldr	r0, [pc, #12]	; (b2cc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b2be:	2100      	movs	r1, #0
    b2c0:	7001      	strb	r1, [r0, #0]
    b2c2:	7041      	strb	r1, [r0, #1]
    b2c4:	7081      	strb	r1, [r0, #2]
    b2c6:	70c1      	strb	r1, [r0, #3]
    b2c8:	4770      	bx	lr
    b2ca:	0000      	.short	0x0000
    b2cc:	2000029b 	.word	0x2000029b

0000b2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2d4:	4605      	mov	r5, r0
    b2d6:	461c      	mov	r4, r3
    b2d8:	4690      	mov	r8, r2
    b2da:	460f      	mov	r7, r1
    b2dc:	2001      	movs	r0, #1
    b2de:	f000 f8a1 	bl	b424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b2e2:	4e12      	ldr	r6, [pc, #72]	; (b32c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b2e4:	4812      	ldr	r0, [pc, #72]	; (b330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b2e6:	7134      	strb	r4, [r6, #4]
    b2e8:	6007      	str	r7, [r0, #0]
    b2ea:	4911      	ldr	r1, [pc, #68]	; (b330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b2ec:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b2f0:	1f09      	subs	r1, r1, #4
    b2f2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b2f6:	6008      	str	r0, [r1, #0]
    b2f8:	f001 f8c4 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b2fc:	b938      	cbnz	r0, b30e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b2fe:	480c      	ldr	r0, [pc, #48]	; (b330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b300:	3010      	adds	r0, #16
    b302:	6801      	ldr	r1, [r0, #0]
    b304:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b308:	ea41 0108 	orr.w	r1, r1, r8
    b30c:	6001      	str	r1, [r0, #0]
    b30e:	f000 f881 	bl	b414 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b312:	b93d      	cbnz	r5, b324 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b314:	4808      	ldr	r0, [pc, #32]	; (b338 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b316:	4a07      	ldr	r2, [pc, #28]	; (b334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b318:	4906      	ldr	r1, [pc, #24]	; (b334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b31a:	3afc      	subs	r2, #252	; 0xfc
    b31c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b320:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b324:	2001      	movs	r0, #1
    b326:	7070      	strb	r0, [r6, #1]
    b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b32c:	2000029b 	.word	0x2000029b
    b330:	4000f508 	.word	0x4000f508
    b334:	4000f100 	.word	0x4000f100
    b338:	4001f088 	.word	0x4001f088

0000b33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b33c:	4808      	ldr	r0, [pc, #32]	; (b360 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b33e:	b510      	push	{r4, lr}
    b340:	7841      	ldrb	r1, [r0, #1]
    b342:	b149      	cbz	r1, b358 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b344:	2101      	movs	r1, #1
    b346:	7001      	strb	r1, [r0, #0]
    b348:	4806      	ldr	r0, [pc, #24]	; (b364 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b34a:	2200      	movs	r2, #0
    b34c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b350:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b354:	6001      	str	r1, [r0, #0]
    b356:	bd10      	pop	{r4, pc}
    b358:	21c5      	movs	r1, #197	; 0xc5
    b35a:	203c      	movs	r0, #60	; 0x3c
    b35c:	f7f8 fcdc 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b360:	2000029b 	.word	0x2000029b
    b364:	4000f000 	.word	0x4000f000

0000b368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b368:	4806      	ldr	r0, [pc, #24]	; (b384 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b36a:	7801      	ldrb	r1, [r0, #0]
    b36c:	b141      	cbz	r1, b380 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b36e:	4806      	ldr	r0, [pc, #24]	; (b388 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b370:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b374:	2800      	cmp	r0, #0
    b376:	d002      	beq.n	b37e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b378:	4804      	ldr	r0, [pc, #16]	; (b38c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b37a:	6800      	ldr	r0, [r0, #0]
    b37c:	b2c0      	uxtb	r0, r0
    b37e:	4770      	bx	lr
    b380:	78c0      	ldrb	r0, [r0, #3]
    b382:	4770      	bx	lr
    b384:	2000029b 	.word	0x2000029b
    b388:	4000f000 	.word	0x4000f000
    b38c:	4000f400 	.word	0x4000f400

0000b390 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b390:	4901      	ldr	r1, [pc, #4]	; (b398 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b392:	2001      	movs	r0, #1
    b394:	6088      	str	r0, [r1, #8]
    b396:	4770      	bx	lr
    b398:	4000f000 	.word	0x4000f000

0000b39c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b3a0:	2800      	cmp	r0, #0
    b3a2:	d02e      	beq.n	b402 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b3a4:	4818      	ldr	r0, [pc, #96]	; (b408 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b3a6:	7800      	ldrb	r0, [r0, #0]
    b3a8:	b1b0      	cbz	r0, b3d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b3aa:	4d18      	ldr	r5, [pc, #96]	; (b40c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b3ac:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b3b0:	2800      	cmp	r0, #0
    b3b2:	d126      	bne.n	b402 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b3b4:	2702      	movs	r7, #2
    b3b6:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b3ba:	4c15      	ldr	r4, [pc, #84]	; (b410 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b3bc:	6820      	ldr	r0, [r4, #0]
    b3be:	43c0      	mvns	r0, r0
    b3c0:	f340 1600 	sbfx	r6, r0, #4, #1
    b3c4:	6820      	ldr	r0, [r4, #0]
    b3c6:	f040 0010 	orr.w	r0, r0, #16
    b3ca:	6020      	str	r0, [r4, #0]
    b3cc:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b3d0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b3d4:	1c76      	adds	r6, r6, #1
    b3d6:	e009      	b.n	b3ec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b3d8:	f240 1153 	movw	r1, #339	; 0x153
    b3dc:	203c      	movs	r0, #60	; 0x3c
    b3de:	f7f8 fc9b 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3e2:	bf00      	nop
    b3e4:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b3e8:	f7f8 fae0 	bl	39ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b3ec:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b3f0:	2800      	cmp	r0, #0
    b3f2:	d0f7      	beq.n	b3e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b3f4:	b91e      	cbnz	r6, b3fe <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b3f6:	6820      	ldr	r0, [r4, #0]
    b3f8:	f020 0010 	bic.w	r0, r0, #16
    b3fc:	6020      	str	r0, [r4, #0]
    b3fe:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b406:	0000      	.short	0x0000
    b408:	2000029b 	.word	0x2000029b
    b40c:	4000f000 	.word	0x4000f000
    b410:	e000ed10 	.word	0xe000ed10
    b414:	4902      	ldr	r1, [pc, #8]	; (b420 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b416:	4801      	ldr	r0, [pc, #4]	; (b41c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b418:	6008      	str	r0, [r1, #0]
    b41a:	4770      	bx	lr
    b41c:	02020000 	.word	0x02020000
    b420:	4001f508 	.word	0x4001f508

0000b424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b424:	b510      	push	{r4, lr}
    b426:	4604      	mov	r4, r0
    b428:	f000 f822 	bl	b470 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b42c:	2c00      	cmp	r4, #0
    b42e:	d017      	beq.n	b460 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b430:	4a0c      	ldr	r2, [pc, #48]	; (b464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b432:	480c      	ldr	r0, [pc, #48]	; (b464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b434:	490c      	ldr	r1, [pc, #48]	; (b468 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b436:	3214      	adds	r2, #20
    b438:	4b0c      	ldr	r3, [pc, #48]	; (b46c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b43a:	2c01      	cmp	r4, #1
    b43c:	d005      	beq.n	b44a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b43e:	2c02      	cmp	r4, #2
    b440:	d008      	beq.n	b454 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b442:	2183      	movs	r1, #131	; 0x83
    b444:	203d      	movs	r0, #61	; 0x3d
    b446:	f7f8 fc67 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b44a:	2402      	movs	r4, #2
    b44c:	6004      	str	r4, [r0, #0]
    b44e:	6011      	str	r1, [r2, #0]
    b450:	0620      	lsls	r0, r4, #24
    b452:	e004      	b.n	b45e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b454:	2403      	movs	r4, #3
    b456:	6004      	str	r4, [r0, #0]
    b458:	6011      	str	r1, [r2, #0]
    b45a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b45e:	6018      	str	r0, [r3, #0]
    b460:	bd10      	pop	{r4, pc}
    b462:	0000      	.short	0x0000
    b464:	4000f500 	.word	0x4000f500
    b468:	200013bf 	.word	0x200013bf
    b46c:	4001f504 	.word	0x4001f504
    b470:	4804      	ldr	r0, [pc, #16]	; (b484 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b472:	2100      	movs	r1, #0
    b474:	6001      	str	r1, [r0, #0]
    b476:	6001      	str	r1, [r0, #0]
    b478:	4903      	ldr	r1, [pc, #12]	; (b488 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b47a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b47e:	6008      	str	r0, [r1, #0]
    b480:	4770      	bx	lr
    b482:	0000      	.short	0x0000
    b484:	4000f500 	.word	0x4000f500
    b488:	4001f508 	.word	0x4001f508

0000b48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b48c:	4805      	ldr	r0, [pc, #20]	; (b4a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b48e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b492:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b496:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b49a:	4903      	ldr	r1, [pc, #12]	; (b4a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    b49c:	2000      	movs	r0, #0
    b49e:	6008      	str	r0, [r1, #0]
    b4a0:	4770      	bx	lr
    b4a2:	0000      	.short	0x0000
    b4a4:	40001000 	.word	0x40001000
    b4a8:	40001560 	.word	0x40001560

0000b4ac <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b4ac:	4904      	ldr	r1, [pc, #16]	; (b4c0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b4ae:	6008      	str	r0, [r1, #0]
    b4b0:	4804      	ldr	r0, [pc, #16]	; (b4c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    b4b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b4b6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b4ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b4be:	4770      	bx	lr
    b4c0:	40001560 	.word	0x40001560
    b4c4:	40001000 	.word	0x40001000

0000b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4ca:	4c1e      	ldr	r4, [pc, #120]	; (b544 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    b4cc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4d0:	2710      	movs	r7, #16
    b4d2:	f3c0 1600 	ubfx	r6, r0, #4, #1
    b4d6:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    b4da:	2002      	movs	r0, #2
    b4dc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b4e0:	4819      	ldr	r0, [pc, #100]	; (b548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    b4e2:	2500      	movs	r5, #0
    b4e4:	491a      	ldr	r1, [pc, #104]	; (b550 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    b4e6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b4ea:	4818      	ldr	r0, [pc, #96]	; (b54c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    b4ec:	6008      	str	r0, [r1, #0]
    b4ee:	4819      	ldr	r0, [pc, #100]	; (b554 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    b4f0:	6800      	ldr	r0, [r0, #0]
    b4f2:	b1b0      	cbz	r0, b522 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b4f4:	20ff      	movs	r0, #255	; 0xff
    b4f6:	f88d 0000 	strb.w	r0, [sp]
    b4fa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b4fe:	2001      	movs	r0, #1
    b500:	6120      	str	r0, [r4, #16]
    b502:	e004      	b.n	b50e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    b504:	f89d 0000 	ldrb.w	r0, [sp]
    b508:	1e40      	subs	r0, r0, #1
    b50a:	f88d 0000 	strb.w	r0, [sp]
    b50e:	f89d 0000 	ldrb.w	r0, [sp]
    b512:	b118      	cbz	r0, b51c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    b514:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    b518:	2800      	cmp	r0, #0
    b51a:	d0f3      	beq.n	b504 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    b51c:	f89d 0000 	ldrb.w	r0, [sp]
    b520:	b150      	cbz	r0, b538 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    b522:	f000 fc6f 	bl	be04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    b526:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b52a:	f000 fde7 	bl	c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b52e:	2e00      	cmp	r6, #0
    b530:	d001      	beq.n	b536 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b532:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    b536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b538:	f240 71a3 	movw	r1, #1955	; 0x7a3
    b53c:	203e      	movs	r0, #62	; 0x3e
    b53e:	f7f8 fbeb 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b542:	0000      	.short	0x0000
    b544:	40001000 	.word	0x40001000
    b548:	2000107c 	.word	0x2000107c
    b54c:	0c0e0000 	.word	0x0c0e0000
    b550:	4001f508 	.word	0x4001f508
    b554:	40001550 	.word	0x40001550

0000b558 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b55c:	4c1f      	ldr	r4, [pc, #124]	; (b5dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    b55e:	4607      	mov	r7, r0
    b560:	4688      	mov	r8, r1
    b562:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b566:	07c1      	lsls	r1, r0, #31
    b568:	d018      	beq.n	b59c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b56a:	4a1d      	ldr	r2, [pc, #116]	; (b5e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b56c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b570:	6011      	str	r1, [r2, #0]
    b572:	4d1c      	ldr	r5, [pc, #112]	; (b5e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b574:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    b578:	f041 0101 	orr.w	r1, r1, #1
    b57c:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    b580:	f040 0002 	orr.w	r0, r0, #2
    b584:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b588:	4640      	mov	r0, r8
    b58a:	f000 fe1b 	bl	c1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b58e:	f000 fbe7 	bl	bd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b592:	2601      	movs	r6, #1
    b594:	b13f      	cbz	r7, b5a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b596:	2f01      	cmp	r7, #1
    b598:	d00e      	beq.n	b5b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b59a:	e016      	b.n	b5ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b59c:	f240 612d 	movw	r1, #1581	; 0x62d
    b5a0:	203e      	movs	r0, #62	; 0x3e
    b5a2:	f7f8 fbb9 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5a6:	4640      	mov	r0, r8
    b5a8:	f000 fbfa 	bl	bda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b5ac:	4640      	mov	r0, r8
    b5ae:	f000 fbbb 	bl	bd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b5b2:	7266      	strb	r6, [r4, #9]
    b5b4:	602e      	str	r6, [r5, #0]
    b5b6:	e008      	b.n	b5ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b5b8:	f000 fc1a 	bl	bdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b5bc:	f000 fd68 	bl	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b5c0:	2002      	movs	r0, #2
    b5c2:	7260      	strb	r0, [r4, #9]
    b5c4:	f000 fc90 	bl	bee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b5c8:	606e      	str	r6, [r5, #4]
    b5ca:	4807      	ldr	r0, [pc, #28]	; (b5e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b5cc:	64c6      	str	r6, [r0, #76]	; 0x4c
    b5ce:	4807      	ldr	r0, [pc, #28]	; (b5ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b5d0:	6801      	ldr	r1, [r0, #0]
    b5d2:	4638      	mov	r0, r7
    b5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5d8:	f004 b920 	b.w	f81c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b5dc:	2000107c 	.word	0x2000107c
    b5e0:	4001f504 	.word	0x4001f504
    b5e4:	40001000 	.word	0x40001000
    b5e8:	40008000 	.word	0x40008000
    b5ec:	4000854c 	.word	0x4000854c

0000b5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5f4:	4d35      	ldr	r5, [pc, #212]	; (b6cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b5f6:	4606      	mov	r6, r0
    b5f8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b5fc:	4689      	mov	r9, r1
    b5fe:	6028      	str	r0, [r5, #0]
    b600:	4c33      	ldr	r4, [pc, #204]	; (b6d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b602:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b606:	f040 0002 	orr.w	r0, r0, #2
    b60a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b60e:	4608      	mov	r0, r1
    b610:	f000 fdd8 	bl	c1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b614:	f000 fba4 	bl	bd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b618:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b61c:	2700      	movs	r7, #0
    b61e:	b116      	cbz	r6, b626 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b620:	2e01      	cmp	r6, #1
    b622:	d027      	beq.n	b674 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b624:	e03f      	b.n	b6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b626:	4648      	mov	r0, r9
    b628:	f000 fbba 	bl	bda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b62c:	79e0      	ldrb	r0, [r4, #7]
    b62e:	2801      	cmp	r0, #1
    b630:	d105      	bne.n	b63e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b632:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b636:	f041 0108 	orr.w	r1, r1, #8
    b63a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b63e:	4648      	mov	r0, r9
    b640:	f000 fb72 	bl	bd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b644:	2001      	movs	r0, #1
    b646:	7260      	strb	r0, [r4, #9]
    b648:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b64a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b64e:	62a0      	str	r0, [r4, #40]	; 0x28
    b650:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b654:	6028      	str	r0, [r5, #0]
    b656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b65a:	f1b9 0f02 	cmp.w	r9, #2
    b65e:	d007      	beq.n	b670 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b660:	f640 0034 	movw	r0, #2100	; 0x834
    b664:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b668:	4410      	add	r0, r2
    b66a:	fbb0 f7f1 	udiv	r7, r0, r1
    b66e:	e01a      	b.n	b6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b670:	4608      	mov	r0, r1
    b672:	e7f7      	b.n	b664 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b674:	f000 fbbc 	bl	bdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b678:	f000 fd0a 	bl	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b67c:	79e0      	ldrb	r0, [r4, #7]
    b67e:	2801      	cmp	r0, #1
    b680:	d105      	bne.n	b68e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b682:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b686:	f041 0104 	orr.w	r1, r1, #4
    b68a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b68e:	2002      	movs	r0, #2
    b690:	7260      	strb	r0, [r4, #9]
    b692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b694:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b698:	62a0      	str	r0, [r4, #40]	; 0x28
    b69a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b69e:	6028      	str	r0, [r5, #0]
    b6a0:	2729      	movs	r7, #41	; 0x29
    b6a2:	f000 fc21 	bl	bee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b6a6:	f000 fc0b 	bl	bec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    b6aa:	f000 fdc5 	bl	c238 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b6ae:	6800      	ldr	r0, [r0, #0]
    b6b0:	2801      	cmp	r0, #1
    b6b2:	d006      	beq.n	b6c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b6b4:	2100      	movs	r1, #0
    b6b6:	4630      	mov	r0, r6
    b6b8:	f004 f8b0 	bl	f81c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b6bc:	4638      	mov	r0, r7
    b6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6c2:	f7ff ff01 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b6c6:	2000      	movs	r0, #0
    b6c8:	e7f9      	b.n	b6be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b6ca:	0000      	.short	0x0000
    b6cc:	4001f504 	.word	0x4001f504
    b6d0:	2000107c 	.word	0x2000107c
    b6d4:	40001000 	.word	0x40001000

0000b6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b6d8:	b510      	push	{r4, lr}
    b6da:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b6dc:	4901      	ldr	r1, [pc, #4]	; (b6e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b6de:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b6e2:	bd10      	pop	{r4, pc}
    b6e4:	2000106c 	.word	0x2000106c

0000b6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b6e8:	b570      	push	{r4, r5, r6, lr}
    b6ea:	4c10      	ldr	r4, [pc, #64]	; (b72c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    b6ec:	4606      	mov	r6, r0
    b6ee:	2002      	movs	r0, #2
    b6f0:	7320      	strb	r0, [r4, #12]
    b6f2:	2596      	movs	r5, #150	; 0x96
    b6f4:	f000 f856 	bl	b7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b6f8:	4602      	mov	r2, r0
    b6fa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b6fe:	f894 1020 	ldrb.w	r1, [r4, #32]
    b702:	2801      	cmp	r0, #1
    b704:	d00d      	beq.n	b722 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    b706:	4628      	mov	r0, r5
    b708:	f004 f8a0 	bl	f84c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b70c:	4908      	ldr	r1, [pc, #32]	; (b730 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b70e:	6120      	str	r0, [r4, #16]
    b710:	2000      	movs	r0, #0
    b712:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b716:	6921      	ldr	r1, [r4, #16]
    b718:	69e0      	ldr	r0, [r4, #28]
    b71a:	4408      	add	r0, r1
    b71c:	4905      	ldr	r1, [pc, #20]	; (b734 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b71e:	6008      	str	r0, [r1, #0]
    b720:	bd70      	pop	{r4, r5, r6, pc}
    b722:	4633      	mov	r3, r6
    b724:	4628      	mov	r0, r5
    b726:	f004 f8ad 	bl	f884 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b72a:	e7ef      	b.n	b70c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b72c:	2000107c 	.word	0x2000107c
    b730:	40008000 	.word	0x40008000
    b734:	40008544 	.word	0x40008544

0000b738 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b73c:	2238      	movs	r2, #56	; 0x38
    b73e:	2100      	movs	r1, #0
    b740:	4813      	ldr	r0, [pc, #76]	; (b790 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b742:	f000 ff6b 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b746:	f000 fcd9 	bl	c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b74a:	f000 fe70 	bl	c42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b74e:	4d11      	ldr	r5, [pc, #68]	; (b794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b750:	4e10      	ldr	r6, [pc, #64]	; (b794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b752:	2400      	movs	r4, #0
    b754:	4f0f      	ldr	r7, [pc, #60]	; (b794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b756:	3508      	adds	r5, #8
    b758:	3610      	adds	r6, #16
    b75a:	b928      	cbnz	r0, b768 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b75c:	f000 fe7e 	bl	c45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b760:	b910      	cbnz	r0, b768 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b762:	f000 fe85 	bl	c470 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b766:	b108      	cbz	r0, b76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b768:	2224      	movs	r2, #36	; 0x24
    b76a:	e006      	b.n	b77a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b76c:	f000 fec0 	bl	c4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b770:	b910      	cbnz	r0, b778 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b772:	f000 feb3 	bl	c4dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b776:	b140      	cbz	r0, b78a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b778:	2240      	movs	r2, #64	; 0x40
    b77a:	21ff      	movs	r1, #255	; 0xff
    b77c:	4638      	mov	r0, r7
    b77e:	f000 ff4d 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b782:	602c      	str	r4, [r5, #0]
    b784:	6034      	str	r4, [r6, #0]
    b786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b78a:	2238      	movs	r2, #56	; 0x38
    b78c:	e7f5      	b.n	b77a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b78e:	0000      	.short	0x0000
    b790:	2000107c 	.word	0x2000107c
    b794:	40000e00 	.word	0x40000e00

0000b798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b798:	4801      	ldr	r0, [pc, #4]	; (b7a0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    b79a:	69c0      	ldr	r0, [r0, #28]
    b79c:	4770      	bx	lr
    b79e:	0000      	.short	0x0000
    b7a0:	2000107c 	.word	0x2000107c

0000b7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b7a4:	4814      	ldr	r0, [pc, #80]	; (b7f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b7a6:	b510      	push	{r4, lr}
    b7a8:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b7ac:	7a40      	ldrb	r0, [r0, #9]
    b7ae:	b141      	cbz	r1, b7c2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b7b0:	2902      	cmp	r1, #2
    b7b2:	d00b      	beq.n	b7cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b7b4:	2802      	cmp	r0, #2
    b7b6:	d009      	beq.n	b7cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b7b8:	2901      	cmp	r1, #1
    b7ba:	d00b      	beq.n	b7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b7bc:	2801      	cmp	r0, #1
    b7be:	d009      	beq.n	b7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b7c0:	e015      	b.n	b7ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b7c2:	2800      	cmp	r0, #0
    b7c4:	d1f6      	bne.n	b7b4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b7c6:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b7ca:	e00d      	b.n	b7e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    b7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7d0:	f000 bc10 	b.w	bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    b7d4:	4809      	ldr	r0, [pc, #36]	; (b7fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b7d6:	6800      	ldr	r0, [r0, #0]
    b7d8:	f000 000f 	and.w	r0, r0, #15
    b7dc:	2803      	cmp	r0, #3
    b7de:	d006      	beq.n	b7ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    b7e0:	2804      	cmp	r0, #4
    b7e2:	d006      	beq.n	b7f2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    b7e4:	f240 11e7 	movw	r1, #487	; 0x1e7
    b7e8:	203e      	movs	r0, #62	; 0x3e
    b7ea:	f7f8 fa95 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7ee:	2001      	movs	r0, #1
    b7f0:	bd10      	pop	{r4, pc}
    b7f2:	2002      	movs	r0, #2
    b7f4:	bd10      	pop	{r4, pc}
    b7f6:	0000      	.short	0x0000
    b7f8:	2000107c 	.word	0x2000107c
    b7fc:	40001510 	.word	0x40001510

0000b800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b800:	b510      	push	{r4, lr}
    b802:	f000 fc61 	bl	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    b806:	f7ff fe5f 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b80a:	f003 ff9d 	bl	f748 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b80e:	480f      	ldr	r0, [pc, #60]	; (b84c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b810:	4a0f      	ldr	r2, [pc, #60]	; (b850 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b812:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b814:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b818:	6011      	str	r1, [r2, #0]
    b81a:	2400      	movs	r4, #0
    b81c:	6284      	str	r4, [r0, #40]	; 0x28
    b81e:	7304      	strb	r4, [r0, #12]
    b820:	61c4      	str	r4, [r0, #28]
    b822:	6184      	str	r4, [r0, #24]
    b824:	f000 fc50 	bl	c0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    b828:	480a      	ldr	r0, [pc, #40]	; (b854 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b82a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b82e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b832:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b836:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b83a:	2001      	movs	r0, #1
    b83c:	f003 ffbd 	bl	f7ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b844:	2001      	movs	r0, #1
    b846:	f003 bfab 	b.w	f7a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b84a:	0000      	.short	0x0000
    b84c:	2000107c 	.word	0x2000107c
    b850:	4001f508 	.word	0x4001f508
    b854:	40008000 	.word	0x40008000

0000b858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b85c:	2001      	movs	r0, #1
    b85e:	f003 ffac 	bl	f7ba <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b862:	4838      	ldr	r0, [pc, #224]	; (b944 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b864:	2400      	movs	r4, #0
    b866:	6004      	str	r4, [r0, #0]
    b868:	2601      	movs	r6, #1
    b86a:	6006      	str	r6, [r0, #0]
    b86c:	f000 fe16 	bl	c49c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b870:	4d35      	ldr	r5, [pc, #212]	; (b948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b872:	b118      	cbz	r0, b87c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    b874:	6828      	ldr	r0, [r5, #0]
    b876:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b87a:	6028      	str	r0, [r5, #0]
    b87c:	f000 fe02 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b880:	b128      	cbz	r0, b88e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    b882:	6828      	ldr	r0, [r5, #0]
    b884:	4931      	ldr	r1, [pc, #196]	; (b94c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    b886:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    b88a:	4308      	orrs	r0, r1
    b88c:	6028      	str	r0, [r5, #0]
    b88e:	f000 fe15 	bl	c4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b892:	b138      	cbz	r0, b8a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    b894:	482c      	ldr	r0, [pc, #176]	; (b948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b896:	1d00      	adds	r0, r0, #4
    b898:	6801      	ldr	r1, [r0, #0]
    b89a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    b89e:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    b8a2:	6001      	str	r1, [r0, #0]
    b8a4:	4928      	ldr	r1, [pc, #160]	; (b948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b8a6:	482a      	ldr	r0, [pc, #168]	; (b950 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    b8a8:	313c      	adds	r1, #60	; 0x3c
    b8aa:	6008      	str	r0, [r1, #0]
    b8ac:	f7f8 f8ec 	bl	3a88 <mpsl_fem_device_config_254_apply_get>
    b8b0:	b140      	cbz	r0, b8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    b8b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8b6:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    b8ba:	1c41      	adds	r1, r0, #1
    b8bc:	d002      	beq.n	b8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    b8be:	4922      	ldr	r1, [pc, #136]	; (b948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    b8c0:	3110      	adds	r1, #16
    b8c2:	6008      	str	r0, [r1, #0]
    b8c4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    b8c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
    b8ca:	1c41      	adds	r1, r0, #1
    b8cc:	d004      	beq.n	b8d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    b8ce:	4921      	ldr	r1, [pc, #132]	; (b954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b8d0:	680a      	ldr	r2, [r1, #0]
    b8d2:	f360 4217 	bfi	r2, r0, #16, #8
    b8d6:	600a      	str	r2, [r1, #0]
    b8d8:	491e      	ldr	r1, [pc, #120]	; (b954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b8da:	f240 605b 	movw	r0, #1627	; 0x65b
    b8de:	3954      	subs	r1, #84	; 0x54
    b8e0:	6008      	str	r0, [r1, #0]
    b8e2:	1f09      	subs	r1, r1, #4
    b8e4:	f240 1003 	movw	r0, #259	; 0x103
    b8e8:	6008      	str	r0, [r1, #0]
    b8ea:	1f08      	subs	r0, r1, #4
    b8ec:	6006      	str	r6, [r0, #0]
    b8ee:	2001      	movs	r0, #1
    b8f0:	f000 fc68 	bl	c1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b8f4:	4917      	ldr	r1, [pc, #92]	; (b954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    b8f6:	f240 1001 	movw	r0, #257	; 0x101
    b8fa:	31c4      	adds	r1, #196	; 0xc4
    b8fc:	6008      	str	r0, [r1, #0]
    b8fe:	4e16      	ldr	r6, [pc, #88]	; (b958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    b900:	2502      	movs	r5, #2
    b902:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    b906:	4916      	ldr	r1, [pc, #88]	; (b960 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    b908:	4814      	ldr	r0, [pc, #80]	; (b95c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    b90a:	6008      	str	r0, [r1, #0]
    b90c:	4815      	ldr	r0, [pc, #84]	; (b964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    b90e:	4f16      	ldr	r7, [pc, #88]	; (b968 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    b910:	f506 7600 	add.w	r6, r6, #512	; 0x200
    b914:	8604      	strh	r4, [r0, #48]	; 0x30
    b916:	3010      	adds	r0, #16
    b918:	61c4      	str	r4, [r0, #28]
    b91a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    b91e:	703c      	strb	r4, [r7, #0]
    b920:	2001      	movs	r0, #1
    b922:	f003 ff3d 	bl	f7a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b926:	2010      	movs	r0, #16
    b928:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    b92c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b930:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    b934:	6878      	ldr	r0, [r7, #4]
    b936:	2800      	cmp	r0, #0
    b938:	d002      	beq.n	b940 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    b93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b93e:	4700      	bx	r0
    b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b944:	40001ffc 	.word	0x40001ffc
    b948:	4000173c 	.word	0x4000173c
    b94c:	80000096 	.word	0x80000096
    b950:	8900002c 	.word	0x8900002c
    b954:	4000158c 	.word	0x4000158c
    b958:	40001000 	.word	0x40001000
    b95c:	0c0e0000 	.word	0x0c0e0000
    b960:	4001f508 	.word	0x4001f508
    b964:	2000106c 	.word	0x2000106c
    b968:	20000264 	.word	0x20000264

0000b96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    b96c:	4901      	ldr	r1, [pc, #4]	; (b974 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    b96e:	7508      	strb	r0, [r1, #20]
    b970:	4770      	bx	lr
    b972:	0000      	.short	0x0000
    b974:	2000107c 	.word	0x2000107c

0000b978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    b978:	4904      	ldr	r1, [pc, #16]	; (b98c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    b97a:	6008      	str	r0, [r1, #0]
    b97c:	4804      	ldr	r0, [pc, #16]	; (b990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    b97e:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    b982:	f041 0101 	orr.w	r1, r1, #1
    b986:	7001      	strb	r1, [r0, #0]
    b988:	f000 ba62 	b.w	be50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    b98c:	40001504 	.word	0x40001504
    b990:	2000107c 	.word	0x2000107c

0000b994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    b994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b998:	4e35      	ldr	r6, [pc, #212]	; (ba70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    b99a:	4607      	mov	r7, r0
    b99c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b9a0:	468a      	mov	sl, r1
    b9a2:	4614      	mov	r4, r2
    b9a4:	6030      	str	r0, [r6, #0]
    b9a6:	4610      	mov	r0, r2
    b9a8:	f000 fc0c 	bl	c1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b9ac:	f000 f9d8 	bl	bd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b9b0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ba74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    b9b4:	4d30      	ldr	r5, [pc, #192]	; (ba78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    b9b6:	f04f 0801 	mov.w	r8, #1
    b9ba:	b127      	cbz	r7, b9c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    b9bc:	2f01      	cmp	r7, #1
    b9be:	d01d      	beq.n	b9fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    b9c0:	f240 7122 	movw	r1, #1826	; 0x722
    b9c4:	e04a      	b.n	ba5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    b9c6:	4620      	mov	r0, r4
    b9c8:	f000 f9ea 	bl	bda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b9cc:	4620      	mov	r0, r4
    b9ce:	f000 f9ab 	bl	bd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b9d2:	2c02      	cmp	r4, #2
    b9d4:	d00f      	beq.n	b9f6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    b9d6:	f640 0034 	movw	r0, #2100	; 0x834
    b9da:	bf00      	nop
    b9dc:	f649 51f8 	movw	r1, #40440	; 0x9df8
    b9e0:	4401      	add	r1, r0
    b9e2:	4650      	mov	r0, sl
    b9e4:	f000 fb92 	bl	c10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    b9e8:	4604      	mov	r4, r0
    b9ea:	4648      	mov	r0, r9
    b9ec:	f000 fb7a 	bl	c0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    b9f0:	f885 8009 	strb.w	r8, [r5, #9]
    b9f4:	e014      	b.n	ba20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    b9f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b9fa:	e7ef      	b.n	b9dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    b9fc:	f000 f9f8 	bl	bdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ba00:	f000 fb46 	bl	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ba04:	f000 fa70 	bl	bee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    ba08:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ba0c:	4650      	mov	r0, sl
    ba0e:	f000 fb7d 	bl	c10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ba12:	4604      	mov	r4, r0
    ba14:	4817      	ldr	r0, [pc, #92]	; (ba74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ba16:	1d00      	adds	r0, r0, #4
    ba18:	f000 fb64 	bl	c0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    ba1c:	2002      	movs	r0, #2
    ba1e:	7268      	strb	r0, [r5, #9]
    ba20:	4816      	ldr	r0, [pc, #88]	; (ba7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ba22:	6004      	str	r4, [r0, #0]
    ba24:	4917      	ldr	r1, [pc, #92]	; (ba84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ba26:	4816      	ldr	r0, [pc, #88]	; (ba80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ba28:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ba2c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ba2e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ba32:	62a8      	str	r0, [r5, #40]	; 0x28
    ba34:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ba38:	6030      	str	r0, [r6, #0]
    ba3a:	2110      	movs	r1, #16
    ba3c:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ba40:	1200      	asrs	r0, r0, #8
    ba42:	6030      	str	r0, [r6, #0]
    ba44:	f000 fa3c 	bl	bec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    ba48:	490f      	ldr	r1, [pc, #60]	; (ba88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ba4a:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ba4e:	480b      	ldr	r0, [pc, #44]	; (ba7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ba50:	300c      	adds	r0, #12
    ba52:	6800      	ldr	r0, [r0, #0]
    ba54:	42a0      	cmp	r0, r4
    ba56:	d304      	bcc.n	ba62 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ba58:	f240 7149 	movw	r1, #1865	; 0x749
    ba5c:	203e      	movs	r0, #62	; 0x3e
    ba5e:	f7f8 f95b 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba62:	4621      	mov	r1, r4
    ba64:	4638      	mov	r0, r7
    ba66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba6a:	f003 bed7 	b.w	f81c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ba6e:	0000      	.short	0x0000
    ba70:	4001f504 	.word	0x4001f504
    ba74:	40001000 	.word	0x40001000
    ba78:	2000107c 	.word	0x2000107c
    ba7c:	40008540 	.word	0x40008540
    ba80:	40008140 	.word	0x40008140
    ba84:	4001f098 	.word	0x4001f098
    ba88:	40008000 	.word	0x40008000

0000ba8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ba8c:	4b0d      	ldr	r3, [pc, #52]	; (bac4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    ba8e:	b510      	push	{r4, lr}
    ba90:	71d8      	strb	r0, [r3, #7]
    ba92:	729a      	strb	r2, [r3, #10]
    ba94:	b151      	cbz	r1, baac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    ba96:	2002      	movs	r0, #2
    ba98:	7218      	strb	r0, [r3, #8]
    ba9a:	2801      	cmp	r0, #1
    ba9c:	d008      	beq.n	bab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    ba9e:	2802      	cmp	r0, #2
    baa0:	d00f      	beq.n	bac2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    baa2:	f640 112a 	movw	r1, #2346	; 0x92a
    baa6:	203e      	movs	r0, #62	; 0x3e
    baa8:	f7f8 f936 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    baac:	2001      	movs	r0, #1
    baae:	e7f3      	b.n	ba98 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bab0:	7a58      	ldrb	r0, [r3, #9]
    bab2:	2802      	cmp	r0, #2
    bab4:	d105      	bne.n	bac2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bab6:	f000 f99b 	bl	bdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    baba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    babe:	f000 bae7 	b.w	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    bac2:	bd10      	pop	{r4, pc}
    bac4:	2000107c 	.word	0x2000107c

0000bac8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bac8:	4901      	ldr	r1, [pc, #4]	; (bad0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    baca:	2000      	movs	r0, #0
    bacc:	6008      	str	r0, [r1, #0]
    bace:	4770      	bx	lr
    bad0:	40008540 	.word	0x40008540

0000bad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bad4:	490a      	ldr	r1, [pc, #40]	; (bb00 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    bad6:	b508      	push	{r3, lr}
    bad8:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    badc:	2a01      	cmp	r2, #1
    bade:	d001      	beq.n	bae4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    bae0:	2000      	movs	r0, #0
    bae2:	bd08      	pop	{r3, pc}
    bae4:	4a07      	ldr	r2, [pc, #28]	; (bb04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bae6:	6812      	ldr	r2, [r2, #0]
    bae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    baec:	4252      	negs	r2, r2
    baee:	7002      	strb	r2, [r0, #0]
    baf0:	2000      	movs	r0, #0
    baf2:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    baf6:	4804      	ldr	r0, [pc, #16]	; (bb08 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    baf8:	6800      	ldr	r0, [r0, #0]
    bafa:	9000      	str	r0, [sp, #0]
    bafc:	2001      	movs	r0, #1
    bafe:	bd08      	pop	{r3, pc}
    bb00:	40001000 	.word	0x40001000
    bb04:	40001548 	.word	0x40001548
    bb08:	4000111c 	.word	0x4000111c

0000bb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bb0c:	4a03      	ldr	r2, [pc, #12]	; (bb1c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bb0e:	0e01      	lsrs	r1, r0, #24
    bb10:	6011      	str	r1, [r2, #0]
    bb12:	4902      	ldr	r1, [pc, #8]	; (bb1c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bb14:	0200      	lsls	r0, r0, #8
    bb16:	3908      	subs	r1, #8
    bb18:	6008      	str	r0, [r1, #0]
    bb1a:	4770      	bx	lr
    bb1c:	40001524 	.word	0x40001524

0000bb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bb20:	6800      	ldr	r0, [r0, #0]
    bb22:	4902      	ldr	r1, [pc, #8]	; (bb2c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    bb24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb28:	6008      	str	r0, [r1, #0]
    bb2a:	4770      	bx	lr
    bb2c:	4000153c 	.word	0x4000153c

0000bb30 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bb30:	b510      	push	{r4, lr}
    bb32:	f000 fb23 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    bb36:	4806      	ldr	r0, [pc, #24]	; (bb50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    bb38:	6800      	ldr	r0, [r0, #0]
    bb3a:	2803      	cmp	r0, #3
    bb3c:	d001      	beq.n	bb42 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    bb3e:	280b      	cmp	r0, #11
    bb40:	d104      	bne.n	bb4c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    bb42:	f240 218a 	movw	r1, #650	; 0x28a
    bb46:	203e      	movs	r0, #62	; 0x3e
    bb48:	f7f8 f8e6 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb4c:	bd10      	pop	{r4, pc}
    bb4e:	0000      	.short	0x0000
    bb50:	40001550 	.word	0x40001550

0000bb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bb54:	4901      	ldr	r1, [pc, #4]	; (bb5c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bb56:	7548      	strb	r0, [r1, #21]
    bb58:	4770      	bx	lr
    bb5a:	0000      	.short	0x0000
    bb5c:	2000107c 	.word	0x2000107c

0000bb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb64:	4d51      	ldr	r5, [pc, #324]	; (bcac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    bb66:	2701      	movs	r7, #1
    bb68:	64ef      	str	r7, [r5, #76]	; 0x4c
    bb6a:	4851      	ldr	r0, [pc, #324]	; (bcb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bb6c:	f8d0 9000 	ldr.w	r9, [r0]
    bb70:	4850      	ldr	r0, [pc, #320]	; (bcb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bb72:	6800      	ldr	r0, [r0, #0]
    bb74:	4c50      	ldr	r4, [pc, #320]	; (bcb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bb76:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    bb7a:	f000 f943 	bl	be04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    bb7e:	494f      	ldr	r1, [pc, #316]	; (bcbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bb80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bb82:	6008      	str	r0, [r1, #0]
    bb84:	f8df a138 	ldr.w	sl, [pc, #312]	; bcc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    bb88:	2600      	movs	r6, #0
    bb8a:	62a6      	str	r6, [r4, #40]	; 0x28
    bb8c:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    bb90:	f240 121d 	movw	r2, #285	; 0x11d
    bb94:	4391      	bics	r1, r2
    bb96:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    bb9a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bb9e:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    bba2:	b900      	cbnz	r0, bba6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    bba4:	64af      	str	r7, [r5, #72]	; 0x48
    bba6:	f000 f9b1 	bl	bf0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    bbaa:	4605      	mov	r5, r0
    bbac:	4840      	ldr	r0, [pc, #256]	; (bcb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bbae:	1f00      	subs	r0, r0, #4
    bbb0:	6800      	ldr	r0, [r0, #0]
    bbb2:	61e0      	str	r0, [r4, #28]
    bbb4:	f7ff fdf6 	bl	b7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bbb8:	f884 0020 	strb.w	r0, [r4, #32]
    bbbc:	7a60      	ldrb	r0, [r4, #9]
    bbbe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bbc2:	61a6      	str	r6, [r4, #24]
    bbc4:	4e3f      	ldr	r6, [pc, #252]	; (bcc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    bbc6:	07a8      	lsls	r0, r5, #30
    bbc8:	d501      	bpl.n	bbce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    bbca:	6830      	ldr	r0, [r6, #0]
    bbcc:	61a0      	str	r0, [r4, #24]
    bbce:	0728      	lsls	r0, r5, #28
    bbd0:	d501      	bpl.n	bbd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    bbd2:	6830      	ldr	r0, [r6, #0]
    bbd4:	61a0      	str	r0, [r4, #24]
    bbd6:	f04f 0800 	mov.w	r8, #0
    bbda:	4649      	mov	r1, r9
    bbdc:	4628      	mov	r0, r5
    bbde:	f000 fa1d 	bl	c01c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    bbe2:	b918      	cbnz	r0, bbec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    bbe4:	f8ca 7010 	str.w	r7, [sl, #16]
    bbe8:	f04f 0801 	mov.w	r8, #1
    bbec:	4f32      	ldr	r7, [pc, #200]	; (bcb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bbee:	07e8      	lsls	r0, r5, #31
    bbf0:	f1a7 0710 	sub.w	r7, r7, #16
    bbf4:	d002      	beq.n	bbfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    bbf6:	6838      	ldr	r0, [r7, #0]
    bbf8:	4780      	blx	r0
    bbfa:	e031      	b.n	bc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bbfc:	07a8      	lsls	r0, r5, #30
    bbfe:	d526      	bpl.n	bc4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    bc00:	0768      	lsls	r0, r5, #29
    bc02:	d41e      	bmi.n	bc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc04:	f000 fc5a 	bl	c4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bc08:	b9d8      	cbnz	r0, bc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc0a:	f000 fc47 	bl	c49c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc0e:	b9c0      	cbnz	r0, bc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc10:	482d      	ldr	r0, [pc, #180]	; (bcc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bc12:	6800      	ldr	r0, [r0, #0]
    bc14:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bc18:	f3c0 6300 	ubfx	r3, r0, #24, #1
    bc1c:	f000 020f 	and.w	r2, r0, #15
    bc20:	f3c0 1103 	ubfx	r1, r0, #4, #4
    bc24:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bc28:	b15b      	cbz	r3, bc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc2a:	b10a      	cbz	r2, bc30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    bc2c:	b101      	cbz	r1, bc30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    bc2e:	b940      	cbnz	r0, bc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc30:	4825      	ldr	r0, [pc, #148]	; (bcc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bc32:	1d00      	adds	r0, r0, #4
    bc34:	6800      	ldr	r0, [r0, #0]
    bc36:	b120      	cbz	r0, bc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc38:	f1bc 0f03 	cmp.w	ip, #3
    bc3c:	d201      	bcs.n	bc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    bc3e:	f045 0504 	orr.w	r5, r5, #4
    bc42:	f345 0080 	sbfx	r0, r5, #2, #1
    bc46:	4641      	mov	r1, r8
    bc48:	1c40      	adds	r0, r0, #1
    bc4a:	687a      	ldr	r2, [r7, #4]
    bc4c:	e007      	b.n	bc5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    bc4e:	f015 0f28 	tst.w	r5, #40	; 0x28
    bc52:	d005      	beq.n	bc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    bc54:	f345 1140 	sbfx	r1, r5, #5, #1
    bc58:	68ba      	ldr	r2, [r7, #8]
    bc5a:	4640      	mov	r0, r8
    bc5c:	1c49      	adds	r1, r1, #1
    bc5e:	4790      	blx	r2
    bc60:	06e8      	lsls	r0, r5, #27
    bc62:	d501      	bpl.n	bc68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    bc64:	68f8      	ldr	r0, [r7, #12]
    bc66:	4780      	blx	r0
    bc68:	7a60      	ldrb	r0, [r4, #9]
    bc6a:	2802      	cmp	r0, #2
    bc6c:	d11b      	bne.n	bca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bc6e:	7b20      	ldrb	r0, [r4, #12]
    bc70:	2800      	cmp	r0, #0
    bc72:	d018      	beq.n	bca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    bc74:	2802      	cmp	r0, #2
    bc76:	d004      	beq.n	bc82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    bc78:	2801      	cmp	r0, #1
    bc7a:	d006      	beq.n	bc8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    bc7c:	f640 3103 	movw	r1, #2819	; 0xb03
    bc80:	e009      	b.n	bc96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    bc82:	6921      	ldr	r1, [r4, #16]
    bc84:	69e0      	ldr	r0, [r4, #28]
    bc86:	4408      	add	r0, r1
    bc88:	e008      	b.n	bc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bc8a:	69e1      	ldr	r1, [r4, #28]
    bc8c:	6920      	ldr	r0, [r4, #16]
    bc8e:	4288      	cmp	r0, r1
    bc90:	d804      	bhi.n	bc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    bc92:	f640 3104 	movw	r1, #2820	; 0xb04
    bc96:	203e      	movs	r0, #62	; 0x3e
    bc98:	f7f8 f83e 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc9c:	6030      	str	r0, [r6, #0]
    bc9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bca2:	f000 ba03 	b.w	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    bca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bcaa:	0000      	.short	0x0000
    bcac:	40008000 	.word	0x40008000
    bcb0:	4000854c 	.word	0x4000854c
    bcb4:	4000b504 	.word	0x4000b504
    bcb8:	2000107c 	.word	0x2000107c
    bcbc:	4001f508 	.word	0x4001f508
    bcc0:	40001000 	.word	0x40001000
    bcc4:	40008544 	.word	0x40008544
    bcc8:	40001450 	.word	0x40001450

0000bccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    bccc:	b570      	push	{r4, r5, r6, lr}
    bcce:	4b11      	ldr	r3, [pc, #68]	; (bd14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    bcd0:	888c      	ldrh	r4, [r1, #4]
    bcd2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bcd6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    bcda:	780c      	ldrb	r4, [r1, #0]
    bcdc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    bce0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    bce4:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    bce8:	4d0b      	ldr	r5, [pc, #44]	; (bd18 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    bcea:	6829      	ldr	r1, [r5, #0]
    bcec:	f100 0608 	add.w	r6, r0, #8
    bcf0:	2401      	movs	r4, #1
    bcf2:	fa04 f306 	lsl.w	r3, r4, r6
    bcf6:	b132      	cbz	r2, bd06 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    bcf8:	2a01      	cmp	r2, #1
    bcfa:	d006      	beq.n	bd0a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    bcfc:	f240 41c1 	movw	r1, #1217	; 0x4c1
    bd00:	203e      	movs	r0, #62	; 0x3e
    bd02:	f7f8 f809 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd06:	4399      	bics	r1, r3
    bd08:	e000      	b.n	bd0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    bd0a:	4319      	orrs	r1, r3
    bd0c:	4084      	lsls	r4, r0
    bd0e:	430c      	orrs	r4, r1
    bd10:	602c      	str	r4, [r5, #0]
    bd12:	bd70      	pop	{r4, r5, r6, pc}
    bd14:	40001000 	.word	0x40001000
    bd18:	40001640 	.word	0x40001640

0000bd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bd1c:	4901      	ldr	r1, [pc, #4]	; (bd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    bd1e:	2001      	movs	r0, #1
    bd20:	7008      	strb	r0, [r1, #0]
    bd22:	4770      	bx	lr
    bd24:	20000264 	.word	0x20000264
    bd28:	b510      	push	{r4, lr}
    bd2a:	4604      	mov	r4, r0
    bd2c:	f000 fbc6 	bl	c4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd30:	2800      	cmp	r0, #0
    bd32:	d00e      	beq.n	bd52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bd34:	4a09      	ldr	r2, [pc, #36]	; (bd5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bd36:	6811      	ldr	r1, [r2, #0]
    bd38:	0650      	lsls	r0, r2, #25
    bd3a:	2c02      	cmp	r4, #2
    bd3c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bd40:	d008      	beq.n	bd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    bd42:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bd46:	bf00      	nop
    bd48:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bd4c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bd50:	6010      	str	r0, [r2, #0]
    bd52:	bd10      	pop	{r4, pc}
    bd54:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bd58:	e7f6      	b.n	bd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bd5a:	0000      	.short	0x0000
    bd5c:	40001588 	.word	0x40001588
    bd60:	480d      	ldr	r0, [pc, #52]	; (bd98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    bd62:	7d40      	ldrb	r0, [r0, #21]
    bd64:	2825      	cmp	r0, #37	; 0x25
    bd66:	d007      	beq.n	bd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    bd68:	2826      	cmp	r0, #38	; 0x26
    bd6a:	d007      	beq.n	bd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    bd6c:	2827      	cmp	r0, #39	; 0x27
    bd6e:	d007      	beq.n	bd80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    bd70:	280a      	cmp	r0, #10
    bd72:	d807      	bhi.n	bd84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    bd74:	2204      	movs	r2, #4
    bd76:	e006      	b.n	bd86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    bd78:	2102      	movs	r1, #2
    bd7a:	e007      	b.n	bd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    bd7c:	211a      	movs	r1, #26
    bd7e:	e005      	b.n	bd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    bd80:	2150      	movs	r1, #80	; 0x50
    bd82:	e003      	b.n	bd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    bd84:	2206      	movs	r2, #6
    bd86:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    bd8a:	b2c9      	uxtb	r1, r1
    bd8c:	4a03      	ldr	r2, [pc, #12]	; (bd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    bd8e:	6011      	str	r1, [r2, #0]
    bd90:	4902      	ldr	r1, [pc, #8]	; (bd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    bd92:	314c      	adds	r1, #76	; 0x4c
    bd94:	6008      	str	r0, [r1, #0]
    bd96:	4770      	bx	lr
    bd98:	2000107c 	.word	0x2000107c
    bd9c:	40001508 	.word	0x40001508
    bda0:	4912      	ldr	r1, [pc, #72]	; (bdec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    bda2:	b508      	push	{r3, lr}
    bda4:	f991 2014 	ldrsb.w	r2, [r1, #20]
    bda8:	7d49      	ldrb	r1, [r1, #21]
    bdaa:	2801      	cmp	r0, #1
    bdac:	d00a      	beq.n	bdc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    bdae:	2802      	cmp	r0, #2
    bdb0:	d00a      	beq.n	bdc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    bdb2:	2804      	cmp	r0, #4
    bdb4:	d00a      	beq.n	bdcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    bdb6:	2808      	cmp	r0, #8
    bdb8:	d00a      	beq.n	bdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    bdba:	f240 31da 	movw	r1, #986	; 0x3da
    bdbe:	2006      	movs	r0, #6
    bdc0:	f7f7 ffaa 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bdc4:	2000      	movs	r0, #0
    bdc6:	e004      	b.n	bdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    bdc8:	2001      	movs	r0, #1
    bdca:	e002      	b.n	bdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    bdcc:	2003      	movs	r0, #3
    bdce:	e000      	b.n	bdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    bdd0:	2002      	movs	r0, #2
    bdd2:	466b      	mov	r3, sp
    bdd4:	f7f4 fb0e 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    bdd8:	b118      	cbz	r0, bde2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    bdda:	f240 41f3 	movw	r1, #1267	; 0x4f3
    bdde:	203e      	movs	r0, #62	; 0x3e
    bde0:	e7ee      	b.n	bdc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bde2:	f99d 0000 	ldrsb.w	r0, [sp]
    bde6:	f000 f9e7 	bl	c1b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bdea:	bd08      	pop	{r3, pc}
    bdec:	2000107c 	.word	0x2000107c
    bdf0:	4803      	ldr	r0, [pc, #12]	; (be00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    bdf2:	7a01      	ldrb	r1, [r0, #8]
    bdf4:	2901      	cmp	r1, #1
    bdf6:	d102      	bne.n	bdfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    bdf8:	7a80      	ldrb	r0, [r0, #10]
    bdfa:	f7ff bfd1 	b.w	bda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    bdfe:	4770      	bx	lr
    be00:	2000107c 	.word	0x2000107c
    be04:	4805      	ldr	r0, [pc, #20]	; (be1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    be06:	7a40      	ldrb	r0, [r0, #9]
    be08:	2801      	cmp	r0, #1
    be0a:	d003      	beq.n	be14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    be0c:	2802      	cmp	r0, #2
    be0e:	d103      	bne.n	be18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    be10:	f003 bc82 	b.w	f718 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    be14:	f003 bc8c 	b.w	f730 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    be18:	4770      	bx	lr
    be1a:	0000      	.short	0x0000
    be1c:	2000107c 	.word	0x2000107c
    be20:	4809      	ldr	r0, [pc, #36]	; (be48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    be22:	b508      	push	{r3, lr}
    be24:	2100      	movs	r1, #0
    be26:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    be2a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    be2e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    be32:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    be36:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    be3a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    be3e:	4803      	ldr	r0, [pc, #12]	; (be4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    be40:	6800      	ldr	r0, [r0, #0]
    be42:	9000      	str	r0, [sp, #0]
    be44:	bd08      	pop	{r3, pc}
    be46:	0000      	.short	0x0000
    be48:	40001000 	.word	0x40001000
    be4c:	40001118 	.word	0x40001118
    be50:	4816      	ldr	r0, [pc, #88]	; (beac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    be52:	b510      	push	{r4, lr}
    be54:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    be58:	07c1      	lsls	r1, r0, #31
    be5a:	d026      	beq.n	beaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    be5c:	0781      	lsls	r1, r0, #30
    be5e:	d513      	bpl.n	be88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    be60:	4813      	ldr	r0, [pc, #76]	; (beb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    be62:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    be66:	f041 0101 	orr.w	r1, r1, #1
    be6a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    be6e:	4811      	ldr	r0, [pc, #68]	; (beb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    be70:	6800      	ldr	r0, [r0, #0]
    be72:	280b      	cmp	r0, #11
    be74:	d005      	beq.n	be82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    be76:	280a      	cmp	r0, #10
    be78:	d003      	beq.n	be82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    be7a:	2803      	cmp	r0, #3
    be7c:	d001      	beq.n	be82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    be7e:	2802      	cmp	r0, #2
    be80:	d113      	bne.n	beaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    be82:	f240 5123 	movw	r1, #1315	; 0x523
    be86:	e00d      	b.n	bea4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    be88:	0740      	lsls	r0, r0, #29
    be8a:	d50e      	bpl.n	beaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    be8c:	4808      	ldr	r0, [pc, #32]	; (beb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    be8e:	490a      	ldr	r1, [pc, #40]	; (beb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    be90:	3008      	adds	r0, #8
    be92:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    be96:	4809      	ldr	r0, [pc, #36]	; (bebc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    be98:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    be9c:	2801      	cmp	r0, #1
    be9e:	d104      	bne.n	beaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    bea0:	f240 512a 	movw	r1, #1322	; 0x52a
    bea4:	203e      	movs	r0, #62	; 0x3e
    bea6:	f7f7 ff37 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    beaa:	bd10      	pop	{r4, pc}
    beac:	2000107c 	.word	0x2000107c
    beb0:	40001000 	.word	0x40001000
    beb4:	40001550 	.word	0x40001550
    beb8:	4001f098 	.word	0x4001f098
    bebc:	40008000 	.word	0x40008000
    bec0:	4808      	ldr	r0, [pc, #32]	; (bee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    bec2:	4601      	mov	r1, r0
    bec4:	79c2      	ldrb	r2, [r0, #7]
    bec6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    beca:	b112      	cbz	r2, bed2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    becc:	2a01      	cmp	r2, #1
    bece:	d003      	beq.n	bed8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    bed0:	e006      	b.n	bee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    bed2:	f041 0102 	orr.w	r1, r1, #2
    bed6:	e001      	b.n	bedc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    bed8:	f041 0104 	orr.w	r1, r1, #4
    bedc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    bee0:	f7ff bfb6 	b.w	be50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    bee4:	2000107c 	.word	0x2000107c
    bee8:	b510      	push	{r4, lr}
    beea:	f000 fae7 	bl	c4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    beee:	2800      	cmp	r0, #0
    bef0:	d108      	bne.n	bf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    bef2:	f000 fad3 	bl	c49c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bef6:	2800      	cmp	r0, #0
    bef8:	d104      	bne.n	bf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    befa:	4803      	ldr	r0, [pc, #12]	; (bf08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    befc:	6801      	ldr	r1, [r0, #0]
    befe:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    bf02:	6001      	str	r1, [r0, #0]
    bf04:	bd10      	pop	{r4, pc}
    bf06:	0000      	.short	0x0000
    bf08:	40001568 	.word	0x40001568
    bf0c:	b538      	push	{r3, r4, r5, lr}
    bf0e:	4d32      	ldr	r5, [pc, #200]	; (bfd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    bf10:	2400      	movs	r4, #0
    bf12:	7b28      	ldrb	r0, [r5, #12]
    bf14:	b120      	cbz	r0, bf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    bf16:	4831      	ldr	r0, [pc, #196]	; (bfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    bf18:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    bf1c:	2801      	cmp	r0, #1
    bf1e:	d007      	beq.n	bf30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    bf20:	2200      	movs	r2, #0
    bf22:	7a69      	ldrb	r1, [r5, #9]
    bf24:	482e      	ldr	r0, [pc, #184]	; (bfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    bf26:	2901      	cmp	r1, #1
    bf28:	d004      	beq.n	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    bf2a:	2902      	cmp	r1, #2
    bf2c:	d00a      	beq.n	bf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    bf2e:	e019      	b.n	bf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bf30:	2201      	movs	r2, #1
    bf32:	e7f6      	b.n	bf22 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    bf34:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bf38:	2901      	cmp	r1, #1
    bf3a:	d001      	beq.n	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    bf3c:	2400      	movs	r4, #0
    bf3e:	e011      	b.n	bf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bf40:	2408      	movs	r4, #8
    bf42:	e00f      	b.n	bf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    bf44:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    bf48:	2901      	cmp	r1, #1
    bf4a:	d006      	beq.n	bf5a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    bf4c:	2100      	movs	r1, #0
    bf4e:	4b25      	ldr	r3, [pc, #148]	; (bfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    bf50:	681b      	ldr	r3, [r3, #0]
    bf52:	2b01      	cmp	r3, #1
    bf54:	d003      	beq.n	bf5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    bf56:	2404      	movs	r4, #4
    bf58:	e002      	b.n	bf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    bf5a:	2102      	movs	r1, #2
    bf5c:	e7f7      	b.n	bf4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    bf5e:	2400      	movs	r4, #0
    bf60:	430c      	orrs	r4, r1
    bf62:	4314      	orrs	r4, r2
    bf64:	f014 0f0b 	tst.w	r4, #11
    bf68:	d105      	bne.n	bf76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    bf6a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    bf6e:	2901      	cmp	r1, #1
    bf70:	d029      	beq.n	bfc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    bf72:	2100      	movs	r1, #0
    bf74:	430c      	orrs	r4, r1
    bf76:	491c      	ldr	r1, [pc, #112]	; (bfe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    bf78:	7809      	ldrb	r1, [r1, #0]
    bf7a:	b1d1      	cbz	r1, bfb2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    bf7c:	491b      	ldr	r1, [pc, #108]	; (bfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    bf7e:	6809      	ldr	r1, [r1, #0]
    bf80:	f011 0fff 	tst.w	r1, #255	; 0xff
    bf84:	d003      	beq.n	bf8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    bf86:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    bf8a:	2a01      	cmp	r2, #1
    bf8c:	d000      	beq.n	bf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    bf8e:	2200      	movs	r2, #0
    bf90:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    bf94:	f011 0fff 	tst.w	r1, #255	; 0xff
    bf98:	d003      	beq.n	bfa2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    bf9a:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    bf9e:	2801      	cmp	r0, #1
    bfa0:	d000      	beq.n	bfa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    bfa2:	2000      	movs	r0, #0
    bfa4:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    bfa8:	480e      	ldr	r0, [pc, #56]	; (bfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    bfaa:	3010      	adds	r0, #16
    bfac:	6800      	ldr	r0, [r0, #0]
    bfae:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    bfb2:	f7ff ff35 	bl	be20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    bfb6:	06e0      	lsls	r0, r4, #27
    bfb8:	d509      	bpl.n	bfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    bfba:	0720      	lsls	r0, r4, #28
    bfbc:	d407      	bmi.n	bfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    bfbe:	7a68      	ldrb	r0, [r5, #9]
    bfc0:	2801      	cmp	r0, #1
    bfc2:	d002      	beq.n	bfca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    bfc4:	e003      	b.n	bfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    bfc6:	2110      	movs	r1, #16
    bfc8:	e7d4      	b.n	bf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    bfca:	f044 0420 	orr.w	r4, r4, #32
    bfce:	4808      	ldr	r0, [pc, #32]	; (bff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    bfd0:	6800      	ldr	r0, [r0, #0]
    bfd2:	9000      	str	r0, [sp, #0]
    bfd4:	4620      	mov	r0, r4
    bfd6:	bd38      	pop	{r3, r4, r5, pc}
    bfd8:	2000107c 	.word	0x2000107c
    bfdc:	40008000 	.word	0x40008000
    bfe0:	40001000 	.word	0x40001000
    bfe4:	40001400 	.word	0x40001400
    bfe8:	20000264 	.word	0x20000264
    bfec:	40001640 	.word	0x40001640
    bff0:	40008144 	.word	0x40008144
    bff4:	4808      	ldr	r0, [pc, #32]	; (c018 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    bff6:	b510      	push	{r4, lr}
    bff8:	6800      	ldr	r0, [r0, #0]
    bffa:	f000 000f 	and.w	r0, r0, #15
    bffe:	2803      	cmp	r0, #3
    c000:	d006      	beq.n	c010 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c002:	2804      	cmp	r0, #4
    c004:	d006      	beq.n	c014 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    c006:	f240 2112 	movw	r1, #530	; 0x212
    c00a:	203e      	movs	r0, #62	; 0x3e
    c00c:	f7f7 fe84 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c010:	2001      	movs	r0, #1
    c012:	bd10      	pop	{r4, pc}
    c014:	2002      	movs	r0, #2
    c016:	bd10      	pop	{r4, pc}
    c018:	40001510 	.word	0x40001510
    c01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c020:	4c19      	ldr	r4, [pc, #100]	; (c088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    c022:	460d      	mov	r5, r1
    c024:	7a21      	ldrb	r1, [r4, #8]
    c026:	b129      	cbz	r1, c034 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    c028:	f010 0f11 	tst.w	r0, #17
    c02c:	d00b      	beq.n	c046 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    c02e:	f7ff fa4b 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c032:	e027      	b.n	c084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    c034:	4915      	ldr	r1, [pc, #84]	; (c08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    c036:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c03a:	6008      	str	r0, [r1, #0]
    c03c:	f000 f85e 	bl	c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c040:	2000      	movs	r0, #0
    c042:	7320      	strb	r0, [r4, #12]
    c044:	e01e      	b.n	c084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    c046:	2901      	cmp	r1, #1
    c048:	d001      	beq.n	c04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    c04a:	2601      	movs	r6, #1
    c04c:	e000      	b.n	c050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c04e:	2600      	movs	r6, #0
    c050:	79e0      	ldrb	r0, [r4, #7]
    c052:	2801      	cmp	r0, #1
    c054:	d00e      	beq.n	c074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    c056:	2700      	movs	r7, #0
    c058:	f000 f850 	bl	c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c05c:	2196      	movs	r1, #150	; 0x96
    c05e:	4630      	mov	r0, r6
    c060:	f000 f862 	bl	c128 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    c064:	4601      	mov	r1, r0
    c066:	b14f      	cbz	r7, c07c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    c068:	353b      	adds	r5, #59	; 0x3b
    c06a:	428d      	cmp	r5, r1
    c06c:	d904      	bls.n	c078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c06e:	2000      	movs	r0, #0
    c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c074:	2701      	movs	r7, #1
    c076:	e7ef      	b.n	c058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    c078:	2001      	movs	r0, #1
    c07a:	71e0      	strb	r0, [r4, #7]
    c07c:	7aa2      	ldrb	r2, [r4, #10]
    c07e:	4630      	mov	r0, r6
    c080:	f7ff fc88 	bl	b994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c084:	2001      	movs	r0, #1
    c086:	e7f3      	b.n	c070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c088:	2000107c 	.word	0x2000107c
    c08c:	4001f508 	.word	0x4001f508
    c090:	4805      	ldr	r0, [pc, #20]	; (c0a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c092:	2100      	movs	r1, #0
    c094:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c098:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c09c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c0a0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c0a4:	4770      	bx	lr
    c0a6:	0000      	.short	0x0000
    c0a8:	40001000 	.word	0x40001000
    c0ac:	4804      	ldr	r0, [pc, #16]	; (c0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c0ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c0b0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c0b4:	6281      	str	r1, [r0, #40]	; 0x28
    c0b6:	4903      	ldr	r1, [pc, #12]	; (c0c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    c0b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c0bc:	6008      	str	r0, [r1, #0]
    c0be:	4770      	bx	lr
    c0c0:	2000107c 	.word	0x2000107c
    c0c4:	4001f504 	.word	0x4001f504
    c0c8:	4905      	ldr	r1, [pc, #20]	; (c0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c0ca:	2000      	movs	r0, #0
    c0cc:	6008      	str	r0, [r1, #0]
    c0ce:	1f09      	subs	r1, r1, #4
    c0d0:	6008      	str	r0, [r1, #0]
    c0d2:	1f09      	subs	r1, r1, #4
    c0d4:	6008      	str	r0, [r1, #0]
    c0d6:	4902      	ldr	r1, [pc, #8]	; (c0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c0d8:	1d09      	adds	r1, r1, #4
    c0da:	6008      	str	r0, [r1, #0]
    c0dc:	4770      	bx	lr
    c0de:	0000      	.short	0x0000
    c0e0:	40008548 	.word	0x40008548
    c0e4:	4903      	ldr	r1, [pc, #12]	; (c0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    c0e6:	79c9      	ldrb	r1, [r1, #7]
    c0e8:	2900      	cmp	r1, #0
    c0ea:	d102      	bne.n	c0f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    c0ec:	4902      	ldr	r1, [pc, #8]	; (c0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c0ee:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c0f2:	4770      	bx	lr
    c0f4:	2000107c 	.word	0x2000107c
    c0f8:	4001f098 	.word	0x4001f098
    c0fc:	4802      	ldr	r0, [pc, #8]	; (c108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c0fe:	2100      	movs	r1, #0
    c100:	71c1      	strb	r1, [r0, #7]
    c102:	7201      	strb	r1, [r0, #8]
    c104:	7241      	strb	r1, [r0, #9]
    c106:	4770      	bx	lr
    c108:	2000107c 	.word	0x2000107c
    c10c:	4a05      	ldr	r2, [pc, #20]	; (c124 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    c10e:	79d2      	ldrb	r2, [r2, #7]
    c110:	2a01      	cmp	r2, #1
    c112:	d006      	beq.n	c122 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    c114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c118:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c11c:	fbb1 f1f2 	udiv	r1, r1, r2
    c120:	1a40      	subs	r0, r0, r1
    c122:	4770      	bx	lr
    c124:	2000107c 	.word	0x2000107c
    c128:	b570      	push	{r4, r5, r6, lr}
    c12a:	4c13      	ldr	r4, [pc, #76]	; (c178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    c12c:	4603      	mov	r3, r0
    c12e:	460d      	mov	r5, r1
    c130:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c134:	2000      	movs	r0, #0
    c136:	b15a      	cbz	r2, c150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c138:	4621      	mov	r1, r4
    c13a:	f891 1020 	ldrb.w	r1, [r1, #32]
    c13e:	b163      	cbz	r3, c15a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    c140:	2b01      	cmp	r3, #1
    c142:	d111      	bne.n	c168 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    c144:	2a01      	cmp	r2, #1
    c146:	4628      	mov	r0, r5
    c148:	d012      	beq.n	c170 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c14a:	f003 fbbf 	bl	f8cc <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c14e:	e009      	b.n	c164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c150:	f240 7166 	movw	r1, #1894	; 0x766
    c154:	203e      	movs	r0, #62	; 0x3e
    c156:	f7f7 fddf 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c15a:	2a01      	cmp	r2, #1
    c15c:	4628      	mov	r0, r5
    c15e:	d004      	beq.n	c16a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    c160:	f003 fbc2 	bl	f8e8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c164:	69e1      	ldr	r1, [r4, #28]
    c166:	4408      	add	r0, r1
    c168:	bd70      	pop	{r4, r5, r6, pc}
    c16a:	f003 fbd7 	bl	f91c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c16e:	e7f9      	b.n	c164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c170:	f003 fbc5 	bl	f8fe <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c174:	e7f6      	b.n	c164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c176:	0000      	.short	0x0000
    c178:	2000107c 	.word	0x2000107c
    c17c:	b510      	push	{r4, lr}
    c17e:	2200      	movs	r2, #0
    c180:	2901      	cmp	r1, #1
    c182:	d008      	beq.n	c196 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    c184:	2902      	cmp	r1, #2
    c186:	d004      	beq.n	c192 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c188:	f240 2169 	movw	r1, #617	; 0x269
    c18c:	203e      	movs	r0, #62	; 0x3e
    c18e:	f7f7 fdc3 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c192:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c196:	4905      	ldr	r1, [pc, #20]	; (c1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    c198:	430a      	orrs	r2, r1
    c19a:	4905      	ldr	r1, [pc, #20]	; (c1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    c19c:	600a      	str	r2, [r1, #0]
    c19e:	4905      	ldr	r1, [pc, #20]	; (c1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    c1a0:	4308      	orrs	r0, r1
    c1a2:	4903      	ldr	r1, [pc, #12]	; (c1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    c1a4:	1d09      	adds	r1, r1, #4
    c1a6:	6008      	str	r0, [r1, #0]
    c1a8:	bd10      	pop	{r4, pc}
    c1aa:	0000      	.short	0x0000
    c1ac:	00100108 	.word	0x00100108
    c1b0:	40001514 	.word	0x40001514
    c1b4:	02030000 	.word	0x02030000

0000c1b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c1b8:	4901      	ldr	r1, [pc, #4]	; (c1c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c1ba:	b2c0      	uxtb	r0, r0
    c1bc:	6008      	str	r0, [r1, #0]
    c1be:	4770      	bx	lr
    c1c0:	4000150c 	.word	0x4000150c

0000c1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c1c4:	b510      	push	{r4, lr}
    c1c6:	4907      	ldr	r1, [pc, #28]	; (c1e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c1c8:	2801      	cmp	r0, #1
    c1ca:	d005      	beq.n	c1d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c1cc:	2802      	cmp	r0, #2
    c1ce:	d005      	beq.n	c1dc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c1d0:	218b      	movs	r1, #139	; 0x8b
    c1d2:	203f      	movs	r0, #63	; 0x3f
    c1d4:	f7f7 fda0 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1d8:	2003      	movs	r0, #3
    c1da:	e000      	b.n	c1de <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c1dc:	2004      	movs	r0, #4
    c1de:	6008      	str	r0, [r1, #0]
    c1e0:	bd10      	pop	{r4, pc}
    c1e2:	0000      	.short	0x0000
    c1e4:	40001510 	.word	0x40001510

0000c1e8 <strcmp>:
    c1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
    c1ec:	f811 3b01 	ldrb.w	r3, [r1], #1
    c1f0:	2a01      	cmp	r2, #1
    c1f2:	bf28      	it	cs
    c1f4:	429a      	cmpcs	r2, r3
    c1f6:	d0f7      	beq.n	c1e8 <strcmp>
    c1f8:	1ad0      	subs	r0, r2, r3
    c1fa:	4770      	bx	lr

0000c1fc <strlen>:
    c1fc:	4603      	mov	r3, r0
    c1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
    c202:	2a00      	cmp	r2, #0
    c204:	d1fb      	bne.n	c1fe <strlen+0x2>
    c206:	1a18      	subs	r0, r3, r0
    c208:	3801      	subs	r0, #1
    c20a:	4770      	bx	lr

0000c20c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c20c:	4770      	bx	lr
    c20e:	2100      	movs	r1, #0
    c210:	7081      	strb	r1, [r0, #2]
    c212:	7001      	strb	r1, [r0, #0]
    c214:	7041      	strb	r1, [r0, #1]
    c216:	4770      	bx	lr

0000c218 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c218:	b570      	push	{r4, r5, r6, lr}
    c21a:	f7f4 f905 	bl	428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c21e:	4605      	mov	r5, r0
    c220:	2400      	movs	r4, #0
    c222:	e006      	b.n	c232 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c224:	4620      	mov	r0, r4
    c226:	f7f4 f905 	bl	434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c22a:	f7ff fff0 	bl	c20e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c22e:	1c64      	adds	r4, r4, #1
    c230:	b2e4      	uxtb	r4, r4
    c232:	42ac      	cmp	r4, r5
    c234:	d3f6      	bcc.n	c224 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c236:	bd70      	pop	{r4, r5, r6, pc}

0000c238 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c238:	2000      	movs	r0, #0
    c23a:	f7f6 beed 	b.w	3018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c23e <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c23e:	b510      	push	{r4, lr}
    c240:	f7f6 fbd6 	bl	29f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c248:	f000 b800 	b.w	c24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c24c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c24c:	0a41      	lsrs	r1, r0, #9
    c24e:	f643 5209 	movw	r2, #15625	; 0x3d09
    c252:	4351      	muls	r1, r2
    c254:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c258:	fb10 f002 	smulbb	r0, r0, r2
    c25c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c260:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c264:	4770      	bx	lr

0000c266 <MPSL_IRQ_RADIO_Handler>:
    c266:	f7f5 b9f3 	b.w	1650 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c26a:	2800      	cmp	r0, #0
    c26c:	db09      	blt.n	c282 <MPSL_IRQ_RADIO_Handler+0x1c>
    c26e:	f000 021f 	and.w	r2, r0, #31
    c272:	2101      	movs	r1, #1
    c274:	4091      	lsls	r1, r2
    c276:	0940      	lsrs	r0, r0, #5
    c278:	0080      	lsls	r0, r0, #2
    c27a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c27e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c282:	4770      	bx	lr
    c284:	2800      	cmp	r0, #0
    c286:	db0d      	blt.n	c2a4 <MPSL_IRQ_RADIO_Handler+0x3e>
    c288:	f000 021f 	and.w	r2, r0, #31
    c28c:	2101      	movs	r1, #1
    c28e:	4091      	lsls	r1, r2
    c290:	0940      	lsrs	r0, r0, #5
    c292:	0080      	lsls	r0, r0, #2
    c294:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c298:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c29c:	f3bf 8f4f 	dsb	sy
    c2a0:	f3bf 8f6f 	isb	sy
    c2a4:	4770      	bx	lr

0000c2a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c2a6:	b570      	push	{r4, r5, r6, lr}
    c2a8:	4602      	mov	r2, r0
    c2aa:	2000      	movs	r0, #0
    c2ac:	2900      	cmp	r1, #0
    c2ae:	d01d      	beq.n	c2ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c2b0:	fba2 0101 	umull	r0, r1, r2, r1
    c2b4:	0a40      	lsrs	r0, r0, #9
    c2b6:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c2ba:	0a49      	lsrs	r1, r1, #9
    c2bc:	1c40      	adds	r0, r0, #1
    c2be:	f141 0100 	adc.w	r1, r1, #0
    c2c2:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c2c6:	1883      	adds	r3, r0, r2
    c2c8:	f141 0100 	adc.w	r1, r1, #0
    c2cc:	1c5b      	adds	r3, r3, #1
    c2ce:	f141 0400 	adc.w	r4, r1, #0
    c2d2:	2100      	movs	r1, #0
    c2d4:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c2d8:	41a1      	sbcs	r1, r4
    c2da:	d203      	bcs.n	c2e4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c2dc:	2171      	movs	r1, #113	; 0x71
    c2de:	206d      	movs	r0, #109	; 0x6d
    c2e0:	f7f7 fa3e 	bl	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2e4:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c2e8:	fbb0 f0f2 	udiv	r0, r0, r2
    c2ec:	bd70      	pop	{r4, r5, r6, pc}
    c2ee:	5840      	ldr	r0, [r0, r1]
    c2f0:	2800      	cmp	r0, #0
    c2f2:	d000      	beq.n	c2f6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c2f4:	2001      	movs	r0, #1
    c2f6:	4770      	bx	lr
    c2f8:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c2fc:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c300:	f002 0201 	and.w	r2, r2, #1
    c304:	03c0      	lsls	r0, r0, #15
    c306:	d503      	bpl.n	c310 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c308:	428a      	cmp	r2, r1
    c30a:	d101      	bne.n	c310 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c30c:	2001      	movs	r0, #1
    c30e:	4770      	bx	lr
    c310:	2000      	movs	r0, #0
    c312:	4770      	bx	lr

0000c314 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c314:	b510      	push	{r4, lr}
    c316:	2101      	movs	r1, #1
    c318:	0788      	lsls	r0, r1, #30
    c31a:	f7f7 f9df 	bl	36dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c31e:	2800      	cmp	r0, #0
    c320:	d000      	beq.n	c324 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c322:	2001      	movs	r0, #1
    c324:	bd10      	pop	{r4, pc}

0000c326 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c326:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c32a:	2101      	movs	r1, #1
    c32c:	6001      	str	r1, [r0, #0]
    c32e:	4770      	bx	lr

0000c330 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c330:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c334:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c338:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c33c:	f002 0203 	and.w	r2, r2, #3
    c340:	03c9      	lsls	r1, r1, #15
    c342:	d503      	bpl.n	c34c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c344:	4282      	cmp	r2, r0
    c346:	d101      	bne.n	c34c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c348:	2001      	movs	r0, #1
    c34a:	4770      	bx	lr
    c34c:	2000      	movs	r0, #0
    c34e:	4770      	bx	lr

0000c350 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c350:	b510      	push	{r4, lr}
    c352:	2100      	movs	r1, #0
    c354:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c358:	f7f7 f9c0 	bl	36dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c35c:	2800      	cmp	r0, #0
    c35e:	d000      	beq.n	c362 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c360:	2001      	movs	r0, #1
    c362:	bd10      	pop	{r4, pc}
    c364:	2800      	cmp	r0, #0
    c366:	db09      	blt.n	c37c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c368:	f000 021f 	and.w	r2, r0, #31
    c36c:	2101      	movs	r1, #1
    c36e:	4091      	lsls	r1, r2
    c370:	0940      	lsrs	r0, r0, #5
    c372:	0080      	lsls	r0, r0, #2
    c374:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c378:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c37c:	4770      	bx	lr
    c37e:	2800      	cmp	r0, #0
    c380:	db0d      	blt.n	c39e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c382:	f000 021f 	and.w	r2, r0, #31
    c386:	2101      	movs	r1, #1
    c388:	4091      	lsls	r1, r2
    c38a:	0940      	lsrs	r0, r0, #5
    c38c:	0080      	lsls	r0, r0, #2
    c38e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c392:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c396:	f3bf 8f4f 	dsb	sy
    c39a:	f3bf 8f6f 	isb	sy
    c39e:	4770      	bx	lr
    c3a0:	00021000 	.word	0x00021000
    c3a4:	000000fa 	.word	0x000000fa
    c3a8:	71a053fe 	.word	0x71a053fe
    c3ac:	1095eb1b 	.word	0x1095eb1b
    c3b0:	c946cf33 	.word	0xc946cf33
    c3b4:	5ebe9563 	.word	0x5ebe9563
    c3b8:	736e3829 	.word	0x736e3829
    c3bc:	2800      	cmp	r0, #0
    c3be:	db09      	blt.n	c3d4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c3c0:	f000 021f 	and.w	r2, r0, #31
    c3c4:	2101      	movs	r1, #1
    c3c6:	4091      	lsls	r1, r2
    c3c8:	0940      	lsrs	r0, r0, #5
    c3ca:	0080      	lsls	r0, r0, #2
    c3cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3d0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c3d4:	4770      	bx	lr

0000c3d6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c3d6:	f3ef 8110 	mrs	r1, PRIMASK
    c3da:	b672      	cpsid	i
    c3dc:	7802      	ldrb	r2, [r0, #0]
    c3de:	2a01      	cmp	r2, #1
    c3e0:	d001      	beq.n	c3e6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c3e2:	2201      	movs	r2, #1
    c3e4:	e000      	b.n	c3e8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c3e6:	2200      	movs	r2, #0
    c3e8:	2301      	movs	r3, #1
    c3ea:	7003      	strb	r3, [r0, #0]
    c3ec:	b901      	cbnz	r1, c3f0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c3ee:	b662      	cpsie	i
    c3f0:	b10a      	cbz	r2, c3f6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c3f2:	2000      	movs	r0, #0
    c3f4:	4770      	bx	lr
    c3f6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c3fa:	4770      	bx	lr

0000c3fc <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c3fc:	2100      	movs	r1, #0
    c3fe:	7001      	strb	r1, [r0, #0]
    c400:	4608      	mov	r0, r1
    c402:	4770      	bx	lr

0000c404 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c404:	f3ef 8110 	mrs	r1, PRIMASK
    c408:	b672      	cpsid	i
    c40a:	2200      	movs	r2, #0
    c40c:	7002      	strb	r2, [r0, #0]
    c40e:	b901      	cbnz	r1, c412 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c410:	b662      	cpsie	i
    c412:	2000      	movs	r0, #0
    c414:	4770      	bx	lr

0000c416 <mpsl_low_priority_process>:
    c416:	f7f7 ba8f 	b.w	3938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c41a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c41e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c422:	280f      	cmp	r0, #15
    c424:	d001      	beq.n	c42a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c426:	2000      	movs	r0, #0
    c428:	4770      	bx	lr
    c42a:	2001      	movs	r0, #1
    c42c:	4770      	bx	lr

0000c42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c42e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c432:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c436:	280a      	cmp	r0, #10
    c438:	d001      	beq.n	c43e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c43a:	2000      	movs	r0, #0
    c43c:	4770      	bx	lr
    c43e:	2001      	movs	r0, #1
    c440:	4770      	bx	lr

0000c442 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c442:	b500      	push	{lr}
    c444:	f7ff fff3 	bl	c42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c448:	b120      	cbz	r0, c454 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c44a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c44e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c452:	b108      	cbz	r0, c458 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c454:	2000      	movs	r0, #0
    c456:	bd00      	pop	{pc}
    c458:	2001      	movs	r0, #1
    c45a:	bd00      	pop	{pc}

0000c45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c45c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c460:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c464:	280e      	cmp	r0, #14
    c466:	d001      	beq.n	c46c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c468:	2000      	movs	r0, #0
    c46a:	4770      	bx	lr
    c46c:	2001      	movs	r0, #1
    c46e:	4770      	bx	lr

0000c470 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c470:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c474:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c478:	2810      	cmp	r0, #16
    c47a:	d001      	beq.n	c480 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c47c:	2000      	movs	r0, #0
    c47e:	4770      	bx	lr
    c480:	2001      	movs	r0, #1
    c482:	4770      	bx	lr

0000c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c484:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c488:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c48c:	2806      	cmp	r0, #6
    c48e:	d003      	beq.n	c498 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c490:	1c40      	adds	r0, r0, #1
    c492:	d001      	beq.n	c498 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c494:	2000      	movs	r0, #0
    c496:	4770      	bx	lr
    c498:	2001      	movs	r0, #1
    c49a:	4770      	bx	lr

0000c49c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c49c:	b500      	push	{lr}
    c49e:	f7ff fff1 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4a2:	b148      	cbz	r0, c4b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c4a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4a8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4ac:	2806      	cmp	r0, #6
    c4ae:	d303      	bcc.n	c4b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c4b0:	1c40      	adds	r0, r0, #1
    c4b2:	d001      	beq.n	c4b8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c4b4:	2001      	movs	r0, #1
    c4b6:	bd00      	pop	{pc}
    c4b8:	2000      	movs	r0, #0
    c4ba:	bd00      	pop	{pc}

0000c4bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c4bc:	b500      	push	{lr}
    c4be:	f7ff ffe1 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c4c2:	b138      	cbz	r0, c4d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c4c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4c8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c4cc:	2806      	cmp	r0, #6
    c4ce:	d303      	bcc.n	c4d8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c4d0:	1c40      	adds	r0, r0, #1
    c4d2:	d001      	beq.n	c4d8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c4d4:	2000      	movs	r0, #0
    c4d6:	bd00      	pop	{pc}
    c4d8:	2001      	movs	r0, #1
    c4da:	bd00      	pop	{pc}

0000c4dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c4dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4e0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4e4:	280d      	cmp	r0, #13
    c4e6:	d001      	beq.n	c4ec <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c4e8:	2000      	movs	r0, #0
    c4ea:	4770      	bx	lr
    c4ec:	2001      	movs	r0, #1
    c4ee:	4770      	bx	lr

0000c4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c4f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c4f4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c4f8:	2808      	cmp	r0, #8
    c4fa:	d001      	beq.n	c500 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c4fc:	2000      	movs	r0, #0
    c4fe:	4770      	bx	lr
    c500:	2001      	movs	r0, #1
    c502:	4770      	bx	lr

0000c504 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c504:	2a00      	cmp	r2, #0
    c506:	bf04      	itt	eq
    c508:	2000      	moveq	r0, #0
    c50a:	4770      	bxeq	lr
    c50c:	1e52      	subs	r2, r2, #1
    c50e:	d007      	beq.n	c520 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c510:	7803      	ldrb	r3, [r0, #0]
    c512:	f891 c000 	ldrb.w	ip, [r1]
    c516:	4563      	cmp	r3, ip
    c518:	bf04      	itt	eq
    c51a:	1c40      	addeq	r0, r0, #1
    c51c:	1c49      	addeq	r1, r1, #1
    c51e:	d0f5      	beq.n	c50c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c520:	7800      	ldrb	r0, [r0, #0]
    c522:	7809      	ldrb	r1, [r1, #0]
    c524:	1a40      	subs	r0, r0, r1
    c526:	4770      	bx	lr

0000c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c528:	b4f0      	push	{r4, r5, r6, r7}
    c52a:	ea80 0c01 	eor.w	ip, r0, r1
    c52e:	4603      	mov	r3, r0
    c530:	f01c 0f03 	tst.w	ip, #3
    c534:	d13c      	bne.n	c5b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c536:	f013 0f03 	tst.w	r3, #3
    c53a:	d00b      	beq.n	c554 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c53c:	2a00      	cmp	r2, #0
    c53e:	bf04      	itt	eq
    c540:	bcf0      	popeq	{r4, r5, r6, r7}
    c542:	4770      	bxeq	lr
    c544:	f811 cb01 	ldrb.w	ip, [r1], #1
    c548:	f803 cb01 	strb.w	ip, [r3], #1
    c54c:	1e52      	subs	r2, r2, #1
    c54e:	f013 0f03 	tst.w	r3, #3
    c552:	d1f3      	bne.n	c53c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c554:	2a03      	cmp	r2, #3
    c556:	d94f      	bls.n	c5f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c558:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c55c:	d24c      	bcs.n	c5f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c55e:	f1c2 0c00 	rsb	ip, r2, #0
    c562:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c566:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c56a:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c56e:	f1cc 0c00 	rsb	ip, ip, #0
    c572:	f1bc 0f00 	cmp.w	ip, #0
    c576:	dd1b      	ble.n	c5b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c578:	1f0d      	subs	r5, r1, #4
    c57a:	1f1c      	subs	r4, r3, #4
    c57c:	f01c 0f01 	tst.w	ip, #1
    c580:	d003      	beq.n	c58a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c582:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c586:	f844 6f04 	str.w	r6, [r4, #4]!
    c58a:	ea5f 066c 	movs.w	r6, ip, asr #1
    c58e:	d007      	beq.n	c5a0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c590:	686f      	ldr	r7, [r5, #4]
    c592:	6067      	str	r7, [r4, #4]
    c594:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c598:	f844 7f08 	str.w	r7, [r4, #8]!
    c59c:	1e76      	subs	r6, r6, #1
    c59e:	d1f7      	bne.n	c590 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c5a0:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c5a4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c5a8:	f1cc 0c00 	rsb	ip, ip, #0
    c5ac:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c5b0:	2a00      	cmp	r2, #0
    c5b2:	bf04      	itt	eq
    c5b4:	bcf0      	popeq	{r4, r5, r6, r7}
    c5b6:	4770      	bxeq	lr
    c5b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c5bc:	d226      	bcs.n	c60c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c5be:	2a00      	cmp	r2, #0
    c5c0:	bfdc      	itt	le
    c5c2:	bcf0      	pople	{r4, r5, r6, r7}
    c5c4:	4770      	bxle	lr
    c5c6:	1e49      	subs	r1, r1, #1
    c5c8:	1e5b      	subs	r3, r3, #1
    c5ca:	f012 0f01 	tst.w	r2, #1
    c5ce:	d003      	beq.n	c5d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c5d0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c5d4:	f803 cf01 	strb.w	ip, [r3, #1]!
    c5d8:	1052      	asrs	r2, r2, #1
    c5da:	bf04      	itt	eq
    c5dc:	bcf0      	popeq	{r4, r5, r6, r7}
    c5de:	4770      	bxeq	lr
    c5e0:	f891 c001 	ldrb.w	ip, [r1, #1]
    c5e4:	f883 c001 	strb.w	ip, [r3, #1]
    c5e8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c5ec:	f803 cf02 	strb.w	ip, [r3, #2]!
    c5f0:	1e52      	subs	r2, r2, #1
    c5f2:	d1f5      	bne.n	c5e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c5f4:	bcf0      	pop	{r4, r5, r6, r7}
    c5f6:	4770      	bx	lr
    c5f8:	2a04      	cmp	r2, #4
    c5fa:	d3d9      	bcc.n	c5b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c5fc:	f851 cb04 	ldr.w	ip, [r1], #4
    c600:	1f12      	subs	r2, r2, #4
    c602:	f843 cb04 	str.w	ip, [r3], #4
    c606:	2a04      	cmp	r2, #4
    c608:	d2f8      	bcs.n	c5fc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c60a:	e7d1      	b.n	c5b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c60c:	f811 cb01 	ldrb.w	ip, [r1], #1
    c610:	f803 cb01 	strb.w	ip, [r3], #1
    c614:	1e52      	subs	r2, r2, #1
    c616:	d1f9      	bne.n	c60c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c618:	bcf0      	pop	{r4, r5, r6, r7}
    c61a:	4770      	bx	lr

0000c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c61c:	b470      	push	{r4, r5, r6}
    c61e:	4603      	mov	r3, r0
    c620:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c624:	f010 0f03 	tst.w	r0, #3
    c628:	d009      	beq.n	c63e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c62a:	2a00      	cmp	r2, #0
    c62c:	bf04      	itt	eq
    c62e:	bc70      	popeq	{r4, r5, r6}
    c630:	4770      	bxeq	lr
    c632:	f803 cb01 	strb.w	ip, [r3], #1
    c636:	1e52      	subs	r2, r2, #1
    c638:	f013 0f03 	tst.w	r3, #3
    c63c:	d1f5      	bne.n	c62a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c63e:	b2c9      	uxtb	r1, r1
    c640:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c644:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c648:	2a03      	cmp	r2, #3
    c64a:	d939      	bls.n	c6c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c64c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c650:	d236      	bcs.n	c6c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c652:	4251      	negs	r1, r2
    c654:	17cc      	asrs	r4, r1, #31
    c656:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c65a:	1089      	asrs	r1, r1, #2
    c65c:	424e      	negs	r6, r1
    c65e:	2e00      	cmp	r6, #0
    c660:	dd11      	ble.n	c686 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c662:	1f19      	subs	r1, r3, #4
    c664:	f016 0f01 	tst.w	r6, #1
    c668:	bf18      	it	ne
    c66a:	f841 5f04 	strne.w	r5, [r1, #4]!
    c66e:	1074      	asrs	r4, r6, #1
    c670:	d004      	beq.n	c67c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c672:	604d      	str	r5, [r1, #4]
    c674:	f841 5f08 	str.w	r5, [r1, #8]!
    c678:	1e64      	subs	r4, r4, #1
    c67a:	d1fa      	bne.n	c672 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c67c:	4271      	negs	r1, r6
    c67e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c682:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c686:	2a00      	cmp	r2, #0
    c688:	bf04      	itt	eq
    c68a:	bc70      	popeq	{r4, r5, r6}
    c68c:	4770      	bxeq	lr
    c68e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c692:	d21d      	bcs.n	c6d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c694:	2a00      	cmp	r2, #0
    c696:	bfdc      	itt	le
    c698:	bc70      	pople	{r4, r5, r6}
    c69a:	4770      	bxle	lr
    c69c:	1e59      	subs	r1, r3, #1
    c69e:	f012 0f01 	tst.w	r2, #1
    c6a2:	bf18      	it	ne
    c6a4:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c6a8:	1052      	asrs	r2, r2, #1
    c6aa:	bf04      	itt	eq
    c6ac:	bc70      	popeq	{r4, r5, r6}
    c6ae:	4770      	bxeq	lr
    c6b0:	f881 c001 	strb.w	ip, [r1, #1]
    c6b4:	f801 cf02 	strb.w	ip, [r1, #2]!
    c6b8:	1e52      	subs	r2, r2, #1
    c6ba:	d1f9      	bne.n	c6b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c6bc:	bc70      	pop	{r4, r5, r6}
    c6be:	4770      	bx	lr
    c6c0:	2a04      	cmp	r2, #4
    c6c2:	d3e0      	bcc.n	c686 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6c4:	1f12      	subs	r2, r2, #4
    c6c6:	f843 5b04 	str.w	r5, [r3], #4
    c6ca:	2a04      	cmp	r2, #4
    c6cc:	d2fa      	bcs.n	c6c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c6ce:	e7da      	b.n	c686 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c6d0:	f803 cb01 	strb.w	ip, [r3], #1
    c6d4:	1e52      	subs	r2, r2, #1
    c6d6:	d1fb      	bne.n	c6d0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c6d8:	bc70      	pop	{r4, r5, r6}
    c6da:	4770      	bx	lr
    c6dc:	f04f 30ff 	mov.w	r0, #4294967295
    c6e0:	4770      	bx	lr
    c6e2:	2000      	movs	r0, #0
    c6e4:	4770      	bx	lr
    c6e6:	2000      	movs	r0, #0
    c6e8:	4770      	bx	lr
    c6ea:	f04f 30ff 	mov.w	r0, #4294967295
    c6ee:	4770      	bx	lr
    c6f0:	4770      	bx	lr
    c6f2:	4770      	bx	lr
    c6f4:	2000      	movs	r0, #0
    c6f6:	4770      	bx	lr
    c6f8:	f04f 30ff 	mov.w	r0, #4294967295
    c6fc:	4770      	bx	lr
    c6fe:	f04f 30ff 	mov.w	r0, #4294967295
    c702:	4770      	bx	lr
    c704:	2100      	movs	r1, #0
    c706:	7001      	strb	r1, [r0, #0]
    c708:	4770      	bx	lr
    c70a:	f04f 30ff 	mov.w	r0, #4294967295
    c70e:	4770      	bx	lr
    c710:	f04f 30ff 	mov.w	r0, #4294967295
    c714:	4770      	bx	lr
    c716:	2000      	movs	r0, #0
    c718:	4770      	bx	lr
    c71a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c71e:	4606      	mov	r6, r0
    c720:	460c      	mov	r4, r1
    c722:	7808      	ldrb	r0, [r1, #0]
    c724:	7849      	ldrb	r1, [r1, #1]
    c726:	2700      	movs	r7, #0
    c728:	4408      	add	r0, r1
    c72a:	4691      	mov	r9, r2
    c72c:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c730:	463d      	mov	r5, r7
    c732:	e00e      	b.n	c752 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c734:	7a23      	ldrb	r3, [r4, #8]
    c736:	2b02      	cmp	r3, #2
    c738:	d200      	bcs.n	c73c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    c73a:	2302      	movs	r3, #2
    c73c:	79e2      	ldrb	r2, [r4, #7]
    c73e:	2a03      	cmp	r2, #3
    c740:	d200      	bcs.n	c744 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    c742:	2203      	movs	r2, #3
    c744:	79a1      	ldrb	r1, [r4, #6]
    c746:	7960      	ldrb	r0, [r4, #5]
    c748:	f000 ffaf 	bl	d6aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c74c:	1c6d      	adds	r5, r5, #1
    c74e:	4407      	add	r7, r0
    c750:	b2ed      	uxtb	r5, r5
    c752:	4545      	cmp	r5, r8
    c754:	d3ee      	bcc.n	c734 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    c756:	6830      	ldr	r0, [r6, #0]
    c758:	1cc0      	adds	r0, r0, #3
    c75a:	f020 0003 	bic.w	r0, r0, #3
    c75e:	6030      	str	r0, [r6, #0]
    c760:	f1b9 0f00 	cmp.w	r9, #0
    c764:	d000      	beq.n	c768 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    c766:	2000      	movs	r0, #0
    c768:	463a      	mov	r2, r7
    c76a:	4641      	mov	r1, r8
    c76c:	f7f7 fe8a 	bl	4484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c770:	6831      	ldr	r1, [r6, #0]
    c772:	4408      	add	r0, r1
    c774:	6030      	str	r0, [r6, #0]
    c776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c77a <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c77a:	2000      	movs	r0, #0
    c77c:	4770      	bx	lr

0000c77e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c77e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c780:	4604      	mov	r4, r0
    c782:	1d01      	adds	r1, r0, #4
    c784:	4668      	mov	r0, sp
    c786:	f7f9 fc45 	bl	6014 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c78a:	2800      	cmp	r0, #0
    c78c:	d004      	beq.n	c798 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c78e:	4669      	mov	r1, sp
    c790:	4620      	mov	r0, r4
    c792:	f000 f848 	bl	c826 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c796:	2001      	movs	r0, #1
    c798:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c79a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c79a:	b50e      	push	{r1, r2, r3, lr}
    c79c:	4601      	mov	r1, r0
    c79e:	4668      	mov	r0, sp
    c7a0:	f000 f827 	bl	c7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c7a4:	4668      	mov	r0, sp
    c7a6:	f7f9 fc5f 	bl	6068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c7aa:	bd0e      	pop	{r1, r2, r3, pc}

0000c7ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c7ac:	b510      	push	{r4, lr}
    c7ae:	4604      	mov	r4, r0
    c7b0:	4620      	mov	r0, r4
    c7b2:	f7f7 fba7 	bl	3f04 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c7b6:	2800      	cmp	r0, #0
    c7b8:	d006      	beq.n	c7c8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c7ba:	78a1      	ldrb	r1, [r4, #2]
    c7bc:	7820      	ldrb	r0, [r4, #0]
    c7be:	f000 f804 	bl	c7ca <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d0f4      	beq.n	c7b0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c7c6:	2001      	movs	r0, #1
    c7c8:	bd10      	pop	{r4, pc}
    c7ca:	b570      	push	{r4, r5, r6, lr}
    c7cc:	460c      	mov	r4, r1
    c7ce:	4605      	mov	r5, r0
    c7d0:	f7f7 fbf4 	bl	3fbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c7d4:	2800      	cmp	r0, #0
    c7d6:	d002      	beq.n	c7de <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c7d8:	2d3e      	cmp	r5, #62	; 0x3e
    c7da:	d001      	beq.n	c7e0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c7dc:	2001      	movs	r0, #1
    c7de:	bd70      	pop	{r4, r5, r6, pc}
    c7e0:	2c12      	cmp	r4, #18
    c7e2:	d004      	beq.n	c7ee <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c7e4:	4620      	mov	r0, r4
    c7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7ea:	f7f7 bc03 	b.w	3ff4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c7ee:	2000      	movs	r0, #0
    c7f0:	bd70      	pop	{r4, r5, r6, pc}

0000c7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c7f2:	880a      	ldrh	r2, [r1, #0]
    c7f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c7f8:	8002      	strh	r2, [r0, #0]
    c7fa:	884a      	ldrh	r2, [r1, #2]
    c7fc:	8042      	strh	r2, [r0, #2]
    c7fe:	784a      	ldrb	r2, [r1, #1]
    c800:	0993      	lsrs	r3, r2, #6
    c802:	2200      	movs	r2, #0
    c804:	7142      	strb	r2, [r0, #5]
    c806:	784b      	ldrb	r3, [r1, #1]
    c808:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c80c:	b11b      	cbz	r3, c816 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c80e:	2b01      	cmp	r3, #1
    c810:	d005      	beq.n	c81e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c812:	2b02      	cmp	r3, #2
    c814:	d005      	beq.n	c822 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c816:	7102      	strb	r2, [r0, #4]
    c818:	1d09      	adds	r1, r1, #4
    c81a:	6081      	str	r1, [r0, #8]
    c81c:	4770      	bx	lr
    c81e:	2201      	movs	r2, #1
    c820:	e7f9      	b.n	c816 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c822:	2202      	movs	r2, #2
    c824:	e7f7      	b.n	c816 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c826 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c826:	b510      	push	{r4, lr}
    c828:	460c      	mov	r4, r1
    c82a:	7809      	ldrb	r1, [r1, #0]
    c82c:	7001      	strb	r1, [r0, #0]
    c82e:	7841      	ldrb	r1, [r0, #1]
    c830:	f021 010f 	bic.w	r1, r1, #15
    c834:	7041      	strb	r1, [r0, #1]
    c836:	8822      	ldrh	r2, [r4, #0]
    c838:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c83c:	4311      	orrs	r1, r2
    c83e:	7041      	strb	r1, [r0, #1]
    c840:	78a2      	ldrb	r2, [r4, #2]
    c842:	7082      	strb	r2, [r0, #2]
    c844:	8862      	ldrh	r2, [r4, #2]
    c846:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c84a:	0a12      	lsrs	r2, r2, #8
    c84c:	70c2      	strb	r2, [r0, #3]
    c84e:	7041      	strb	r1, [r0, #1]
    c850:	7922      	ldrb	r2, [r4, #4]
    c852:	f002 0203 	and.w	r2, r2, #3
    c856:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c85a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c85e:	7041      	strb	r1, [r0, #1]
    c860:	7962      	ldrb	r2, [r4, #5]
    c862:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c866:	7041      	strb	r1, [r0, #1]
    c868:	68a1      	ldr	r1, [r4, #8]
    c86a:	1d02      	adds	r2, r0, #4
    c86c:	4291      	cmp	r1, r2
    c86e:	d006      	beq.n	c87e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c870:	8862      	ldrh	r2, [r4, #2]
    c872:	2afb      	cmp	r2, #251	; 0xfb
    c874:	d300      	bcc.n	c878 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c876:	22fb      	movs	r2, #251	; 0xfb
    c878:	1d00      	adds	r0, r0, #4
    c87a:	f7ff fe55 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c87e:	78a0      	ldrb	r0, [r4, #2]
    c880:	1d00      	adds	r0, r0, #4
    c882:	b2c0      	uxtb	r0, r0
    c884:	bd10      	pop	{r4, pc}

0000c886 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c886:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c88a:	4604      	mov	r4, r0
    c88c:	f891 c000 	ldrb.w	ip, [r1]
    c890:	2000      	movs	r0, #0
    c892:	270c      	movs	r7, #12
    c894:	223e      	movs	r2, #62	; 0x3e
    c896:	2612      	movs	r6, #18
    c898:	25ff      	movs	r5, #255	; 0xff
    c89a:	f04f 0b14 	mov.w	fp, #20
    c89e:	f04f 0e13 	mov.w	lr, #19
    c8a2:	f04f 0a05 	mov.w	sl, #5
    c8a6:	f104 030d 	add.w	r3, r4, #13
    c8aa:	f04f 0911 	mov.w	r9, #17
    c8ae:	f1bc 0f20 	cmp.w	ip, #32
    c8b2:	d272      	bcs.n	c99a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c8b4:	e8df f00c 	tbb	[pc, ip]
    c8b8:	29271071 	.word	0x29271071
    c8bc:	a46dfc2e 	.word	0xa46dfc2e
    c8c0:	fbdac0ae 	.word	0xfbdac0ae
    c8c4:	f7f8f9fa 	.word	0xf7f8f9fa
    c8c8:	507171f6 	.word	0x507171f6
    c8cc:	f3f4f572 	.word	0xf3f4f572
    c8d0:	eff0f1f2 	.word	0xeff0f1f2
    c8d4:	ec71edee 	.word	0xec71edee
    c8d8:	7027      	strb	r7, [r4, #0]
    c8da:	7908      	ldrb	r0, [r1, #4]
    c8dc:	70a0      	strb	r0, [r4, #2]
    c8de:	7948      	ldrb	r0, [r1, #5]
    c8e0:	70e0      	strb	r0, [r4, #3]
    c8e2:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c8e6:	0a00      	lsrs	r0, r0, #8
    c8e8:	7120      	strb	r0, [r4, #4]
    c8ea:	79c8      	ldrb	r0, [r1, #7]
    c8ec:	7160      	strb	r0, [r4, #5]
    c8ee:	7a08      	ldrb	r0, [r1, #8]
    c8f0:	71a0      	strb	r0, [r4, #6]
    c8f2:	8908      	ldrh	r0, [r1, #8]
    c8f4:	0a00      	lsrs	r0, r0, #8
    c8f6:	71e0      	strb	r0, [r4, #7]
    c8f8:	7a88      	ldrb	r0, [r1, #10]
    c8fa:	7220      	strb	r0, [r4, #8]
    c8fc:	8948      	ldrh	r0, [r1, #10]
    c8fe:	0a00      	lsrs	r0, r0, #8
    c900:	7260      	strb	r0, [r4, #9]
    c902:	2008      	movs	r0, #8
    c904:	e154      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c906:	2010      	movs	r0, #16
    c908:	e000      	b.n	c90c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    c90a:	201a      	movs	r0, #26
    c90c:	7020      	strb	r0, [r4, #0]
    c90e:	7908      	ldrb	r0, [r1, #4]
    c910:	70a0      	strb	r0, [r4, #2]
    c912:	e154      	b.n	cbbe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    c914:	7022      	strb	r2, [r4, #0]
    c916:	2002      	movs	r0, #2
    c918:	70a0      	strb	r0, [r4, #2]
    c91a:	7908      	ldrb	r0, [r1, #4]
    c91c:	70e0      	strb	r0, [r4, #3]
    c91e:	7b88      	ldrb	r0, [r1, #14]
    c920:	7120      	strb	r0, [r4, #4]
    c922:	7948      	ldrb	r0, [r1, #5]
    c924:	7160      	strb	r0, [r4, #5]
    c926:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c92a:	f8c4 0006 	str.w	r0, [r4, #6]
    c92e:	8948      	ldrh	r0, [r1, #10]
    c930:	8160      	strh	r0, [r4, #10]
    c932:	7b08      	ldrb	r0, [r1, #12]
    c934:	7320      	strb	r0, [r4, #12]
    c936:	7b0e      	ldrb	r6, [r1, #12]
    c938:	1d0d      	adds	r5, r1, #4
    c93a:	2e1f      	cmp	r6, #31
    c93c:	d300      	bcc.n	c940 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    c93e:	261f      	movs	r6, #31
    c940:	4618      	mov	r0, r3
    c942:	4632      	mov	r2, r6
    c944:	f105 010b 	add.w	r1, r5, #11
    c948:	f7ff fdee 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c94c:	360d      	adds	r6, #13
    c94e:	7a69      	ldrb	r1, [r5, #9]
    c950:	55a1      	strb	r1, [r4, r6]
    c952:	1e76      	subs	r6, r6, #1
    c954:	b2f0      	uxtb	r0, r6
    c956:	e129      	b.n	cbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    c958:	7022      	strb	r2, [r4, #0]
    c95a:	200b      	movs	r0, #11
    c95c:	70a0      	strb	r0, [r4, #2]
    c95e:	7908      	ldrb	r0, [r1, #4]
    c960:	70e0      	strb	r0, [r4, #3]
    c962:	7948      	ldrb	r0, [r1, #5]
    c964:	7120      	strb	r0, [r4, #4]
    c966:	7988      	ldrb	r0, [r1, #6]
    c968:	7160      	strb	r0, [r4, #5]
    c96a:	f8d1 0007 	ldr.w	r0, [r1, #7]
    c96e:	f8c4 0006 	str.w	r0, [r4, #6]
    c972:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    c976:	8160      	strh	r0, [r4, #10]
    c978:	7b48      	ldrb	r0, [r1, #13]
    c97a:	7320      	strb	r0, [r4, #12]
    c97c:	f8d1 000e 	ldr.w	r0, [r1, #14]
    c980:	f8c4 000d 	str.w	r0, [r4, #13]
    c984:	8a48      	ldrh	r0, [r1, #18]
    c986:	f8a4 0011 	strh.w	r0, [r4, #17]
    c98a:	7d08      	ldrb	r0, [r1, #20]
    c98c:	74e0      	strb	r0, [r4, #19]
    c98e:	4630      	mov	r0, r6
    c990:	e10e      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    c992:	4620      	mov	r0, r4
    c994:	f000 f98d 	bl	ccb2 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c998:	e108      	b.n	cbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    c99a:	e10b      	b.n	cbb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    c99c:	7022      	strb	r2, [r4, #0]
    c99e:	200a      	movs	r0, #10
    c9a0:	70a0      	strb	r0, [r4, #2]
    c9a2:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c9a6:	70e0      	strb	r0, [r4, #3]
    c9a8:	7888      	ldrb	r0, [r1, #2]
    c9aa:	7120      	strb	r0, [r4, #4]
    c9ac:	8848      	ldrh	r0, [r1, #2]
    c9ae:	0a00      	lsrs	r0, r0, #8
    c9b0:	7160      	strb	r0, [r4, #5]
    c9b2:	7908      	ldrb	r0, [r1, #4]
    c9b4:	71a0      	strb	r0, [r4, #6]
    c9b6:	7948      	ldrb	r0, [r1, #5]
    c9b8:	71e0      	strb	r0, [r4, #7]
    c9ba:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c9be:	60a0      	str	r0, [r4, #8]
    c9c0:	8948      	ldrh	r0, [r1, #10]
    c9c2:	81a0      	strh	r0, [r4, #12]
    c9c4:	68c8      	ldr	r0, [r1, #12]
    c9c6:	f8c4 000e 	str.w	r0, [r4, #14]
    c9ca:	8a08      	ldrh	r0, [r1, #16]
    c9cc:	8260      	strh	r0, [r4, #18]
    c9ce:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c9d2:	6160      	str	r0, [r4, #20]
    c9d4:	8ac8      	ldrh	r0, [r1, #22]
    c9d6:	8320      	strh	r0, [r4, #24]
    c9d8:	7e08      	ldrb	r0, [r1, #24]
    c9da:	76a0      	strb	r0, [r4, #26]
    c9dc:	8b08      	ldrh	r0, [r1, #24]
    c9de:	0a00      	lsrs	r0, r0, #8
    c9e0:	76e0      	strb	r0, [r4, #27]
    c9e2:	7e88      	ldrb	r0, [r1, #26]
    c9e4:	7720      	strb	r0, [r4, #28]
    c9e6:	8b48      	ldrh	r0, [r1, #26]
    c9e8:	0a00      	lsrs	r0, r0, #8
    c9ea:	7760      	strb	r0, [r4, #29]
    c9ec:	7f08      	ldrb	r0, [r1, #28]
    c9ee:	77a0      	strb	r0, [r4, #30]
    c9f0:	8b88      	ldrh	r0, [r1, #28]
    c9f2:	0a00      	lsrs	r0, r0, #8
    c9f4:	77e0      	strb	r0, [r4, #31]
    c9f6:	7f88      	ldrb	r0, [r1, #30]
    c9f8:	f884 0020 	strb.w	r0, [r4, #32]
    c9fc:	201f      	movs	r0, #31
    c9fe:	e0d7      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca00:	7022      	strb	r2, [r4, #0]
    ca02:	f884 b002 	strb.w	fp, [r4, #2]
    ca06:	7908      	ldrb	r0, [r1, #4]
    ca08:	70e0      	strb	r0, [r4, #3]
    ca0a:	8888      	ldrh	r0, [r1, #4]
    ca0c:	0a00      	lsrs	r0, r0, #8
    ca0e:	7120      	strb	r0, [r4, #4]
    ca10:	7988      	ldrb	r0, [r1, #6]
    ca12:	e0ed      	b.n	cbf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ca14:	7022      	strb	r2, [r4, #0]
    ca16:	2004      	movs	r0, #4
    ca18:	70a0      	strb	r0, [r4, #2]
    ca1a:	7908      	ldrb	r0, [r1, #4]
    ca1c:	70e0      	strb	r0, [r4, #3]
    ca1e:	7988      	ldrb	r0, [r1, #6]
    ca20:	7120      	strb	r0, [r4, #4]
    ca22:	88c8      	ldrh	r0, [r1, #6]
    ca24:	0a00      	lsrs	r0, r0, #8
    ca26:	7160      	strb	r0, [r4, #5]
    ca28:	6888      	ldr	r0, [r1, #8]
    ca2a:	f8c4 0006 	str.w	r0, [r4, #6]
    ca2e:	68c8      	ldr	r0, [r1, #12]
    ca30:	f8c4 000a 	str.w	r0, [r4, #10]
    ca34:	200c      	movs	r0, #12
    ca36:	e0bb      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ca38:	7022      	strb	r2, [r4, #0]
    ca3a:	2003      	movs	r0, #3
    ca3c:	70a0      	strb	r0, [r4, #2]
    ca3e:	7908      	ldrb	r0, [r1, #4]
    ca40:	70e0      	strb	r0, [r4, #3]
    ca42:	7988      	ldrb	r0, [r1, #6]
    ca44:	7120      	strb	r0, [r4, #4]
    ca46:	88c8      	ldrh	r0, [r1, #6]
    ca48:	0a00      	lsrs	r0, r0, #8
    ca4a:	7160      	strb	r0, [r4, #5]
    ca4c:	7a08      	ldrb	r0, [r1, #8]
    ca4e:	71a0      	strb	r0, [r4, #6]
    ca50:	8908      	ldrh	r0, [r1, #8]
    ca52:	0a00      	lsrs	r0, r0, #8
    ca54:	71e0      	strb	r0, [r4, #7]
    ca56:	7a88      	ldrb	r0, [r1, #10]
    ca58:	7220      	strb	r0, [r4, #8]
    ca5a:	8948      	ldrh	r0, [r1, #10]
    ca5c:	0a00      	lsrs	r0, r0, #8
    ca5e:	7260      	strb	r0, [r4, #9]
    ca60:	7b08      	ldrb	r0, [r1, #12]
    ca62:	72a0      	strb	r0, [r4, #10]
    ca64:	8988      	ldrh	r0, [r1, #12]
    ca66:	0a00      	lsrs	r0, r0, #8
    ca68:	72e0      	strb	r0, [r4, #11]
    ca6a:	e120      	b.n	ccae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    ca6c:	7022      	strb	r2, [r4, #0]
    ca6e:	f884 a002 	strb.w	sl, [r4, #2]
    ca72:	7908      	ldrb	r0, [r1, #4]
    ca74:	70e0      	strb	r0, [r4, #3]
    ca76:	8888      	ldrh	r0, [r1, #4]
    ca78:	0a00      	lsrs	r0, r0, #8
    ca7a:	7120      	strb	r0, [r4, #4]
    ca7c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ca80:	f8c4 0005 	str.w	r0, [r4, #5]
    ca84:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ca88:	f8c4 0009 	str.w	r0, [r4, #9]
    ca8c:	89c8      	ldrh	r0, [r1, #14]
    ca8e:	e010      	b.n	cab2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    ca90:	e0fa      	b.n	cc88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    ca92:	e0ce      	b.n	cc32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    ca94:	e0af      	b.n	cbf6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ca96:	e0da      	b.n	cc4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ca98:	e0e8      	b.n	cc6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    ca9a:	e0a1      	b.n	cbe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ca9c:	e08c      	b.n	cbb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    ca9e:	e090      	b.n	cbc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    caa0:	e033      	b.n	cb0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    caa2:	e02f      	b.n	cb04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    caa4:	e043      	b.n	cb2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    caa6:	e03d      	b.n	cb24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    caa8:	e021      	b.n	caee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    caaa:	e015      	b.n	cad8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    caac:	e008      	b.n	cac0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    caae:	e004      	b.n	caba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cab0:	e046      	b.n	cb40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    cab2:	f8a4 000d 	strh.w	r0, [r4, #13]
    cab6:	200d      	movs	r0, #13
    cab8:	e07a      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    caba:	f884 9000 	strb.w	r9, [r4]
    cabe:	e038      	b.n	cb32 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    cac0:	f884 a000 	strb.w	sl, [r4]
    cac4:	7908      	ldrb	r0, [r1, #4]
    cac6:	70a0      	strb	r0, [r4, #2]
    cac8:	7948      	ldrb	r0, [r1, #5]
    caca:	70e0      	strb	r0, [r4, #3]
    cacc:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cad0:	0a00      	lsrs	r0, r0, #8
    cad2:	7120      	strb	r0, [r4, #4]
    cad4:	79c8      	ldrb	r0, [r1, #7]
    cad6:	e08b      	b.n	cbf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cad8:	2008      	movs	r0, #8
    cada:	7020      	strb	r0, [r4, #0]
    cadc:	7908      	ldrb	r0, [r1, #4]
    cade:	70a0      	strb	r0, [r4, #2]
    cae0:	7988      	ldrb	r0, [r1, #6]
    cae2:	70e0      	strb	r0, [r4, #3]
    cae4:	88c8      	ldrh	r0, [r1, #6]
    cae6:	0a00      	lsrs	r0, r0, #8
    cae8:	7120      	strb	r0, [r4, #4]
    caea:	7a08      	ldrb	r0, [r1, #8]
    caec:	e080      	b.n	cbf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    caee:	2030      	movs	r0, #48	; 0x30
    caf0:	7020      	strb	r0, [r4, #0]
    caf2:	7908      	ldrb	r0, [r1, #4]
    caf4:	70a0      	strb	r0, [r4, #2]
    caf6:	7988      	ldrb	r0, [r1, #6]
    caf8:	70e0      	strb	r0, [r4, #3]
    cafa:	88c8      	ldrh	r0, [r1, #6]
    cafc:	0a00      	lsrs	r0, r0, #8
    cafe:	7120      	strb	r0, [r4, #4]
    cb00:	2003      	movs	r0, #3
    cb02:	e055      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb04:	7022      	strb	r2, [r4, #0]
    cb06:	2007      	movs	r0, #7
    cb08:	e077      	b.n	cbfa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    cb0a:	7022      	strb	r2, [r4, #0]
    cb0c:	70a7      	strb	r7, [r4, #2]
    cb0e:	7908      	ldrb	r0, [r1, #4]
    cb10:	70e0      	strb	r0, [r4, #3]
    cb12:	7988      	ldrb	r0, [r1, #6]
    cb14:	7120      	strb	r0, [r4, #4]
    cb16:	88c8      	ldrh	r0, [r1, #6]
    cb18:	0a00      	lsrs	r0, r0, #8
    cb1a:	7160      	strb	r0, [r4, #5]
    cb1c:	7a08      	ldrb	r0, [r1, #8]
    cb1e:	71a0      	strb	r0, [r4, #6]
    cb20:	7a48      	ldrb	r0, [r1, #9]
    cb22:	e05a      	b.n	cbda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    cb24:	4620      	mov	r0, r4
    cb26:	1d09      	adds	r1, r1, #4
    cb28:	f7f7 fa1a 	bl	3f60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    cb2c:	e03e      	b.n	cbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cb2e:	2057      	movs	r0, #87	; 0x57
    cb30:	7020      	strb	r0, [r4, #0]
    cb32:	7908      	ldrb	r0, [r1, #4]
    cb34:	70a0      	strb	r0, [r4, #2]
    cb36:	8888      	ldrh	r0, [r1, #4]
    cb38:	0a00      	lsrs	r0, r0, #8
    cb3a:	70e0      	strb	r0, [r4, #3]
    cb3c:	2002      	movs	r0, #2
    cb3e:	e037      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb40:	7022      	strb	r2, [r4, #0]
    cb42:	220d      	movs	r2, #13
    cb44:	70a2      	strb	r2, [r4, #2]
    cb46:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cb4a:	70e2      	strb	r2, [r4, #3]
    cb4c:	894a      	ldrh	r2, [r1, #10]
    cb4e:	80a2      	strh	r2, [r4, #4]
    cb50:	784a      	ldrb	r2, [r1, #1]
    cb52:	71a2      	strb	r2, [r4, #6]
    cb54:	f8d1 2002 	ldr.w	r2, [r1, #2]
    cb58:	f8c4 2007 	str.w	r2, [r4, #7]
    cb5c:	88ca      	ldrh	r2, [r1, #6]
    cb5e:	f8a4 200b 	strh.w	r2, [r4, #11]
    cb62:	7b0a      	ldrb	r2, [r1, #12]
    cb64:	4620      	mov	r0, r4
    cb66:	7362      	strb	r2, [r4, #13]
    cb68:	7b4a      	ldrb	r2, [r1, #13]
    cb6a:	7382      	strb	r2, [r0, #14]
    cb6c:	7b8a      	ldrb	r2, [r1, #14]
    cb6e:	73c2      	strb	r2, [r0, #15]
    cb70:	7e8a      	ldrb	r2, [r1, #26]
    cb72:	7402      	strb	r2, [r0, #16]
    cb74:	7a4a      	ldrb	r2, [r1, #9]
    cb76:	7442      	strb	r2, [r0, #17]
    cb78:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cb7c:	f8ad 2000 	strh.w	r2, [sp]
    cb80:	8242      	strh	r2, [r0, #18]
    cb82:	7cca      	ldrb	r2, [r1, #19]
    cb84:	7502      	strb	r2, [r0, #20]
    cb86:	694a      	ldr	r2, [r1, #20]
    cb88:	f8c0 2015 	str.w	r2, [r0, #21]
    cb8c:	8b0a      	ldrh	r2, [r1, #24]
    cb8e:	f8a0 2019 	strh.w	r2, [r0, #25]
    cb92:	7a0a      	ldrb	r2, [r1, #8]
    cb94:	76c2      	strb	r2, [r0, #27]
    cb96:	7a0d      	ldrb	r5, [r1, #8]
    cb98:	2de5      	cmp	r5, #229	; 0xe5
    cb9a:	d300      	bcc.n	cb9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    cb9c:	25e5      	movs	r5, #229	; 0xe5
    cb9e:	462a      	mov	r2, r5
    cba0:	301c      	adds	r0, #28
    cba2:	311c      	adds	r1, #28
    cba4:	f7ff fcc0 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cba8:	351a      	adds	r5, #26
    cbaa:	b2e8      	uxtb	r0, r5
    cbac:	2800      	cmp	r0, #0
    cbae:	d001      	beq.n	cbb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cbb0:	7060      	strb	r0, [r4, #1]
    cbb2:	1c80      	adds	r0, r0, #2
    cbb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbb8:	7022      	strb	r2, [r4, #0]
    cbba:	f884 9002 	strb.w	r9, [r4, #2]
    cbbe:	2001      	movs	r0, #1
    cbc0:	e7f6      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbc2:	7022      	strb	r2, [r4, #0]
    cbc4:	70a6      	strb	r6, [r4, #2]
    cbc6:	7908      	ldrb	r0, [r1, #4]
    cbc8:	70e0      	strb	r0, [r4, #3]
    cbca:	7948      	ldrb	r0, [r1, #5]
    cbcc:	7120      	strb	r0, [r4, #4]
    cbce:	7988      	ldrb	r0, [r1, #6]
    cbd0:	7160      	strb	r0, [r4, #5]
    cbd2:	88c8      	ldrh	r0, [r1, #6]
    cbd4:	0a00      	lsrs	r0, r0, #8
    cbd6:	71a0      	strb	r0, [r4, #6]
    cbd8:	7a08      	ldrb	r0, [r1, #8]
    cbda:	71e0      	strb	r0, [r4, #7]
    cbdc:	2006      	movs	r0, #6
    cbde:	e7e7      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbe0:	7025      	strb	r5, [r4, #0]
    cbe2:	20a1      	movs	r0, #161	; 0xa1
    cbe4:	70a0      	strb	r0, [r4, #2]
    cbe6:	7908      	ldrb	r0, [r1, #4]
    cbe8:	70e0      	strb	r0, [r4, #3]
    cbea:	7948      	ldrb	r0, [r1, #5]
    cbec:	7120      	strb	r0, [r4, #4]
    cbee:	2000      	movs	r0, #0
    cbf0:	7160      	strb	r0, [r4, #5]
    cbf2:	2004      	movs	r0, #4
    cbf4:	e7dc      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbf6:	7025      	strb	r5, [r4, #0]
    cbf8:	20a2      	movs	r0, #162	; 0xa2
    cbfa:	70a0      	strb	r0, [r4, #2]
    cbfc:	7908      	ldrb	r0, [r1, #4]
    cbfe:	70e0      	strb	r0, [r4, #3]
    cc00:	8888      	ldrh	r0, [r1, #4]
    cc02:	0a00      	lsrs	r0, r0, #8
    cc04:	7120      	strb	r0, [r4, #4]
    cc06:	7988      	ldrb	r0, [r1, #6]
    cc08:	7160      	strb	r0, [r4, #5]
    cc0a:	88c8      	ldrh	r0, [r1, #6]
    cc0c:	0a00      	lsrs	r0, r0, #8
    cc0e:	71a0      	strb	r0, [r4, #6]
    cc10:	7a08      	ldrb	r0, [r1, #8]
    cc12:	71e0      	strb	r0, [r4, #7]
    cc14:	8908      	ldrh	r0, [r1, #8]
    cc16:	0a00      	lsrs	r0, r0, #8
    cc18:	7220      	strb	r0, [r4, #8]
    cc1a:	7a88      	ldrb	r0, [r1, #10]
    cc1c:	7260      	strb	r0, [r4, #9]
    cc1e:	8948      	ldrh	r0, [r1, #10]
    cc20:	0a00      	lsrs	r0, r0, #8
    cc22:	72a0      	strb	r0, [r4, #10]
    cc24:	7b08      	ldrb	r0, [r1, #12]
    cc26:	72e0      	strb	r0, [r4, #11]
    cc28:	8988      	ldrh	r0, [r1, #12]
    cc2a:	0a00      	lsrs	r0, r0, #8
    cc2c:	7320      	strb	r0, [r4, #12]
    cc2e:	200b      	movs	r0, #11
    cc30:	e7be      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc32:	7025      	strb	r5, [r4, #0]
    cc34:	20a3      	movs	r0, #163	; 0xa3
    cc36:	70a0      	strb	r0, [r4, #2]
    cc38:	7908      	ldrb	r0, [r1, #4]
    cc3a:	70e0      	strb	r0, [r4, #3]
    cc3c:	8888      	ldrh	r0, [r1, #4]
    cc3e:	0a00      	lsrs	r0, r0, #8
    cc40:	7120      	strb	r0, [r4, #4]
    cc42:	7988      	ldrb	r0, [r1, #6]
    cc44:	7160      	strb	r0, [r4, #5]
    cc46:	79c8      	ldrb	r0, [r1, #7]
    cc48:	71a0      	strb	r0, [r4, #6]
    cc4a:	2005      	movs	r0, #5
    cc4c:	e7b0      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc4e:	7022      	strb	r2, [r4, #0]
    cc50:	f884 e002 	strb.w	lr, [r4, #2]
    cc54:	7908      	ldrb	r0, [r1, #4]
    cc56:	70e0      	strb	r0, [r4, #3]
    cc58:	7948      	ldrb	r0, [r1, #5]
    cc5a:	7120      	strb	r0, [r4, #4]
    cc5c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cc60:	f8c4 0005 	str.w	r0, [r4, #5]
    cc64:	8948      	ldrh	r0, [r1, #10]
    cc66:	f8a4 0009 	strh.w	r0, [r4, #9]
    cc6a:	e020      	b.n	ccae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    cc6c:	7025      	strb	r5, [r4, #0]
    cc6e:	20a4      	movs	r0, #164	; 0xa4
    cc70:	70a0      	strb	r0, [r4, #2]
    cc72:	7908      	ldrb	r0, [r1, #4]
    cc74:	70e0      	strb	r0, [r4, #3]
    cc76:	8888      	ldrh	r0, [r1, #4]
    cc78:	0a00      	lsrs	r0, r0, #8
    cc7a:	7120      	strb	r0, [r4, #4]
    cc7c:	7988      	ldrb	r0, [r1, #6]
    cc7e:	7160      	strb	r0, [r4, #5]
    cc80:	79c8      	ldrb	r0, [r1, #7]
    cc82:	71a0      	strb	r0, [r4, #6]
    cc84:	2007      	movs	r0, #7
    cc86:	e793      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc88:	7025      	strb	r5, [r4, #0]
    cc8a:	2080      	movs	r0, #128	; 0x80
    cc8c:	70a0      	strb	r0, [r4, #2]
    cc8e:	888a      	ldrh	r2, [r1, #4]
    cc90:	f8a4 2003 	strh.w	r2, [r4, #3]
    cc94:	88ca      	ldrh	r2, [r1, #6]
    cc96:	f8a4 2005 	strh.w	r2, [r4, #5]
    cc9a:	7a0a      	ldrb	r2, [r1, #8]
    cc9c:	71e2      	strb	r2, [r4, #7]
    cc9e:	7a4a      	ldrb	r2, [r1, #9]
    cca0:	8122      	strh	r2, [r4, #8]
    cca2:	7a8a      	ldrb	r2, [r1, #10]
    cca4:	72a2      	strb	r2, [r4, #10]
    cca6:	7ac9      	ldrb	r1, [r1, #11]
    cca8:	f001 0101 	and.w	r1, r1, #1
    ccac:	72e1      	strb	r1, [r4, #11]
    ccae:	200a      	movs	r0, #10
    ccb0:	e77e      	b.n	cbb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000ccb2 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    ccb2:	223e      	movs	r2, #62	; 0x3e
    ccb4:	7002      	strb	r2, [r0, #0]
    ccb6:	2201      	movs	r2, #1
    ccb8:	7082      	strb	r2, [r0, #2]
    ccba:	790a      	ldrb	r2, [r1, #4]
    ccbc:	70c2      	strb	r2, [r0, #3]
    ccbe:	798a      	ldrb	r2, [r1, #6]
    ccc0:	7102      	strb	r2, [r0, #4]
    ccc2:	88ca      	ldrh	r2, [r1, #6]
    ccc4:	0a12      	lsrs	r2, r2, #8
    ccc6:	7142      	strb	r2, [r0, #5]
    ccc8:	7a0a      	ldrb	r2, [r1, #8]
    ccca:	7182      	strb	r2, [r0, #6]
    cccc:	7a4a      	ldrb	r2, [r1, #9]
    ccce:	71c2      	strb	r2, [r0, #7]
    ccd0:	f8d1 200a 	ldr.w	r2, [r1, #10]
    ccd4:	6082      	str	r2, [r0, #8]
    ccd6:	89ca      	ldrh	r2, [r1, #14]
    ccd8:	8182      	strh	r2, [r0, #12]
    ccda:	7c0a      	ldrb	r2, [r1, #16]
    ccdc:	7382      	strb	r2, [r0, #14]
    ccde:	8a0a      	ldrh	r2, [r1, #16]
    cce0:	0a12      	lsrs	r2, r2, #8
    cce2:	73c2      	strb	r2, [r0, #15]
    cce4:	7c8a      	ldrb	r2, [r1, #18]
    cce6:	7402      	strb	r2, [r0, #16]
    cce8:	8a4a      	ldrh	r2, [r1, #18]
    ccea:	0a12      	lsrs	r2, r2, #8
    ccec:	7442      	strb	r2, [r0, #17]
    ccee:	7d0a      	ldrb	r2, [r1, #20]
    ccf0:	7482      	strb	r2, [r0, #18]
    ccf2:	8a8a      	ldrh	r2, [r1, #20]
    ccf4:	0a12      	lsrs	r2, r2, #8
    ccf6:	74c2      	strb	r2, [r0, #19]
    ccf8:	7d89      	ldrb	r1, [r1, #22]
    ccfa:	7501      	strb	r1, [r0, #20]
    ccfc:	2013      	movs	r0, #19
    ccfe:	4770      	bx	lr

0000cd00 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    cd00:	223e      	movs	r2, #62	; 0x3e
    cd02:	7002      	strb	r2, [r0, #0]
    cd04:	2201      	movs	r2, #1
    cd06:	7082      	strb	r2, [r0, #2]
    cd08:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cd0c:	70c2      	strb	r2, [r0, #3]
    cd0e:	788a      	ldrb	r2, [r1, #2]
    cd10:	7102      	strb	r2, [r0, #4]
    cd12:	884a      	ldrh	r2, [r1, #2]
    cd14:	0a12      	lsrs	r2, r2, #8
    cd16:	7142      	strb	r2, [r0, #5]
    cd18:	790a      	ldrb	r2, [r1, #4]
    cd1a:	7182      	strb	r2, [r0, #6]
    cd1c:	794a      	ldrb	r2, [r1, #5]
    cd1e:	71c2      	strb	r2, [r0, #7]
    cd20:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cd24:	6082      	str	r2, [r0, #8]
    cd26:	894a      	ldrh	r2, [r1, #10]
    cd28:	8182      	strh	r2, [r0, #12]
    cd2a:	7e0a      	ldrb	r2, [r1, #24]
    cd2c:	7382      	strb	r2, [r0, #14]
    cd2e:	8b0a      	ldrh	r2, [r1, #24]
    cd30:	0a12      	lsrs	r2, r2, #8
    cd32:	73c2      	strb	r2, [r0, #15]
    cd34:	7e8a      	ldrb	r2, [r1, #26]
    cd36:	7402      	strb	r2, [r0, #16]
    cd38:	8b4a      	ldrh	r2, [r1, #26]
    cd3a:	0a12      	lsrs	r2, r2, #8
    cd3c:	7442      	strb	r2, [r0, #17]
    cd3e:	7f0a      	ldrb	r2, [r1, #28]
    cd40:	7482      	strb	r2, [r0, #18]
    cd42:	8b8a      	ldrh	r2, [r1, #28]
    cd44:	0a12      	lsrs	r2, r2, #8
    cd46:	74c2      	strb	r2, [r0, #19]
    cd48:	7f89      	ldrb	r1, [r1, #30]
    cd4a:	7501      	strb	r1, [r0, #20]
    cd4c:	2113      	movs	r1, #19
    cd4e:	7041      	strb	r1, [r0, #1]
    cd50:	4608      	mov	r0, r1
    cd52:	4770      	bx	lr

0000cd54 <sdc_hci_data_get>:
    cd54:	b510      	push	{r4, lr}
    cd56:	b120      	cbz	r0, cd62 <sdc_hci_data_get+0xe>
    cd58:	f7ff fd11 	bl	c77e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cd5c:	b120      	cbz	r0, cd68 <sdc_hci_data_get+0x14>
    cd5e:	2000      	movs	r0, #0
    cd60:	bd10      	pop	{r4, pc}
    cd62:	f06f 0015 	mvn.w	r0, #21
    cd66:	bd10      	pop	{r4, pc}
    cd68:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cd6c:	bd10      	pop	{r4, pc}

0000cd6e <sdc_hci_data_put>:
    cd6e:	b510      	push	{r4, lr}
    cd70:	f06f 0415 	mvn.w	r4, #21
    cd74:	b120      	cbz	r0, cd80 <sdc_hci_data_put+0x12>
    cd76:	f7ff fd10 	bl	c79a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cd7a:	b108      	cbz	r0, cd80 <sdc_hci_data_put+0x12>
    cd7c:	2000      	movs	r0, #0
    cd7e:	bd10      	pop	{r4, pc}
    cd80:	4620      	mov	r0, r4
    cd82:	bd10      	pop	{r4, pc}

0000cd84 <sdc_hci_evt_get>:
    cd84:	b510      	push	{r4, lr}
    cd86:	b120      	cbz	r0, cd92 <sdc_hci_evt_get+0xe>
    cd88:	f7ff fd10 	bl	c7ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    cd8c:	b120      	cbz	r0, cd98 <sdc_hci_evt_get+0x14>
    cd8e:	2000      	movs	r0, #0
    cd90:	bd10      	pop	{r4, pc}
    cd92:	f06f 0015 	mvn.w	r0, #21
    cd96:	bd10      	pop	{r4, pc}
    cd98:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cd9c:	bd10      	pop	{r4, pc}

0000cd9e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cd9e:	f002 b8cb 	b.w	ef38 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cda2 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cda2:	f002 b90a 	b.w	efba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cda6 <sdc_hci_cmd_cb_set_event_mask>:
    cda6:	b510      	push	{r4, lr}
    cda8:	f7f7 f938 	bl	401c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cdac:	2000      	movs	r0, #0
    cdae:	bd10      	pop	{r4, pc}

0000cdb0 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cdb0:	b510      	push	{r4, lr}
    cdb2:	f7f7 f941 	bl	4038 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cdb6:	2000      	movs	r0, #0
    cdb8:	bd10      	pop	{r4, pc}

0000cdba <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cdba:	f002 b91a 	b.w	eff2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cdbe <sdc_hci_cmd_vs_conn_event_extend>:
    cdbe:	b508      	push	{r3, lr}
    cdc0:	7800      	ldrb	r0, [r0, #0]
    cdc2:	f88d 0000 	strb.w	r0, [sp]
    cdc6:	4668      	mov	r0, sp
    cdc8:	f002 f888 	bl	eedc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cdcc:	bd08      	pop	{r3, pc}

0000cdce <sdc_hci_cmd_vs_conn_update>:
    cdce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cdd0:	2100      	movs	r1, #0
    cdd2:	9100      	str	r1, [sp, #0]
    cdd4:	9101      	str	r1, [sp, #4]
    cdd6:	9102      	str	r1, [sp, #8]
    cdd8:	9103      	str	r1, [sp, #12]
    cdda:	f8d0 1002 	ldr.w	r1, [r0, #2]
    cdde:	f641 524c 	movw	r2, #7500	; 0x1d4c
    cde2:	4291      	cmp	r1, r2
    cde4:	d304      	bcc.n	cdf0 <sdc_hci_cmd_vs_conn_update+0x22>
    cde6:	f240 42e2 	movw	r2, #1250	; 0x4e2
    cdea:	fbb1 f1f2 	udiv	r1, r1, r2
    cdee:	e005      	b.n	cdfc <sdc_hci_cmd_vs_conn_update+0x2e>
    cdf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cdf4:	fbb1 f1f2 	udiv	r1, r1, r2
    cdf8:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    cdfc:	8802      	ldrh	r2, [r0, #0]
    cdfe:	b289      	uxth	r1, r1
    ce00:	f8ad 2000 	strh.w	r2, [sp]
    ce04:	f8ad 1002 	strh.w	r1, [sp, #2]
    ce08:	f8ad 1004 	strh.w	r1, [sp, #4]
    ce0c:	88c1      	ldrh	r1, [r0, #6]
    ce0e:	f8ad 1006 	strh.w	r1, [sp, #6]
    ce12:	8900      	ldrh	r0, [r0, #8]
    ce14:	f8ad 0008 	strh.w	r0, [sp, #8]
    ce18:	4668      	mov	r0, sp
    ce1a:	f001 fe3e 	bl	ea9a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    ce1e:	b004      	add	sp, #16
    ce20:	bd10      	pop	{r4, pc}

0000ce22 <sdc_hci_cmd_vs_event_length_set>:
    ce22:	f7fd be39 	b.w	aa98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ce26 <sdc_hci_cmd_vs_llpm_mode_set>:
    ce26:	2001      	movs	r0, #1
    ce28:	4770      	bx	lr

0000ce2a <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ce2a:	7800      	ldrb	r0, [r0, #0]
    ce2c:	b100      	cbz	r0, ce30 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ce2e:	2001      	movs	r0, #1
    ce30:	f002 b82c 	b.w	ee8c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ce34 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    ce34:	b570      	push	{r4, r5, r6, lr}
    ce36:	4605      	mov	r5, r0
    ce38:	2210      	movs	r2, #16
    ce3a:	2100      	movs	r1, #0
    ce3c:	f7ff fbee 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce40:	2210      	movs	r2, #16
    ce42:	2100      	movs	r1, #0
    ce44:	f105 0010 	add.w	r0, r5, #16
    ce48:	f7ff fbe8 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ce4c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    ce50:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ce54:	1c40      	adds	r0, r0, #1
    ce56:	d10b      	bne.n	ce70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce58:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ce5c:	1c40      	adds	r0, r0, #1
    ce5e:	d107      	bne.n	ce70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    ce64:	1c40      	adds	r0, r0, #1
    ce66:	d103      	bne.n	ce70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    ce68:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ce6c:	1c40      	adds	r0, r0, #1
    ce6e:	d00b      	beq.n	ce88 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    ce70:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    ce74:	6128      	str	r0, [r5, #16]
    ce76:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    ce7a:	6168      	str	r0, [r5, #20]
    ce7c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    ce80:	61a8      	str	r0, [r5, #24]
    ce82:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    ce86:	61e8      	str	r0, [r5, #28]
    ce88:	2000      	movs	r0, #0
    ce8a:	f7f7 fdb7 	bl	49fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    ce8e:	b918      	cbnz	r0, ce98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    ce90:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    ce94:	07c0      	lsls	r0, r0, #31
    ce96:	d118      	bne.n	ceca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ce98:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    ce9c:	1c40      	adds	r0, r0, #1
    ce9e:	d10b      	bne.n	ceb8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cea0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cea4:	1c40      	adds	r0, r0, #1
    cea6:	d107      	bne.n	ceb8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cea8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ceac:	1c40      	adds	r0, r0, #1
    ceae:	d103      	bne.n	ceb8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    ceb0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    ceb4:	1c40      	adds	r0, r0, #1
    ceb6:	d008      	beq.n	ceca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    ceb8:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cebc:	6028      	str	r0, [r5, #0]
    cebe:	6860      	ldr	r0, [r4, #4]
    cec0:	6068      	str	r0, [r5, #4]
    cec2:	68a0      	ldr	r0, [r4, #8]
    cec4:	60a8      	str	r0, [r5, #8]
    cec6:	68e0      	ldr	r0, [r4, #12]
    cec8:	60e8      	str	r0, [r5, #12]
    ceca:	2000      	movs	r0, #0
    cecc:	bd70      	pop	{r4, r5, r6, pc}

0000cece <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cece:	b570      	push	{r4, r5, r6, lr}
    ced0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ced4:	4604      	mov	r4, r0
    ced6:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ceda:	1c40      	adds	r0, r0, #1
    cedc:	d105      	bne.n	ceea <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cede:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cee2:	43c0      	mvns	r0, r0
    cee4:	0400      	lsls	r0, r0, #16
    cee6:	0c00      	lsrs	r0, r0, #16
    cee8:	d03a      	beq.n	cf60 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    ceea:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    ceee:	07c0      	lsls	r0, r0, #31
    cef0:	d036      	beq.n	cf60 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    cef2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cef6:	f8c4 0001 	str.w	r0, [r4, #1]
    cefa:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cefe:	f8a4 0005 	strh.w	r0, [r4, #5]
    cf02:	79a0      	ldrb	r0, [r4, #6]
    cf04:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cf08:	71a0      	strb	r0, [r4, #6]
    cf0a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cf0e:	1c40      	adds	r0, r0, #1
    cf10:	d00f      	beq.n	cf32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf12:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cf16:	1c40      	adds	r0, r0, #1
    cf18:	d00b      	beq.n	cf32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf1a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cf1e:	1c40      	adds	r0, r0, #1
    cf20:	d007      	beq.n	cf32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf22:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cf26:	1c40      	adds	r0, r0, #1
    cf28:	d003      	beq.n	cf32 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    cf2a:	2000      	movs	r0, #0
    cf2c:	f7f7 fd66 	bl	49fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cf30:	b140      	cbz	r0, cf44 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    cf32:	2210      	movs	r2, #16
    cf34:	2100      	movs	r1, #0
    cf36:	1de0      	adds	r0, r4, #7
    cf38:	f7ff fb70 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf3c:	2001      	movs	r0, #1
    cf3e:	7020      	strb	r0, [r4, #0]
    cf40:	2000      	movs	r0, #0
    cf42:	bd70      	pop	{r4, r5, r6, pc}
    cf44:	f855 0f90 	ldr.w	r0, [r5, #144]!
    cf48:	f8c4 0007 	str.w	r0, [r4, #7]
    cf4c:	6868      	ldr	r0, [r5, #4]
    cf4e:	f8c4 000b 	str.w	r0, [r4, #11]
    cf52:	68a8      	ldr	r0, [r5, #8]
    cf54:	f8c4 000f 	str.w	r0, [r4, #15]
    cf58:	68e8      	ldr	r0, [r5, #12]
    cf5a:	f8c4 0013 	str.w	r0, [r4, #19]
    cf5e:	e7ed      	b.n	cf3c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    cf60:	2000      	movs	r0, #0
    cf62:	e7ec      	b.n	cf3e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000cf64 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cf64:	f001 bfac 	b.w	eec0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cf68 <sdc_hci_cmd_ip_read_bd_addr>:
    cf68:	f001 bff7 	b.w	ef5a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cf6c <sdc_hci_cmd_ip_read_local_version_information>:
    cf6c:	f7fd bde0 	b.w	ab30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cf70 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    cf70:	f001 bd4a 	b.w	ea08 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000cf74 <sdc_hci_cmd_le_add_device_to_white_list>:
    cf74:	f001 bd63 	b.w	ea3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cf78 <sdc_hci_cmd_le_clear_resolving_list>:
    cf78:	f001 bd78 	b.w	ea6c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000cf7c <sdc_hci_cmd_le_clear_white_list>:
    cf7c:	f001 bd83 	b.w	ea86 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cf80 <sdc_hci_cmd_le_conn_update>:
    cf80:	f001 bd8b 	b.w	ea9a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000cf84 <sdc_hci_cmd_le_create_conn>:
    cf84:	f7fd bb02 	b.w	a58c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000cf88 <sdc_hci_cmd_le_create_conn_cancel>:
    cf88:	f7fd bb5a 	b.w	a640 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000cf8c <sdc_hci_cmd_le_enable_encryption>:
    cf8c:	f001 bf35 	b.w	edfa <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000cf90 <sdc_hci_cmd_le_encrypt>:
    cf90:	f001 bdc5 	b.w	eb1e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cf94 <sdc_hci_cmd_le_rand>:
    cf94:	f001 bdcc 	b.w	eb30 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cf98 <sdc_hci_cmd_le_read_buffer_size>:
    cf98:	f7fd bb7e 	b.w	a698 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cf9c <sdc_hci_cmd_le_read_channel_map>:
    cf9c:	f7fd bb86 	b.w	a6ac <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cfa0 <sdc_hci_cmd_le_read_max_data_length>:
    cfa0:	f001 bdcc 	b.w	eb3c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000cfa4 <sdc_hci_cmd_le_read_phy>:
    cfa4:	f001 bdda 	b.w	eb5c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cfa8 <sdc_hci_cmd_le_read_remote_features>:
    cfa8:	f7fd bbaa 	b.w	a700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cfac <sdc_hci_cmd_le_read_resolving_list_size>:
    cfac:	f001 be01 	b.w	ebb2 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000cfb0 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cfb0:	f7fd bbca 	b.w	a748 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cfb4 <sdc_hci_cmd_le_read_transmit_power>:
    cfb4:	f001 be01 	b.w	ebba <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cfb8 <sdc_hci_cmd_le_read_white_list_size>:
    cfb8:	f001 be08 	b.w	ebcc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cfbc <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    cfbc:	f001 be0a 	b.w	ebd4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000cfc0 <sdc_hci_cmd_le_remove_device_from_white_list>:
    cfc0:	f001 be21 	b.w	ec06 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cfc4 <sdc_hci_cmd_le_set_address_resolution_enable>:
    cfc4:	f001 be34 	b.w	ec30 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000cfc8 <sdc_hci_cmd_le_set_data_length>:
    cfc8:	f001 be40 	b.w	ec4c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cfcc <sdc_hci_cmd_le_set_default_phy>:
    cfcc:	f7fd bbcc 	b.w	a768 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cfd0 <sdc_hci_cmd_le_set_event_mask>:
    cfd0:	b510      	push	{r4, lr}
    cfd2:	f7f7 f81d 	bl	4010 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cfd6:	2000      	movs	r0, #0
    cfd8:	bd10      	pop	{r4, pc}

0000cfda <sdc_hci_cmd_le_set_host_channel_classification>:
    cfda:	f001 be5e 	b.w	ec9a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000cfde <sdc_hci_cmd_le_set_phy>:
    cfde:	f001 be7c 	b.w	ecda <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cfe2 <sdc_hci_cmd_le_set_privacy_mode>:
    cfe2:	f001 be9a 	b.w	ed1a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000cfe6 <sdc_hci_cmd_le_set_random_address>:
    cfe6:	f001 beae 	b.w	ed46 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cfea <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    cfea:	f001 beba 	b.w	ed62 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000cfee <sdc_hci_cmd_le_set_scan_enable>:
    cfee:	f001 bec1 	b.w	ed74 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000cff2 <sdc_hci_cmd_le_set_scan_params>:
    cff2:	f001 bed5 	b.w	eda0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000cff6 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cff6:	f001 bf32 	b.w	ee5e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cffa <sdc_hci_cmd_lc_disconnect>:
    cffa:	f001 bcb4 	b.w	e966 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cffe <sdc_hci_cmd_lc_read_remote_version_information>:
    cffe:	f001 bfb8 	b.w	ef72 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d002:	b570      	push	{r4, r5, r6, lr}
    d004:	880b      	ldrh	r3, [r1, #0]
    d006:	7f04      	ldrb	r4, [r0, #28]
    d008:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d00c:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d010:	8802      	ldrh	r2, [r0, #0]
    d012:	4435      	add	r5, r6
    d014:	1da4      	adds	r4, r4, #6
    d016:	882d      	ldrh	r5, [r5, #0]
    d018:	4422      	add	r2, r4
    d01a:	b292      	uxth	r2, r2
    d01c:	4425      	add	r5, r4
    d01e:	1e54      	subs	r4, r2, #1
    d020:	442c      	add	r4, r5
    d022:	fb94 f4f2 	sdiv	r4, r4, r2
    d026:	fb02 6204 	mla	r2, r2, r4, r6
    d02a:	8840      	ldrh	r0, [r0, #2]
    d02c:	b292      	uxth	r2, r2
    d02e:	4290      	cmp	r0, r2
    d030:	d903      	bls.n	d03a <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d032:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d036:	4310      	orrs	r0, r2
    d038:	e002      	b.n	d040 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d03a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d03e:	4398      	bics	r0, r3
    d040:	8008      	strh	r0, [r1, #0]
    d042:	bd70      	pop	{r4, r5, r6, pc}
    d044:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d048:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d04c:	429a      	cmp	r2, r3
    d04e:	d107      	bne.n	d060 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d050:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d054:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d058:	4288      	cmp	r0, r1
    d05a:	d001      	beq.n	d060 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d05c:	2001      	movs	r0, #1
    d05e:	4770      	bx	lr
    d060:	2000      	movs	r0, #0
    d062:	4770      	bx	lr

0000d064 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d064:	b570      	push	{r4, r5, r6, lr}
    d066:	7f00      	ldrb	r0, [r0, #28]
    d068:	461c      	mov	r4, r3
    d06a:	1d80      	adds	r0, r0, #6
    d06c:	4408      	add	r0, r1
    d06e:	4613      	mov	r3, r2
    d070:	8809      	ldrh	r1, [r1, #0]
    d072:	9a04      	ldr	r2, [sp, #16]
    d074:	1cc9      	adds	r1, r1, #3
    d076:	b289      	uxth	r1, r1
    d078:	1915      	adds	r5, r2, r4
    d07a:	1ec0      	subs	r0, r0, #3
    d07c:	428d      	cmp	r5, r1
    d07e:	d805      	bhi.n	d08c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d080:	1881      	adds	r1, r0, r2
    d082:	4622      	mov	r2, r4
    d084:	4618      	mov	r0, r3
    d086:	f7ff fa4f 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d08a:	e000      	b.n	d08e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d08c:	2400      	movs	r4, #0
    d08e:	4620      	mov	r0, r4
    d090:	bd70      	pop	{r4, r5, r6, pc}

0000d092 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d092:	b570      	push	{r4, r5, r6, lr}
    d094:	7f00      	ldrb	r0, [r0, #28]
    d096:	461c      	mov	r4, r3
    d098:	1d80      	adds	r0, r0, #6
    d09a:	4408      	add	r0, r1
    d09c:	4613      	mov	r3, r2
    d09e:	8809      	ldrh	r1, [r1, #0]
    d0a0:	9a04      	ldr	r2, [sp, #16]
    d0a2:	1cc9      	adds	r1, r1, #3
    d0a4:	b289      	uxth	r1, r1
    d0a6:	1915      	adds	r5, r2, r4
    d0a8:	1ec0      	subs	r0, r0, #3
    d0aa:	428d      	cmp	r5, r1
    d0ac:	d805      	bhi.n	d0ba <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d0ae:	4410      	add	r0, r2
    d0b0:	4622      	mov	r2, r4
    d0b2:	4619      	mov	r1, r3
    d0b4:	f7ff fa38 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0b8:	e000      	b.n	d0bc <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d0ba:	2400      	movs	r4, #0
    d0bc:	4620      	mov	r0, r4
    d0be:	bd70      	pop	{r4, r5, r6, pc}

0000d0c0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d0c0:	8881      	ldrh	r1, [r0, #4]
    d0c2:	88c0      	ldrh	r0, [r0, #6]
    d0c4:	4288      	cmp	r0, r1
    d0c6:	d101      	bne.n	d0cc <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d0c8:	2001      	movs	r0, #1
    d0ca:	4770      	bx	lr
    d0cc:	2000      	movs	r0, #0
    d0ce:	4770      	bx	lr

0000d0d0 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d0d0:	8881      	ldrh	r1, [r0, #4]
    d0d2:	8900      	ldrh	r0, [r0, #8]
    d0d4:	4288      	cmp	r0, r1
    d0d6:	d101      	bne.n	d0dc <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d0d8:	2001      	movs	r0, #1
    d0da:	4770      	bx	lr
    d0dc:	2000      	movs	r0, #0
    d0de:	4770      	bx	lr

0000d0e0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d0e0:	b570      	push	{r4, r5, r6, lr}
    d0e2:	4604      	mov	r4, r0
    d0e4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d0e8:	8880      	ldrh	r0, [r0, #4]
    d0ea:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d0ee:	4401      	add	r1, r0
    d0f0:	8a20      	ldrh	r0, [r4, #16]
    d0f2:	2800      	cmp	r0, #0
    d0f4:	d01a      	beq.n	d12c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d0f6:	89a2      	ldrh	r2, [r4, #12]
    d0f8:	2500      	movs	r5, #0
    d0fa:	4410      	add	r0, r2
    d0fc:	b280      	uxth	r0, r0
    d0fe:	81a0      	strh	r0, [r4, #12]
    d100:	880a      	ldrh	r2, [r1, #0]
    d102:	4290      	cmp	r0, r2
    d104:	d905      	bls.n	d112 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d106:	f240 1163 	movw	r1, #355	; 0x163
    d10a:	f04f 0014 	mov.w	r0, #20
    d10e:	f7f6 fe03 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d112:	d109      	bne.n	d128 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d114:	69a0      	ldr	r0, [r4, #24]
    d116:	b108      	cbz	r0, d11c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d118:	7f40      	ldrb	r0, [r0, #29]
    d11a:	7088      	strb	r0, [r1, #2]
    d11c:	f104 0104 	add.w	r1, r4, #4
    d120:	4620      	mov	r0, r4
    d122:	f7ff ff6e 	bl	d002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d126:	81a5      	strh	r5, [r4, #12]
    d128:	8225      	strh	r5, [r4, #16]
    d12a:	2001      	movs	r0, #1
    d12c:	bd70      	pop	{r4, r5, r6, pc}

0000d12e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d130:	4604      	mov	r4, r0
    d132:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d136:	88c0      	ldrh	r0, [r0, #6]
    d138:	460e      	mov	r6, r1
    d13a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d13e:	8a60      	ldrh	r0, [r4, #18]
    d140:	19d9      	adds	r1, r3, r7
    d142:	b108      	cbz	r0, d148 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d144:	42b0      	cmp	r0, r6
    d146:	d201      	bcs.n	d14c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d148:	2000      	movs	r0, #0
    d14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d14c:	89e0      	ldrh	r0, [r4, #14]
    d14e:	2500      	movs	r5, #0
    d150:	b140      	cbz	r0, d164 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d152:	f8b1 c000 	ldrh.w	ip, [r1]
    d156:	4560      	cmp	r0, ip
    d158:	d008      	beq.n	d16c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d15a:	f240 214b 	movw	r1, #587	; 0x24b
    d15e:	2014      	movs	r0, #20
    d160:	f7f6 fdda 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d164:	7f60      	ldrb	r0, [r4, #29]
    d166:	7088      	strb	r0, [r1, #2]
    d168:	800d      	strh	r5, [r1, #0]
    d16a:	e00e      	b.n	d18a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d16c:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d170:	4418      	add	r0, r3
    d172:	f10c 0c06 	add.w	ip, ip, #6
    d176:	44bc      	add	ip, r7
    d178:	4460      	add	r0, ip
    d17a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d17e:	f820 cc03 	strh.w	ip, [r0, #-3]
    d182:	f894 c020 	ldrb.w	ip, [r4, #32]
    d186:	f800 cc01 	strb.w	ip, [r0, #-1]
    d18a:	89e0      	ldrh	r0, [r4, #14]
    d18c:	4430      	add	r0, r6
    d18e:	81e0      	strh	r0, [r4, #14]
    d190:	8808      	ldrh	r0, [r1, #0]
    d192:	4430      	add	r0, r6
    d194:	8008      	strh	r0, [r1, #0]
    d196:	b19a      	cbz	r2, d1c0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d198:	1da1      	adds	r1, r4, #6
    d19a:	4620      	mov	r0, r4
    d19c:	f7ff ff31 	bl	d002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d1a0:	81e5      	strh	r5, [r4, #14]
    d1a2:	7f60      	ldrb	r0, [r4, #29]
    d1a4:	1c40      	adds	r0, r0, #1
    d1a6:	7760      	strb	r0, [r4, #29]
    d1a8:	7da0      	ldrb	r0, [r4, #22]
    d1aa:	f88d 0000 	strb.w	r0, [sp]
    d1ae:	9800      	ldr	r0, [sp, #0]
    d1b0:	9000      	str	r0, [sp, #0]
    d1b2:	f89d 0000 	ldrb.w	r0, [sp]
    d1b6:	b178      	cbz	r0, d1d8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d1b8:	88e0      	ldrh	r0, [r4, #6]
    d1ba:	82a0      	strh	r0, [r4, #20]
    d1bc:	75a5      	strb	r5, [r4, #22]
    d1be:	e00b      	b.n	d1d8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d1c0:	7f20      	ldrb	r0, [r4, #28]
    d1c2:	89e1      	ldrh	r1, [r4, #14]
    d1c4:	1d80      	adds	r0, r0, #6
    d1c6:	4438      	add	r0, r7
    d1c8:	4419      	add	r1, r3
    d1ca:	4408      	add	r0, r1
    d1cc:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d1d0:	83e1      	strh	r1, [r4, #30]
    d1d2:	7880      	ldrb	r0, [r0, #2]
    d1d4:	f884 0020 	strb.w	r0, [r4, #32]
    d1d8:	8265      	strh	r5, [r4, #18]
    d1da:	2001      	movs	r0, #1
    d1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d1de <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d1de:	1cc0      	adds	r0, r0, #3
    d1e0:	4770      	bx	lr

0000d1e2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d1e2:	b510      	push	{r4, lr}
    d1e4:	88c2      	ldrh	r2, [r0, #6]
    d1e6:	8943      	ldrh	r3, [r0, #10]
    d1e8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    d1ec:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    d1f0:	1a61      	subs	r1, r4, r1
    d1f2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d1f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d1fa:	429a      	cmp	r2, r3
    d1fc:	d101      	bne.n	d202 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d1fe:	8842      	ldrh	r2, [r0, #2]
    d200:	4411      	add	r1, r2
    d202:	7f02      	ldrb	r2, [r0, #28]
    d204:	8800      	ldrh	r0, [r0, #0]
    d206:	4410      	add	r0, r2
    d208:	1d80      	adds	r0, r0, #6
    d20a:	b280      	uxth	r0, r0
    d20c:	fb91 f0f0 	sdiv	r0, r1, r0
    d210:	b280      	uxth	r0, r0
    d212:	bd10      	pop	{r4, pc}

0000d214 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d214:	b510      	push	{r4, lr}
    d216:	4604      	mov	r4, r0
    d218:	88c0      	ldrh	r0, [r0, #6]
    d21a:	88a1      	ldrh	r1, [r4, #4]
    d21c:	4281      	cmp	r1, r0
    d21e:	d007      	beq.n	d230 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d220:	89a0      	ldrh	r0, [r4, #12]
    d222:	b928      	cbnz	r0, d230 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d224:	8a20      	ldrh	r0, [r4, #16]
    d226:	b918      	cbnz	r0, d230 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d228:	88a0      	ldrh	r0, [r4, #4]
    d22a:	8aa1      	ldrh	r1, [r4, #20]
    d22c:	4288      	cmp	r0, r1
    d22e:	d101      	bne.n	d234 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d230:	2000      	movs	r0, #0
    d232:	bd10      	pop	{r4, pc}
    d234:	1d21      	adds	r1, r4, #4
    d236:	4620      	mov	r0, r4
    d238:	f7ff fee3 	bl	d002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d23c:	2000      	movs	r0, #0
    d23e:	8220      	strh	r0, [r4, #16]
    d240:	2001      	movs	r0, #1
    d242:	bd10      	pop	{r4, pc}

0000d244 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d244:	b510      	push	{r4, lr}
    d246:	4604      	mov	r4, r0
    d248:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d24c:	88c0      	ldrh	r0, [r0, #6]
    d24e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d252:	4402      	add	r2, r0
    d254:	8820      	ldrh	r0, [r4, #0]
    d256:	2845      	cmp	r0, #69	; 0x45
    d258:	d200      	bcs.n	d25c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d25a:	2045      	movs	r0, #69	; 0x45
    d25c:	4288      	cmp	r0, r1
    d25e:	d204      	bcs.n	d26a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d260:	f240 1119 	movw	r1, #281	; 0x119
    d264:	2014      	movs	r0, #20
    d266:	f7f6 fd57 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d26a:	7de0      	ldrb	r0, [r4, #23]
    d26c:	2800      	cmp	r0, #0
    d26e:	d003      	beq.n	d278 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d270:	8810      	ldrh	r0, [r2, #0]
    d272:	4288      	cmp	r0, r1
    d274:	d201      	bcs.n	d27a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d276:	2000      	movs	r0, #0
    d278:	bd10      	pop	{r4, pc}
    d27a:	8011      	strh	r1, [r2, #0]
    d27c:	1da1      	adds	r1, r4, #6
    d27e:	4620      	mov	r0, r4
    d280:	f7ff febf 	bl	d002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d284:	2000      	movs	r0, #0
    d286:	75e0      	strb	r0, [r4, #23]
    d288:	2001      	movs	r0, #1
    d28a:	bd10      	pop	{r4, pc}

0000d28c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d290:	8941      	ldrh	r1, [r0, #10]
    d292:	8886      	ldrh	r6, [r0, #4]
    d294:	4604      	mov	r4, r0
    d296:	2500      	movs	r5, #0
    d298:	f100 070a 	add.w	r7, r0, #10
    d29c:	e006      	b.n	d2ac <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d29e:	4639      	mov	r1, r7
    d2a0:	4620      	mov	r0, r4
    d2a2:	f7ff feae 	bl	d002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2a6:	1c6d      	adds	r5, r5, #1
    d2a8:	8961      	ldrh	r1, [r4, #10]
    d2aa:	b2ad      	uxth	r5, r5
    d2ac:	42b1      	cmp	r1, r6
    d2ae:	d1f6      	bne.n	d29e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d2b0:	4628      	mov	r0, r5
    d2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d2b6:	b530      	push	{r4, r5, lr}
    d2b8:	88c4      	ldrh	r4, [r0, #6]
    d2ba:	8881      	ldrh	r1, [r0, #4]
    d2bc:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d2c0:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d2c4:	4413      	add	r3, r2
    d2c6:	8882      	ldrh	r2, [r0, #4]
    d2c8:	8a85      	ldrh	r5, [r0, #20]
    d2ca:	42aa      	cmp	r2, r5
    d2cc:	d012      	beq.n	d2f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d2ce:	42a1      	cmp	r1, r4
    d2d0:	d010      	beq.n	d2f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d2d2:	8981      	ldrh	r1, [r0, #12]
    d2d4:	b971      	cbnz	r1, d2f4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d2d6:	6982      	ldr	r2, [r0, #24]
    d2d8:	b172      	cbz	r2, d2f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d2da:	4610      	mov	r0, r2
    d2dc:	f7ff fef8 	bl	d0d0 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d2e0:	b950      	cbnz	r0, d2f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d2e2:	8910      	ldrh	r0, [r2, #8]
    d2e4:	3224      	adds	r2, #36	; 0x24
    d2e6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d2ea:	4410      	add	r0, r2
    d2ec:	7899      	ldrb	r1, [r3, #2]
    d2ee:	7880      	ldrb	r0, [r0, #2]
    d2f0:	4288      	cmp	r0, r1
    d2f2:	d101      	bne.n	d2f8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d2f4:	2000      	movs	r0, #0
    d2f6:	bd30      	pop	{r4, r5, pc}
    d2f8:	4618      	mov	r0, r3
    d2fa:	bd30      	pop	{r4, r5, pc}

0000d2fc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d2fc:	8803      	ldrh	r3, [r0, #0]
    d2fe:	2b45      	cmp	r3, #69	; 0x45
    d300:	d200      	bcs.n	d304 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d302:	2345      	movs	r3, #69	; 0x45
    d304:	8013      	strh	r3, [r2, #0]
    d306:	88c2      	ldrh	r2, [r0, #6]
    d308:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    d30c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d310:	441a      	add	r2, r3
    d312:	600a      	str	r2, [r1, #0]
    d314:	89c0      	ldrh	r0, [r0, #14]
    d316:	4770      	bx	lr

0000d318 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d318:	7f00      	ldrb	r0, [r0, #28]
    d31a:	1d80      	adds	r0, r0, #6
    d31c:	4408      	add	r0, r1
    d31e:	1ec0      	subs	r0, r0, #3
    d320:	6010      	str	r0, [r2, #0]
    d322:	8808      	ldrh	r0, [r1, #0]
    d324:	4770      	bx	lr

0000d326 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d32a:	460e      	mov	r6, r1
    d32c:	88c1      	ldrh	r1, [r0, #6]
    d32e:	8902      	ldrh	r2, [r0, #8]
    d330:	4604      	mov	r4, r0
    d332:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d336:	8800      	ldrh	r0, [r0, #0]
    d338:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d33c:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d340:	2845      	cmp	r0, #69	; 0x45
    d342:	d200      	bcs.n	d346 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d344:	2045      	movs	r0, #69	; 0x45
    d346:	42b0      	cmp	r0, r6
    d348:	d203      	bcs.n	d352 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d34a:	21db      	movs	r1, #219	; 0xdb
    d34c:	2014      	movs	r0, #20
    d34e:	f7f6 fce3 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d352:	4610      	mov	r0, r2
    d354:	f7ff fe76 	bl	d044 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d358:	b110      	cbz	r0, d360 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d35a:	2000      	movs	r0, #0
    d35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d360:	42af      	cmp	r7, r5
    d362:	d908      	bls.n	d376 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d364:	7f21      	ldrb	r1, [r4, #28]
    d366:	1b78      	subs	r0, r7, r5
    d368:	1a40      	subs	r0, r0, r1
    d36a:	1f80      	subs	r0, r0, #6
    d36c:	4286      	cmp	r6, r0
    d36e:	dd02      	ble.n	d376 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d370:	2000      	movs	r0, #0
    d372:	75e0      	strb	r0, [r4, #23]
    d374:	e7f1      	b.n	d35a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d376:	eb08 0005 	add.w	r0, r8, r5
    d37a:	2101      	movs	r1, #1
    d37c:	8006      	strh	r6, [r0, #0]
    d37e:	75e1      	strb	r1, [r4, #23]
    d380:	e7ec      	b.n	d35c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d382 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d382:	b538      	push	{r3, r4, r5, lr}
    d384:	88c4      	ldrh	r4, [r0, #6]
    d386:	8881      	ldrh	r1, [r0, #4]
    d388:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d38c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d390:	441a      	add	r2, r3
    d392:	42a1      	cmp	r1, r4
    d394:	d010      	beq.n	d3b8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d396:	8983      	ldrh	r3, [r0, #12]
    d398:	8a05      	ldrh	r5, [r0, #16]
    d39a:	8812      	ldrh	r2, [r2, #0]
    d39c:	442b      	add	r3, r5
    d39e:	4293      	cmp	r3, r2
    d3a0:	d308      	bcc.n	d3b4 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d3a2:	f8ad 1000 	strh.w	r1, [sp]
    d3a6:	4669      	mov	r1, sp
    d3a8:	f7ff fe2b 	bl	d002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3ac:	f8bd 0000 	ldrh.w	r0, [sp]
    d3b0:	42a0      	cmp	r0, r4
    d3b2:	d001      	beq.n	d3b8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d3b4:	2001      	movs	r0, #1
    d3b6:	bd38      	pop	{r3, r4, r5, pc}
    d3b8:	2000      	movs	r0, #0
    d3ba:	bd38      	pop	{r3, r4, r5, pc}

0000d3bc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d3bc:	b570      	push	{r4, r5, r6, lr}
    d3be:	88c6      	ldrh	r6, [r0, #6]
    d3c0:	8885      	ldrh	r5, [r0, #4]
    d3c2:	4603      	mov	r3, r0
    d3c4:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d3c8:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d3cc:	4420      	add	r0, r4
    d3ce:	42b5      	cmp	r5, r6
    d3d0:	d102      	bne.n	d3d8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d3d2:	2000      	movs	r0, #0
    d3d4:	8218      	strh	r0, [r3, #16]
    d3d6:	bd70      	pop	{r4, r5, r6, pc}
    d3d8:	8804      	ldrh	r4, [r0, #0]
    d3da:	899d      	ldrh	r5, [r3, #12]
    d3dc:	7f1e      	ldrb	r6, [r3, #28]
    d3de:	1b64      	subs	r4, r4, r5
    d3e0:	4435      	add	r5, r6
    d3e2:	4428      	add	r0, r5
    d3e4:	880d      	ldrh	r5, [r1, #0]
    d3e6:	b2a4      	uxth	r4, r4
    d3e8:	1cc0      	adds	r0, r0, #3
    d3ea:	42a5      	cmp	r5, r4
    d3ec:	d900      	bls.n	d3f0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d3ee:	800c      	strh	r4, [r1, #0]
    d3f0:	899c      	ldrh	r4, [r3, #12]
    d3f2:	b124      	cbz	r4, d3fe <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d3f4:	2400      	movs	r4, #0
    d3f6:	7014      	strb	r4, [r2, #0]
    d3f8:	8809      	ldrh	r1, [r1, #0]
    d3fa:	8219      	strh	r1, [r3, #16]
    d3fc:	bd70      	pop	{r4, r5, r6, pc}
    d3fe:	2401      	movs	r4, #1
    d400:	e7f9      	b.n	d3f6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d402 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d402:	b508      	push	{r3, lr}
    d404:	8a81      	ldrh	r1, [r0, #20]
    d406:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d40a:	3aff      	subs	r2, #255	; 0xff
    d40c:	d008      	beq.n	d420 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d40e:	7d82      	ldrb	r2, [r0, #22]
    d410:	f88d 2000 	strb.w	r2, [sp]
    d414:	9a00      	ldr	r2, [sp, #0]
    d416:	9200      	str	r2, [sp, #0]
    d418:	f89d 2000 	ldrb.w	r2, [sp]
    d41c:	b952      	cbnz	r2, d434 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d41e:	e004      	b.n	d42a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d420:	f44f 7162 	mov.w	r1, #904	; 0x388
    d424:	2014      	movs	r0, #20
    d426:	f7f6 fc77 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d42a:	8880      	ldrh	r0, [r0, #4]
    d42c:	4281      	cmp	r1, r0
    d42e:	d101      	bne.n	d434 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d430:	2000      	movs	r0, #0
    d432:	bd08      	pop	{r3, pc}
    d434:	2001      	movs	r0, #1
    d436:	bd08      	pop	{r3, pc}

0000d438 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d438:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d43c:	8281      	strh	r1, [r0, #20]
    d43e:	2100      	movs	r1, #0
    d440:	7581      	strb	r1, [r0, #22]
    d442:	4770      	bx	lr

0000d444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d444:	b510      	push	{r4, lr}
    d446:	8a81      	ldrh	r1, [r0, #20]
    d448:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d44c:	3aff      	subs	r2, #255	; 0xff
    d44e:	d004      	beq.n	d45a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d450:	f44f 7159 	mov.w	r1, #868	; 0x364
    d454:	2014      	movs	r0, #20
    d456:	f7f6 fc5f 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d45a:	88c1      	ldrh	r1, [r0, #6]
    d45c:	8281      	strh	r1, [r0, #20]
    d45e:	89c1      	ldrh	r1, [r0, #14]
    d460:	b109      	cbz	r1, d466 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d462:	2101      	movs	r1, #1
    d464:	e000      	b.n	d468 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d466:	2100      	movs	r1, #0
    d468:	7581      	strb	r1, [r0, #22]
    d46a:	bd10      	pop	{r4, pc}

0000d46c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d470:	461d      	mov	r5, r3
    d472:	4616      	mov	r6, r2
    d474:	9f06      	ldr	r7, [sp, #24]
    d476:	460b      	mov	r3, r1
    d478:	4604      	mov	r4, r0
    d47a:	463a      	mov	r2, r7
    d47c:	4629      	mov	r1, r5
    d47e:	4630      	mov	r0, r6
    d480:	f000 f84f 	bl	d522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d484:	4283      	cmp	r3, r0
    d486:	d201      	bcs.n	d48c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d488:	21a8      	movs	r1, #168	; 0xa8
    d48a:	e018      	b.n	d4be <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d48c:	1ce0      	adds	r0, r4, #3
    d48e:	f020 0103 	bic.w	r1, r0, #3
    d492:	4620      	mov	r0, r4
    d494:	42a1      	cmp	r1, r4
    d496:	d001      	beq.n	d49c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d498:	21a9      	movs	r1, #169	; 0xa9
    d49a:	e010      	b.n	d4be <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d49c:	2224      	movs	r2, #36	; 0x24
    d49e:	2100      	movs	r1, #0
    d4a0:	f7ff f8bc 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d4a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d4a8:	82a0      	strh	r0, [r4, #20]
    d4aa:	19a8      	adds	r0, r5, r6
    d4ac:	1d80      	adds	r0, r0, #6
    d4ae:	4378      	muls	r0, r7
    d4b0:	b280      	uxth	r0, r0
    d4b2:	7725      	strb	r5, [r4, #28]
    d4b4:	8060      	strh	r0, [r4, #2]
    d4b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d4ba:	d903      	bls.n	d4c4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d4bc:	21af      	movs	r1, #175	; 0xaf
    d4be:	2014      	movs	r0, #20
    d4c0:	f7f6 fc2a 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4c4:	8026      	strh	r6, [r4, #0]
    d4c6:	2000      	movs	r0, #0
    d4c8:	7760      	strb	r0, [r4, #29]
    d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d4ce <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d4ce:	6181      	str	r1, [r0, #24]
    d4d0:	6188      	str	r0, [r1, #24]
    d4d2:	4770      	bx	lr

0000d4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4d8:	460b      	mov	r3, r1
    d4da:	4604      	mov	r4, r0
    d4dc:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d4e0:	8905      	ldrh	r5, [r0, #8]
    d4e2:	8946      	ldrh	r6, [r0, #10]
    d4e4:	8880      	ldrh	r0, [r0, #4]
    d4e6:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d4ea:	4439      	add	r1, r7
    d4ec:	460f      	mov	r7, r1
    d4ee:	4285      	cmp	r5, r0
    d4f0:	d102      	bne.n	d4f8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d4f2:	2000      	movs	r0, #0
    d4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4f8:	b10a      	cbz	r2, d4fe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d4fa:	1cc8      	adds	r0, r1, #3
    d4fc:	6010      	str	r0, [r2, #0]
    d4fe:	b123      	cbz	r3, d50a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d500:	7f22      	ldrb	r2, [r4, #28]
    d502:	1cf9      	adds	r1, r7, #3
    d504:	4618      	mov	r0, r3
    d506:	f7ff f80f 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d50a:	883f      	ldrh	r7, [r7, #0]
    d50c:	f104 0108 	add.w	r1, r4, #8
    d510:	4620      	mov	r0, r4
    d512:	f7ff fd76 	bl	d002 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d516:	42b5      	cmp	r5, r6
    d518:	d101      	bne.n	d51e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d51a:	8920      	ldrh	r0, [r4, #8]
    d51c:	8160      	strh	r0, [r4, #10]
    d51e:	4638      	mov	r0, r7
    d520:	e7e8      	b.n	d4f4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d522:	4401      	add	r1, r0
    d524:	1d89      	adds	r1, r1, #6
    d526:	4351      	muls	r1, r2
    d528:	b28a      	uxth	r2, r1
    d52a:	2100      	movs	r1, #0
    d52c:	2845      	cmp	r0, #69	; 0x45
    d52e:	d201      	bcs.n	d534 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d530:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d534:	3224      	adds	r2, #36	; 0x24
    d536:	1850      	adds	r0, r2, r1
    d538:	b280      	uxth	r0, r0
    d53a:	4770      	bx	lr

0000d53c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d540:	4688      	mov	r8, r1
    d542:	88c1      	ldrh	r1, [r0, #6]
    d544:	4604      	mov	r4, r0
    d546:	8900      	ldrh	r0, [r0, #8]
    d548:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d54c:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d550:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d554:	eb05 0906 	add.w	r9, r5, r6
    d558:	f7ff fd74 	bl	d044 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d55c:	2200      	movs	r2, #0
    d55e:	b998      	cbnz	r0, d588 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d560:	8820      	ldrh	r0, [r4, #0]
    d562:	2845      	cmp	r0, #69	; 0x45
    d564:	d200      	bcs.n	d568 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d566:	2045      	movs	r0, #69	; 0x45
    d568:	42b7      	cmp	r7, r6
    d56a:	d906      	bls.n	d57a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d56c:	7f23      	ldrb	r3, [r4, #28]
    d56e:	1bb9      	subs	r1, r7, r6
    d570:	1ac9      	subs	r1, r1, r3
    d572:	1f89      	subs	r1, r1, #6
    d574:	4281      	cmp	r1, r0
    d576:	da00      	bge.n	d57a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d578:	4608      	mov	r0, r1
    d57a:	89e1      	ldrh	r1, [r4, #14]
    d57c:	b111      	cbz	r1, d584 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d57e:	f8b9 3000 	ldrh.w	r3, [r9]
    d582:	1ac0      	subs	r0, r0, r3
    d584:	4540      	cmp	r0, r8
    d586:	da03      	bge.n	d590 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d588:	8262      	strh	r2, [r4, #18]
    d58a:	2000      	movs	r0, #0
    d58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d590:	7f20      	ldrb	r0, [r4, #28]
    d592:	4429      	add	r1, r5
    d594:	1d80      	adds	r0, r0, #6
    d596:	4430      	add	r0, r6
    d598:	4408      	add	r0, r1
    d59a:	f8a4 8012 	strh.w	r8, [r4, #18]
    d59e:	1ec0      	subs	r0, r0, #3
    d5a0:	e7f4      	b.n	d58c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d5a2 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d5a2:	2100      	movs	r1, #0
    d5a4:	81c1      	strh	r1, [r0, #14]
    d5a6:	8241      	strh	r1, [r0, #18]
    d5a8:	7581      	strb	r1, [r0, #22]
    d5aa:	4770      	bx	lr

0000d5ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d5ac:	b570      	push	{r4, r5, r6, lr}
    d5ae:	2300      	movs	r3, #0
    d5b0:	2908      	cmp	r1, #8
    d5b2:	d204      	bcs.n	d5be <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d5b4:	f240 11cb 	movw	r1, #459	; 0x1cb
    d5b8:	2015      	movs	r0, #21
    d5ba:	f7f6 fbad 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5be:	6802      	ldr	r2, [r0, #0]
    d5c0:	b90a      	cbnz	r2, d5c6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d5c2:	e01e      	b.n	d602 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d5c4:	4610      	mov	r0, r2
    d5c6:	6802      	ldr	r2, [r0, #0]
    d5c8:	8893      	ldrh	r3, [r2, #4]
    d5ca:	428b      	cmp	r3, r1
    d5cc:	d002      	beq.n	d5d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d5ce:	6813      	ldr	r3, [r2, #0]
    d5d0:	2b00      	cmp	r3, #0
    d5d2:	d1f7      	bne.n	d5c4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d5d4:	8894      	ldrh	r4, [r2, #4]
    d5d6:	4613      	mov	r3, r2
    d5d8:	428c      	cmp	r4, r1
    d5da:	d101      	bne.n	d5e0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d5dc:	6811      	ldr	r1, [r2, #0]
    d5de:	e00d      	b.n	d5fc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d5e0:	f101 0508 	add.w	r5, r1, #8
    d5e4:	b2ae      	uxth	r6, r5
    d5e6:	2500      	movs	r5, #0
    d5e8:	42b4      	cmp	r4, r6
    d5ea:	d309      	bcc.n	d600 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d5ec:	1a64      	subs	r4, r4, r1
    d5ee:	4411      	add	r1, r2
    d5f0:	600d      	str	r5, [r1, #0]
    d5f2:	808c      	strh	r4, [r1, #4]
    d5f4:	6802      	ldr	r2, [r0, #0]
    d5f6:	6812      	ldr	r2, [r2, #0]
    d5f8:	6002      	str	r2, [r0, #0]
    d5fa:	600a      	str	r2, [r1, #0]
    d5fc:	6001      	str	r1, [r0, #0]
    d5fe:	e000      	b.n	d602 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d600:	2300      	movs	r3, #0
    d602:	4618      	mov	r0, r3
    d604:	bd70      	pop	{r4, r5, r6, pc}

0000d606 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d606:	b510      	push	{r4, lr}
    d608:	000c      	movs	r4, r1
    d60a:	d006      	beq.n	d61a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d60c:	2c08      	cmp	r4, #8
    d60e:	d209      	bcs.n	d624 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d610:	f240 1195 	movw	r1, #405	; 0x195
    d614:	2015      	movs	r0, #21
    d616:	f7f6 fb7f 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d61a:	b108      	cbz	r0, d620 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d61c:	2100      	movs	r1, #0
    d61e:	6001      	str	r1, [r0, #0]
    d620:	2000      	movs	r0, #0
    d622:	bd10      	pop	{r4, pc}
    d624:	b118      	cbz	r0, d62e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d626:	b2a1      	uxth	r1, r4
    d628:	6800      	ldr	r0, [r0, #0]
    d62a:	f000 f814 	bl	d656 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d62e:	1d20      	adds	r0, r4, #4
    d630:	bd10      	pop	{r4, pc}

0000d632 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d632:	2100      	movs	r1, #0
    d634:	6802      	ldr	r2, [r0, #0]
    d636:	e003      	b.n	d640 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d638:	8893      	ldrh	r3, [r2, #4]
    d63a:	6812      	ldr	r2, [r2, #0]
    d63c:	4419      	add	r1, r3
    d63e:	b289      	uxth	r1, r1
    d640:	2a00      	cmp	r2, #0
    d642:	d1f9      	bne.n	d638 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d644:	f000 b807 	b.w	d656 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d648 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d648:	2300      	movs	r3, #0
    d64a:	600b      	str	r3, [r1, #0]
    d64c:	808a      	strh	r2, [r1, #4]
    d64e:	6802      	ldr	r2, [r0, #0]
    d650:	600a      	str	r2, [r1, #0]
    d652:	6001      	str	r1, [r0, #0]
    d654:	4770      	bx	lr
    d656:	2300      	movs	r3, #0
    d658:	6043      	str	r3, [r0, #4]
    d65a:	1d02      	adds	r2, r0, #4
    d65c:	8101      	strh	r1, [r0, #8]
    d65e:	6002      	str	r2, [r0, #0]
    d660:	4770      	bx	lr

0000d662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d662:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d666:	3aff      	subs	r2, #255	; 0xff
    d668:	d000      	beq.n	d66c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d66a:	b109      	cbz	r1, d670 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d66c:	2000      	movs	r0, #0
    d66e:	4770      	bx	lr
    d670:	f7f6 be32 	b.w	42d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000d674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d674:	b570      	push	{r4, r5, r6, lr}
    d676:	4605      	mov	r5, r0
    d678:	460c      	mov	r4, r1
    d67a:	4608      	mov	r0, r1
    d67c:	f000 f84f 	bl	d71e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d680:	b108      	cbz	r0, d686 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d682:	2010      	movs	r0, #16
    d684:	bd70      	pop	{r4, r5, r6, pc}
    d686:	b10d      	cbz	r5, d68c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    d688:	2007      	movs	r0, #7
    d68a:	bd70      	pop	{r4, r5, r6, pc}
    d68c:	7025      	strb	r5, [r4, #0]
    d68e:	2000      	movs	r0, #0
    d690:	8060      	strh	r0, [r4, #2]
    d692:	bd70      	pop	{r4, r5, r6, pc}
    d694:	b510      	push	{r4, lr}
    d696:	4604      	mov	r4, r0
    d698:	f7f6 fe6a 	bl	4370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    d69c:	42a0      	cmp	r0, r4
    d69e:	d901      	bls.n	d6a4 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    d6a0:	2001      	movs	r0, #1
    d6a2:	bd10      	pop	{r4, pc}
    d6a4:	2000      	movs	r0, #0
    d6a6:	bd10      	pop	{r4, pc}
    d6a8:	4770      	bx	lr

0000d6aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d6aa:	b570      	push	{r4, r5, r6, lr}
    d6ac:	460e      	mov	r6, r1
    d6ae:	461d      	mov	r5, r3
    d6b0:	4611      	mov	r1, r2
    d6b2:	f000 f811 	bl	d6d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d6b6:	4604      	mov	r4, r0
    d6b8:	4629      	mov	r1, r5
    d6ba:	4630      	mov	r0, r6
    d6bc:	f000 f803 	bl	d6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d6c0:	4420      	add	r0, r4
    d6c2:	1d00      	adds	r0, r0, #4
    d6c4:	bd70      	pop	{r4, r5, r6, pc}
    d6c6:	b510      	push	{r4, lr}
    d6c8:	460a      	mov	r2, r1
    d6ca:	2101      	movs	r1, #1
    d6cc:	f7ff ff29 	bl	d522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6d0:	1cc0      	adds	r0, r0, #3
    d6d2:	f020 0003 	bic.w	r0, r0, #3
    d6d6:	bd10      	pop	{r4, pc}
    d6d8:	b510      	push	{r4, lr}
    d6da:	460a      	mov	r2, r1
    d6dc:	2101      	movs	r1, #1
    d6de:	f7ff ff20 	bl	d522 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6e2:	1cc0      	adds	r0, r0, #3
    d6e4:	f020 0003 	bic.w	r0, r0, #3
    d6e8:	bd10      	pop	{r4, pc}
    d6ea:	2800      	cmp	r0, #0
    d6ec:	db09      	blt.n	d702 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d6ee:	f000 021f 	and.w	r2, r0, #31
    d6f2:	2101      	movs	r1, #1
    d6f4:	4091      	lsls	r1, r2
    d6f6:	0940      	lsrs	r0, r0, #5
    d6f8:	0080      	lsls	r0, r0, #2
    d6fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6fe:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d702:	4770      	bx	lr

0000d704 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d704:	f7f6 bffa 	b.w	46fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d708 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d708:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d70c:	2000      	movs	r0, #0
    d70e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d712:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d716:	2001      	movs	r0, #1
    d718:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d71c:	4770      	bx	lr

0000d71e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d71e:	b108      	cbz	r0, d724 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d720:	2000      	movs	r0, #0
    d722:	4770      	bx	lr
    d724:	2001      	movs	r0, #1
    d726:	4770      	bx	lr

0000d728 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d728:	f7f7 b92e 	b.w	4988 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d72c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d72c:	f7f7 b91c 	b.w	4968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d730 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d730:	b510      	push	{r4, lr}
    d732:	2900      	cmp	r1, #0
    d734:	4604      	mov	r4, r0
    d736:	f04f 0106 	mov.w	r1, #6
    d73a:	d002      	beq.n	d742 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d73c:	f7f6 fb7a 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d740:	e001      	b.n	d746 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d742:	f7f6 fb93 	bl	3e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d746:	7960      	ldrb	r0, [r4, #5]
    d748:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d74c:	7160      	strb	r0, [r4, #5]
    d74e:	bd10      	pop	{r4, pc}

0000d750 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d750:	4770      	bx	lr

0000d752 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d752:	b530      	push	{r4, r5, lr}
    d754:	460c      	mov	r4, r1
    d756:	4605      	mov	r5, r0
    d758:	b08d      	sub	sp, #52	; 0x34
    d75a:	f04f 0103 	mov.w	r1, #3
    d75e:	f104 0003 	add.w	r0, r4, #3
    d762:	b112      	cbz	r2, d76a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d764:	f7f6 fb66 	bl	3e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d768:	e001      	b.n	d76e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d76a:	f7f6 fb7f 	bl	3e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d76e:	7960      	ldrb	r0, [r4, #5]
    d770:	220d      	movs	r2, #13
    d772:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d776:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d77a:	7160      	strb	r0, [r4, #5]
    d77c:	2100      	movs	r1, #0
    d77e:	a804      	add	r0, sp, #16
    d780:	f7fe ff4c 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d784:	78e0      	ldrb	r0, [r4, #3]
    d786:	f88d 001f 	strb.w	r0, [sp, #31]
    d78a:	7920      	ldrb	r0, [r4, #4]
    d78c:	f88d 001e 	strb.w	r0, [sp, #30]
    d790:	7960      	ldrb	r0, [r4, #5]
    d792:	f88d 001d 	strb.w	r0, [sp, #29]
    d796:	2210      	movs	r2, #16
    d798:	4629      	mov	r1, r5
    d79a:	4668      	mov	r0, sp
    d79c:	f7fe fec4 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7a0:	4668      	mov	r0, sp
    d7a2:	f7ff ffaf 	bl	d704 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d7a6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d7aa:	7020      	strb	r0, [r4, #0]
    d7ac:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d7b0:	7060      	strb	r0, [r4, #1]
    d7b2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d7b6:	70a0      	strb	r0, [r4, #2]
    d7b8:	b00d      	add	sp, #52	; 0x34
    d7ba:	bd30      	pop	{r4, r5, pc}

0000d7bc <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d7bc:	b530      	push	{r4, r5, lr}
    d7be:	b08d      	sub	sp, #52	; 0x34
    d7c0:	460c      	mov	r4, r1
    d7c2:	4605      	mov	r5, r0
    d7c4:	220d      	movs	r2, #13
    d7c6:	2100      	movs	r1, #0
    d7c8:	a804      	add	r0, sp, #16
    d7ca:	f7fe ff27 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d7ce:	78e0      	ldrb	r0, [r4, #3]
    d7d0:	f88d 001f 	strb.w	r0, [sp, #31]
    d7d4:	7920      	ldrb	r0, [r4, #4]
    d7d6:	f88d 001e 	strb.w	r0, [sp, #30]
    d7da:	7960      	ldrb	r0, [r4, #5]
    d7dc:	f88d 001d 	strb.w	r0, [sp, #29]
    d7e0:	2210      	movs	r2, #16
    d7e2:	4629      	mov	r1, r5
    d7e4:	4668      	mov	r0, sp
    d7e6:	f7fe fe9f 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7ea:	4668      	mov	r0, sp
    d7ec:	f7ff ff8a 	bl	d704 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d7f0:	7820      	ldrb	r0, [r4, #0]
    d7f2:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d7f6:	4288      	cmp	r0, r1
    d7f8:	d10c      	bne.n	d814 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d7fa:	7860      	ldrb	r0, [r4, #1]
    d7fc:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d800:	4288      	cmp	r0, r1
    d802:	d107      	bne.n	d814 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d804:	78a0      	ldrb	r0, [r4, #2]
    d806:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d80a:	4288      	cmp	r0, r1
    d80c:	d102      	bne.n	d814 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d80e:	2001      	movs	r0, #1
    d810:	b00d      	add	sp, #52	; 0x34
    d812:	bd30      	pop	{r4, r5, pc}
    d814:	2000      	movs	r0, #0
    d816:	e7fb      	b.n	d810 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d818 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d818:	f7f7 bc84 	b.w	5124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    d81c:	b510      	push	{r4, lr}
    d81e:	2801      	cmp	r0, #1
    d820:	d008      	beq.n	d834 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d822:	2802      	cmp	r0, #2
    d824:	d004      	beq.n	d830 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d826:	f240 319a 	movw	r1, #922	; 0x39a
    d82a:	2006      	movs	r0, #6
    d82c:	f7f6 fa74 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d830:	2001      	movs	r0, #1
    d832:	bd10      	pop	{r4, pc}
    d834:	2000      	movs	r0, #0
    d836:	bd10      	pop	{r4, pc}
    d838:	2900      	cmp	r1, #0
    d83a:	d004      	beq.n	d846 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d83c:	2801      	cmp	r0, #1
    d83e:	d003      	beq.n	d848 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d840:	2901      	cmp	r1, #1
    d842:	d001      	beq.n	d848 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d844:	2002      	movs	r0, #2
    d846:	4770      	bx	lr
    d848:	2001      	movs	r0, #1
    d84a:	4770      	bx	lr
    d84c:	f7ff bdb6 	b.w	d3bc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d850 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d850:	2101      	movs	r1, #1
    d852:	f7f8 b87b 	b.w	594c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d856 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d856:	b510      	push	{r4, lr}
    d858:	f001 ff4c 	bl	f6f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d85c:	b118      	cbz	r0, d866 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d862:	f7fd bc33 	b.w	b0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d866:	20ff      	movs	r0, #255	; 0xff
    d868:	bd10      	pop	{r4, pc}

0000d86a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d86a:	b510      	push	{r4, lr}
    d86c:	f7f8 f8b6 	bl	59dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d870:	2810      	cmp	r0, #16
    d872:	d003      	beq.n	d87c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d874:	f7f8 f882 	bl	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d878:	2810      	cmp	r0, #16
    d87a:	d100      	bne.n	d87e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d87c:	2008      	movs	r0, #8
    d87e:	bd10      	pop	{r4, pc}

0000d880 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d880:	b510      	push	{r4, lr}
    d882:	f7f8 f8ab 	bl	59dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d886:	2810      	cmp	r0, #16
    d888:	d007      	beq.n	d89a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d88a:	f7f8 f877 	bl	597c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d88e:	2810      	cmp	r0, #16
    d890:	d003      	beq.n	d89a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d892:	f7f8 f8eb 	bl	5a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d896:	2001      	movs	r0, #1
    d898:	bd10      	pop	{r4, pc}
    d89a:	2000      	movs	r0, #0
    d89c:	bd10      	pop	{r4, pc}

0000d89e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d89e:	b510      	push	{r4, lr}
    d8a0:	f7f8 f89c 	bl	59dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d8a4:	2810      	cmp	r0, #16
    d8a6:	d003      	beq.n	d8b0 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d8a8:	f7f8 f928 	bl	5afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d8ac:	2001      	movs	r0, #1
    d8ae:	bd10      	pop	{r4, pc}
    d8b0:	2000      	movs	r0, #0
    d8b2:	bd10      	pop	{r4, pc}

0000d8b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d8b4:	b570      	push	{r4, r5, r6, lr}
    d8b6:	460e      	mov	r6, r1
    d8b8:	b08c      	sub	sp, #48	; 0x30
    d8ba:	4614      	mov	r4, r2
    d8bc:	4601      	mov	r1, r0
    d8be:	461d      	mov	r5, r3
    d8c0:	2210      	movs	r2, #16
    d8c2:	4668      	mov	r0, sp
    d8c4:	f000 f9a0 	bl	dc08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8c8:	2210      	movs	r2, #16
    d8ca:	4631      	mov	r1, r6
    d8cc:	a804      	add	r0, sp, #16
    d8ce:	f000 f99b 	bl	dc08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8d2:	4668      	mov	r0, sp
    d8d4:	f7ff ff16 	bl	d704 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d8d8:	a908      	add	r1, sp, #32
    d8da:	f04f 0210 	mov.w	r2, #16
    d8de:	4628      	mov	r0, r5
    d8e0:	b11c      	cbz	r4, d8ea <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d8e2:	f000 f991 	bl	dc08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8e6:	b00c      	add	sp, #48	; 0x30
    d8e8:	bd70      	pop	{r4, r5, r6, pc}
    d8ea:	f7fe fe1d 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d8ee:	e7fa      	b.n	d8e6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    d8f0:	0781      	lsls	r1, r0, #30
    d8f2:	d501      	bpl.n	d8f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    d8f4:	2002      	movs	r0, #2
    d8f6:	4770      	bx	lr
    d8f8:	07c0      	lsls	r0, r0, #31
    d8fa:	d0fc      	beq.n	d8f6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    d8fc:	2001      	movs	r0, #1
    d8fe:	4770      	bx	lr

0000d900 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    d900:	b530      	push	{r4, r5, lr}
    d902:	7901      	ldrb	r1, [r0, #4]
    d904:	0949      	lsrs	r1, r1, #5
    d906:	d128      	bne.n	d95a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    d908:	2200      	movs	r2, #0
    d90a:	4611      	mov	r1, r2
    d90c:	5c44      	ldrb	r4, [r0, r1]
    d90e:	1c49      	adds	r1, r1, #1
    d910:	f004 0301 	and.w	r3, r4, #1
    d914:	0864      	lsrs	r4, r4, #1
    d916:	f004 0501 	and.w	r5, r4, #1
    d91a:	442b      	add	r3, r5
    d91c:	0864      	lsrs	r4, r4, #1
    d91e:	f004 0501 	and.w	r5, r4, #1
    d922:	441d      	add	r5, r3
    d924:	0863      	lsrs	r3, r4, #1
    d926:	f003 0401 	and.w	r4, r3, #1
    d92a:	442c      	add	r4, r5
    d92c:	085b      	lsrs	r3, r3, #1
    d92e:	f003 0501 	and.w	r5, r3, #1
    d932:	442c      	add	r4, r5
    d934:	085b      	lsrs	r3, r3, #1
    d936:	f003 0501 	and.w	r5, r3, #1
    d93a:	085b      	lsrs	r3, r3, #1
    d93c:	442c      	add	r4, r5
    d93e:	f003 0501 	and.w	r5, r3, #1
    d942:	442c      	add	r4, r5
    d944:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    d948:	441a      	add	r2, r3
    d94a:	b2c9      	uxtb	r1, r1
    d94c:	b2d2      	uxtb	r2, r2
    d94e:	2905      	cmp	r1, #5
    d950:	d3dc      	bcc.n	d90c <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xc>
    d952:	2a01      	cmp	r2, #1
    d954:	d901      	bls.n	d95a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    d956:	2001      	movs	r0, #1
    d958:	bd30      	pop	{r4, r5, pc}
    d95a:	2000      	movs	r0, #0
    d95c:	bd30      	pop	{r4, r5, pc}

0000d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d95e:	b510      	push	{r4, lr}
    d960:	460c      	mov	r4, r1
    d962:	2100      	movs	r1, #0
    d964:	f7ff fe7d 	bl	d662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d968:	6060      	str	r0, [r4, #4]
    d96a:	b110      	cbz	r0, d972 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    d96c:	2000      	movs	r0, #0
    d96e:	7020      	strb	r0, [r4, #0]
    d970:	bd10      	pop	{r4, pc}
    d972:	2002      	movs	r0, #2
    d974:	bd10      	pop	{r4, pc}

0000d976 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d976:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d97a:	4348      	muls	r0, r1
    d97c:	4770      	bx	lr

0000d97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d97e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d982:	fbb0 f0f1 	udiv	r0, r0, r1
    d986:	b280      	uxth	r0, r0
    d988:	4770      	bx	lr

0000d98a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d98a:	b570      	push	{r4, r5, r6, lr}
    d98c:	4604      	mov	r4, r0
    d98e:	4290      	cmp	r0, r2
    d990:	d20b      	bcs.n	d9aa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d992:	1b10      	subs	r0, r2, r4
    d994:	2864      	cmp	r0, #100	; 0x64
    d996:	d200      	bcs.n	d99a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d998:	2064      	movs	r0, #100	; 0x64
    d99a:	1825      	adds	r5, r4, r0
    d99c:	428d      	cmp	r5, r1
    d99e:	d803      	bhi.n	d9a8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d9a0:	2104      	movs	r1, #4
    d9a2:	f7f3 fccf 	bl	1344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d9a6:	b108      	cbz	r0, d9ac <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d9a8:	4620      	mov	r0, r4
    d9aa:	bd70      	pop	{r4, r5, r6, pc}
    d9ac:	4628      	mov	r0, r5
    d9ae:	bd70      	pop	{r4, r5, r6, pc}

0000d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d9b0:	b510      	push	{r4, lr}
    d9b2:	f1a2 030f 	sub.w	r3, r2, #15
    d9b6:	290c      	cmp	r1, #12
    d9b8:	d24f      	bcs.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9ba:	e8df f001 	tbb	[pc, r1]
    d9be:	0806      	.short	0x0806
    d9c0:	1815120d 	.word	0x1815120d
    d9c4:	4c322f27 	.word	0x4c322f27
    d9c8:	3d35      	.short	0x3d35
    d9ca:	b3a2      	cbz	r2, da36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    d9cc:	e045      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9ce:	2a07      	cmp	r2, #7
    d9d0:	d045      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9d2:	2a08      	cmp	r2, #8
    d9d4:	d043      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9d6:	e040      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9d8:	2a0c      	cmp	r2, #12
    d9da:	d040      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9dc:	2a0b      	cmp	r2, #11
    d9de:	d03e      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9e0:	e03b      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9e2:	2a0d      	cmp	r2, #13
    d9e4:	d03b      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9e6:	e038      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9e8:	2b0c      	cmp	r3, #12
    d9ea:	d938      	bls.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9ec:	e035      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    d9ee:	2a12      	cmp	r2, #18
    d9f0:	d035      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9f2:	2a11      	cmp	r2, #17
    d9f4:	d033      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    d9f6:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    d9fa:	b120      	cbz	r0, da06 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    d9fc:	2a12      	cmp	r2, #18
    d9fe:	d32c      	bcc.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da00:	2a1a      	cmp	r2, #26
    da02:	d92c      	bls.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da04:	e029      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da06:	2a16      	cmp	r2, #22
    da08:	d2fa      	bcs.n	da00 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    da0a:	e026      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da0c:	2b03      	cmp	r3, #3
    da0e:	d926      	bls.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da10:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    da14:	b308      	cbz	r0, da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da16:	2a1b      	cmp	r2, #27
    da18:	d921      	bls.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da1a:	e01e      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da1c:	2a04      	cmp	r2, #4
    da1e:	d01e      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da20:	e01b      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da22:	2a01      	cmp	r2, #1
    da24:	d01b      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da26:	e018      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da28:	2a1c      	cmp	r2, #28
    da2a:	d018      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da2c:	2a1d      	cmp	r2, #29
    da2e:	d016      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da30:	2a1e      	cmp	r2, #30
    da32:	d014      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da34:	e011      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da36:	e012      	b.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da38:	2a1f      	cmp	r2, #31
    da3a:	d010      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da3c:	2a20      	cmp	r2, #32
    da3e:	d00e      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da40:	2a21      	cmp	r2, #33	; 0x21
    da42:	d00c      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da44:	2a22      	cmp	r2, #34	; 0x22
    da46:	d00a      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da48:	2a23      	cmp	r2, #35	; 0x23
    da4a:	d008      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da4c:	2a24      	cmp	r2, #36	; 0x24
    da4e:	d006      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da50:	2a26      	cmp	r2, #38	; 0x26
    da52:	d004      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da54:	e001      	b.n	da5a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    da56:	2a05      	cmp	r2, #5
    da58:	d001      	beq.n	da5e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    da5a:	2000      	movs	r0, #0
    da5c:	bd10      	pop	{r4, pc}
    da5e:	2001      	movs	r0, #1
    da60:	bd10      	pop	{r4, pc}

0000da62 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    da62:	280c      	cmp	r0, #12
    da64:	d013      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da66:	280b      	cmp	r0, #11
    da68:	d011      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da6a:	280d      	cmp	r0, #13
    da6c:	d00f      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da6e:	281f      	cmp	r0, #31
    da70:	d00d      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da72:	2820      	cmp	r0, #32
    da74:	d00b      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da76:	2821      	cmp	r0, #33	; 0x21
    da78:	d009      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da7a:	2822      	cmp	r0, #34	; 0x22
    da7c:	d007      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da7e:	2823      	cmp	r0, #35	; 0x23
    da80:	d005      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da82:	2824      	cmp	r0, #36	; 0x24
    da84:	d003      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da86:	2826      	cmp	r0, #38	; 0x26
    da88:	d001      	beq.n	da8e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    da8a:	2000      	movs	r0, #0
    da8c:	4770      	bx	lr
    da8e:	2001      	movs	r0, #1
    da90:	4770      	bx	lr

0000da92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    da92:	f011 0f0c 	tst.w	r1, #12
    da96:	d016      	beq.n	dac6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da98:	074a      	lsls	r2, r1, #29
    da9a:	f44f 7116 	mov.w	r1, #600	; 0x258
    da9e:	2a00      	cmp	r2, #0
    daa0:	da02      	bge.n	daa8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    daa2:	f04f 0210 	mov.w	r2, #16
    daa6:	e001      	b.n	daac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    daa8:	f04f 0240 	mov.w	r2, #64	; 0x40
    daac:	da01      	bge.n	dab2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    daae:	f04f 0196 	mov.w	r1, #150	; 0x96
    dab2:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dab6:	eba0 0301 	sub.w	r3, r0, r1
    daba:	4288      	cmp	r0, r1
    dabc:	d910      	bls.n	dae0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dabe:	fb93 f0f2 	sdiv	r0, r3, r2
    dac2:	b280      	uxth	r0, r0
    dac4:	4770      	bx	lr
    dac6:	2902      	cmp	r1, #2
    dac8:	d002      	beq.n	dad0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    daca:	2870      	cmp	r0, #112	; 0x70
    dacc:	d80a      	bhi.n	dae4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    dace:	e007      	b.n	dae0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dad0:	283c      	cmp	r0, #60	; 0x3c
    dad2:	d905      	bls.n	dae0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dad4:	383c      	subs	r0, #60	; 0x3c
    dad6:	17c1      	asrs	r1, r0, #31
    dad8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dadc:	1080      	asrs	r0, r0, #2
    dade:	e7f0      	b.n	dac2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dae0:	2000      	movs	r0, #0
    dae2:	e7ee      	b.n	dac2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dae4:	3870      	subs	r0, #112	; 0x70
    dae6:	17c1      	asrs	r1, r0, #31
    dae8:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    daec:	10c0      	asrs	r0, r0, #3
    daee:	e7e8      	b.n	dac2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000daf0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    daf0:	6809      	ldr	r1, [r1, #0]
    daf2:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    daf6:	4770      	bx	lr

0000daf8 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    daf8:	2801      	cmp	r0, #1
    dafa:	d002      	beq.n	db02 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dafc:	2802      	cmp	r0, #2
    dafe:	d000      	beq.n	db02 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    db00:	2000      	movs	r0, #0
    db02:	4770      	bx	lr

0000db04 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    db04:	b510      	push	{r4, lr}
    db06:	f640 12c4 	movw	r2, #2500	; 0x9c4
    db0a:	2901      	cmp	r1, #1
    db0c:	d006      	beq.n	db1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    db0e:	2902      	cmp	r1, #2
    db10:	d005      	beq.n	db1e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    db12:	f240 31c6 	movw	r1, #966	; 0x3c6
    db16:	2029      	movs	r0, #41	; 0x29
    db18:	f7f6 f8fe 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db1c:	b108      	cbz	r0, db22 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    db1e:	4610      	mov	r0, r2
    db20:	bd10      	pop	{r4, pc}
    db22:	f240 40e2 	movw	r0, #1250	; 0x4e2
    db26:	bd10      	pop	{r4, pc}

0000db28 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    db28:	b530      	push	{r4, r5, lr}
    db2a:	242a      	movs	r4, #42	; 0x2a
    db2c:	2523      	movs	r5, #35	; 0x23
    db2e:	2a16      	cmp	r2, #22
    db30:	d105      	bne.n	db3e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    db32:	280c      	cmp	r0, #12
    db34:	d007      	beq.n	db46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    db36:	280d      	cmp	r0, #13
    db38:	d005      	beq.n	db46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    db3a:	281f      	cmp	r0, #31
    db3c:	d005      	beq.n	db4a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    db3e:	b171      	cbz	r1, db5e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    db40:	2a16      	cmp	r2, #22
    db42:	d10c      	bne.n	db5e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    db44:	e004      	b.n	db50 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    db46:	701c      	strb	r4, [r3, #0]
    db48:	e000      	b.n	db4c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    db4a:	701d      	strb	r5, [r3, #0]
    db4c:	2001      	movs	r0, #1
    db4e:	bd30      	pop	{r4, r5, pc}
    db50:	7808      	ldrb	r0, [r1, #0]
    db52:	2801      	cmp	r0, #1
    db54:	d0f7      	beq.n	db46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    db56:	2800      	cmp	r0, #0
    db58:	d0f5      	beq.n	db46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    db5a:	2816      	cmp	r0, #22
    db5c:	d0f5      	beq.n	db4a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    db5e:	2000      	movs	r0, #0
    db60:	bd30      	pop	{r4, r5, pc}

0000db62 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    db62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db64:	b2cf      	uxtb	r7, r1
    db66:	4606      	mov	r6, r0
    db68:	f3c1 2407 	ubfx	r4, r1, #8, #8
    db6c:	4621      	mov	r1, r4
    db6e:	4638      	mov	r0, r7
    db70:	f000 f8ca 	bl	dd08 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    db74:	b2f5      	uxtb	r5, r6
    db76:	f3c6 2607 	ubfx	r6, r6, #8, #8
    db7a:	b920      	cbnz	r0, db86 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    db7c:	4631      	mov	r1, r6
    db7e:	4628      	mov	r0, r5
    db80:	f000 f8c2 	bl	dd08 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    db84:	b140      	cbz	r0, db98 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    db86:	4027      	ands	r7, r4
    db88:	4035      	ands	r5, r6
    db8a:	403d      	ands	r5, r7
    db8c:	4644      	mov	r4, r8
    db8e:	f365 0407 	bfi	r4, r5, #0, #8
    db92:	f365 240f 	bfi	r4, r5, #8, #8
    db96:	e006      	b.n	dba6 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    db98:	4025      	ands	r5, r4
    db9a:	4644      	mov	r4, r8
    db9c:	f365 0407 	bfi	r4, r5, #0, #8
    dba0:	403e      	ands	r6, r7
    dba2:	f366 240f 	bfi	r4, r6, #8, #8
    dba6:	b2e0      	uxtb	r0, r4
    dba8:	f7ff fea2 	bl	d8f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dbac:	f88d 0000 	strb.w	r0, [sp]
    dbb0:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dbb4:	f7ff fe9c 	bl	d8f0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dbb8:	f88d 0001 	strb.w	r0, [sp, #1]
    dbbc:	f8bd 0000 	ldrh.w	r0, [sp]
    dbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dbc2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbc6:	460c      	mov	r4, r1
    dbc8:	4605      	mov	r5, r0
    dbca:	68c6      	ldr	r6, [r0, #12]
    dbcc:	f7f4 f814 	bl	1bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dbd0:	b198      	cbz	r0, dbfa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    dbd2:	b1bc      	cbz	r4, dc04 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dbd4:	4630      	mov	r0, r6
    dbd6:	68e9      	ldr	r1, [r5, #12]
    dbd8:	f7f3 fd02 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dbdc:	2800      	cmp	r0, #0
    dbde:	dd11      	ble.n	dc04 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dbe0:	4420      	add	r0, r4
    dbe2:	1e40      	subs	r0, r0, #1
    dbe4:	fbb0 f7f4 	udiv	r7, r0, r4
    dbe8:	fb07 f104 	mul.w	r1, r7, r4
    dbec:	4630      	mov	r0, r6
    dbee:	f7f3 fcc5 	bl	157c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dbf2:	60e8      	str	r0, [r5, #12]
    dbf4:	4638      	mov	r0, r7
    dbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbfa:	f240 214b 	movw	r1, #587	; 0x24b
    dbfe:	2029      	movs	r0, #41	; 0x29
    dc00:	f7f6 f88a 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc04:	2000      	movs	r0, #0
    dc06:	e7f6      	b.n	dbf6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000dc08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dc08:	b530      	push	{r4, r5, lr}
    dc0a:	4613      	mov	r3, r2
    dc0c:	e006      	b.n	dc1c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dc0e:	18cc      	adds	r4, r1, r3
    dc10:	1ad5      	subs	r5, r2, r3
    dc12:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dc16:	1e5b      	subs	r3, r3, #1
    dc18:	5544      	strb	r4, [r0, r5]
    dc1a:	b2db      	uxtb	r3, r3
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d1f6      	bne.n	dc0e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dc20:	bd30      	pop	{r4, r5, pc}

0000dc22 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dc22:	b538      	push	{r3, r4, r5, lr}
    dc24:	4605      	mov	r5, r0
    dc26:	460c      	mov	r4, r1
    dc28:	4668      	mov	r0, sp
    dc2a:	f7fd ff53 	bl	bad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dc2e:	b310      	cbz	r0, dc76 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    dc30:	f99d 0000 	ldrsb.w	r0, [sp]
    dc34:	7260      	strb	r0, [r4, #9]
    dc36:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    dc3a:	72a1      	strb	r1, [r4, #10]
    dc3c:	f994 100b 	ldrsb.w	r1, [r4, #11]
    dc40:	2200      	movs	r2, #0
    dc42:	1a41      	subs	r1, r0, r1
    dc44:	d500      	bpl.n	dc48 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    dc46:	4249      	negs	r1, r1
    dc48:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    dc4c:	428b      	cmp	r3, r1
    dc4e:	dc10      	bgt.n	dc72 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dc50:	2bff      	cmp	r3, #255	; 0xff
    dc52:	d00e      	beq.n	dc72 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dc54:	7b21      	ldrb	r1, [r4, #12]
    dc56:	1c49      	adds	r1, r1, #1
    dc58:	b2c9      	uxtb	r1, r1
    dc5a:	7321      	strb	r1, [r4, #12]
    dc5c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    dc60:	4299      	cmp	r1, r3
    dc62:	d802      	bhi.n	dc6a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    dc64:	7ae1      	ldrb	r1, [r4, #11]
    dc66:	297f      	cmp	r1, #127	; 0x7f
    dc68:	d103      	bne.n	dc72 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dc6a:	72e0      	strb	r0, [r4, #11]
    dc6c:	2000      	movs	r0, #0
    dc6e:	7320      	strb	r0, [r4, #12]
    dc70:	2201      	movs	r2, #1
    dc72:	4610      	mov	r0, r2
    dc74:	bd38      	pop	{r3, r4, r5, pc}
    dc76:	207f      	movs	r0, #127	; 0x7f
    dc78:	7260      	strb	r0, [r4, #9]
    dc7a:	2000      	movs	r0, #0
    dc7c:	bd38      	pop	{r3, r4, r5, pc}

0000dc7e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dc7e:	2300      	movs	r3, #0
    dc80:	6283      	str	r3, [r0, #40]	; 0x28
    dc82:	8602      	strh	r2, [r0, #48]	; 0x30
    dc84:	f240 2371 	movw	r3, #625	; 0x271
    dc88:	435a      	muls	r2, r3
    dc8a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dc8e:	1e52      	subs	r2, r2, #1
    dc90:	fbb2 f1f1 	udiv	r1, r2, r1
    dc94:	62c1      	str	r1, [r0, #44]	; 0x2c
    dc96:	4770      	bx	lr

0000dc98 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dc98:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc9c:	4348      	muls	r0, r1
    dc9e:	4770      	bx	lr

0000dca0 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    dca0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dca4:	fbb0 f0f1 	udiv	r0, r0, r1
    dca8:	b280      	uxth	r0, r0
    dcaa:	4770      	bx	lr

0000dcac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dcac:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dcb0:	fb10 f001 	smulbb	r0, r0, r1
    dcb4:	4770      	bx	lr

0000dcb6 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    dcb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dcba:	fbb0 f0f1 	udiv	r0, r0, r1
    dcbe:	b2c0      	uxtb	r0, r0
    dcc0:	4770      	bx	lr

0000dcc2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dcc2:	b510      	push	{r4, lr}
    dcc4:	2300      	movs	r3, #0
    dcc6:	461a      	mov	r2, r3
    dcc8:	e003      	b.n	dcd2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dcca:	5c84      	ldrb	r4, [r0, r2]
    dccc:	4323      	orrs	r3, r4
    dcce:	1c52      	adds	r2, r2, #1
    dcd0:	b2d2      	uxtb	r2, r2
    dcd2:	428a      	cmp	r2, r1
    dcd4:	d3f9      	bcc.n	dcca <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dcd6:	b10b      	cbz	r3, dcdc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dcd8:	2000      	movs	r0, #0
    dcda:	bd10      	pop	{r4, pc}
    dcdc:	2001      	movs	r0, #1
    dcde:	bd10      	pop	{r4, pc}
    dce0:	b510      	push	{r4, lr}
    dce2:	4604      	mov	r4, r0
    dce4:	f7fd f96e 	bl	afc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    dce8:	f644 112b 	movw	r1, #18731	; 0x492b
    dcec:	4008      	ands	r0, r1
    dcee:	2101      	movs	r1, #1
    dcf0:	7561      	strb	r1, [r4, #21]
    dcf2:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    dcf6:	0a00      	lsrs	r0, r0, #8
    dcf8:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    dcfc:	20fe      	movs	r0, #254	; 0xfe
    dcfe:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    dd02:	207f      	movs	r0, #127	; 0x7f
    dd04:	7260      	strb	r0, [r4, #9]
    dd06:	bd10      	pop	{r4, pc}
    dd08:	2801      	cmp	r0, #1
    dd0a:	d002      	beq.n	dd12 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    dd0c:	2802      	cmp	r0, #2
    dd0e:	d003      	beq.n	dd18 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    dd10:	e004      	b.n	dd1c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    dd12:	2901      	cmp	r1, #1
    dd14:	d004      	beq.n	dd20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    dd16:	e001      	b.n	dd1c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    dd18:	2902      	cmp	r1, #2
    dd1a:	d001      	beq.n	dd20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    dd1c:	2000      	movs	r0, #0
    dd1e:	4770      	bx	lr
    dd20:	2001      	movs	r0, #1
    dd22:	4770      	bx	lr

0000dd24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dd24:	b510      	push	{r4, lr}
    dd26:	4604      	mov	r4, r0
    dd28:	f890 0020 	ldrb.w	r0, [r0, #32]
    dd2c:	b108      	cbz	r0, dd32 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dd2e:	2825      	cmp	r0, #37	; 0x25
    dd30:	d901      	bls.n	dd36 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dd32:	2012      	movs	r0, #18
    dd34:	bd10      	pop	{r4, pc}
    dd36:	b12a      	cbz	r2, dd44 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    dd38:	7d60      	ldrb	r0, [r4, #21]
    dd3a:	b128      	cbz	r0, dd48 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    dd3c:	2801      	cmp	r0, #1
    dd3e:	d009      	beq.n	dd54 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    dd40:	201f      	movs	r0, #31
    dd42:	bd10      	pop	{r4, pc}
    dd44:	2000      	movs	r0, #0
    dd46:	bd10      	pop	{r4, pc}
    dd48:	4620      	mov	r0, r4
    dd4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd4e:	4611      	mov	r1, r2
    dd50:	f7f7 bfca 	b.w	5ce8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    dd54:	88a2      	ldrh	r2, [r4, #4]
    dd56:	6909      	ldr	r1, [r1, #16]
    dd58:	f104 0015 	add.w	r0, r4, #21
    dd5c:	f7f7 ff70 	bl	5c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dd60:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    dd64:	e7ee      	b.n	dd44 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000dd66 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dd66:	b530      	push	{r4, r5, lr}
    dd68:	1c42      	adds	r2, r0, #1
    dd6a:	428a      	cmp	r2, r1
    dd6c:	d004      	beq.n	dd78 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    dd6e:	680a      	ldr	r2, [r1, #0]
    dd70:	f8c0 2001 	str.w	r2, [r0, #1]
    dd74:	7909      	ldrb	r1, [r1, #4]
    dd76:	7141      	strb	r1, [r0, #5]
    dd78:	7941      	ldrb	r1, [r0, #5]
    dd7a:	f001 011f 	and.w	r1, r1, #31
    dd7e:	7141      	strb	r1, [r0, #5]
    dd80:	2100      	movs	r1, #0
    dd82:	72c1      	strb	r1, [r0, #11]
    dd84:	1843      	adds	r3, r0, r1
    dd86:	1c49      	adds	r1, r1, #1
    dd88:	785c      	ldrb	r4, [r3, #1]
    dd8a:	b2c9      	uxtb	r1, r1
    dd8c:	f004 0201 	and.w	r2, r4, #1
    dd90:	0864      	lsrs	r4, r4, #1
    dd92:	f004 0501 	and.w	r5, r4, #1
    dd96:	4415      	add	r5, r2
    dd98:	0862      	lsrs	r2, r4, #1
    dd9a:	f002 0401 	and.w	r4, r2, #1
    dd9e:	442c      	add	r4, r5
    dda0:	0852      	lsrs	r2, r2, #1
    dda2:	f002 0501 	and.w	r5, r2, #1
    dda6:	442c      	add	r4, r5
    dda8:	0852      	lsrs	r2, r2, #1
    ddaa:	f002 0501 	and.w	r5, r2, #1
    ddae:	442c      	add	r4, r5
    ddb0:	0852      	lsrs	r2, r2, #1
    ddb2:	f002 0501 	and.w	r5, r2, #1
    ddb6:	442c      	add	r4, r5
    ddb8:	0852      	lsrs	r2, r2, #1
    ddba:	f002 0501 	and.w	r5, r2, #1
    ddbe:	442c      	add	r4, r5
    ddc0:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    ddc4:	719a      	strb	r2, [r3, #6]
    ddc6:	7ac3      	ldrb	r3, [r0, #11]
    ddc8:	2905      	cmp	r1, #5
    ddca:	441a      	add	r2, r3
    ddcc:	72c2      	strb	r2, [r0, #11]
    ddce:	d3d9      	bcc.n	dd84 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    ddd0:	bd30      	pop	{r4, r5, pc}

0000ddd2 <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    ddd2:	68c0      	ldr	r0, [r0, #12]
    ddd4:	6008      	str	r0, [r1, #0]
    ddd6:	4770      	bx	lr

0000ddd8 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    ddd8:	6842      	ldr	r2, [r0, #4]
    ddda:	600a      	str	r2, [r1, #0]
    dddc:	6880      	ldr	r0, [r0, #8]
    ddde:	6048      	str	r0, [r1, #4]
    dde0:	4770      	bx	lr

0000dde2 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    dde2:	6842      	ldr	r2, [r0, #4]
    dde4:	600a      	str	r2, [r1, #0]
    dde6:	6880      	ldr	r0, [r0, #8]
    dde8:	6048      	str	r0, [r1, #4]
    ddea:	4770      	bx	lr

0000ddec <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    ddec:	7800      	ldrb	r0, [r0, #0]
    ddee:	f000 0003 	and.w	r0, r0, #3
    ddf2:	4770      	bx	lr

0000ddf4 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    ddf4:	8880      	ldrh	r0, [r0, #4]
    ddf6:	4770      	bx	lr

0000ddf8 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    ddf8:	88c0      	ldrh	r0, [r0, #6]
    ddfa:	4770      	bx	lr

0000ddfc <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    ddfc:	8900      	ldrh	r0, [r0, #8]
    ddfe:	4770      	bx	lr

0000de00 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    de00:	8940      	ldrh	r0, [r0, #10]
    de02:	4770      	bx	lr

0000de04 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    de04:	7900      	ldrb	r0, [r0, #4]
    de06:	4770      	bx	lr

0000de08 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    de08:	7900      	ldrb	r0, [r0, #4]
    de0a:	4770      	bx	lr

0000de0c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    de0c:	8901      	ldrh	r1, [r0, #8]
    de0e:	291b      	cmp	r1, #27
    de10:	d30c      	bcc.n	de2c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de12:	8941      	ldrh	r1, [r0, #10]
    de14:	f44f 72a4 	mov.w	r2, #328	; 0x148
    de18:	4291      	cmp	r1, r2
    de1a:	d307      	bcc.n	de2c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de1c:	8881      	ldrh	r1, [r0, #4]
    de1e:	291b      	cmp	r1, #27
    de20:	d304      	bcc.n	de2c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de22:	88c0      	ldrh	r0, [r0, #6]
    de24:	4290      	cmp	r0, r2
    de26:	d301      	bcc.n	de2c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    de28:	2001      	movs	r0, #1
    de2a:	4770      	bx	lr
    de2c:	2000      	movs	r0, #0
    de2e:	4770      	bx	lr

0000de30 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    de30:	b510      	push	{r4, lr}
    de32:	29fb      	cmp	r1, #251	; 0xfb
    de34:	d904      	bls.n	de40 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    de36:	f44f 61af 	mov.w	r1, #1400	; 0x578
    de3a:	202a      	movs	r0, #42	; 0x2a
    de3c:	f7f5 ff6c 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de40:	7041      	strb	r1, [r0, #1]
    de42:	bd10      	pop	{r4, pc}

0000de44 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    de44:	7901      	ldrb	r1, [r0, #4]
    de46:	0749      	lsls	r1, r1, #29
    de48:	d004      	beq.n	de54 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    de4a:	7940      	ldrb	r0, [r0, #5]
    de4c:	0740      	lsls	r0, r0, #29
    de4e:	d001      	beq.n	de54 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    de50:	2001      	movs	r0, #1
    de52:	4770      	bx	lr
    de54:	2000      	movs	r0, #0
    de56:	4770      	bx	lr

0000de58 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    de58:	7901      	ldrb	r1, [r0, #4]
    de5a:	0749      	lsls	r1, r1, #29
    de5c:	d004      	beq.n	de68 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    de5e:	7940      	ldrb	r0, [r0, #5]
    de60:	0740      	lsls	r0, r0, #29
    de62:	d001      	beq.n	de68 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    de64:	2001      	movs	r0, #1
    de66:	4770      	bx	lr
    de68:	2000      	movs	r0, #0
    de6a:	4770      	bx	lr

0000de6c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    de6c:	7900      	ldrb	r0, [r0, #4]
    de6e:	4770      	bx	lr

0000de70 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    de70:	7940      	ldrb	r0, [r0, #5]
    de72:	4770      	bx	lr

0000de74 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    de74:	7101      	strb	r1, [r0, #4]
    de76:	4770      	bx	lr

0000de78 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    de78:	7141      	strb	r1, [r0, #5]
    de7a:	4770      	bx	lr

0000de7c <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    de7c:	680a      	ldr	r2, [r1, #0]
    de7e:	6042      	str	r2, [r0, #4]
    de80:	7909      	ldrb	r1, [r1, #4]
    de82:	7201      	strb	r1, [r0, #8]
    de84:	4770      	bx	lr

0000de86 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    de86:	72c1      	strb	r1, [r0, #11]
    de88:	0a09      	lsrs	r1, r1, #8
    de8a:	7301      	strb	r1, [r0, #12]
    de8c:	4770      	bx	lr

0000de8e <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    de8e:	8809      	ldrh	r1, [r1, #0]
    de90:	8181      	strh	r1, [r0, #12]
    de92:	4770      	bx	lr

0000de94 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    de94:	6809      	ldr	r1, [r1, #0]
    de96:	f8c0 1016 	str.w	r1, [r0, #22]
    de9a:	4770      	bx	lr

0000de9c <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    de9c:	680a      	ldr	r2, [r1, #0]
    de9e:	6042      	str	r2, [r0, #4]
    dea0:	6849      	ldr	r1, [r1, #4]
    dea2:	6081      	str	r1, [r0, #8]
    dea4:	4770      	bx	lr

0000dea6 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    dea6:	680a      	ldr	r2, [r1, #0]
    dea8:	f840 2f0e 	str.w	r2, [r0, #14]!
    deac:	6849      	ldr	r1, [r1, #4]
    deae:	6041      	str	r1, [r0, #4]
    deb0:	4770      	bx	lr

0000deb2 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    deb2:	680a      	ldr	r2, [r1, #0]
    deb4:	6042      	str	r2, [r0, #4]
    deb6:	6849      	ldr	r1, [r1, #4]
    deb8:	6081      	str	r1, [r0, #8]
    deba:	4770      	bx	lr

0000debc <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    debc:	7802      	ldrb	r2, [r0, #0]
    debe:	f001 0103 	and.w	r1, r1, #3
    dec2:	f022 0203 	bic.w	r2, r2, #3
    dec6:	430a      	orrs	r2, r1
    dec8:	7002      	strb	r2, [r0, #0]
    deca:	4770      	bx	lr

0000decc <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    decc:	7101      	strb	r1, [r0, #4]
    dece:	4770      	bx	lr

0000ded0 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    ded0:	7101      	strb	r1, [r0, #4]
    ded2:	0a09      	lsrs	r1, r1, #8
    ded4:	7141      	strb	r1, [r0, #5]
    ded6:	4770      	bx	lr

0000ded8 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    ded8:	7181      	strb	r1, [r0, #6]
    deda:	0a09      	lsrs	r1, r1, #8
    dedc:	71c1      	strb	r1, [r0, #7]
    dede:	4770      	bx	lr

0000dee0 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    dee0:	7201      	strb	r1, [r0, #8]
    dee2:	0a09      	lsrs	r1, r1, #8
    dee4:	7241      	strb	r1, [r0, #9]
    dee6:	4770      	bx	lr

0000dee8 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    dee8:	7281      	strb	r1, [r0, #10]
    deea:	0a09      	lsrs	r1, r1, #8
    deec:	72c1      	strb	r1, [r0, #11]
    deee:	4770      	bx	lr

0000def0 <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    def0:	7181      	strb	r1, [r0, #6]
    def2:	0a09      	lsrs	r1, r1, #8
    def4:	71c1      	strb	r1, [r0, #7]
    def6:	4770      	bx	lr

0000def8 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    def8:	7141      	strb	r1, [r0, #5]
    defa:	4770      	bx	lr

0000defc <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    defc:	7841      	ldrb	r1, [r0, #1]
    defe:	7800      	ldrb	r0, [r0, #0]
    df00:	f010 000f 	ands.w	r0, r0, #15
    df04:	d005      	beq.n	df12 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    df06:	2801      	cmp	r0, #1
    df08:	d007      	beq.n	df1a <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    df0a:	2802      	cmp	r0, #2
    df0c:	d001      	beq.n	df12 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    df0e:	2806      	cmp	r0, #6
    df10:	d105      	bne.n	df1e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    df12:	1f89      	subs	r1, r1, #6
    df14:	291f      	cmp	r1, #31
    df16:	d904      	bls.n	df22 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    df18:	e001      	b.n	df1e <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    df1a:	290c      	cmp	r1, #12
    df1c:	d001      	beq.n	df22 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    df1e:	2000      	movs	r0, #0
    df20:	4770      	bx	lr
    df22:	2001      	movs	r0, #1
    df24:	4770      	bx	lr

0000df26 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    df26:	7800      	ldrb	r0, [r0, #0]
    df28:	09c0      	lsrs	r0, r0, #7
    df2a:	4770      	bx	lr

0000df2c <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    df2c:	f850 2f03 	ldr.w	r2, [r0, #3]!
    df30:	600a      	str	r2, [r1, #0]
    df32:	8880      	ldrh	r0, [r0, #4]
    df34:	8088      	strh	r0, [r1, #4]
    df36:	4770      	bx	lr

0000df38 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    df38:	7800      	ldrb	r0, [r0, #0]
    df3a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    df3e:	4770      	bx	lr

0000df40 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    df40:	7801      	ldrb	r1, [r0, #0]
    df42:	f001 010f 	and.w	r1, r1, #15
    df46:	2904      	cmp	r1, #4
    df48:	d105      	bne.n	df56 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    df4a:	7840      	ldrb	r0, [r0, #1]
    df4c:	1f80      	subs	r0, r0, #6
    df4e:	281f      	cmp	r0, #31
    df50:	d801      	bhi.n	df56 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    df52:	2001      	movs	r0, #1
    df54:	4770      	bx	lr
    df56:	2000      	movs	r0, #0
    df58:	4770      	bx	lr

0000df5a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    df5a:	b510      	push	{r4, lr}
    df5c:	7802      	ldrb	r2, [r0, #0]
    df5e:	f001 030f 	and.w	r3, r1, #15
    df62:	f022 020f 	bic.w	r2, r2, #15
    df66:	431a      	orrs	r2, r3
    df68:	7002      	strb	r2, [r0, #0]
    df6a:	2907      	cmp	r1, #7
    df6c:	d20c      	bcs.n	df88 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    df6e:	e8df f001 	tbb	[pc, r1]
    df72:	0604      	.short	0x0604
    df74:	08040604 	.word	0x08040604
    df78:	0004      	.short	0x0004
    df7a:	2106      	movs	r1, #6
    df7c:	e002      	b.n	df84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    df7e:	210c      	movs	r1, #12
    df80:	e000      	b.n	df84 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    df82:	2122      	movs	r1, #34	; 0x22
    df84:	7041      	strb	r1, [r0, #1]
    df86:	bd10      	pop	{r4, pc}
    df88:	216e      	movs	r1, #110	; 0x6e
    df8a:	202a      	movs	r0, #42	; 0x2a
    df8c:	f7f5 fec4 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000df90 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    df90:	680a      	ldr	r2, [r1, #0]
    df92:	f840 2f09 	str.w	r2, [r0, #9]!
    df96:	8889      	ldrh	r1, [r1, #4]
    df98:	8081      	strh	r1, [r0, #4]
    df9a:	4770      	bx	lr

0000df9c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    df9c:	7802      	ldrb	r2, [r0, #0]
    df9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    dfa2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dfa6:	7002      	strb	r2, [r0, #0]
    dfa8:	4770      	bx	lr

0000dfaa <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    dfaa:	680a      	ldr	r2, [r1, #0]
    dfac:	f840 2f03 	str.w	r2, [r0, #3]!
    dfb0:	8889      	ldrh	r1, [r1, #4]
    dfb2:	8081      	strh	r1, [r0, #4]
    dfb4:	4770      	bx	lr

0000dfb6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    dfb6:	7802      	ldrb	r2, [r0, #0]
    dfb8:	2340      	movs	r3, #64	; 0x40
    dfba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    dfbe:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    dfc2:	430a      	orrs	r2, r1
    dfc4:	7002      	strb	r2, [r0, #0]
    dfc6:	4770      	bx	lr

0000dfc8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    dfc8:	2101      	movs	r1, #1
    dfca:	f000 b847 	b.w	e05c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    dfce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dfd2:	460e      	mov	r6, r1
    dfd4:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    dfd8:	4617      	mov	r7, r2
    dfda:	39ff      	subs	r1, #255	; 0xff
    dfdc:	d014      	beq.n	e008 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    dfde:	8030      	strh	r0, [r6, #0]
    dfe0:	2100      	movs	r1, #0
    dfe2:	7171      	strb	r1, [r6, #5]
    dfe4:	f7f6 fa96 	bl	4514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    dfe8:	4604      	mov	r4, r0
    dfea:	f7ff f964 	bl	d2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    dfee:	0005      	movs	r5, r0
    dff0:	d00a      	beq.n	e008 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    dff2:	4620      	mov	r0, r4
    dff4:	4629      	mov	r1, r5
    dff6:	aa01      	add	r2, sp, #4
    dff8:	f7ff f98e 	bl	d318 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    dffc:	8070      	strh	r0, [r6, #2]
    dffe:	b130      	cbz	r0, e00e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x46>
    e000:	28fb      	cmp	r0, #251	; 0xfb
    e002:	d906      	bls.n	e012 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4a>
    e004:	21c9      	movs	r1, #201	; 0xc9
    e006:	e026      	b.n	e056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e008:	2000      	movs	r0, #0
    e00a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e00e:	21c8      	movs	r1, #200	; 0xc8
    e010:	e021      	b.n	e056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e012:	9801      	ldr	r0, [sp, #4]
    e014:	f7ff feea 	bl	ddec <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e018:	2801      	cmp	r0, #1
    e01a:	d003      	beq.n	e024 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    e01c:	2802      	cmp	r0, #2
    e01e:	d001      	beq.n	e024 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    e020:	21d8      	movs	r1, #216	; 0xd8
    e022:	e018      	b.n	e056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e024:	7130      	strb	r0, [r6, #4]
    e026:	4629      	mov	r1, r5
    e028:	8873      	ldrh	r3, [r6, #2]
    e02a:	2503      	movs	r5, #3
    e02c:	4620      	mov	r0, r4
    e02e:	463a      	mov	r2, r7
    e030:	9500      	str	r5, [sp, #0]
    e032:	f7ff f817 	bl	d064 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e036:	4620      	mov	r0, r4
    e038:	60b7      	str	r7, [r6, #8]
    e03a:	f7ff f8eb 	bl	d214 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e03e:	b138      	cbz	r0, e050 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x88>
    e040:	2100      	movs	r1, #0
    e042:	4620      	mov	r0, r4
    e044:	460a      	mov	r2, r1
    e046:	f7ff fa45 	bl	d4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e04a:	b118      	cbz	r0, e054 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8c>
    e04c:	2001      	movs	r0, #1
    e04e:	e7dc      	b.n	e00a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x42>
    e050:	21e8      	movs	r1, #232	; 0xe8
    e052:	e000      	b.n	e056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    e054:	21ed      	movs	r1, #237	; 0xed
    e056:	202b      	movs	r0, #43	; 0x2b
    e058:	f7f5 fe5e 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e05c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e060:	4604      	mov	r4, r0
    e062:	460e      	mov	r6, r1
    e064:	2000      	movs	r0, #0
    e066:	f7f6 f83b 	bl	40e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e06a:	4605      	mov	r5, r0
    e06c:	2000      	movs	r0, #0
    e06e:	b906      	cbnz	r6, e072 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xaa>
    e070:	2001      	movs	r0, #1
    e072:	2600      	movs	r6, #0
    e074:	46b0      	mov	r8, r6
    e076:	182f      	adds	r7, r5, r0
    e078:	e017      	b.n	e0aa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xe2>
    e07a:	8820      	ldrh	r0, [r4, #0]
    e07c:	1c40      	adds	r0, r0, #1
    e07e:	b280      	uxth	r0, r0
    e080:	8020      	strh	r0, [r4, #0]
    e082:	42b8      	cmp	r0, r7
    e084:	d302      	bcc.n	e08c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xc4>
    e086:	4640      	mov	r0, r8
    e088:	f8a4 8000 	strh.w	r8, [r4]
    e08c:	b280      	uxth	r0, r0
    e08e:	42a8      	cmp	r0, r5
    e090:	d304      	bcc.n	e09c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    e092:	42b8      	cmp	r0, r7
    e094:	d202      	bcs.n	e09c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    e096:	2000      	movs	r0, #0
    e098:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e09c:	4669      	mov	r1, sp
    e09e:	f7ff fc5e 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e0a2:	2800      	cmp	r0, #0
    e0a4:	d0f8      	beq.n	e098 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>
    e0a6:	1c76      	adds	r6, r6, #1
    e0a8:	b2f6      	uxtb	r6, r6
    e0aa:	42b7      	cmp	r7, r6
    e0ac:	d8e5      	bhi.n	e07a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xb2>
    e0ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e0b2:	8020      	strh	r0, [r4, #0]
    e0b4:	2012      	movs	r0, #18
    e0b6:	e7ef      	b.n	e098 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>

0000e0b8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e0b8:	b570      	push	{r4, r5, r6, lr}
    e0ba:	8050      	strh	r0, [r2, #2]
    e0bc:	890c      	ldrh	r4, [r1, #8]
    e0be:	8094      	strh	r4, [r2, #4]
    e0c0:	898b      	ldrh	r3, [r1, #12]
    e0c2:	80d3      	strh	r3, [r2, #6]
    e0c4:	8948      	ldrh	r0, [r1, #10]
    e0c6:	8110      	strh	r0, [r2, #8]
    e0c8:	89cd      	ldrh	r5, [r1, #14]
    e0ca:	8155      	strh	r5, [r2, #10]
    e0cc:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e0ce:	42ae      	cmp	r6, r5
    e0d0:	d108      	bne.n	e0e4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e0d2:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e0d4:	4285      	cmp	r5, r0
    e0d6:	d105      	bne.n	e0e4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e0d8:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e0da:	429d      	cmp	r5, r3
    e0dc:	d102      	bne.n	e0e4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e0de:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e0e0:	42a3      	cmp	r3, r4
    e0e2:	d001      	beq.n	e0e8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e0e4:	2301      	movs	r3, #1
    e0e6:	e000      	b.n	e0ea <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e0e8:	2300      	movs	r3, #0
    e0ea:	7313      	strb	r3, [r2, #12]
    e0ec:	8548      	strh	r0, [r1, #42]	; 0x2a
    e0ee:	8950      	ldrh	r0, [r2, #10]
    e0f0:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e0f2:	8890      	ldrh	r0, [r2, #4]
    e0f4:	8588      	strh	r0, [r1, #44]	; 0x2c
    e0f6:	88d0      	ldrh	r0, [r2, #6]
    e0f8:	8608      	strh	r0, [r1, #48]	; 0x30
    e0fa:	2001      	movs	r0, #1
    e0fc:	7010      	strb	r0, [r2, #0]
    e0fe:	bd70      	pop	{r4, r5, r6, pc}

0000e100 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e100:	b510      	push	{r4, lr}
    e102:	888c      	ldrh	r4, [r1, #4]
    e104:	890a      	ldrh	r2, [r1, #8]
    e106:	884b      	ldrh	r3, [r1, #2]
    e108:	88c9      	ldrh	r1, [r1, #6]
    e10a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e10e:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e112:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e116:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e11a:	bd10      	pop	{r4, pc}

0000e11c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e11c:	b570      	push	{r4, r5, r6, lr}
    e11e:	4615      	mov	r5, r2
    e120:	460c      	mov	r4, r1
    e122:	f000 f8c7 	bl	e2b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e126:	3096      	adds	r0, #150	; 0x96
    e128:	4428      	add	r0, r5
    e12a:	42a0      	cmp	r0, r4
    e12c:	d801      	bhi.n	e132 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e12e:	1a20      	subs	r0, r4, r0
    e130:	bd70      	pop	{r4, r5, r6, pc}
    e132:	2000      	movs	r0, #0
    e134:	bd70      	pop	{r4, r5, r6, pc}

0000e136 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e13a:	4604      	mov	r4, r0
    e13c:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e13e:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e140:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e144:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e148:	4285      	cmp	r5, r0
    e14a:	d300      	bcc.n	e14e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e14c:	4605      	mov	r5, r0
    e14e:	4620      	mov	r0, r4
    e150:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e154:	f000 f89e 	bl	e294 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e158:	4601      	mov	r1, r0
    e15a:	86e5      	strh	r5, [r4, #54]	; 0x36
    e15c:	8761      	strh	r1, [r4, #58]	; 0x3a
    e15e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e160:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e164:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e166:	4680      	mov	r8, r0
    e168:	42aa      	cmp	r2, r5
    e16a:	d200      	bcs.n	e16e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e16c:	462a      	mov	r2, r5
    e16e:	428b      	cmp	r3, r1
    e170:	d200      	bcs.n	e174 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e172:	460b      	mov	r3, r1
    e174:	8202      	strh	r2, [r0, #16]
    e176:	f8a8 3012 	strh.w	r3, [r8, #18]
    e17a:	42bd      	cmp	r5, r7
    e17c:	d101      	bne.n	e182 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e17e:	42b1      	cmp	r1, r6
    e180:	d001      	beq.n	e186 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e182:	2001      	movs	r0, #1
    e184:	e000      	b.n	e188 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e186:	2000      	movs	r0, #0
    e188:	4681      	mov	r9, r0
    e18a:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e18e:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e192:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e194:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e196:	4285      	cmp	r5, r0
    e198:	d300      	bcc.n	e19c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e19a:	4605      	mov	r5, r0
    e19c:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e1a0:	4620      	mov	r0, r4
    e1a2:	f000 f87f 	bl	e2a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e1a6:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e1aa:	2902      	cmp	r1, #2
    e1ac:	d108      	bne.n	e1c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e1ae:	42af      	cmp	r7, r5
    e1b0:	d200      	bcs.n	e1b4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e1b2:	463d      	mov	r5, r7
    e1b4:	4286      	cmp	r6, r0
    e1b6:	d200      	bcs.n	e1ba <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e1b8:	4630      	mov	r0, r6
    e1ba:	2100      	movs	r1, #0
    e1bc:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e1c0:	f8a8 5008 	strh.w	r5, [r8, #8]
    e1c4:	f8a8 000c 	strh.w	r0, [r8, #12]
    e1c8:	42bd      	cmp	r5, r7
    e1ca:	d101      	bne.n	e1d0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e1cc:	42b0      	cmp	r0, r6
    e1ce:	d001      	beq.n	e1d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e1d0:	2001      	movs	r0, #1
    e1d2:	e000      	b.n	e1d6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e1d4:	2000      	movs	r0, #0
    e1d6:	ea40 0009 	orr.w	r0, r0, r9
    e1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e1de <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e1de:	6840      	ldr	r0, [r0, #4]
    e1e0:	4770      	bx	lr

0000e1e2 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1e6:	4616      	mov	r6, r2
    e1e8:	460f      	mov	r7, r1
    e1ea:	4604      	mov	r4, r0
    e1ec:	f000 f862 	bl	e2b4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e1f0:	4605      	mov	r5, r0
    e1f2:	463a      	mov	r2, r7
    e1f4:	68e1      	ldr	r1, [r4, #12]
    e1f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e1f8:	f000 f847 	bl	e28a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e1fc:	19a9      	adds	r1, r5, r6
    e1fe:	4281      	cmp	r1, r0
    e200:	d300      	bcc.n	e204 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e202:	4608      	mov	r0, r1
    e204:	6320      	str	r0, [r4, #48]	; 0x30
    e206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e20a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e20a:	221b      	movs	r2, #27
    e20c:	8402      	strh	r2, [r0, #32]
    e20e:	8382      	strh	r2, [r0, #28]
    e210:	82c2      	strh	r2, [r0, #22]
    e212:	8282      	strh	r2, [r0, #20]
    e214:	8142      	strh	r2, [r0, #10]
    e216:	8202      	strh	r2, [r0, #16]
    e218:	8102      	strh	r2, [r0, #8]
    e21a:	8542      	strh	r2, [r0, #42]	; 0x2a
    e21c:	8582      	strh	r2, [r0, #44]	; 0x2c
    e21e:	8482      	strh	r2, [r0, #36]	; 0x24
    e220:	2900      	cmp	r1, #0
    e222:	d10a      	bne.n	e23a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e224:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e228:	8441      	strh	r1, [r0, #34]	; 0x22
    e22a:	83c1      	strh	r1, [r0, #30]
    e22c:	8341      	strh	r1, [r0, #26]
    e22e:	8301      	strh	r1, [r0, #24]
    e230:	81c1      	strh	r1, [r0, #14]
    e232:	8241      	strh	r1, [r0, #18]
    e234:	8181      	strh	r1, [r0, #12]
    e236:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e238:	8601      	strh	r1, [r0, #48]	; 0x30
    e23a:	4770      	bx	lr

0000e23c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e23c:	6800      	ldr	r0, [r0, #0]
    e23e:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e242:	4290      	cmp	r0, r2
    e244:	d903      	bls.n	e24e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e246:	1a40      	subs	r0, r0, r1
    e248:	389c      	subs	r0, #156	; 0x9c
    e24a:	0840      	lsrs	r0, r0, #1
    e24c:	4770      	bx	lr
    e24e:	2000      	movs	r0, #0
    e250:	4770      	bx	lr

0000e252 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e252:	b510      	push	{r4, lr}
    e254:	9c02      	ldr	r4, [sp, #8]
    e256:	8281      	strh	r1, [r0, #20]
    e258:	82c2      	strh	r2, [r0, #22]
    e25a:	8303      	strh	r3, [r0, #24]
    e25c:	8344      	strh	r4, [r0, #26]
    e25e:	bd10      	pop	{r4, pc}

0000e260 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e260:	8050      	strh	r0, [r2, #2]
    e262:	8a88      	ldrh	r0, [r1, #20]
    e264:	8090      	strh	r0, [r2, #4]
    e266:	8ac8      	ldrh	r0, [r1, #22]
    e268:	80d0      	strh	r0, [r2, #6]
    e26a:	8b08      	ldrh	r0, [r1, #24]
    e26c:	8110      	strh	r0, [r2, #8]
    e26e:	8b48      	ldrh	r0, [r1, #26]
    e270:	8150      	strh	r0, [r2, #10]
    e272:	2001      	movs	r0, #1
    e274:	7010      	strb	r0, [r2, #0]
    e276:	4770      	bx	lr
    e278:	2902      	cmp	r1, #2
    e27a:	d003      	beq.n	e284 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e27c:	00c0      	lsls	r0, r0, #3
    e27e:	3070      	adds	r0, #112	; 0x70
    e280:	b280      	uxth	r0, r0
    e282:	4770      	bx	lr
    e284:	0080      	lsls	r0, r0, #2
    e286:	303c      	adds	r0, #60	; 0x3c
    e288:	e7fa      	b.n	e280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e28a:	4288      	cmp	r0, r1
    e28c:	d300      	bcc.n	e290 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e28e:	4608      	mov	r0, r1
    e290:	1a80      	subs	r0, r0, r2
    e292:	4770      	bx	lr
    e294:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e298:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e29c:	4281      	cmp	r1, r0
    e29e:	d200      	bcs.n	e2a2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e2a0:	4608      	mov	r0, r1
    e2a2:	4770      	bx	lr
    e2a4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e2a8:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e2ac:	4281      	cmp	r1, r0
    e2ae:	d200      	bcs.n	e2b2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e2b0:	4608      	mov	r0, r1
    e2b2:	4770      	bx	lr
    e2b4:	2196      	movs	r1, #150	; 0x96
    e2b6:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e2ba:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e2be:	f000 b800 	b.w	e2c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2c6:	460d      	mov	r5, r1
    e2c8:	4606      	mov	r6, r0
    e2ca:	4698      	mov	r8, r3
    e2cc:	4617      	mov	r7, r2
    e2ce:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e2d0:	4611      	mov	r1, r2
    e2d2:	f7ff ffd1 	bl	e278 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e2d6:	4604      	mov	r4, r0
    e2d8:	4639      	mov	r1, r7
    e2da:	4630      	mov	r0, r6
    e2dc:	f7ff ffe2 	bl	e2a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e2e0:	42a0      	cmp	r0, r4
    e2e2:	d200      	bcs.n	e2e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e2e4:	4604      	mov	r4, r0
    e2e6:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e2e8:	4641      	mov	r1, r8
    e2ea:	f7ff ffc5 	bl	e278 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e2ee:	4607      	mov	r7, r0
    e2f0:	4641      	mov	r1, r8
    e2f2:	4630      	mov	r0, r6
    e2f4:	f7ff ffce 	bl	e294 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e2f8:	42b8      	cmp	r0, r7
    e2fa:	d300      	bcc.n	e2fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e2fc:	4638      	mov	r0, r7
    e2fe:	4420      	add	r0, r4
    e300:	4428      	add	r0, r5
    e302:	1d80      	adds	r0, r0, #6
    e304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e308:	2801      	cmp	r0, #1
    e30a:	d102      	bne.n	e312 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    e30c:	7948      	ldrb	r0, [r1, #5]
    e30e:	0980      	lsrs	r0, r0, #6
    e310:	d001      	beq.n	e316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e312:	2000      	movs	r0, #0
    e314:	4770      	bx	lr
    e316:	2001      	movs	r0, #1
    e318:	4770      	bx	lr
    e31a:	2801      	cmp	r0, #1
    e31c:	d106      	bne.n	e32c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e31e:	7948      	ldrb	r0, [r1, #5]
    e320:	2101      	movs	r1, #1
    e322:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e326:	d101      	bne.n	e32c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e328:	2001      	movs	r0, #1
    e32a:	4770      	bx	lr
    e32c:	2000      	movs	r0, #0
    e32e:	4770      	bx	lr
    e330:	b118      	cbz	r0, e33a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    e332:	2802      	cmp	r0, #2
    e334:	d001      	beq.n	e33a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    e336:	2001      	movs	r0, #1
    e338:	4770      	bx	lr
    e33a:	2000      	movs	r0, #0
    e33c:	4770      	bx	lr
    e33e:	2802      	cmp	r0, #2
    e340:	d003      	beq.n	e34a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    e342:	2803      	cmp	r0, #3
    e344:	d001      	beq.n	e34a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    e346:	2000      	movs	r0, #0
    e348:	4770      	bx	lr
    e34a:	2001      	movs	r0, #1
    e34c:	4770      	bx	lr

0000e34e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e34e:	f7f9 b86b 	b.w	7428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    e352:	b510      	push	{r4, lr}
    e354:	f7f8 feb6 	bl	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    e358:	f7f8 fa76 	bl	6848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e35c:	f7fd f8b4 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e360:	2005      	movs	r0, #5
    e362:	bd10      	pop	{r4, pc}
    e364:	b510      	push	{r4, lr}
    e366:	f7f8 fead 	bl	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    e36a:	f7fd f8ad 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e36e:	2005      	movs	r0, #5
    e370:	bd10      	pop	{r4, pc}
    e372:	b530      	push	{r4, r5, lr}
    e374:	b089      	sub	sp, #36	; 0x24
    e376:	4605      	mov	r5, r0
    e378:	f7f8 fea4 	bl	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    e37c:	7828      	ldrb	r0, [r5, #0]
    e37e:	4669      	mov	r1, sp
    e380:	f000 040f 	and.w	r4, r0, #15
    e384:	4622      	mov	r2, r4
    e386:	4628      	mov	r0, r5
    e388:	f7f9 fa0c 	bl	77a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e38c:	2200      	movs	r2, #0
    e38e:	4621      	mov	r1, r4
    e390:	4668      	mov	r0, sp
    e392:	f7f8 fad9 	bl	6948 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    e396:	4602      	mov	r2, r0
    e398:	4621      	mov	r1, r4
    e39a:	4668      	mov	r0, sp
    e39c:	f7f8 fe10 	bl	6fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b4>
    e3a0:	4604      	mov	r4, r0
    e3a2:	f7f8 fa51 	bl	6848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e3a6:	b009      	add	sp, #36	; 0x24
    e3a8:	4620      	mov	r0, r4
    e3aa:	bd30      	pop	{r4, r5, pc}
    e3ac:	f240 21c5 	movw	r1, #709	; 0x2c5
    e3b0:	2032      	movs	r0, #50	; 0x32
    e3b2:	f7f5 fcb1 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3b6:	b510      	push	{r4, lr}
    e3b8:	f7f8 fe84 	bl	70c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    e3bc:	f7fd f884 	bl	b4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e3c4:	f7f9 b848 	b.w	7458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    e3c8:	f7f9 b82e 	b.w	7428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    e3cc:	f7ff b8b6 	b.w	d53c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000e3d0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    e3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3d2:	b08b      	sub	sp, #44	; 0x2c
    e3d4:	4607      	mov	r7, r0
    e3d6:	f7f6 f8d1 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e3da:	4604      	mov	r4, r0
    e3dc:	f7fe ff6b 	bl	d2b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e3e0:	0005      	movs	r5, r0
    e3e2:	d00c      	beq.n	e3fe <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    e3e4:	4620      	mov	r0, r4
    e3e6:	4629      	mov	r1, r5
    e3e8:	466a      	mov	r2, sp
    e3ea:	f7fe ff95 	bl	d318 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e3ee:	4606      	mov	r6, r0
    e3f0:	f7f6 f8be 	bl	4570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e3f4:	42b0      	cmp	r0, r6
    e3f6:	d005      	beq.n	e404 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    e3f8:	f44f 7197 	mov.w	r1, #302	; 0x12e
    e3fc:	e033      	b.n	e466 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    e3fe:	2000      	movs	r0, #0
    e400:	b00b      	add	sp, #44	; 0x2c
    e402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e404:	a901      	add	r1, sp, #4
    e406:	9800      	ldr	r0, [sp, #0]
    e408:	f000 f8b4 	bl	e574 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    e40c:	1d3e      	adds	r6, r7, #4
    e40e:	4628      	mov	r0, r5
    e410:	f7fe fee5 	bl	d1de <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e414:	4605      	mov	r5, r0
    e416:	4601      	mov	r1, r0
    e418:	221c      	movs	r2, #28
    e41a:	4630      	mov	r0, r6
    e41c:	f7fe f884 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e420:	7aa8      	ldrb	r0, [r5, #10]
    e422:	f04f 0500 	mov.w	r5, #0
    e426:	06c1      	lsls	r1, r0, #27
    e428:	d50d      	bpl.n	e446 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e42a:	0740      	lsls	r0, r0, #29
    e42c:	d40a      	bmi.n	e444 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    e42e:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e432:	f106 001c 	add.w	r0, r6, #28
    e436:	9904      	ldr	r1, [sp, #16]
    e438:	f7fe f876 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e43c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e440:	7230      	strb	r0, [r6, #8]
    e442:	e000      	b.n	e446 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e444:	7235      	strb	r5, [r6, #8]
    e446:	707d      	strb	r5, [r7, #1]
    e448:	2005      	movs	r0, #5
    e44a:	7038      	strb	r0, [r7, #0]
    e44c:	4620      	mov	r0, r4
    e44e:	f7fe fee1 	bl	d214 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e452:	b130      	cbz	r0, e462 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    e454:	2100      	movs	r1, #0
    e456:	4620      	mov	r0, r4
    e458:	460a      	mov	r2, r1
    e45a:	f7ff f83b 	bl	d4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e45e:	2001      	movs	r0, #1
    e460:	e7ce      	b.n	e400 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    e462:	f240 1171 	movw	r1, #369	; 0x171
    e466:	2033      	movs	r0, #51	; 0x33
    e468:	f7f5 fc56 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e46c <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e46c:	b510      	push	{r4, lr}
    e46e:	f7f6 f885 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e472:	f000 f874 	bl	e55e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e476:	4604      	mov	r4, r0
    e478:	221c      	movs	r2, #28
    e47a:	2100      	movs	r1, #0
    e47c:	f7fe f8ce 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e480:	207f      	movs	r0, #127	; 0x7f
    e482:	76a0      	strb	r0, [r4, #26]
    e484:	21ff      	movs	r1, #255	; 0xff
    e486:	73a1      	strb	r1, [r4, #14]
    e488:	7061      	strb	r1, [r4, #1]
    e48a:	74e1      	strb	r1, [r4, #19]
    e48c:	7aa0      	ldrb	r0, [r4, #10]
    e48e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e492:	3020      	adds	r0, #32
    e494:	72a0      	strb	r0, [r4, #10]
    e496:	bd10      	pop	{r4, pc}

0000e498 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    e498:	f7ff bfe8 	b.w	e46c <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000e49c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4a0:	461e      	mov	r6, r3
    e4a2:	4617      	mov	r7, r2
    e4a4:	4689      	mov	r9, r1
    e4a6:	4682      	mov	sl, r0
    e4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e4ac:	f7f6 f866 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e4b0:	4604      	mov	r4, r0
    e4b2:	f7fe fe96 	bl	d1e2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e4b6:	2801      	cmp	r0, #1
    e4b8:	d034      	beq.n	e524 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e4ba:	4620      	mov	r0, r4
    e4bc:	f000 f84f 	bl	e55e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e4c0:	4604      	mov	r4, r0
    e4c2:	221c      	movs	r2, #28
    e4c4:	2100      	movs	r1, #0
    e4c6:	f7fe f8a9 	bl	c61c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e4ca:	2501      	movs	r5, #1
    e4cc:	7025      	strb	r5, [r4, #0]
    e4ce:	1c63      	adds	r3, r4, #1
    e4d0:	1ca2      	adds	r2, r4, #2
    e4d2:	4649      	mov	r1, r9
    e4d4:	4650      	mov	r0, sl
    e4d6:	f000 f827 	bl	e528 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    e4da:	f884 8009 	strb.w	r8, [r4, #9]
    e4de:	7aa0      	ldrb	r0, [r4, #10]
    e4e0:	21ff      	movs	r1, #255	; 0xff
    e4e2:	f367 0000 	bfi	r0, r7, #0, #1
    e4e6:	f040 001a 	orr.w	r0, r0, #26
    e4ea:	72a0      	strb	r0, [r4, #10]
    e4ec:	7325      	strb	r5, [r4, #12]
    e4ee:	2000      	movs	r0, #0
    e4f0:	7360      	strb	r0, [r4, #13]
    e4f2:	73a1      	strb	r1, [r4, #14]
    e4f4:	74e1      	strb	r1, [r4, #19]
    e4f6:	207f      	movs	r0, #127	; 0x7f
    e4f8:	76a0      	strb	r0, [r4, #26]
    e4fa:	76e6      	strb	r6, [r4, #27]
    e4fc:	f7f6 f838 	bl	4570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e500:	4604      	mov	r4, r0
    e502:	f7f6 f83b 	bl	457c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e506:	2201      	movs	r2, #1
    e508:	4621      	mov	r1, r4
    e50a:	f000 f831 	bl	e570 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    e50e:	b120      	cbz	r0, e51a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    e510:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e514:	2005      	movs	r0, #5
    e516:	f7f9 bb2d 	b.w	7b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    e51a:	f240 21c7 	movw	r1, #711	; 0x2c7
    e51e:	2033      	movs	r0, #51	; 0x33
    e520:	f7f5 fbfa 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e528:	b510      	push	{r4, lr}
    e52a:	461c      	mov	r4, r3
    e52c:	460b      	mov	r3, r1
    e52e:	29ff      	cmp	r1, #255	; 0xff
    e530:	d00d      	beq.n	e54e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    e532:	4621      	mov	r1, r4
    e534:	4618      	mov	r0, r3
    e536:	f7f7 f8bb 	bl	56b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    e53a:	b120      	cbz	r0, e546 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    e53c:	7820      	ldrb	r0, [r4, #0]
    e53e:	f040 0002 	orr.w	r0, r0, #2
    e542:	7020      	strb	r0, [r4, #0]
    e544:	bd10      	pop	{r4, pc}
    e546:	2150      	movs	r1, #80	; 0x50
    e548:	2033      	movs	r0, #51	; 0x33
    e54a:	f7f5 fbe5 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e54e:	7c41      	ldrb	r1, [r0, #17]
    e550:	7021      	strb	r1, [r4, #0]
    e552:	6840      	ldr	r0, [r0, #4]
    e554:	6801      	ldr	r1, [r0, #0]
    e556:	6011      	str	r1, [r2, #0]
    e558:	8880      	ldrh	r0, [r0, #4]
    e55a:	8090      	strh	r0, [r2, #4]
    e55c:	bd10      	pop	{r4, pc}
    e55e:	b51c      	push	{r2, r3, r4, lr}
    e560:	4669      	mov	r1, sp
    e562:	aa01      	add	r2, sp, #4
    e564:	f7fe feca 	bl	d2fc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e568:	9800      	ldr	r0, [sp, #0]
    e56a:	f7fe fe38 	bl	d1de <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e56e:	bd1c      	pop	{r2, r3, r4, pc}
    e570:	f7fe bddd 	b.w	d12e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000e574 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    e574:	7802      	ldrb	r2, [r0, #0]
    e576:	f002 020f 	and.w	r2, r2, #15
    e57a:	f7f9 b913 	b.w	77a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e57e:	2800      	cmp	r0, #0
    e580:	db04      	blt.n	e58c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    e582:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e586:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    e58a:	e005      	b.n	e598 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    e58c:	f000 000f 	and.w	r0, r0, #15
    e590:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e594:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    e598:	0940      	lsrs	r0, r0, #5
    e59a:	4770      	bx	lr

0000e59c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>:
    e59c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    e5a0:	4770      	bx	lr
    e5a2:	6940      	ldr	r0, [r0, #20]
    e5a4:	2800      	cmp	r0, #0
    e5a6:	d000      	beq.n	e5aa <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xe>
    e5a8:	2001      	movs	r0, #1
    e5aa:	4770      	bx	lr
    e5ac:	b510      	push	{r4, lr}
    e5ae:	2808      	cmp	r0, #8
    e5b0:	d00a      	beq.n	e5c8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x2c>
    e5b2:	2804      	cmp	r0, #4
    e5b4:	d00a      	beq.n	e5cc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x30>
    e5b6:	2802      	cmp	r0, #2
    e5b8:	d00a      	beq.n	e5d0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x34>
    e5ba:	2108      	movs	r1, #8
    e5bc:	2801      	cmp	r0, #1
    e5be:	d009      	beq.n	e5d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x38>
    e5c0:	21d9      	movs	r1, #217	; 0xd9
    e5c2:	2005      	movs	r0, #5
    e5c4:	f7f5 fba8 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5c8:	2140      	movs	r1, #64	; 0x40
    e5ca:	e7f7      	b.n	e5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e5cc:	2110      	movs	r1, #16
    e5ce:	e7f5      	b.n	e5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e5d0:	2104      	movs	r1, #4
    e5d2:	e7f3      	b.n	e5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    e5d4:	222a      	movs	r2, #42	; 0x2a
    e5d6:	2028      	movs	r0, #40	; 0x28
    e5d8:	fb11 0002 	smlabb	r0, r1, r2, r0
    e5dc:	b280      	uxth	r0, r0
    e5de:	bd10      	pop	{r4, pc}
    e5e0:	2000      	movs	r0, #0
    e5e2:	4770      	bx	lr
    e5e4:	b570      	push	{r4, r5, r6, lr}
    e5e6:	4604      	mov	r4, r0
    e5e8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    e5ec:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    e5f0:	f000 f80c 	bl	e60c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x70>
    e5f4:	4605      	mov	r5, r0
    e5f6:	f000 f857 	bl	e6a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    e5fa:	4601      	mov	r1, r0
    e5fc:	462a      	mov	r2, r5
    e5fe:	4620      	mov	r0, r4
    e600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e604:	f7ff bded 	b.w	e1e2 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e608:	f7f3 b928 	b.w	185c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e60c:	b510      	push	{r4, lr}
    e60e:	4604      	mov	r4, r0
    e610:	4608      	mov	r0, r1
    e612:	f001 f8f1 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e616:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e61a:	2c02      	cmp	r4, #2
    e61c:	d00a      	beq.n	e634 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x98>
    e61e:	f640 0234 	movw	r2, #2100	; 0x834
    e622:	4410      	add	r0, r2
    e624:	f24a 5295 	movw	r2, #42389	; 0xa595
    e628:	4410      	add	r0, r2
    e62a:	fbb0 f0f1 	udiv	r0, r0, r1
    e62e:	f500 709b 	add.w	r0, r0, #310	; 0x136
    e632:	bd10      	pop	{r4, pc}
    e634:	460a      	mov	r2, r1
    e636:	e7f4      	b.n	e622 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x86>
    e638:	b510      	push	{r4, lr}
    e63a:	4604      	mov	r4, r0
    e63c:	2000      	movs	r0, #0
    e63e:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    e642:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e646:	f7f3 fd55 	bl	20f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e64a:	b140      	cbz	r0, e65e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xc2>
    e64c:	2020      	movs	r0, #32
    e64e:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    e652:	f504 7084 	add.w	r0, r4, #264	; 0x108
    e656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e65a:	f7fb bf33 	b.w	a4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    e65e:	f240 5139 	movw	r1, #1337	; 0x539
    e662:	2035      	movs	r0, #53	; 0x35
    e664:	f7f5 fb58 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e66a:	4613      	mov	r3, r2
    e66c:	460a      	mov	r2, r1
    e66e:	4604      	mov	r4, r0
    e670:	4601      	mov	r1, r0
    e672:	4668      	mov	r0, sp
    e674:	f7f9 fd40 	bl	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    e678:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e67c:	4669      	mov	r1, sp
    e67e:	f7ff ffc3 	bl	e608 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    e682:	2800      	cmp	r0, #0
    e684:	d104      	bne.n	e690 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf4>
    e686:	f640 2139 	movw	r1, #2617	; 0xa39
    e68a:	2035      	movs	r0, #53	; 0x35
    e68c:	f7f5 fb44 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e690:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    e692:	b510      	push	{r4, lr}
    e694:	245b      	movs	r4, #91	; 0x5b
    e696:	f001 f86d 	bl	f774 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e69a:	b910      	cbnz	r0, e6a2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x106>
    e69c:	f001 f860 	bl	f760 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e6a0:	b100      	cbz	r0, e6a4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x108>
    e6a2:	2462      	movs	r4, #98	; 0x62
    e6a4:	4620      	mov	r0, r4
    e6a6:	bd10      	pop	{r4, pc}
    e6a8:	b510      	push	{r4, lr}
    e6aa:	f7ff fff2 	bl	e692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    e6ae:	3065      	adds	r0, #101	; 0x65
    e6b0:	b280      	uxth	r0, r0
    e6b2:	bd10      	pop	{r4, pc}
    e6b4:	b510      	push	{r4, lr}
    e6b6:	f7ff ffec 	bl	e692 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    e6ba:	30fb      	adds	r0, #251	; 0xfb
    e6bc:	b280      	uxth	r0, r0
    e6be:	bd10      	pop	{r4, pc}
    e6c0:	b1d0      	cbz	r0, e6f8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x15c>
    e6c2:	2908      	cmp	r1, #8
    e6c4:	d011      	beq.n	e6ea <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x14e>
    e6c6:	2904      	cmp	r1, #4
    e6c8:	d00b      	beq.n	e6e2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x146>
    e6ca:	2000      	movs	r0, #0
    e6cc:	2902      	cmp	r1, #2
    e6ce:	d010      	beq.n	e6f2 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x156>
    e6d0:	2108      	movs	r1, #8
    e6d2:	3028      	adds	r0, #40	; 0x28
    e6d4:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    e6d8:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    e6dc:	4408      	add	r0, r1
    e6de:	3098      	adds	r0, #152	; 0x98
    e6e0:	4770      	bx	lr
    e6e2:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    e6e6:	2110      	movs	r1, #16
    e6e8:	e7f4      	b.n	e6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e6ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e6ee:	2140      	movs	r1, #64	; 0x40
    e6f0:	e7f0      	b.n	e6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e6f2:	2104      	movs	r1, #4
    e6f4:	3018      	adds	r0, #24
    e6f6:	e7ed      	b.n	e6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    e6f8:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    e6fc:	4770      	bx	lr
    e6fe:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e702:	f001 0307 	and.w	r3, r1, #7
    e706:	7802      	ldrb	r2, [r0, #0]
    e708:	2101      	movs	r1, #1
    e70a:	4099      	lsls	r1, r3
    e70c:	438a      	bics	r2, r1
    e70e:	7002      	strb	r2, [r0, #0]
    e710:	4770      	bx	lr

0000e712 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    e712:	f7f5 be8b 	b.w	442c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e716 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    e716:	2000      	movs	r0, #0
    e718:	4770      	bx	lr

0000e71a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    e71a:	b538      	push	{r3, r4, r5, lr}
    e71c:	460d      	mov	r5, r1
    e71e:	4604      	mov	r4, r0
    e720:	e050      	b.n	e7c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    e722:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    e726:	1c40      	adds	r0, r0, #1
    e728:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    e72c:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    e730:	1c40      	adds	r0, r0, #1
    e732:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    e736:	4620      	mov	r0, r4
    e738:	f000 f8e1 	bl	e8fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    e73c:	b198      	cbz	r0, e766 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e73e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e742:	1c40      	adds	r0, r0, #1
    e744:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e748:	4620      	mov	r0, r4
    e74a:	f000 f86e 	bl	e82a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    e74e:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    e752:	4288      	cmp	r0, r1
    e754:	d307      	bcc.n	e766 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    e756:	2000      	movs	r0, #0
    e758:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    e75c:	2001      	movs	r0, #1
    e75e:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    e762:	f7fb ff0d 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e766:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    e76a:	b120      	cbz	r0, e776 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    e76c:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    e770:	1c40      	adds	r0, r0, #1
    e772:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    e776:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    e77a:	b120      	cbz	r0, e786 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    e77c:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    e780:	1c40      	adds	r0, r0, #1
    e782:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    e786:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    e78a:	f88d 0000 	strb.w	r0, [sp]
    e78e:	9800      	ldr	r0, [sp, #0]
    e790:	9000      	str	r0, [sp, #0]
    e792:	f89d 0000 	ldrb.w	r0, [sp]
    e796:	b940      	cbnz	r0, e7aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    e798:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    e79c:	2300      	movs	r3, #0
    e79e:	2101      	movs	r1, #1
    e7a0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    e7a4:	f7ff f904 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e7a8:	b120      	cbz	r0, e7b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    e7aa:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    e7ae:	1c40      	adds	r0, r0, #1
    e7b0:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    e7b4:	4620      	mov	r0, r4
    e7b6:	f000 f847 	bl	e848 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    e7ba:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e7be:	1c40      	adds	r0, r0, #1
    e7c0:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    e7c4:	1e6d      	subs	r5, r5, #1
    e7c6:	b2ad      	uxth	r5, r5
    e7c8:	d2ab      	bcs.n	e722 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    e7ca:	bd38      	pop	{r3, r4, r5, pc}

0000e7cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    e7cc:	b510      	push	{r4, lr}
    e7ce:	f7fa fde5 	bl	939c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    e7d2:	b128      	cbz	r0, e7e0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    e7d4:	2000      	movs	r0, #0
    e7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7da:	4601      	mov	r1, r0
    e7dc:	f7fa bd8a 	b.w	92f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    e7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7e4:	f7f6 bac2 	b.w	4d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    e7e8:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    e7ec:	28fe      	cmp	r0, #254	; 0xfe
    e7ee:	d001      	beq.n	e7f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    e7f0:	2001      	movs	r0, #1
    e7f2:	4770      	bx	lr
    e7f4:	2000      	movs	r0, #0
    e7f6:	4770      	bx	lr
    e7f8:	b510      	push	{r4, lr}
    e7fa:	2801      	cmp	r0, #1
    e7fc:	d006      	beq.n	e80c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e7fe:	2802      	cmp	r0, #2
    e800:	d004      	beq.n	e80c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    e802:	f240 2163 	movw	r1, #611	; 0x263
    e806:	2006      	movs	r0, #6
    e808:	f7f5 fa86 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e80c:	bd10      	pop	{r4, pc}
    e80e:	2801      	cmp	r0, #1
    e810:	d002      	beq.n	e818 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    e812:	2802      	cmp	r0, #2
    e814:	d105      	bne.n	e822 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e816:	e002      	b.n	e81e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    e818:	2901      	cmp	r1, #1
    e81a:	d004      	beq.n	e826 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e81c:	e001      	b.n	e822 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    e81e:	2902      	cmp	r1, #2
    e820:	d001      	beq.n	e826 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    e822:	2000      	movs	r0, #0
    e824:	4770      	bx	lr
    e826:	2001      	movs	r0, #1
    e828:	4770      	bx	lr
    e82a:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    e82e:	428a      	cmp	r2, r1
    e830:	d301      	bcc.n	e836 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    e832:	1a51      	subs	r1, r2, r1
    e834:	e000      	b.n	e838 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    e836:	2100      	movs	r1, #0
    e838:	8a82      	ldrh	r2, [r0, #20]
    e83a:	1d52      	adds	r2, r2, #5
    e83c:	428a      	cmp	r2, r1
    e83e:	d302      	bcc.n	e846 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    e840:	2101      	movs	r1, #1
    e842:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    e846:	4770      	bx	lr
    e848:	b570      	push	{r4, r5, r6, lr}
    e84a:	4604      	mov	r4, r0
    e84c:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    e850:	2500      	movs	r5, #0
    e852:	2601      	movs	r6, #1
    e854:	280c      	cmp	r0, #12
    e856:	d02c      	beq.n	e8b2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    e858:	280d      	cmp	r0, #13
    e85a:	d129      	bne.n	e8b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e85c:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e860:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e864:	1c40      	adds	r0, r0, #1
    e866:	4288      	cmp	r0, r1
    e868:	d122      	bne.n	e8b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e86a:	8820      	ldrh	r0, [r4, #0]
    e86c:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    e870:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    e874:	f7ff f883 	bl	d97e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e878:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    e87c:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    e880:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    e884:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    e888:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    e88c:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    e890:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    e894:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    e898:	2102      	movs	r1, #2
    e89a:	4620      	mov	r0, r4
    e89c:	f7f7 f93c 	bl	5b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    e8a0:	f7fb fe6e 	bl	a580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e8a4:	2103      	movs	r1, #3
    e8a6:	4620      	mov	r0, r4
    e8a8:	f7f9 f8fa 	bl	7aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    e8ac:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    e8b0:	bd70      	pop	{r4, r5, r6, pc}
    e8b2:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    e8b6:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    e8ba:	1c40      	adds	r0, r0, #1
    e8bc:	4288      	cmp	r0, r1
    e8be:	d1f7      	bne.n	e8b0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    e8c0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    e8c4:	f8d0 1001 	ldr.w	r1, [r0, #1]
    e8c8:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    e8cc:	7940      	ldrb	r0, [r0, #5]
    e8ce:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    e8d2:	2103      	movs	r1, #3
    e8d4:	4620      	mov	r0, r4
    e8d6:	f7f7 f91f 	bl	5b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    e8da:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    e8de:	7800      	ldrb	r0, [r0, #0]
    e8e0:	b140      	cbz	r0, e8f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    e8e2:	2101      	movs	r1, #1
    e8e4:	20fe      	movs	r0, #254	; 0xfe
    e8e6:	f7fb fd75 	bl	a3d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    e8ea:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    e8ee:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    e8f2:	bd70      	pop	{r4, r5, r6, pc}
    e8f4:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    e8f8:	2036      	movs	r0, #54	; 0x36
    e8fa:	f7f5 fa0d 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8fe:	b510      	push	{r4, lr}
    e900:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    e904:	b941      	cbnz	r1, e918 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    e906:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    e90a:	2300      	movs	r3, #0
    e90c:	2106      	movs	r1, #6
    e90e:	3078      	adds	r0, #120	; 0x78
    e910:	f7ff f84e 	bl	d9b0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e914:	2800      	cmp	r0, #0
    e916:	d000      	beq.n	e91a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    e918:	2001      	movs	r0, #1
    e91a:	bd10      	pop	{r4, pc}

0000e91c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    e91c:	b510      	push	{r4, lr}
    e91e:	460c      	mov	r4, r1
    e920:	4601      	mov	r1, r0
    e922:	4610      	mov	r0, r2
    e924:	f7f2 fe5c 	bl	15e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e928:	2800      	cmp	r0, #0
    e92a:	da06      	bge.n	e93a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    e92c:	1a21      	subs	r1, r4, r0
    e92e:	1e49      	subs	r1, r1, #1
    e930:	fbb1 f1f4 	udiv	r1, r1, r4
    e934:	fb01 0004 	mla	r0, r1, r4, r0
    e938:	bd10      	pop	{r4, pc}
    e93a:	fb90 f1f4 	sdiv	r1, r0, r4
    e93e:	fb01 0014 	mls	r0, r1, r4, r0
    e942:	bd10      	pop	{r4, pc}
    e944:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e948:	f001 0107 	and.w	r1, r1, #7
    e94c:	7800      	ldrb	r0, [r0, #0]
    e94e:	2201      	movs	r2, #1
    e950:	408a      	lsls	r2, r1
    e952:	4010      	ands	r0, r2
    e954:	40c8      	lsrs	r0, r1
    e956:	4770      	bx	lr
    e958:	b118      	cbz	r0, e962 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    e95a:	2802      	cmp	r0, #2
    e95c:	d001      	beq.n	e962 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    e95e:	2001      	movs	r0, #1
    e960:	4770      	bx	lr
    e962:	2000      	movs	r0, #0
    e964:	4770      	bx	lr

0000e966 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e966:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e968:	7881      	ldrb	r1, [r0, #2]
    e96a:	4604      	mov	r4, r0
    e96c:	291a      	cmp	r1, #26
    e96e:	d025      	beq.n	e9bc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    e970:	dc0e      	bgt.n	e990 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    e972:	2916      	cmp	r1, #22
    e974:	d22d      	bcs.n	e9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e976:	e8df f001 	tbb	[pc, r1]
    e97a:	2c2c      	.short	0x2c2c
    e97c:	212c2c2c 	.word	0x212c2c2c
    e980:	2c2c2c2c 	.word	0x2c2c2c2c
    e984:	2c2c2c2c 	.word	0x2c2c2c2c
    e988:	2c2c2c2c 	.word	0x2c2c2c2c
    e98c:	2121212c 	.word	0x2121212c
    e990:	292a      	cmp	r1, #42	; 0x2a
    e992:	d01e      	beq.n	e9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e994:	dc0b      	bgt.n	e9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    e996:	f1a1 011e 	sub.w	r1, r1, #30
    e99a:	290c      	cmp	r1, #12
    e99c:	d219      	bcs.n	e9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e99e:	e8df f001 	tbb	[pc, r1]
    e9a2:	1818      	.short	0x1818
    e9a4:	18181818 	.word	0x18181818
    e9a8:	18181818 	.word	0x18181818
    e9ac:	0d18      	.short	0x0d18
    e9ae:	393a      	subs	r1, #58	; 0x3a
    e9b0:	2904      	cmp	r1, #4
    e9b2:	d20e      	bcs.n	e9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e9b4:	e8df f001 	tbb	[pc, r1]
    e9b8:	020d020d 	.word	0x020d020d
    e9bc:	8820      	ldrh	r0, [r4, #0]
    e9be:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e9c2:	d206      	bcs.n	e9d2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e9c4:	2701      	movs	r7, #1
    e9c6:	4669      	mov	r1, sp
    e9c8:	f7fe ffc9 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9cc:	b118      	cbz	r0, e9d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e9ce:	2002      	movs	r0, #2
    e9d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e9d2:	2012      	movs	r0, #18
    e9d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e9d6:	9d01      	ldr	r5, [sp, #4]
    e9d8:	4668      	mov	r0, sp
    e9da:	462e      	mov	r6, r5
    e9dc:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    e9e0:	f206 163d 	addw	r6, r6, #317	; 0x13d
    e9e4:	f000 fd5e 	bl	f4a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    e9e8:	b138      	cbz	r0, e9fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    e9ea:	7828      	ldrb	r0, [r5, #0]
    e9ec:	f88d 0008 	strb.w	r0, [sp, #8]
    e9f0:	9802      	ldr	r0, [sp, #8]
    e9f2:	9002      	str	r0, [sp, #8]
    e9f4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e9f8:	b108      	cbz	r0, e9fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    e9fa:	200c      	movs	r0, #12
    e9fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e9fe:	702f      	strb	r7, [r5, #0]
    ea00:	78a0      	ldrb	r0, [r4, #2]
    ea02:	7030      	strb	r0, [r6, #0]
    ea04:	2000      	movs	r0, #0
    ea06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ea08 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ea08:	b510      	push	{r4, lr}
    ea0a:	4604      	mov	r4, r0
    ea0c:	7800      	ldrb	r0, [r0, #0]
    ea0e:	b118      	cbz	r0, ea18 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ea10:	2801      	cmp	r0, #1
    ea12:	d001      	beq.n	ea18 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ea14:	2012      	movs	r0, #18
    ea16:	bd10      	pop	{r4, pc}
    ea18:	f000 fcf8 	bl	f40c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ea1c:	b120      	cbz	r0, ea28 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ea1e:	f7f6 fe41 	bl	56a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ea22:	b108      	cbz	r0, ea28 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ea24:	200c      	movs	r0, #12
    ea26:	bd10      	pop	{r4, pc}
    ea28:	7820      	ldrb	r0, [r4, #0]
    ea2a:	f7ff ff95 	bl	e958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ea2e:	1de2      	adds	r2, r4, #7
    ea30:	f104 0317 	add.w	r3, r4, #23
    ea34:	1c61      	adds	r1, r4, #1
    ea36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea3a:	f7f6 be65 	b.w	5708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000ea3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ea3e:	b510      	push	{r4, lr}
    ea40:	4604      	mov	r4, r0
    ea42:	f000 fde6 	bl	f612 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ea46:	b108      	cbz	r0, ea4c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ea48:	200c      	movs	r0, #12
    ea4a:	bd10      	pop	{r4, pc}
    ea4c:	7820      	ldrb	r0, [r4, #0]
    ea4e:	b118      	cbz	r0, ea58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ea50:	2801      	cmp	r0, #1
    ea52:	d001      	beq.n	ea58 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ea54:	2012      	movs	r0, #18
    ea56:	bd10      	pop	{r4, pc}
    ea58:	f7ff ff7e 	bl	e958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ea5c:	1c61      	adds	r1, r4, #1
    ea5e:	f7f6 fef7 	bl	5850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ea62:	b108      	cbz	r0, ea68 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    ea64:	2000      	movs	r0, #0
    ea66:	bd10      	pop	{r4, pc}
    ea68:	2007      	movs	r0, #7
    ea6a:	bd10      	pop	{r4, pc}

0000ea6c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ea6c:	b510      	push	{r4, lr}
    ea6e:	f000 fccd 	bl	f40c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ea72:	b120      	cbz	r0, ea7e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ea74:	f7f6 fe16 	bl	56a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ea78:	b108      	cbz	r0, ea7e <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ea7a:	200c      	movs	r0, #12
    ea7c:	bd10      	pop	{r4, pc}
    ea7e:	f7f6 fe89 	bl	5794 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ea82:	2000      	movs	r0, #0
    ea84:	bd10      	pop	{r4, pc}

0000ea86 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ea86:	b510      	push	{r4, lr}
    ea88:	f000 fdc3 	bl	f612 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ea8c:	b108      	cbz	r0, ea92 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ea8e:	200c      	movs	r0, #12
    ea90:	bd10      	pop	{r4, pc}
    ea92:	f7f6 ff05 	bl	58a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ea96:	2000      	movs	r0, #0
    ea98:	bd10      	pop	{r4, pc}

0000ea9a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    ea9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea9c:	4605      	mov	r5, r0
    ea9e:	f000 fad2 	bl	f046 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    eaa2:	2800      	cmp	r0, #0
    eaa4:	d112      	bne.n	eacc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    eaa6:	8828      	ldrh	r0, [r5, #0]
    eaa8:	2100      	movs	r1, #0
    eaaa:	f7fe fdda 	bl	d662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eaae:	0004      	movs	r4, r0
    eab0:	d00d      	beq.n	eace <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    eab2:	f000 fcfa 	bl	f4aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    eab6:	b150      	cbz	r0, eace <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    eab8:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    eabc:	f88d 0000 	strb.w	r0, [sp]
    eac0:	9800      	ldr	r0, [sp, #0]
    eac2:	9000      	str	r0, [sp, #0]
    eac4:	f89d 0000 	ldrb.w	r0, [sp]
    eac8:	b118      	cbz	r0, ead2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    eaca:	203a      	movs	r0, #58	; 0x3a
    eacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eace:	2002      	movs	r0, #2
    ead0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ead2:	88a8      	ldrh	r0, [r5, #4]
    ead4:	f7fe ff4f 	bl	d976 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ead8:	4606      	mov	r6, r0
    eada:	4601      	mov	r1, r0
    eadc:	2008      	movs	r0, #8
    eade:	f7ff f8e5 	bl	dcac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    eae2:	4601      	mov	r1, r0
    eae4:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    eae8:	4281      	cmp	r1, r0
    eaea:	d301      	bcc.n	eaf0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    eaec:	42b0      	cmp	r0, r6
    eaee:	d301      	bcc.n	eaf4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    eaf0:	2012      	movs	r0, #18
    eaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eaf4:	4631      	mov	r1, r6
    eaf6:	2005      	movs	r0, #5
    eaf8:	f7ff f8d8 	bl	dcac <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    eafc:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    eb00:	2000      	movs	r0, #0
    eb02:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    eb06:	88e8      	ldrh	r0, [r5, #6]
    eb08:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    eb0c:	8928      	ldrh	r0, [r5, #8]
    eb0e:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    eb12:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    eb16:	2001      	movs	r0, #1
    eb18:	7020      	strb	r0, [r4, #0]
    eb1a:	2000      	movs	r0, #0
    eb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eb1e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    eb1e:	b510      	push	{r4, lr}
    eb20:	460b      	mov	r3, r1
    eb22:	2201      	movs	r2, #1
    eb24:	f100 0110 	add.w	r1, r0, #16
    eb28:	f7fe fec4 	bl	d8b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    eb2c:	2000      	movs	r0, #0
    eb2e:	bd10      	pop	{r4, pc}

0000eb30 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    eb30:	b510      	push	{r4, lr}
    eb32:	2108      	movs	r1, #8
    eb34:	f7f5 f99a 	bl	3e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    eb38:	2000      	movs	r0, #0
    eb3a:	bd10      	pop	{r4, pc}

0000eb3c <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    eb3c:	b510      	push	{r4, lr}
    eb3e:	4604      	mov	r4, r0
    eb40:	f000 fcaa 	bl	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    eb44:	b140      	cbz	r0, eb58 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    eb46:	20fb      	movs	r0, #251	; 0xfb
    eb48:	8020      	strh	r0, [r4, #0]
    eb4a:	f640 0148 	movw	r1, #2120	; 0x848
    eb4e:	8061      	strh	r1, [r4, #2]
    eb50:	80a0      	strh	r0, [r4, #4]
    eb52:	80e1      	strh	r1, [r4, #6]
    eb54:	2000      	movs	r0, #0
    eb56:	bd10      	pop	{r4, pc}
    eb58:	2001      	movs	r0, #1
    eb5a:	bd10      	pop	{r4, pc}

0000eb5c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    eb5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    eb5e:	460d      	mov	r5, r1
    eb60:	4606      	mov	r6, r0
    eb62:	f7fc fa2f 	bl	afc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eb66:	f3c0 2000 	ubfx	r0, r0, #8, #1
    eb6a:	b300      	cbz	r0, ebae <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    eb6c:	8830      	ldrh	r0, [r6, #0]
    eb6e:	4669      	mov	r1, sp
    eb70:	f7fe fef5 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eb74:	2800      	cmp	r0, #0
    eb76:	d119      	bne.n	ebac <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    eb78:	9c01      	ldr	r4, [sp, #4]
    eb7a:	2700      	movs	r7, #0
    eb7c:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    eb80:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    eb84:	f000 fa94 	bl	f0b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    eb88:	70a8      	strb	r0, [r5, #2]
    eb8a:	7860      	ldrb	r0, [r4, #1]
    eb8c:	f000 fa90 	bl	f0b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    eb90:	70e8      	strb	r0, [r5, #3]
    eb92:	78a0      	ldrb	r0, [r4, #2]
    eb94:	f88d 0008 	strb.w	r0, [sp, #8]
    eb98:	9802      	ldr	r0, [sp, #8]
    eb9a:	9002      	str	r0, [sp, #8]
    eb9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eba0:	3c6a      	subs	r4, #106	; 0x6a
    eba2:	2800      	cmp	r0, #0
    eba4:	d1ea      	bne.n	eb7c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    eba6:	8830      	ldrh	r0, [r6, #0]
    eba8:	8028      	strh	r0, [r5, #0]
    ebaa:	2000      	movs	r0, #0
    ebac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ebae:	2001      	movs	r0, #1
    ebb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ebb2 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    ebb2:	2108      	movs	r1, #8
    ebb4:	7001      	strb	r1, [r0, #0]
    ebb6:	2000      	movs	r0, #0
    ebb8:	4770      	bx	lr

0000ebba <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    ebba:	b510      	push	{r4, lr}
    ebbc:	4604      	mov	r4, r0
    ebbe:	20d8      	movs	r0, #216	; 0xd8
    ebc0:	7020      	strb	r0, [r4, #0]
    ebc2:	f000 fc4a 	bl	f45a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    ebc6:	7060      	strb	r0, [r4, #1]
    ebc8:	2000      	movs	r0, #0
    ebca:	bd10      	pop	{r4, pc}

0000ebcc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ebcc:	2108      	movs	r1, #8
    ebce:	7001      	strb	r1, [r0, #0]
    ebd0:	2000      	movs	r0, #0
    ebd2:	4770      	bx	lr

0000ebd4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ebd4:	b510      	push	{r4, lr}
    ebd6:	4604      	mov	r4, r0
    ebd8:	7800      	ldrb	r0, [r0, #0]
    ebda:	b108      	cbz	r0, ebe0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ebdc:	2801      	cmp	r0, #1
    ebde:	d110      	bne.n	ec02 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ebe0:	f000 fc14 	bl	f40c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ebe4:	b120      	cbz	r0, ebf0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ebe6:	f7f6 fd5d 	bl	56a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ebea:	b108      	cbz	r0, ebf0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ebec:	200c      	movs	r0, #12
    ebee:	bd10      	pop	{r4, pc}
    ebf0:	7820      	ldrb	r0, [r4, #0]
    ebf2:	f7ff feb1 	bl	e958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ebf6:	1c61      	adds	r1, r4, #1
    ebf8:	f7fe fe42 	bl	d880 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    ebfc:	b108      	cbz	r0, ec02 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ebfe:	2000      	movs	r0, #0
    ec00:	bd10      	pop	{r4, pc}
    ec02:	2012      	movs	r0, #18
    ec04:	bd10      	pop	{r4, pc}

0000ec06 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ec06:	b510      	push	{r4, lr}
    ec08:	4604      	mov	r4, r0
    ec0a:	f000 fd02 	bl	f612 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ec0e:	b108      	cbz	r0, ec14 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ec10:	200c      	movs	r0, #12
    ec12:	bd10      	pop	{r4, pc}
    ec14:	7820      	ldrb	r0, [r4, #0]
    ec16:	b108      	cbz	r0, ec1c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ec18:	2801      	cmp	r0, #1
    ec1a:	d107      	bne.n	ec2c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ec1c:	f7ff fe9c 	bl	e958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ec20:	1c61      	adds	r1, r4, #1
    ec22:	f7fe fe3c 	bl	d89e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ec26:	b108      	cbz	r0, ec2c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ec28:	2000      	movs	r0, #0
    ec2a:	bd10      	pop	{r4, pc}
    ec2c:	2012      	movs	r0, #18
    ec2e:	bd10      	pop	{r4, pc}

0000ec30 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ec30:	b510      	push	{r4, lr}
    ec32:	4604      	mov	r4, r0
    ec34:	f000 fbea 	bl	f40c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ec38:	b108      	cbz	r0, ec3e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ec3a:	200c      	movs	r0, #12
    ec3c:	bd10      	pop	{r4, pc}
    ec3e:	7820      	ldrb	r0, [r4, #0]
    ec40:	f000 0001 	and.w	r0, r0, #1
    ec44:	f7f6 fd28 	bl	5698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ec48:	2000      	movs	r0, #0
    ec4a:	bd10      	pop	{r4, pc}

0000ec4c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ec4c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ec4e:	460d      	mov	r5, r1
    ec50:	4604      	mov	r4, r0
    ec52:	f000 fc21 	bl	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ec56:	b130      	cbz	r0, ec66 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ec58:	88a2      	ldrh	r2, [r4, #4]
    ec5a:	f244 2090 	movw	r0, #17040	; 0x4290
    ec5e:	4282      	cmp	r2, r0
    ec60:	d903      	bls.n	ec6a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ec62:	2012      	movs	r0, #18
    ec64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec66:	2001      	movs	r0, #1
    ec68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ec6a:	f640 0048 	movw	r0, #2120	; 0x848
    ec6e:	4282      	cmp	r2, r0
    ec70:	d300      	bcc.n	ec74 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ec72:	4602      	mov	r2, r0
    ec74:	8820      	ldrh	r0, [r4, #0]
    ec76:	f8ad 0000 	strh.w	r0, [sp]
    ec7a:	8860      	ldrh	r0, [r4, #2]
    ec7c:	f8ad 0002 	strh.w	r0, [sp, #2]
    ec80:	f8ad 2004 	strh.w	r2, [sp, #4]
    ec84:	8860      	ldrh	r0, [r4, #2]
    ec86:	f8ad 0006 	strh.w	r0, [sp, #6]
    ec8a:	f8ad 2008 	strh.w	r2, [sp, #8]
    ec8e:	8820      	ldrh	r0, [r4, #0]
    ec90:	8028      	strh	r0, [r5, #0]
    ec92:	4668      	mov	r0, sp
    ec94:	f000 fc28 	bl	f4e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ec98:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ec9a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    ec9a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ec9c:	4604      	mov	r4, r0
    ec9e:	f7fe fe2f 	bl	d900 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    eca2:	b160      	cbz	r0, ecbe <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    eca4:	4620      	mov	r0, r4
    eca6:	f7f6 ffbd 	bl	5c24 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    ecaa:	4669      	mov	r1, sp
    ecac:	2000      	movs	r0, #0
    ecae:	f7fe fce1 	bl	d674 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ecb2:	b150      	cbz	r0, ecca <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    ecb4:	f640 71f7 	movw	r1, #4087	; 0xff7
    ecb8:	2039      	movs	r0, #57	; 0x39
    ecba:	f7f5 f82d 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecbe:	2012      	movs	r0, #18
    ecc0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ecc2:	9802      	ldr	r0, [sp, #8]
    ecc4:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    ecc8:	e000      	b.n	eccc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    ecca:	2401      	movs	r4, #1
    eccc:	4668      	mov	r0, sp
    ecce:	f7f5 fa53 	bl	4178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ecd2:	2800      	cmp	r0, #0
    ecd4:	d0f5      	beq.n	ecc2 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    ecd6:	2000      	movs	r0, #0
    ecd8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ecda <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    ecda:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ecdc:	4604      	mov	r4, r0
    ecde:	f7fc f971 	bl	afc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ece2:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ece6:	b1b0      	cbz	r0, ed16 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    ece8:	f10d 0007 	add.w	r0, sp, #7
    ecec:	9000      	str	r0, [sp, #0]
    ecee:	7922      	ldrb	r2, [r4, #4]
    ecf0:	78e1      	ldrb	r1, [r4, #3]
    ecf2:	78a0      	ldrb	r0, [r4, #2]
    ecf4:	f10d 0306 	add.w	r3, sp, #6
    ecf8:	f000 fc74 	bl	f5e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    ecfc:	2800      	cmp	r0, #0
    ecfe:	d109      	bne.n	ed14 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    ed00:	8820      	ldrh	r0, [r4, #0]
    ed02:	f8ad 0004 	strh.w	r0, [sp, #4]
    ed06:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ed0a:	f8ad 0008 	strh.w	r0, [sp, #8]
    ed0e:	a801      	add	r0, sp, #4
    ed10:	f000 f8f8 	bl	ef04 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ed14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ed16:	2001      	movs	r0, #1
    ed18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ed1a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    ed1a:	b510      	push	{r4, lr}
    ed1c:	4604      	mov	r4, r0
    ed1e:	f000 fb75 	bl	f40c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ed22:	b120      	cbz	r0, ed2e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ed24:	f7f6 fcbe 	bl	56a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ed28:	b108      	cbz	r0, ed2e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ed2a:	200c      	movs	r0, #12
    ed2c:	bd10      	pop	{r4, pc}
    ed2e:	7820      	ldrb	r0, [r4, #0]
    ed30:	f7ff fe12 	bl	e958 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ed34:	79e2      	ldrb	r2, [r4, #7]
    ed36:	1c61      	adds	r1, r4, #1
    ed38:	f7f6 fc4e 	bl	55d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ed3c:	b108      	cbz	r0, ed42 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ed3e:	2000      	movs	r0, #0
    ed40:	bd10      	pop	{r4, pc}
    ed42:	2002      	movs	r0, #2
    ed44:	bd10      	pop	{r4, pc}

0000ed46 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ed46:	b510      	push	{r4, lr}
    ed48:	4604      	mov	r4, r0
    ed4a:	2001      	movs	r0, #1
    ed4c:	f000 f9bb 	bl	f0c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    ed50:	b128      	cbz	r0, ed5e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ed52:	4621      	mov	r1, r4
    ed54:	2001      	movs	r0, #1
    ed56:	f7f5 fe3d 	bl	49d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ed5a:	2000      	movs	r0, #0
    ed5c:	bd10      	pop	{r4, pc}
    ed5e:	200c      	movs	r0, #12
    ed60:	bd10      	pop	{r4, pc}

0000ed62 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ed62:	b510      	push	{r4, lr}
    ed64:	8800      	ldrh	r0, [r0, #0]
    ed66:	f7f6 fd2b 	bl	57c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ed6a:	b108      	cbz	r0, ed70 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ed6c:	2000      	movs	r0, #0
    ed6e:	bd10      	pop	{r4, pc}
    ed70:	2030      	movs	r0, #48	; 0x30
    ed72:	bd10      	pop	{r4, pc}

0000ed74 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    ed74:	b51c      	push	{r2, r3, r4, lr}
    ed76:	7801      	ldrb	r1, [r0, #0]
    ed78:	f88d 1000 	strb.w	r1, [sp]
    ed7c:	7840      	ldrb	r0, [r0, #1]
    ed7e:	f88d 0001 	strb.w	r0, [sp, #1]
    ed82:	2000      	movs	r0, #0
    ed84:	f8ad 0002 	strh.w	r0, [sp, #2]
    ed88:	f8ad 0004 	strh.w	r0, [sp, #4]
    ed8c:	4601      	mov	r1, r0
    ed8e:	4668      	mov	r0, sp
    ed90:	f000 f9e4 	bl	f15c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    ed94:	2800      	cmp	r0, #0
    ed96:	d102      	bne.n	ed9e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    ed98:	4668      	mov	r0, sp
    ed9a:	f000 f9c3 	bl	f124 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    ed9e:	bd1c      	pop	{r2, r3, r4, pc}

0000eda0 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    eda0:	b500      	push	{lr}
    eda2:	b087      	sub	sp, #28
    eda4:	7941      	ldrb	r1, [r0, #5]
    eda6:	f88d 1000 	strb.w	r1, [sp]
    edaa:	7981      	ldrb	r1, [r0, #6]
    edac:	f88d 1001 	strb.w	r1, [sp, #1]
    edb0:	2101      	movs	r1, #1
    edb2:	f88d 1002 	strb.w	r1, [sp, #2]
    edb6:	7801      	ldrb	r1, [r0, #0]
    edb8:	f88d 1003 	strb.w	r1, [sp, #3]
    edbc:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    edc0:	f240 2271 	movw	r2, #625	; 0x271
    edc4:	4351      	muls	r1, r2
    edc6:	9102      	str	r1, [sp, #8]
    edc8:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    edcc:	4350      	muls	r0, r2
    edce:	9004      	str	r0, [sp, #16]
    edd0:	2007      	movs	r0, #7
    edd2:	f88d 0018 	strb.w	r0, [sp, #24]
    edd6:	2000      	movs	r0, #0
    edd8:	f88d 0019 	strb.w	r0, [sp, #25]
    eddc:	9804      	ldr	r0, [sp, #16]
    edde:	f7fb fff7 	bl	add0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    ede2:	b140      	cbz	r0, edf6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    ede4:	9802      	ldr	r0, [sp, #8]
    ede6:	f7fb ffe7 	bl	adb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    edea:	b120      	cbz	r0, edf6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    edec:	4668      	mov	r0, sp
    edee:	f7fb fe61 	bl	aab4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    edf2:	b007      	add	sp, #28
    edf4:	bd00      	pop	{pc}
    edf6:	2030      	movs	r0, #48	; 0x30
    edf8:	e7fb      	b.n	edf2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000edfa <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    edfa:	b570      	push	{r4, r5, r6, lr}
    edfc:	4605      	mov	r5, r0
    edfe:	8800      	ldrh	r0, [r0, #0]
    ee00:	2100      	movs	r1, #0
    ee02:	f7fe fc2e 	bl	d662 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee06:	0004      	movs	r4, r0
    ee08:	d007      	beq.n	ee1a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    ee0a:	f000 fb4e 	bl	f4aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    ee0e:	b120      	cbz	r0, ee1a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    ee10:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    ee14:	b118      	cbz	r0, ee1e <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    ee16:	203a      	movs	r0, #58	; 0x3a
    ee18:	bd70      	pop	{r4, r5, r6, pc}
    ee1a:	2002      	movs	r0, #2
    ee1c:	bd70      	pop	{r4, r5, r6, pc}
    ee1e:	2100      	movs	r1, #0
    ee20:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    ee24:	f7ff fd8e 	bl	e944 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ee28:	2801      	cmp	r0, #1
    ee2a:	d001      	beq.n	ee30 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    ee2c:	201a      	movs	r0, #26
    ee2e:	bd70      	pop	{r4, r5, r6, pc}
    ee30:	f8d5 1002 	ldr.w	r1, [r5, #2]
    ee34:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    ee38:	f8d5 1006 	ldr.w	r1, [r5, #6]
    ee3c:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    ee40:	8969      	ldrh	r1, [r5, #10]
    ee42:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    ee46:	2210      	movs	r2, #16
    ee48:	f105 010c 	add.w	r1, r5, #12
    ee4c:	f204 1065 	addw	r0, r4, #357	; 0x165
    ee50:	f7fd fb6a 	bl	c528 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ee54:	2001      	movs	r0, #1
    ee56:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    ee5a:	2000      	movs	r0, #0
    ee5c:	bd70      	pop	{r4, r5, r6, pc}

0000ee5e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ee5e:	b51c      	push	{r2, r3, r4, lr}
    ee60:	4604      	mov	r4, r0
    ee62:	f000 fb19 	bl	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    ee66:	b178      	cbz	r0, ee88 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    ee68:	8820      	ldrh	r0, [r4, #0]
    ee6a:	f8ad 0000 	strh.w	r0, [sp]
    ee6e:	8860      	ldrh	r0, [r4, #2]
    ee70:	f8ad 0002 	strh.w	r0, [sp, #2]
    ee74:	8820      	ldrh	r0, [r4, #0]
    ee76:	f8ad 0004 	strh.w	r0, [sp, #4]
    ee7a:	8860      	ldrh	r0, [r4, #2]
    ee7c:	f8ad 0006 	strh.w	r0, [sp, #6]
    ee80:	4668      	mov	r0, sp
    ee82:	f7fb ffdb 	bl	ae3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    ee86:	bd1c      	pop	{r2, r3, r4, pc}
    ee88:	2001      	movs	r0, #1
    ee8a:	bd1c      	pop	{r2, r3, r4, pc}

0000ee8c <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ee8c:	b510      	push	{r4, lr}
    ee8e:	f7f5 fdc5 	bl	4a1c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    ee92:	2000      	movs	r0, #0
    ee94:	bd10      	pop	{r4, pc}

0000ee96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ee96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ee98:	460c      	mov	r4, r1
    ee9a:	4605      	mov	r5, r0
    ee9c:	f000 fafc 	bl	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    eea0:	b160      	cbz	r0, eebc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    eea2:	4669      	mov	r1, sp
    eea4:	4628      	mov	r0, r5
    eea6:	f7fe fd5a 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eeaa:	2800      	cmp	r0, #0
    eeac:	d105      	bne.n	eeba <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    eeae:	2101      	movs	r1, #1
    eeb0:	4622      	mov	r2, r4
    eeb2:	9801      	ldr	r0, [sp, #4]
    eeb4:	f000 fa74 	bl	f3a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    eeb8:	2000      	movs	r0, #0
    eeba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eebc:	2001      	movs	r0, #1
    eebe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eec0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    eec0:	b510      	push	{r4, lr}
    eec2:	4604      	mov	r4, r0
    eec4:	2000      	movs	r0, #0
    eec6:	f000 f8fe 	bl	f0c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    eeca:	b128      	cbz	r0, eed8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    eecc:	4621      	mov	r1, r4
    eece:	2000      	movs	r0, #0
    eed0:	f7f5 fd80 	bl	49d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    eed4:	2000      	movs	r0, #0
    eed6:	bd10      	pop	{r4, pc}
    eed8:	200c      	movs	r0, #12
    eeda:	bd10      	pop	{r4, pc}

0000eedc <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    eedc:	b510      	push	{r4, lr}
    eede:	7800      	ldrb	r0, [r0, #0]
    eee0:	f000 0001 	and.w	r0, r0, #1
    eee4:	f7f8 fd00 	bl	78e8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
    eee8:	2000      	movs	r0, #0
    eeea:	bd10      	pop	{r4, pc}

0000eeec <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    eeec:	b510      	push	{r4, lr}
    eeee:	4604      	mov	r4, r0
    eef0:	f000 fad2 	bl	f498 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    eef4:	b120      	cbz	r0, ef00 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    eef6:	4620      	mov	r0, r4
    eef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eefc:	f000 baf4 	b.w	f4e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ef00:	2001      	movs	r0, #1
    ef02:	bd10      	pop	{r4, pc}

0000ef04 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ef04:	b510      	push	{r4, lr}
    ef06:	4604      	mov	r4, r0
    ef08:	8880      	ldrh	r0, [r0, #4]
    ef0a:	b128      	cbz	r0, ef18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ef0c:	2801      	cmp	r0, #1
    ef0e:	d003      	beq.n	ef18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ef10:	2802      	cmp	r0, #2
    ef12:	d001      	beq.n	ef18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ef14:	2012      	movs	r0, #18
    ef16:	bd10      	pop	{r4, pc}
    ef18:	78e0      	ldrb	r0, [r4, #3]
    ef1a:	f000 f8e0 	bl	f0de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    ef1e:	b148      	cbz	r0, ef34 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ef20:	78a0      	ldrb	r0, [r4, #2]
    ef22:	f000 f8dc 	bl	f0de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    ef26:	b128      	cbz	r0, ef34 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ef28:	4620      	mov	r0, r4
    ef2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef2e:	2101      	movs	r1, #1
    ef30:	f7fb be16 	b.w	ab60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ef34:	2011      	movs	r0, #17
    ef36:	bd10      	pop	{r4, pc}

0000ef38 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ef38:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef3a:	460c      	mov	r4, r1
    ef3c:	4605      	mov	r5, r0
    ef3e:	8800      	ldrh	r0, [r0, #0]
    ef40:	4669      	mov	r1, sp
    ef42:	f7fe fd0c 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef46:	2800      	cmp	r0, #0
    ef48:	d106      	bne.n	ef58 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    ef4a:	9801      	ldr	r0, [sp, #4]
    ef4c:	8829      	ldrh	r1, [r5, #0]
    ef4e:	8021      	strh	r1, [r4, #0]
    ef50:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    ef54:	8060      	strh	r0, [r4, #2]
    ef56:	2000      	movs	r0, #0
    ef58:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ef5a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ef5a:	b510      	push	{r4, lr}
    ef5c:	4604      	mov	r4, r0
    ef5e:	4601      	mov	r1, r0
    ef60:	2000      	movs	r0, #0
    ef62:	f7f5 fd1f 	bl	49a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ef66:	b910      	cbnz	r0, ef6e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ef68:	2000      	movs	r0, #0
    ef6a:	6020      	str	r0, [r4, #0]
    ef6c:	80a0      	strh	r0, [r4, #4]
    ef6e:	2000      	movs	r0, #0
    ef70:	bd10      	pop	{r4, pc}

0000ef72 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ef72:	b51c      	push	{r2, r3, r4, lr}
    ef74:	8800      	ldrh	r0, [r0, #0]
    ef76:	4669      	mov	r1, sp
    ef78:	f7fe fcf1 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ef7c:	b968      	cbnz	r0, ef9a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef7e:	4668      	mov	r0, sp
    ef80:	f000 fa90 	bl	f4a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    ef84:	b148      	cbz	r0, ef9a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ef86:	9801      	ldr	r0, [sp, #4]
    ef88:	2201      	movs	r2, #1
    ef8a:	4601      	mov	r1, r0
    ef8c:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    ef90:	3078      	adds	r0, #120	; 0x78
    ef92:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    ef96:	b92b      	cbnz	r3, efa4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ef98:	e001      	b.n	ef9e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    ef9a:	2002      	movs	r0, #2
    ef9c:	bd1c      	pop	{r2, r3, r4, pc}
    ef9e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    efa2:	b10b      	cbz	r3, efa8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    efa4:	203a      	movs	r0, #58	; 0x3a
    efa6:	bd1c      	pop	{r2, r3, r4, pc}
    efa8:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    efac:	079b      	lsls	r3, r3, #30
    efae:	d100      	bne.n	efb2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    efb0:	700a      	strb	r2, [r1, #0]
    efb2:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    efb6:	2000      	movs	r0, #0
    efb8:	bd1c      	pop	{r2, r3, r4, pc}

0000efba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    efba:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    efbc:	460c      	mov	r4, r1
    efbe:	4605      	mov	r5, r0
    efc0:	8800      	ldrh	r0, [r0, #0]
    efc2:	4669      	mov	r1, sp
    efc4:	f7fe fccb 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    efc8:	b108      	cbz	r0, efce <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    efca:	2002      	movs	r0, #2
    efcc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    efce:	78a8      	ldrb	r0, [r5, #2]
    efd0:	b130      	cbz	r0, efe0 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    efd2:	f000 fa42 	bl	f45a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    efd6:	70a0      	strb	r0, [r4, #2]
    efd8:	8828      	ldrh	r0, [r5, #0]
    efda:	8020      	strh	r0, [r4, #0]
    efdc:	2000      	movs	r0, #0
    efde:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    efe0:	9801      	ldr	r0, [sp, #4]
    efe2:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    efe6:	e7f6      	b.n	efd6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000efe8 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    efe8:	b510      	push	{r4, lr}
    efea:	f7fb ff63 	bl	aeb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    efee:	2000      	movs	r0, #0
    eff0:	bd10      	pop	{r4, pc}

0000eff2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    eff2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    eff6:	4604      	mov	r4, r0
    eff8:	8840      	ldrh	r0, [r0, #2]
    effa:	460d      	mov	r5, r1
    effc:	b1b8      	cbz	r0, f02e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    effe:	8820      	ldrh	r0, [r4, #0]
    f000:	4669      	mov	r1, sp
    f002:	f7fe fcac 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f006:	2800      	cmp	r0, #0
    f008:	d10f      	bne.n	f02a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f00a:	8820      	ldrh	r0, [r4, #0]
    f00c:	8028      	strh	r0, [r5, #0]
    f00e:	9e01      	ldr	r6, [sp, #4]
    f010:	f106 050c 	add.w	r5, r6, #12
    f014:	3678      	adds	r6, #120	; 0x78
    f016:	682f      	ldr	r7, [r5, #0]
    f018:	8862      	ldrh	r2, [r4, #2]
    f01a:	4639      	mov	r1, r7
    f01c:	4630      	mov	r0, r6
    f01e:	f7fe fe2e 	bl	dc7e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f022:	6828      	ldr	r0, [r5, #0]
    f024:	42b8      	cmp	r0, r7
    f026:	d1f6      	bne.n	f016 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f028:	2000      	movs	r0, #0
    f02a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f02e:	2012      	movs	r0, #18
    f030:	e7fb      	b.n	f02a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f032 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f032:	f7fb bdfb 	b.w	ac2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f036 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f036:	b510      	push	{r4, lr}
    f038:	2008      	movs	r0, #8
    f03a:	f7fb ffb9 	bl	afb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f042:	f7f9 bd51 	b.w	8ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000f046 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    f046:	b510      	push	{r4, lr}
    f048:	4604      	mov	r4, r0
    f04a:	2000      	movs	r0, #0
    f04c:	8822      	ldrh	r2, [r4, #0]
    f04e:	b086      	sub	sp, #24
    f050:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    f054:	39ff      	subs	r1, #255	; 0xff
    f056:	d008      	beq.n	f06a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    f058:	a903      	add	r1, sp, #12
    f05a:	4610      	mov	r0, r2
    f05c:	f7fe fc7f 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f060:	b110      	cbz	r0, f068 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    f062:	2002      	movs	r0, #2
    f064:	b006      	add	sp, #24
    f066:	bd10      	pop	{r4, pc}
    f068:	9804      	ldr	r0, [sp, #16]
    f06a:	8921      	ldrh	r1, [r4, #8]
    f06c:	89a3      	ldrh	r3, [r4, #12]
    f06e:	8962      	ldrh	r2, [r4, #10]
    f070:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f074:	88e3      	ldrh	r3, [r4, #6]
    f076:	88a2      	ldrh	r2, [r4, #4]
    f078:	8861      	ldrh	r1, [r4, #2]
    f07a:	f000 f966 	bl	f34a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f07e:	b108      	cbz	r0, f084 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    f080:	2000      	movs	r0, #0
    f082:	e7ef      	b.n	f064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f084:	2030      	movs	r0, #48	; 0x30
    f086:	e7ed      	b.n	f064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f088:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f08c:	4288      	cmp	r0, r1
    f08e:	d303      	bcc.n	f098 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    f090:	f640 0148 	movw	r1, #2120	; 0x848
    f094:	4288      	cmp	r0, r1
    f096:	d300      	bcc.n	f09a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    f098:	4608      	mov	r0, r1
    f09a:	4770      	bx	lr
    f09c:	07c1      	lsls	r1, r0, #31
    f09e:	d001      	beq.n	f0a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    f0a0:	2001      	movs	r0, #1
    f0a2:	4770      	bx	lr
    f0a4:	0780      	lsls	r0, r0, #30
    f0a6:	d501      	bpl.n	f0ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    f0a8:	2002      	movs	r0, #2
    f0aa:	4770      	bx	lr
    f0ac:	2000      	movs	r0, #0
    f0ae:	4770      	bx	lr
    f0b0:	b510      	push	{r4, lr}
    f0b2:	2801      	cmp	r0, #1
    f0b4:	d006      	beq.n	f0c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f0b6:	2802      	cmp	r0, #2
    f0b8:	d004      	beq.n	f0c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f0ba:	f240 2163 	movw	r1, #611	; 0x263
    f0be:	2006      	movs	r0, #6
    f0c0:	f7f4 fe2a 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0c4:	bd10      	pop	{r4, pc}
    f0c6:	b510      	push	{r4, lr}
    f0c8:	f000 fa03 	bl	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f0cc:	b128      	cbz	r0, f0da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f0ce:	f7f7 fb95 	bl	67fc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    f0d2:	2801      	cmp	r0, #1
    f0d4:	d001      	beq.n	f0da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f0d6:	2000      	movs	r0, #0
    f0d8:	bd10      	pop	{r4, pc}
    f0da:	2001      	movs	r0, #1
    f0dc:	bd10      	pop	{r4, pc}
    f0de:	b510      	push	{r4, lr}
    f0e0:	0004      	movs	r4, r0
    f0e2:	d005      	beq.n	f0f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f0e4:	f7fb ff74 	bl	afd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f0e8:	4384      	bics	r4, r0
    f0ea:	d001      	beq.n	f0f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f0ec:	2000      	movs	r0, #0
    f0ee:	bd10      	pop	{r4, pc}
    f0f0:	2001      	movs	r0, #1
    f0f2:	bd10      	pop	{r4, pc}
    f0f4:	28fb      	cmp	r0, #251	; 0xfb
    f0f6:	d803      	bhi.n	f100 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
    f0f8:	f640 0048 	movw	r0, #2120	; 0x848
    f0fc:	4281      	cmp	r1, r0
    f0fe:	d901      	bls.n	f104 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
    f100:	2011      	movs	r0, #17
    f102:	4770      	bx	lr
    f104:	2000      	movs	r0, #0
    f106:	4770      	bx	lr
    f108:	381b      	subs	r0, #27
    f10a:	28e1      	cmp	r0, #225	; 0xe1
    f10c:	d206      	bcs.n	f11c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f10e:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f112:	d303      	bcc.n	f11c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f114:	f244 2090 	movw	r0, #17040	; 0x4290
    f118:	4281      	cmp	r1, r0
    f11a:	d901      	bls.n	f120 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
    f11c:	2012      	movs	r0, #18
    f11e:	4770      	bx	lr
    f120:	2000      	movs	r0, #0
    f122:	4770      	bx	lr
    f124:	b510      	push	{r4, lr}
    f126:	4604      	mov	r4, r0
    f128:	7800      	ldrb	r0, [r0, #0]
    f12a:	2801      	cmp	r0, #1
    f12c:	d009      	beq.n	f142 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
    f12e:	f7f8 fc73 	bl	7a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    f132:	2805      	cmp	r0, #5
    f134:	d003      	beq.n	f13e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
    f136:	f7f8 fc39 	bl	79ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    f13a:	2800      	cmp	r0, #0
    f13c:	d000      	beq.n	f140 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
    f13e:	200c      	movs	r0, #12
    f140:	bd10      	pop	{r4, pc}
    f142:	f7f7 fae9 	bl	6718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    f146:	b138      	cbz	r0, f158 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
    f148:	f7f7 f962 	bl	6410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f14c:	88a1      	ldrh	r1, [r4, #4]
    f14e:	8860      	ldrh	r0, [r4, #2]
    f150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f154:	f7f8 bbee 	b.w	7934 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>
    f158:	2012      	movs	r0, #18
    f15a:	bd10      	pop	{r4, pc}
    f15c:	7802      	ldrb	r2, [r0, #0]
    f15e:	2a01      	cmp	r2, #1
    f160:	d001      	beq.n	f166 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
    f162:	b1ba      	cbz	r2, f194 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f164:	e018      	b.n	f198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f166:	7842      	ldrb	r2, [r0, #1]
    f168:	b13a      	cbz	r2, f17a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f16a:	2a01      	cmp	r2, #1
    f16c:	d005      	beq.n	f17a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f16e:	2a02      	cmp	r2, #2
    f170:	d112      	bne.n	f198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f172:	b189      	cbz	r1, f198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f174:	8881      	ldrh	r1, [r0, #4]
    f176:	b179      	cbz	r1, f198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f178:	e000      	b.n	f17c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
    f17a:	b159      	cbz	r1, f194 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f17c:	8841      	ldrh	r1, [r0, #2]
    f17e:	b149      	cbz	r1, f194 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f180:	8880      	ldrh	r0, [r0, #4]
    f182:	b138      	cbz	r0, f194 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f184:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f188:	0049      	lsls	r1, r1, #1
    f18a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f18e:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    f192:	d201      	bcs.n	f198 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f194:	2000      	movs	r0, #0
    f196:	4770      	bx	lr
    f198:	2012      	movs	r0, #18
    f19a:	4770      	bx	lr
    f19c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    f1a0:	7a45      	ldrb	r5, [r0, #9]
    f1a2:	4604      	mov	r4, r0
    f1a4:	0768      	lsls	r0, r5, #29
    f1a6:	d06c      	beq.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f1a8:	08e8      	lsrs	r0, r5, #3
    f1aa:	d16a      	bne.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f1ac:	2d02      	cmp	r5, #2
    f1ae:	d068      	beq.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f1b0:	f7fb ff0e 	bl	afd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f1b4:	ea25 0000 	bic.w	r0, r5, r0
    f1b8:	0740      	lsls	r0, r0, #29
    f1ba:	d102      	bne.n	f1c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
    f1bc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f1c0:	b110      	cbz	r0, f1c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
    f1c2:	2011      	movs	r0, #17
    f1c4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    f1c8:	2d01      	cmp	r5, #1
    f1ca:	d15a      	bne.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f1cc:	27ff      	movs	r7, #255	; 0xff
    f1ce:	2101      	movs	r1, #1
    f1d0:	69a0      	ldr	r0, [r4, #24]
    f1d2:	f7fb fe1d 	bl	ae10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    f1d6:	b3e8      	cbz	r0, f254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f1d8:	46a8      	mov	r8, r5
    f1da:	2600      	movs	r6, #0
    f1dc:	4635      	mov	r5, r6
    f1de:	42bd      	cmp	r5, r7
    f1e0:	d02f      	beq.n	f242 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f1e2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    f1e6:	6988      	ldr	r0, [r1, #24]
    f1e8:	68c9      	ldr	r1, [r1, #12]
    f1ea:	4288      	cmp	r0, r1
    f1ec:	d849      	bhi.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f1ee:	4406      	add	r6, r0
    f1f0:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    f1f4:	4681      	mov	r9, r0
    f1f6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    f1f8:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    f1fc:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    f1fe:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f202:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f204:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    f206:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    f208:	2000      	movs	r0, #0
    f20a:	f000 f89e 	bl	f34a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f20e:	b308      	cbz	r0, f254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f210:	b1bd      	cbz	r5, f242 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f212:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    f216:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    f21a:	4281      	cmp	r1, r0
    f21c:	d131      	bne.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f21e:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    f222:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    f226:	4281      	cmp	r1, r0
    f228:	d12b      	bne.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f22a:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    f22e:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    f232:	4281      	cmp	r1, r0
    f234:	d125      	bne.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f236:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    f23a:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    f23e:	4281      	cmp	r1, r0
    f240:	d11f      	bne.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f242:	1c6d      	adds	r5, r5, #1
    f244:	b2ed      	uxtb	r5, r5
    f246:	4545      	cmp	r5, r8
    f248:	d3c9      	bcc.n	f1de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
    f24a:	68e0      	ldr	r0, [r4, #12]
    f24c:	42b0      	cmp	r0, r6
    f24e:	d318      	bcc.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f250:	7820      	ldrb	r0, [r4, #0]
    f252:	e000      	b.n	f256 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
    f254:	e003      	b.n	f25e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
    f256:	b120      	cbz	r0, f262 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
    f258:	2801      	cmp	r0, #1
    f25a:	d112      	bne.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f25c:	e004      	b.n	f268 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
    f25e:	2030      	movs	r0, #48	; 0x30
    f260:	e7b0      	b.n	f1c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f262:	78a0      	ldrb	r0, [r4, #2]
    f264:	2800      	cmp	r0, #0
    f266:	d1f7      	bne.n	f258 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
    f268:	7860      	ldrb	r0, [r4, #1]
    f26a:	b128      	cbz	r0, f278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f26c:	2801      	cmp	r0, #1
    f26e:	d003      	beq.n	f278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f270:	2802      	cmp	r0, #2
    f272:	d001      	beq.n	f278 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f274:	2803      	cmp	r0, #3
    f276:	d104      	bne.n	f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f278:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f27c:	b108      	cbz	r0, f282 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f27e:	2807      	cmp	r0, #7
    f280:	d901      	bls.n	f286 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    f282:	2012      	movs	r0, #18
    f284:	e79e      	b.n	f1c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f286:	2000      	movs	r0, #0
    f288:	e79c      	b.n	f1c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f28a:	b570      	push	{r4, r5, r6, lr}
    f28c:	4604      	mov	r4, r0
    f28e:	7800      	ldrb	r0, [r0, #0]
    f290:	2500      	movs	r5, #0
    f292:	2801      	cmp	r0, #1
    f294:	d004      	beq.n	f2a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f296:	b118      	cbz	r0, f2a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f298:	2802      	cmp	r0, #2
    f29a:	d001      	beq.n	f2a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f29c:	2803      	cmp	r0, #3
    f29e:	d139      	bne.n	f314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f2a0:	7860      	ldrb	r0, [r4, #1]
    f2a2:	b128      	cbz	r0, f2b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f2a4:	2801      	cmp	r0, #1
    f2a6:	d003      	beq.n	f2b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f2a8:	2802      	cmp	r0, #2
    f2aa:	d001      	beq.n	f2b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f2ac:	2803      	cmp	r0, #3
    f2ae:	d131      	bne.n	f314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f2b0:	7e60      	ldrb	r0, [r4, #25]
    f2b2:	b948      	cbnz	r0, f2c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    f2b4:	78a0      	ldrb	r0, [r4, #2]
    f2b6:	2801      	cmp	r0, #1
    f2b8:	d12c      	bne.n	f314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f2ba:	f7fb fe89 	bl	afd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f2be:	4601      	mov	r1, r0
    f2c0:	78a0      	ldrb	r0, [r4, #2]
    f2c2:	ea30 0101 	bics.w	r1, r0, r1
    f2c6:	d001      	beq.n	f2cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
    f2c8:	2011      	movs	r0, #17
    f2ca:	bd70      	pop	{r4, r5, r6, pc}
    f2cc:	07c0      	lsls	r0, r0, #31
    f2ce:	d006      	beq.n	f2de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
    f2d0:	78e0      	ldrb	r0, [r4, #3]
    f2d2:	2301      	movs	r3, #1
    f2d4:	6922      	ldr	r2, [r4, #16]
    f2d6:	68a1      	ldr	r1, [r4, #8]
    f2d8:	f000 f820 	bl	f31c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f2dc:	4605      	mov	r5, r0
    f2de:	78a0      	ldrb	r0, [r4, #2]
    f2e0:	0780      	lsls	r0, r0, #30
    f2e2:	d506      	bpl.n	f2f2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    f2e4:	78e0      	ldrb	r0, [r4, #3]
    f2e6:	2302      	movs	r3, #2
    f2e8:	6922      	ldr	r2, [r4, #16]
    f2ea:	68a1      	ldr	r1, [r4, #8]
    f2ec:	f000 f816 	bl	f31c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f2f0:	4305      	orrs	r5, r0
    f2f2:	78a0      	ldrb	r0, [r4, #2]
    f2f4:	0740      	lsls	r0, r0, #29
    f2f6:	d506      	bpl.n	f306 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
    f2f8:	78e0      	ldrb	r0, [r4, #3]
    f2fa:	2304      	movs	r3, #4
    f2fc:	6922      	ldr	r2, [r4, #16]
    f2fe:	68a1      	ldr	r1, [r4, #8]
    f300:	f000 f80c 	bl	f31c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f304:	4305      	orrs	r5, r0
    f306:	b10d      	cbz	r5, f30c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
    f308:	4628      	mov	r0, r5
    f30a:	bd70      	pop	{r4, r5, r6, pc}
    f30c:	7e20      	ldrb	r0, [r4, #24]
    f30e:	b108      	cbz	r0, f314 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f310:	2807      	cmp	r0, #7
    f312:	d901      	bls.n	f318 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
    f314:	2012      	movs	r0, #18
    f316:	bd70      	pop	{r4, r5, r6, pc}
    f318:	2000      	movs	r0, #0
    f31a:	bd70      	pop	{r4, r5, r6, pc}
    f31c:	b570      	push	{r4, r5, r6, lr}
    f31e:	4614      	mov	r4, r2
    f320:	460d      	mov	r5, r1
    f322:	b108      	cbz	r0, f328 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
    f324:	2801      	cmp	r0, #1
    f326:	d10a      	bne.n	f33e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
    f328:	4619      	mov	r1, r3
    f32a:	4610      	mov	r0, r2
    f32c:	f7fb fd70 	bl	ae10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
    f330:	b138      	cbz	r0, f342 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f332:	4628      	mov	r0, r5
    f334:	f7fb fd34 	bl	ada0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    f338:	b118      	cbz	r0, f342 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f33a:	42ac      	cmp	r4, r5
    f33c:	d903      	bls.n	f346 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    f33e:	2012      	movs	r0, #18
    f340:	bd70      	pop	{r4, r5, r6, pc}
    f342:	2030      	movs	r0, #48	; 0x30
    f344:	bd70      	pop	{r4, r5, r6, pc}
    f346:	2000      	movs	r0, #0
    f348:	bd70      	pop	{r4, r5, r6, pc}
    f34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f34e:	461d      	mov	r5, r3
    f350:	4610      	mov	r0, r2
    f352:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    f356:	1f8b      	subs	r3, r1, #6
    f358:	f640 427a 	movw	r2, #3194	; 0xc7a
    f35c:	9e08      	ldr	r6, [sp, #32]
    f35e:	4293      	cmp	r3, r2
    f360:	d81c      	bhi.n	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f362:	1f83      	subs	r3, r0, #6
    f364:	4293      	cmp	r3, r2
    f366:	d819      	bhi.n	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f368:	4281      	cmp	r1, r0
    f36a:	d817      	bhi.n	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f36c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f370:	d214      	bcs.n	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f372:	f1a4 010a 	sub.w	r1, r4, #10
    f376:	1f12      	subs	r2, r2, #4
    f378:	4291      	cmp	r1, r2
    f37a:	d80f      	bhi.n	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f37c:	f7fe fafb 	bl	d976 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f380:	1c6d      	adds	r5, r5, #1
    f382:	4368      	muls	r0, r5
    f384:	f240 2171 	movw	r1, #625	; 0x271
    f388:	0040      	lsls	r0, r0, #1
    f38a:	434c      	muls	r4, r1
    f38c:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    f390:	d204      	bcs.n	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f392:	42b7      	cmp	r7, r6
    f394:	d802      	bhi.n	f39c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f396:	2001      	movs	r0, #1
    f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f39c:	2000      	movs	r0, #0
    f39e:	e7fb      	b.n	f398 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
    f3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3a4:	4606      	mov	r6, r0
    f3a6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f3aa:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f3ae:	4615      	mov	r5, r2
    f3b0:	302c      	adds	r0, #44	; 0x2c
    f3b2:	f7f8 fa9f 	bl	78f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
    f3b6:	4680      	mov	r8, r0
    f3b8:	2102      	movs	r1, #2
    f3ba:	f7fe fb6a 	bl	da92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f3be:	4287      	cmp	r7, r0
    f3c0:	d200      	bcs.n	f3c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    f3c2:	4638      	mov	r0, r7
    f3c4:	4607      	mov	r7, r0
    f3c6:	2102      	movs	r1, #2
    f3c8:	4640      	mov	r0, r8
    f3ca:	f7fe fb62 	bl	da92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f3ce:	4284      	cmp	r4, r0
    f3d0:	d200      	bcs.n	f3d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    f3d2:	4620      	mov	r0, r4
    f3d4:	8831      	ldrh	r1, [r6, #0]
    f3d6:	8029      	strh	r1, [r5, #0]
    f3d8:	2f1b      	cmp	r7, #27
    f3da:	d913      	bls.n	f404 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    f3dc:	2ffb      	cmp	r7, #251	; 0xfb
    f3de:	d300      	bcc.n	f3e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f3e0:	27fb      	movs	r7, #251	; 0xfb
    f3e2:	806f      	strh	r7, [r5, #2]
    f3e4:	281b      	cmp	r0, #27
    f3e6:	d90f      	bls.n	f408 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
    f3e8:	28fb      	cmp	r0, #251	; 0xfb
    f3ea:	d300      	bcc.n	f3ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f3ec:	20fb      	movs	r0, #251	; 0xfb
    f3ee:	80e8      	strh	r0, [r5, #6]
    f3f0:	4640      	mov	r0, r8
    f3f2:	f7ff fe49 	bl	f088 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f3f6:	80a8      	strh	r0, [r5, #4]
    f3f8:	4640      	mov	r0, r8
    f3fa:	f7ff fe45 	bl	f088 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f3fe:	8128      	strh	r0, [r5, #8]
    f400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f404:	271b      	movs	r7, #27
    f406:	e7ec      	b.n	f3e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f408:	201b      	movs	r0, #27
    f40a:	e7f0      	b.n	f3ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f40c:	b510      	push	{r4, lr}
    f40e:	f000 f860 	bl	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f412:	2800      	cmp	r0, #0
    f414:	d000      	beq.n	f418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
    f416:	2001      	movs	r0, #1
    f418:	bd10      	pop	{r4, pc}
    f41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f41e:	7890      	ldrb	r0, [r2, #2]
    f420:	9e06      	ldr	r6, [sp, #24]
    f422:	461d      	mov	r5, r3
    f424:	4614      	mov	r4, r2
    f426:	b908      	cbnz	r0, f42c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e6>
    f428:	f7fb fdd2 	bl	afd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f42c:	78e4      	ldrb	r4, [r4, #3]
    f42e:	4607      	mov	r7, r0
    f430:	b914      	cbnz	r4, f438 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f2>
    f432:	f7fb fdcd 	bl	afd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f436:	4604      	mov	r4, r0
    f438:	b16f      	cbz	r7, f456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f43a:	b164      	cbz	r4, f456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f43c:	4638      	mov	r0, r7
    f43e:	f7ff fe2d 	bl	f09c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f442:	4620      	mov	r0, r4
    f444:	f7ff fe2a 	bl	f09c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f448:	b12f      	cbz	r7, f456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f44a:	b124      	cbz	r4, f456 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
    f44c:	702f      	strb	r7, [r5, #0]
    f44e:	7034      	strb	r4, [r6, #0]
    f450:	2000      	movs	r0, #0
    f452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f456:	2009      	movs	r0, #9
    f458:	e7fb      	b.n	f452 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x40c>
    f45a:	b510      	push	{r4, lr}
    f45c:	f7fd f808 	bl	c470 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f460:	b928      	cbnz	r0, f46e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
    f462:	f7fd f83b 	bl	c4dc <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f466:	b910      	cbnz	r0, f46e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
    f468:	f7fd f842 	bl	c4f0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f46c:	b108      	cbz	r0, f472 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42c>
    f46e:	2008      	movs	r0, #8
    f470:	bd10      	pop	{r4, pc}
    f472:	f7fc ffd2 	bl	c41a <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f476:	b940      	cbnz	r0, f48a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f478:	f7fc ffd9 	bl	c42e <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f47c:	b928      	cbnz	r0, f48a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f47e:	f7fc ffed 	bl	c45c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f482:	b910      	cbnz	r0, f48a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f484:	f7fc fffe 	bl	c484 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f488:	b108      	cbz	r0, f48e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x448>
    f48a:	2004      	movs	r0, #4
    f48c:	bd10      	pop	{r4, pc}
    f48e:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    f492:	2039      	movs	r0, #57	; 0x39
    f494:	f7f4 fc40 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f498:	b510      	push	{r4, lr}
    f49a:	f7fb fd93 	bl	afc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f49e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f4a2:	bd10      	pop	{r4, pc}
    f4a4:	6840      	ldr	r0, [r0, #4]
    f4a6:	f000 b800 	b.w	f4aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    f4aa:	b508      	push	{r3, lr}
    f4ac:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    f4b0:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f4b4:	f88d 0000 	strb.w	r0, [sp]
    f4b8:	9800      	ldr	r0, [sp, #0]
    f4ba:	9000      	str	r0, [sp, #0]
    f4bc:	f89d 0000 	ldrb.w	r0, [sp]
    f4c0:	1e40      	subs	r0, r0, #1
    f4c2:	4208      	tst	r0, r1
    f4c4:	d003      	beq.n	f4ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
    f4c6:	2904      	cmp	r1, #4
    f4c8:	d001      	beq.n	f4ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
    f4ca:	2001      	movs	r0, #1
    f4cc:	bd08      	pop	{r3, pc}
    f4ce:	2000      	movs	r0, #0
    f4d0:	bd08      	pop	{r3, pc}
    f4d2:	b510      	push	{r4, lr}
    f4d4:	f7f8 faa0 	bl	7a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    f4d8:	2804      	cmp	r0, #4
    f4da:	d003      	beq.n	f4e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f4dc:	2805      	cmp	r0, #5
    f4de:	d001      	beq.n	f4e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f4e0:	2000      	movs	r0, #0
    f4e2:	bd10      	pop	{r4, pc}
    f4e4:	2001      	movs	r0, #1
    f4e6:	bd10      	pop	{r4, pc}
    f4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4ea:	b089      	sub	sp, #36	; 0x24
    f4ec:	4604      	mov	r4, r0
    f4ee:	8800      	ldrh	r0, [r0, #0]
    f4f0:	a906      	add	r1, sp, #24
    f4f2:	f7fe fa34 	bl	d95e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f4f6:	2800      	cmp	r0, #0
    f4f8:	d143      	bne.n	f582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f4fa:	9807      	ldr	r0, [sp, #28]
    f4fc:	2601      	movs	r6, #1
    f4fe:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    f502:	f88d 1008 	strb.w	r1, [sp, #8]
    f506:	9902      	ldr	r1, [sp, #8]
    f508:	9102      	str	r1, [sp, #8]
    f50a:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f50e:	f88d 100c 	strb.w	r1, [sp, #12]
    f512:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    f516:	3078      	adds	r0, #120	; 0x78
    f518:	291d      	cmp	r1, #29
    f51a:	d102      	bne.n	f522 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
    f51c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f520:	b141      	cbz	r1, f534 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
    f522:	2100      	movs	r1, #0
    f524:	f88d 1004 	strb.w	r1, [sp, #4]
    f528:	2105      	movs	r1, #5
    f52a:	304e      	adds	r0, #78	; 0x4e
    f52c:	f7ff fa0a 	bl	e944 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f530:	b110      	cbz	r0, f538 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
    f532:	e004      	b.n	f53e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
    f534:	2101      	movs	r1, #1
    f536:	e7f5      	b.n	f524 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
    f538:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f53c:	b300      	cbz	r0, f580 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
    f53e:	8921      	ldrh	r1, [r4, #8]
    f540:	88e0      	ldrh	r0, [r4, #6]
    f542:	f7ff fde1 	bl	f108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f546:	2800      	cmp	r0, #0
    f548:	d11b      	bne.n	f582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f54a:	88a1      	ldrh	r1, [r4, #4]
    f54c:	8860      	ldrh	r0, [r4, #2]
    f54e:	f7ff fddb 	bl	f108 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f552:	2800      	cmp	r0, #0
    f554:	d115      	bne.n	f582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f556:	8921      	ldrh	r1, [r4, #8]
    f558:	88e0      	ldrh	r0, [r4, #6]
    f55a:	f7ff fdcb 	bl	f0f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f55e:	2800      	cmp	r0, #0
    f560:	d10f      	bne.n	f582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f562:	88a1      	ldrh	r1, [r4, #4]
    f564:	8860      	ldrh	r0, [r4, #2]
    f566:	f7ff fdc5 	bl	f0f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f56a:	0007      	movs	r7, r0
    f56c:	d109      	bne.n	f582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f56e:	9807      	ldr	r0, [sp, #28]
    f570:	f500 7599 	add.w	r5, r0, #306	; 0x132
    f574:	706e      	strb	r6, [r5, #1]
    f576:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f57a:	b121      	cbz	r1, f586 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
    f57c:	273a      	movs	r7, #58	; 0x3a
    f57e:	e02d      	b.n	f5dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
    f580:	201a      	movs	r0, #26
    f582:	b009      	add	sp, #36	; 0x24
    f584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f586:	4631      	mov	r1, r6
    f588:	aa03      	add	r2, sp, #12
    f58a:	f7ff ff09 	bl	f3a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f58e:	8861      	ldrh	r1, [r4, #2]
    f590:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    f594:	4281      	cmp	r1, r0
    f596:	d200      	bcs.n	f59a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
    f598:	4608      	mov	r0, r1
    f59a:	80e8      	strh	r0, [r5, #6]
    f59c:	88a1      	ldrh	r1, [r4, #4]
    f59e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f5a2:	4281      	cmp	r1, r0
    f5a4:	d200      	bcs.n	f5a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
    f5a6:	4608      	mov	r0, r1
    f5a8:	8128      	strh	r0, [r5, #8]
    f5aa:	88e2      	ldrh	r2, [r4, #6]
    f5ac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    f5b0:	428a      	cmp	r2, r1
    f5b2:	d200      	bcs.n	f5b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
    f5b4:	4611      	mov	r1, r2
    f5b6:	8069      	strh	r1, [r5, #2]
    f5b8:	8922      	ldrh	r2, [r4, #8]
    f5ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    f5be:	428a      	cmp	r2, r1
    f5c0:	d200      	bcs.n	f5c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
    f5c2:	4611      	mov	r1, r2
    f5c4:	f640 0248 	movw	r2, #2120	; 0x848
    f5c8:	80a9      	strh	r1, [r5, #4]
    f5ca:	4291      	cmp	r1, r2
    f5cc:	d300      	bcc.n	f5d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
    f5ce:	4611      	mov	r1, r2
    f5d0:	80a9      	strh	r1, [r5, #4]
    f5d2:	4290      	cmp	r0, r2
    f5d4:	d200      	bcs.n	f5d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
    f5d6:	4602      	mov	r2, r0
    f5d8:	812a      	strh	r2, [r5, #8]
    f5da:	702e      	strb	r6, [r5, #0]
    f5dc:	2000      	movs	r0, #0
    f5de:	7068      	strb	r0, [r5, #1]
    f5e0:	4638      	mov	r0, r7
    f5e2:	e7ce      	b.n	f582 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f5e4:	b530      	push	{r4, r5, lr}
    f5e6:	f340 0400 	sbfx	r4, r0, #0, #1
    f5ea:	f340 0040 	sbfx	r0, r0, #1, #1
    f5ee:	1c40      	adds	r0, r0, #1
    f5f0:	9d03      	ldr	r5, [sp, #12]
    f5f2:	1c64      	adds	r4, r4, #1
    f5f4:	d000      	beq.n	f5f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
    f5f6:	b119      	cbz	r1, f600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f5f8:	b100      	cbz	r0, f5fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
    f5fa:	b10a      	cbz	r2, f600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f5fc:	b91c      	cbnz	r4, f606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
    f5fe:	e001      	b.n	f604 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
    f600:	2011      	movs	r0, #17
    f602:	bd30      	pop	{r4, r5, pc}
    f604:	2100      	movs	r1, #0
    f606:	7019      	strb	r1, [r3, #0]
    f608:	b900      	cbnz	r0, f60c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
    f60a:	2200      	movs	r2, #0
    f60c:	702a      	strb	r2, [r5, #0]
    f60e:	2000      	movs	r0, #0
    f610:	bd30      	pop	{r4, r5, pc}
    f612:	b510      	push	{r4, lr}
    f614:	f7ff ff5d 	bl	f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f618:	b120      	cbz	r0, f624 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f61a:	f7f7 f8f7 	bl	680c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    f61e:	b108      	cbz	r0, f624 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f620:	2001      	movs	r0, #1
    f622:	bd10      	pop	{r4, pc}
    f624:	2000      	movs	r0, #0
    f626:	bd10      	pop	{r4, pc}

0000f628 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f628:	6802      	ldr	r2, [r0, #0]
    f62a:	b912      	cbnz	r2, f632 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f62c:	6001      	str	r1, [r0, #0]
    f62e:	4770      	bx	lr
    f630:	4602      	mov	r2, r0
    f632:	6850      	ldr	r0, [r2, #4]
    f634:	b108      	cbz	r0, f63a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f636:	428a      	cmp	r2, r1
    f638:	d1fa      	bne.n	f630 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f63a:	428a      	cmp	r2, r1
    f63c:	d0f7      	beq.n	f62e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f63e:	6051      	str	r1, [r2, #4]
    f640:	4770      	bx	lr
    f642:	b510      	push	{r4, lr}
    f644:	4604      	mov	r4, r0
    f646:	e002      	b.n	f64e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f648:	6820      	ldr	r0, [r4, #0]
    f64a:	4780      	blx	r0
    f64c:	6864      	ldr	r4, [r4, #4]
    f64e:	2c00      	cmp	r4, #0
    f650:	d1fa      	bne.n	f648 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    f652:	bd10      	pop	{r4, pc}
    f654:	b510      	push	{r4, lr}
    f656:	2000      	movs	r0, #0
    f658:	f7f4 fd26 	bl	40a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f65c:	f7f4 ff46 	bl	44ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f660:	f7f5 f982 	bl	4968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f664:	f7f5 fb74 	bl	4d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f668:	2800      	cmp	r0, #0
    f66a:	d003      	beq.n	f674 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    f66c:	21d0      	movs	r1, #208	; 0xd0
    f66e:	2001      	movs	r0, #1
    f670:	f7f4 fb52 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f674:	bd10      	pop	{r4, pc}
    f676:	b510      	push	{r4, lr}
    f678:	f000 f80a 	bl	f690 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    f67c:	f7ff f84b 	bl	e716 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
    f680:	2800      	cmp	r0, #0
    f682:	d004      	beq.n	f68e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
    f684:	f240 1155 	movw	r1, #341	; 0x155
    f688:	2001      	movs	r0, #1
    f68a:	f7f4 fb45 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f68e:	bd10      	pop	{r4, pc}
    f690:	b510      	push	{r4, lr}
    f692:	f7f8 f943 	bl	791c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    f696:	b120      	cbz	r0, f6a2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
    f698:	f240 113b 	movw	r1, #315	; 0x13b
    f69c:	2001      	movs	r0, #1
    f69e:	f7f4 fb3b 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6a2:	f7f7 f803 	bl	66ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    f6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6aa:	f7fa bf59 	b.w	a560 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    f6ae:	0001      	.short	0x0001
    f6b0:	0002000b 	.word	0x0002000b
    f6b4:	0005000a 	.word	0x0005000a
    f6b8:	000a0009 	.word	0x000a0009
    f6bc:	00140008 	.word	0x00140008
    f6c0:	001e0007 	.word	0x001e0007
    f6c4:	00320006 	.word	0x00320006
    f6c8:	004b0005 	.word	0x004b0005
    f6cc:	00640004 	.word	0x00640004
    f6d0:	00960003 	.word	0x00960003
    f6d4:	00fa0002 	.word	0x00fa0002
    f6d8:	01f40001 	.word	0x01f40001
	...

0000f6de <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f6de:	b510      	push	{r4, lr}
    f6e0:	f7fc f82a 	bl	b738 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f6e4:	f000 f850 	bl	f788 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f6e8:	f7fb fce6 	bl	b0b8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6f0:	f7fb bde4 	b.w	b2bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f6f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f6f4:	b510      	push	{r4, lr}
    f6f6:	24c8      	movs	r4, #200	; 0xc8
    f6f8:	1e64      	subs	r4, r4, #1
    f6fa:	b2e4      	uxtb	r4, r4
    f6fc:	f7fb fcfa 	bl	b0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f700:	2802      	cmp	r0, #2
    f702:	d003      	beq.n	f70c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f704:	2801      	cmp	r0, #1
    f706:	d000      	beq.n	f70a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f708:	2000      	movs	r0, #0
    f70a:	bd10      	pop	{r4, pc}
    f70c:	2c00      	cmp	r4, #0
    f70e:	d1f3      	bne.n	f6f8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f710:	2193      	movs	r1, #147	; 0x93
    f712:	203b      	movs	r0, #59	; 0x3b
    f714:	f7f4 fb00 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f718 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f718:	b510      	push	{r4, lr}
    f71a:	f7f4 f997 	bl	3a4c <mpsl_fem_lna_configuration_clear>
    f71e:	2800      	cmp	r0, #0
    f720:	d005      	beq.n	f72e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f722:	1c40      	adds	r0, r0, #1
    f724:	d003      	beq.n	f72e <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f726:	2150      	movs	r1, #80	; 0x50
    f728:	2040      	movs	r0, #64	; 0x40
    f72a:	f7f4 faf5 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f72e:	bd10      	pop	{r4, pc}

0000f730 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f730:	b510      	push	{r4, lr}
    f732:	f7f4 f997 	bl	3a64 <mpsl_fem_pa_configuration_clear>
    f736:	2800      	cmp	r0, #0
    f738:	d005      	beq.n	f746 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f73a:	1c40      	adds	r0, r0, #1
    f73c:	d003      	beq.n	f746 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f73e:	2149      	movs	r1, #73	; 0x49
    f740:	2040      	movs	r0, #64	; 0x40
    f742:	f7f4 fae9 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f746:	bd10      	pop	{r4, pc}

0000f748 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f748:	b510      	push	{r4, lr}
    f74a:	f7f4 f979 	bl	3a40 <mpsl_fem_disable>
    f74e:	2800      	cmp	r0, #0
    f750:	d005      	beq.n	f75e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f752:	1c40      	adds	r0, r0, #1
    f754:	d003      	beq.n	f75e <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f756:	2157      	movs	r1, #87	; 0x57
    f758:	2040      	movs	r0, #64	; 0x40
    f75a:	f7f4 fadd 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f75e:	bd10      	pop	{r4, pc}

0000f760 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f760:	b510      	push	{r4, lr}
    f762:	2100      	movs	r1, #0
    f764:	4608      	mov	r0, r1
    f766:	f7f4 f977 	bl	3a58 <mpsl_fem_lna_configuration_set>
    f76a:	b108      	cbz	r0, f770 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f76c:	2000      	movs	r0, #0
    f76e:	bd10      	pop	{r4, pc}
    f770:	2001      	movs	r0, #1
    f772:	bd10      	pop	{r4, pc}

0000f774 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f774:	b508      	push	{r3, lr}
    f776:	4668      	mov	r0, sp
    f778:	f7f4 f980 	bl	3a7c <mpsl_fem_pa_is_configured>
    f77c:	f89d 0000 	ldrb.w	r0, [sp]
    f780:	2800      	cmp	r0, #0
    f782:	d000      	beq.n	f786 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f784:	2001      	movs	r0, #1
    f786:	bd08      	pop	{r3, pc}

0000f788 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f788:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f78c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f790:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f794:	f3bf 8f4f 	dsb	sy
    f798:	f3bf 8f6f 	isb	sy
    f79c:	f7fb be68 	b.w	b470 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f7a0:	2800      	cmp	r0, #0
    f7a2:	db09      	blt.n	f7b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f7a4:	f000 021f 	and.w	r2, r0, #31
    f7a8:	2101      	movs	r1, #1
    f7aa:	4091      	lsls	r1, r2
    f7ac:	0940      	lsrs	r0, r0, #5
    f7ae:	0080      	lsls	r0, r0, #2
    f7b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f7b4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f7b8:	4770      	bx	lr
    f7ba:	2800      	cmp	r0, #0
    f7bc:	db0d      	blt.n	f7da <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f7be:	f000 021f 	and.w	r2, r0, #31
    f7c2:	2101      	movs	r1, #1
    f7c4:	4091      	lsls	r1, r2
    f7c6:	0940      	lsrs	r0, r0, #5
    f7c8:	0080      	lsls	r0, r0, #2
    f7ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f7ce:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f7d2:	f3bf 8f4f 	dsb	sy
    f7d6:	f3bf 8f6f 	isb	sy
    f7da:	4770      	bx	lr

0000f7dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f7dc:	b510      	push	{r4, lr}
    f7de:	2801      	cmp	r0, #1
    f7e0:	d006      	beq.n	f7f0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f7e2:	2802      	cmp	r0, #2
    f7e4:	d006      	beq.n	f7f4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f7e6:	f640 3164 	movw	r1, #2916	; 0xb64
    f7ea:	203e      	movs	r0, #62	; 0x3e
    f7ec:	f7f4 fa94 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7f0:	2028      	movs	r0, #40	; 0x28
    f7f2:	bd10      	pop	{r4, pc}
    f7f4:	2018      	movs	r0, #24
    f7f6:	bd10      	pop	{r4, pc}

0000f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f7f8:	b510      	push	{r4, lr}
    f7fa:	2801      	cmp	r0, #1
    f7fc:	d006      	beq.n	f80c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f7fe:	2802      	cmp	r0, #2
    f800:	d007      	beq.n	f812 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f802:	f640 3178 	movw	r1, #2936	; 0xb78
    f806:	203e      	movs	r0, #62	; 0x3e
    f808:	f7f4 fa86 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f80c:	f641 6014 	movw	r0, #7700	; 0x1e14
    f810:	bd10      	pop	{r4, pc}
    f812:	f241 1030 	movw	r0, #4400	; 0x1130
    f816:	bd10      	pop	{r4, pc}

0000f818 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f818:	f7fc bcb0 	b.w	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    f81c:	b510      	push	{r4, lr}
    f81e:	460a      	mov	r2, r1
    f820:	b130      	cbz	r0, f830 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f822:	2801      	cmp	r0, #1
    f824:	d00b      	beq.n	f83e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f826:	f240 6127 	movw	r1, #1575	; 0x627
    f82a:	203e      	movs	r0, #62	; 0x3e
    f82c:	f7f4 fa74 	bl	3d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f834:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f838:	4610      	mov	r0, r2
    f83a:	f7fb bcaf 	b.w	b19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f842:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f846:	4610      	mov	r0, r2
    f848:	f7fb bc92 	b.w	b170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f84c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f84c:	b570      	push	{r4, r5, r6, lr}
    f84e:	4605      	mov	r5, r0
    f850:	4614      	mov	r4, r2
    f852:	4608      	mov	r0, r1
    f854:	f7ff ffd0 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f858:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f85c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f860:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f864:	4620      	mov	r0, r4
    f866:	f7ff ffc7 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f86a:	4428      	add	r0, r5
    f86c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f870:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f874:	fbb0 f5f1 	udiv	r5, r0, r1
    f878:	4620      	mov	r0, r4
    f87a:	f7ff ffaf 	bl	f7dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f87e:	4428      	add	r0, r5
    f880:	1d40      	adds	r0, r0, #5
    f882:	bd70      	pop	{r4, r5, r6, pc}

0000f884 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f888:	4607      	mov	r7, r0
    f88a:	461d      	mov	r5, r3
    f88c:	460e      	mov	r6, r1
    f88e:	4614      	mov	r4, r2
    f890:	4610      	mov	r0, r2
    f892:	f7ff ffb1 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f896:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f89a:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f89e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f8a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f8a6:	2e02      	cmp	r6, #2
    f8a8:	d00e      	beq.n	f8c8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f8aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f8ae:	4411      	add	r1, r2
    f8b0:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f8b4:	fbb1 f6f0 	udiv	r6, r1, r0
    f8b8:	4620      	mov	r0, r4
    f8ba:	f7ff ff8f 	bl	f7dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f8be:	4430      	add	r0, r6
    f8c0:	4428      	add	r0, r5
    f8c2:	1d40      	adds	r0, r0, #5
    f8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f8c8:	4602      	mov	r2, r0
    f8ca:	e7f0      	b.n	f8ae <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f8cc <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f8cc:	b510      	push	{r4, lr}
    f8ce:	4604      	mov	r4, r0
    f8d0:	4608      	mov	r0, r1
    f8d2:	f7ff ff91 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f8da:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f8de:	fbb0 f0f1 	udiv	r0, r0, r1
    f8e2:	1a20      	subs	r0, r4, r0
    f8e4:	1e80      	subs	r0, r0, #2
    f8e6:	bd10      	pop	{r4, pc}

0000f8e8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f8e8:	b510      	push	{r4, lr}
    f8ea:	4604      	mov	r4, r0
    f8ec:	4608      	mov	r0, r1
    f8ee:	f7ff ff83 	bl	f7f8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f8f6:	fbb0 f0f1 	udiv	r0, r0, r1
    f8fa:	1a20      	subs	r0, r4, r0
    f8fc:	bd10      	pop	{r4, pc}

0000f8fe <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f8fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f902:	2902      	cmp	r1, #2
    f904:	d008      	beq.n	f918 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f906:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f90a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f90e:	fbb1 f1f2 	udiv	r1, r1, r2
    f912:	4408      	add	r0, r1
    f914:	1e80      	subs	r0, r0, #2
    f916:	4770      	bx	lr
    f918:	4611      	mov	r1, r2
    f91a:	e7f6      	b.n	f90a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f91c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f91c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f920:	2902      	cmp	r1, #2
    f922:	d007      	beq.n	f934 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f924:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f928:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f92c:	fbb1 f1f2 	udiv	r1, r1, r2
    f930:	4408      	add	r0, r1
    f932:	4770      	bx	lr
    f934:	4611      	mov	r1, r2
    f936:	e7f7      	b.n	f928 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f938:	1702080c 	.word	0x1702080c
    f93c:	0201010d 	.word	0x0201010d
    f940:	01010909 	.word	0x01010909
    f944:	18090206 	.word	0x18090206
    f948:	01010318 	.word	0x01010318
    f94c:	03030909 	.word	0x03030909
    f950:	05          	.byte	0x05
    f951:	55          	.byte	0x55
    f952:	5555      	.short	0x5555
    f954:	2625      	.short	0x2625
    f956:	27          	.byte	0x27
    f957:	01          	.byte	0x01
    f958:	0103      	.short	0x0103
    f95a:	01          	.byte	0x01
    f95b:	01          	.byte	0x01

0000f95c <scan_connecting_error>:


//Scanning error
void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	printk("Connection to peer failed!\n");
    f95c:	4801      	ldr	r0, [pc, #4]	; (f964 <scan_connecting_error+0x8>)
    f95e:	f00d ba40 	b.w	1cde2 <printk>
    f962:	bf00      	nop
    f964:	000208c8 	.word	0x000208c8

0000f968 <ble_ready>:
//Declaring callback functions for the scan filter
BT_SCAN_CB_INIT(scan_cb, scan_filter_match, NULL, scan_connecting_error, NULL);

//Callback function after enabling bluetooth
static void ble_ready(int err)
{
    f968:	b530      	push	{r4, r5, lr}
	printk("Bluetooth ready\n");
    f96a:	481e      	ldr	r0, [pc, #120]	; (f9e4 <ble_ready+0x7c>)
{
    f96c:	b08b      	sub	sp, #44	; 0x2c
	printk("Bluetooth ready\n");
    f96e:	f00d fa38 	bl	1cde2 <printk>
	struct bt_le_scan_param scan_param = {
    f972:	ab05      	add	r3, sp, #20
    f974:	2214      	movs	r2, #20
    f976:	2100      	movs	r1, #0
    f978:	4618      	mov	r0, r3
    f97a:	f010 fb47 	bl	2000c <memset>
    f97e:	2401      	movs	r4, #1
    f980:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    f984:	e9cd 4206 	strd	r4, r2, [sp, #24]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    f988:	4a17      	ldr	r2, [pc, #92]	; (f9e8 <ble_ready+0x80>)
	struct bt_scan_init_param scan_init = {
    f98a:	9002      	str	r0, [sp, #8]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    f98c:	6851      	ldr	r1, [r2, #4]
    f98e:	6810      	ldr	r0, [r2, #0]
	struct bt_scan_init_param scan_init = {
    f990:	f8cd d010 	str.w	sp, [sp, #16]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
    f994:	466b      	mov	r3, sp
    f996:	c303      	stmia	r3!, {r0, r1}
	struct bt_scan_init_param scan_init = {
    f998:	2500      	movs	r5, #0
	bt_scan_init(&scan_init);
    f99a:	4618      	mov	r0, r3
	struct bt_scan_init_param scan_init = {
    f99c:	f88d 500c 	strb.w	r5, [sp, #12]
	bt_scan_init(&scan_init);
    f9a0:	f001 fbea 	bl	11178 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
    f9a4:	4811      	ldr	r0, [pc, #68]	; (f9ec <ble_ready+0x84>)
    f9a6:	f001 faaf 	bl	10f08 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, target);
    f9aa:	4911      	ldr	r1, [pc, #68]	; (f9f0 <ble_ready+0x88>)
    f9ac:	4628      	mov	r0, r5
    f9ae:	f001 fabb 	bl	10f28 <bt_scan_filter_add>
	if (err) {
    f9b2:	4601      	mov	r1, r0
    f9b4:	b120      	cbz	r0, f9c0 <ble_ready+0x58>
		printk("Scanning filters cannot be set\n");
    f9b6:	480f      	ldr	r0, [pc, #60]	; (f9f4 <ble_ready+0x8c>)
	printk("Scanning...\n");
    f9b8:	f00d fa13 	bl	1cde2 <printk>
	start_scan();
}
    f9bc:	b00b      	add	sp, #44	; 0x2c
    f9be:	bd30      	pop	{r4, r5, pc}
	err = bt_scan_filter_enable(BT_SCAN_NAME_FILTER, false);
    f9c0:	4620      	mov	r0, r4
    f9c2:	f001 faff 	bl	10fc4 <bt_scan_filter_enable>
	if (err) {
    f9c6:	b110      	cbz	r0, f9ce <ble_ready+0x66>
		printk("Filters cannot be turned on\n");
    f9c8:	480b      	ldr	r0, [pc, #44]	; (f9f8 <ble_ready+0x90>)
    f9ca:	f00d fa0a 	bl	1cde2 <printk>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
    f9ce:	2000      	movs	r0, #0
    f9d0:	f001 fc0c 	bl	111ec <bt_scan_start>
	if (err) {
    f9d4:	4601      	mov	r1, r0
    f9d6:	b110      	cbz	r0, f9de <ble_ready+0x76>
		printk("Scanning failed to start, err %d\n", err);
    f9d8:	4808      	ldr	r0, [pc, #32]	; (f9fc <ble_ready+0x94>)
    f9da:	f00d fa02 	bl	1cde2 <printk>
	printk("Scanning...\n");
    f9de:	4808      	ldr	r0, [pc, #32]	; (fa00 <ble_ready+0x98>)
    f9e0:	e7ea      	b.n	f9b8 <ble_ready+0x50>
    f9e2:	bf00      	nop
    f9e4:	000208e4 	.word	0x000208e4
    f9e8:	000203ec 	.word	0x000203ec
    f9ec:	20000410 	.word	0x20000410
    f9f0:	000208f5 	.word	0x000208f5
    f9f4:	000208fe 	.word	0x000208fe
    f9f8:	0002091e 	.word	0x0002091e
    f9fc:	0002093b 	.word	0x0002093b
    fa00:	0002095d 	.word	0x0002095d

0000fa04 <scan_filter_match>:
{
    fa04:	b570      	push	{r4, r5, r6, lr}
	int rssival = device_info->recv_info->rssi;
    fa06:	6803      	ldr	r3, [r0, #0]
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    fa08:	681c      	ldr	r4, [r3, #0]
	int rssival = device_info->recv_info->rssi;
    fa0a:	f993 6005 	ldrsb.w	r6, [r3, #5]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    fa0e:	7823      	ldrb	r3, [r4, #0]
{
    fa10:	b092      	sub	sp, #72	; 0x48
    fa12:	ad07      	add	r5, sp, #28
    fa14:	2b03      	cmp	r3, #3
    fa16:	d825      	bhi.n	fa64 <scan_filter_match+0x60>
    fa18:	e8df f003 	tbb	[pc, r3]
    fa1c:	22201e02 	.word	0x22201e02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    fa20:	4913      	ldr	r1, [pc, #76]	; (fa70 <scan_filter_match+0x6c>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    fa22:	4628      	mov	r0, r5
    fa24:	f010 fafa 	bl	2001c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fa28:	79a3      	ldrb	r3, [r4, #6]
    fa2a:	9505      	str	r5, [sp, #20]
    fa2c:	7862      	ldrb	r2, [r4, #1]
    fa2e:	9204      	str	r2, [sp, #16]
    fa30:	78a2      	ldrb	r2, [r4, #2]
    fa32:	9203      	str	r2, [sp, #12]
    fa34:	78e2      	ldrb	r2, [r4, #3]
    fa36:	9202      	str	r2, [sp, #8]
    fa38:	7922      	ldrb	r2, [r4, #4]
    fa3a:	9201      	str	r2, [sp, #4]
    fa3c:	7962      	ldrb	r2, [r4, #5]
    fa3e:	9200      	str	r2, [sp, #0]
    fa40:	211e      	movs	r1, #30
    fa42:	4a0c      	ldr	r2, [pc, #48]	; (fa74 <scan_filter_match+0x70>)
    fa44:	a80a      	add	r0, sp, #40	; 0x28
    fa46:	f00d f9d9 	bl	1cdfc <snprintk>
	printk("Device found: %s, rssi = %i\n", addr,rssival);
    fa4a:	480b      	ldr	r0, [pc, #44]	; (fa78 <scan_filter_match+0x74>)
    fa4c:	4632      	mov	r2, r6
    fa4e:	a90a      	add	r1, sp, #40	; 0x28
    fa50:	f00d f9c7 	bl	1cde2 <printk>
}
    fa54:	b012      	add	sp, #72	; 0x48
    fa56:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    fa58:	4908      	ldr	r1, [pc, #32]	; (fa7c <scan_filter_match+0x78>)
    fa5a:	e7e2      	b.n	fa22 <scan_filter_match+0x1e>
		strcpy(type, "public-id");
    fa5c:	4908      	ldr	r1, [pc, #32]	; (fa80 <scan_filter_match+0x7c>)
    fa5e:	e7e0      	b.n	fa22 <scan_filter_match+0x1e>
		strcpy(type, "random-id");
    fa60:	4908      	ldr	r1, [pc, #32]	; (fa84 <scan_filter_match+0x80>)
    fa62:	e7de      	b.n	fa22 <scan_filter_match+0x1e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fa64:	4a08      	ldr	r2, [pc, #32]	; (fa88 <scan_filter_match+0x84>)
    fa66:	210a      	movs	r1, #10
    fa68:	4628      	mov	r0, r5
    fa6a:	f00d f9c7 	bl	1cdfc <snprintk>
		break;
    fa6e:	e7db      	b.n	fa28 <scan_filter_match+0x24>
    fa70:	0002096a 	.word	0x0002096a
    fa74:	00020993 	.word	0x00020993
    fa78:	000209b6 	.word	0x000209b6
    fa7c:	00020971 	.word	0x00020971
    fa80:	00020978 	.word	0x00020978
    fa84:	00020982 	.word	0x00020982
    fa88:	0002098c 	.word	0x0002098c

0000fa8c <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    fa8c:	b410      	push	{r4}
	switch (evt->type)
    fa8e:	780a      	ldrb	r2, [r1, #0]
    fa90:	2a02      	cmp	r2, #2
    fa92:	d003      	beq.n	fa9c <uart_cb+0x10>
    fa94:	2a05      	cmp	r2, #5
    fa96:	d008      	beq.n	faaa <uart_cb+0x1e>
		uart_rx_enable(dev ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
		break;
	default:
		break;
	}
}
    fa98:	bc10      	pop	{r4}
    fa9a:	4770      	bx	lr
		if (evt->data.rx.len==1){
    fa9c:	68cb      	ldr	r3, [r1, #12]
    fa9e:	2b01      	cmp	r3, #1
    faa0:	d1fa      	bne.n	fa98 <uart_cb+0xc>
			printk("data received");
    faa2:	4806      	ldr	r0, [pc, #24]	; (fabc <uart_cb+0x30>)
}
    faa4:	bc10      	pop	{r4}
			printk("data received");
    faa6:	f00d b99c 	b.w	1cde2 <printk>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    faaa:	6883      	ldr	r3, [r0, #8]
    faac:	4904      	ldr	r1, [pc, #16]	; (fac0 <uart_cb+0x34>)
    faae:	68dc      	ldr	r4, [r3, #12]
    fab0:	220a      	movs	r2, #10
    fab2:	46a4      	mov	ip, r4
    fab4:	2364      	movs	r3, #100	; 0x64
}
    fab6:	bc10      	pop	{r4}
    fab8:	4760      	bx	ip
    faba:	bf00      	nop
    fabc:	000209d3 	.word	0x000209d3
    fac0:	20001fc0 	.word	0x20001fc0

0000fac4 <main>:

//Main
void main(void)
{
    fac4:	b538      	push	{r3, r4, r5, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    fac6:	481b      	ldr	r0, [pc, #108]	; (fb34 <main+0x70>)
    fac8:	f009 f894 	bl	18bf4 <z_impl_device_get_binding>
	int err;

	const struct device *uart= device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
	if (uart == NULL) 
    facc:	4604      	mov	r4, r0
    face:	b928      	cbnz	r0, fadc <main+0x18>
	{
		printk("Could not find  %s!\n\r", DT_LABEL(DT_NODELABEL(uart0)));
    fad0:	4918      	ldr	r1, [pc, #96]	; (fb34 <main+0x70>)
    fad2:	4819      	ldr	r0, [pc, #100]	; (fb38 <main+0x74>)
	err = bt_enable(ble_ready);
	if (err) {
		printk("Cold not enable Bluetooth");
	}	
	printk("Bluetooth initialized\n");
}
    fad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("could not enable callback error %i",err);
    fad8:	f00d b983 	b.w	1cde2 <printk>
	if (api->callback_set == NULL) {
    fadc:	6883      	ldr	r3, [r0, #8]
    fade:	681b      	ldr	r3, [r3, #0]
    fae0:	b133      	cbz	r3, faf0 <main+0x2c>
	return api->callback_set(dev, callback, user_data);
    fae2:	4916      	ldr	r1, [pc, #88]	; (fb3c <main+0x78>)
    fae4:	2200      	movs	r2, #0
    fae6:	4798      	blx	r3
		if (err){
    fae8:	4601      	mov	r1, r0
    faea:	b120      	cbz	r0, faf6 <main+0x32>
			printk("could not enable callback error %i",err);
    faec:	4814      	ldr	r0, [pc, #80]	; (fb40 <main+0x7c>)
    faee:	e7f1      	b.n	fad4 <main+0x10>
		return -ENOSYS;
    faf0:	f06f 0157 	mvn.w	r1, #87	; 0x57
    faf4:	e7fa      	b.n	faec <main+0x28>
	return api->rx_enable(dev, buf, len, timeout);
    faf6:	68a3      	ldr	r3, [r4, #8]
    faf8:	4912      	ldr	r1, [pc, #72]	; (fb44 <main+0x80>)
    fafa:	68dd      	ldr	r5, [r3, #12]
    fafc:	220a      	movs	r2, #10
    fafe:	2364      	movs	r3, #100	; 0x64
    fb00:	4620      	mov	r0, r4
    fb02:	47a8      	blx	r5
		if (err){
    fb04:	b9a0      	cbnz	r0, fb30 <main+0x6c>
	return api->tx(dev, buf, len, timeout);
    fb06:	68a3      	ldr	r3, [r4, #8]
    fb08:	490f      	ldr	r1, [pc, #60]	; (fb48 <main+0x84>)
    fb0a:	685d      	ldr	r5, [r3, #4]
    fb0c:	221f      	movs	r2, #31
    fb0e:	f04f 33ff 	mov.w	r3, #4294967295
    fb12:	4620      	mov	r0, r4
    fb14:	47a8      	blx	r5
		if (err){
    fb16:	b958      	cbnz	r0, fb30 <main+0x6c>
	err = bt_enable(ble_ready);
    fb18:	480c      	ldr	r0, [pc, #48]	; (fb4c <main+0x88>)
    fb1a:	f003 f8ef 	bl	12cfc <bt_enable>
	if (err) {
    fb1e:	b110      	cbz	r0, fb26 <main+0x62>
		printk("Cold not enable Bluetooth");
    fb20:	480b      	ldr	r0, [pc, #44]	; (fb50 <main+0x8c>)
    fb22:	f00d f95e 	bl	1cde2 <printk>
}
    fb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk("Bluetooth initialized\n");
    fb2a:	480a      	ldr	r0, [pc, #40]	; (fb54 <main+0x90>)
    fb2c:	f00d b959 	b.w	1cde2 <printk>
}
    fb30:	bd38      	pop	{r3, r4, r5, pc}
    fb32:	bf00      	nop
    fb34:	000209e1 	.word	0x000209e1
    fb38:	000209e8 	.word	0x000209e8
    fb3c:	0000fa8d 	.word	0x0000fa8d
    fb40:	000209fe 	.word	0x000209fe
    fb44:	20001fc0 	.word	0x20001fc0
    fb48:	200005a4 	.word	0x200005a4
    fb4c:	0000f969 	.word	0x0000f969
    fb50:	00020a21 	.word	0x00020a21
    fb54:	00020a3b 	.word	0x00020a3b

0000fb58 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    fb58:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    fb5a:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    fb5e:	2b02      	cmp	r3, #2
{
    fb60:	b570      	push	{r4, r5, r6, lr}
    fb62:	4604      	mov	r4, r0
    fb64:	460e      	mov	r6, r1
	notify->result = res;
    fb66:	6081      	str	r1, [r0, #8]
	switch (method) {
    fb68:	d010      	beq.n	fb8c <sys_notify_finalize+0x34>
    fb6a:	2b03      	cmp	r3, #3
    fb6c:	d004      	beq.n	fb78 <sys_notify_finalize+0x20>
    fb6e:	2b01      	cmp	r3, #1
    fb70:	d10f      	bne.n	fb92 <sys_notify_finalize+0x3a>
    fb72:	2500      	movs	r5, #0
    fb74:	4628      	mov	r0, r5
    fb76:	e001      	b.n	fb7c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    fb78:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    fb7a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    fb7c:	2300      	movs	r3, #0
    fb7e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    fb80:	b110      	cbz	r0, fb88 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    fb82:	4631      	mov	r1, r6
    fb84:	f00d f860 	bl	1cc48 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    fb88:	4628      	mov	r0, r5
    fb8a:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    fb8c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    fb8e:	2500      	movs	r5, #0
		break;
    fb90:	e7f4      	b.n	fb7c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    fb92:	4a06      	ldr	r2, [pc, #24]	; (fbac <sys_notify_finalize+0x54>)
    fb94:	4906      	ldr	r1, [pc, #24]	; (fbb0 <sys_notify_finalize+0x58>)
    fb96:	4807      	ldr	r0, [pc, #28]	; (fbb4 <sys_notify_finalize+0x5c>)
    fb98:	2345      	movs	r3, #69	; 0x45
    fb9a:	f00d f922 	bl	1cde2 <printk>
    fb9e:	4803      	ldr	r0, [pc, #12]	; (fbac <sys_notify_finalize+0x54>)
    fba0:	2145      	movs	r1, #69	; 0x45
    fba2:	f00d fb78 	bl	1d296 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    fba6:	2500      	movs	r5, #0
    fba8:	e7e7      	b.n	fb7a <sys_notify_finalize+0x22>
    fbaa:	bf00      	nop
    fbac:	00020a52 	.word	0x00020a52
    fbb0:	00022787 	.word	0x00022787
    fbb4:	00020a75 	.word	0x00020a75

0000fbb8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    fbb8:	680b      	ldr	r3, [r1, #0]
    fbba:	3301      	adds	r3, #1
    fbbc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    fbbe:	4b01      	ldr	r3, [pc, #4]	; (fbc4 <char_out+0xc>)
    fbc0:	681b      	ldr	r3, [r3, #0]
    fbc2:	4718      	bx	r3
    fbc4:	20000418 	.word	0x20000418

0000fbc8 <__printk_hook_install>:
	_char_out = fn;
    fbc8:	4b01      	ldr	r3, [pc, #4]	; (fbd0 <__printk_hook_install+0x8>)
    fbca:	6018      	str	r0, [r3, #0]
}
    fbcc:	4770      	bx	lr
    fbce:	bf00      	nop
    fbd0:	20000418 	.word	0x20000418

0000fbd4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    fbd4:	b507      	push	{r0, r1, r2, lr}
    fbd6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    fbd8:	2100      	movs	r1, #0
{
    fbda:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    fbdc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    fbde:	4803      	ldr	r0, [pc, #12]	; (fbec <vprintk+0x18>)
    fbe0:	a901      	add	r1, sp, #4
    fbe2:	f000 fcc7 	bl	10574 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    fbe6:	b003      	add	sp, #12
    fbe8:	f85d fb04 	ldr.w	pc, [sp], #4
    fbec:	0000fbb9 	.word	0x0000fbb9

0000fbf0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fbf0:	b530      	push	{r4, r5, lr}
    fbf2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    fbf4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    fbf8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    fbfa:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    fbfc:	a901      	add	r1, sp, #4
    fbfe:	4805      	ldr	r0, [pc, #20]	; (fc14 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    fc00:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    fc02:	f000 fcb7 	bl	10574 <cbvprintf>

	if (ctx.count < ctx.max) {
    fc06:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    fc0a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    fc0c:	bfb8      	it	lt
    fc0e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    fc10:	b005      	add	sp, #20
    fc12:	bd30      	pop	{r4, r5, pc}
    fc14:	0001cdbd 	.word	0x0001cdbd

0000fc18 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    fc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fc1c:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    fc20:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    fc22:	f019 0f08 	tst.w	r9, #8
{
    fc26:	4604      	mov	r4, r0
    fc28:	9203      	str	r2, [sp, #12]
	if (processing) {
    fc2a:	d022      	beq.n	fc72 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    fc2c:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    fc2e:	bf0c      	ite	eq
    fc30:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    fc34:	f049 0920 	orrne.w	r9, r9, #32
    fc38:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    fc3c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fc3e:	4620      	mov	r0, r4
    fc40:	f009 fc84 	bl	1954c <z_spin_unlock_valid>
    fc44:	b968      	cbnz	r0, fc62 <process_event+0x4a>
    fc46:	4a9f      	ldr	r2, [pc, #636]	; (fec4 <process_event+0x2ac>)
    fc48:	499f      	ldr	r1, [pc, #636]	; (fec8 <process_event+0x2b0>)
    fc4a:	48a0      	ldr	r0, [pc, #640]	; (fecc <process_event+0x2b4>)
    fc4c:	23ac      	movs	r3, #172	; 0xac
    fc4e:	f00d f8c8 	bl	1cde2 <printk>
    fc52:	489f      	ldr	r0, [pc, #636]	; (fed0 <process_event+0x2b8>)
    fc54:	4621      	mov	r1, r4
    fc56:	f00d f8c4 	bl	1cde2 <printk>
    fc5a:	489a      	ldr	r0, [pc, #616]	; (fec4 <process_event+0x2ac>)
    fc5c:	21ac      	movs	r1, #172	; 0xac
    fc5e:	f00d fb1a 	bl	1d296 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fc62:	9b03      	ldr	r3, [sp, #12]
    fc64:	f383 8811 	msr	BASEPRI, r3
    fc68:	f3bf 8f6f 	isb	sy
}
    fc6c:	b005      	add	sp, #20
    fc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    fc72:	4f98      	ldr	r7, [pc, #608]	; (fed4 <process_event+0x2bc>)
    fc74:	f8df 8254 	ldr.w	r8, [pc, #596]	; fecc <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fc78:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    fc7c:	2902      	cmp	r1, #2
    fc7e:	d106      	bne.n	fc8e <process_event+0x76>
			evt = process_recheck(mgr);
    fc80:	4620      	mov	r0, r4
    fc82:	f00d f8c8 	bl	1ce16 <process_recheck>
		if (evt == EVT_NOP) {
    fc86:	2800      	cmp	r0, #0
    fc88:	d0d8      	beq.n	fc3c <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    fc8a:	2801      	cmp	r0, #1
    fc8c:	d168      	bne.n	fd60 <process_event+0x148>
			res = mgr->last_res;
    fc8e:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fc92:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    fc94:	f1bb 0f00 	cmp.w	fp, #0
    fc98:	da0a      	bge.n	fcb0 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    fc9a:	2600      	movs	r6, #0
		*clients = mgr->clients;
    fc9c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fc9e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    fca2:	e9c4 6600 	strd	r6, r6, [r4]
    fca6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    fcaa:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    fcac:	9601      	str	r6, [sp, #4]
    fcae:	e027      	b.n	fd00 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fcb0:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    fcb4:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    fcb6:	2901      	cmp	r1, #1
    fcb8:	d834      	bhi.n	fd24 <process_event+0x10c>
	list->head = NULL;
    fcba:	2100      	movs	r1, #0
    fcbc:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    fcc0:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    fcc2:	6825      	ldr	r5, [r4, #0]
    fcc4:	b29b      	uxth	r3, r3
	list->tail = NULL;
    fcc6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    fcca:	d10c      	bne.n	fce6 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    fccc:	428d      	cmp	r5, r1
    fcce:	462a      	mov	r2, r5
    fcd0:	bf38      	it	cc
    fcd2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fcd4:	b12a      	cbz	r2, fce2 <process_event+0xca>
				mgr->refs += 1U;
    fcd6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fcd8:	6812      	ldr	r2, [r2, #0]
    fcda:	3101      	adds	r1, #1
    fcdc:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    fcde:	2a00      	cmp	r2, #0
    fce0:	d1f8      	bne.n	fcd4 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fce2:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    fce6:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    fce8:	4620      	mov	r0, r4
    fcea:	f00d f894 	bl	1ce16 <process_recheck>
    fcee:	4606      	mov	r6, r0
    fcf0:	2800      	cmp	r0, #0
    fcf2:	d0db      	beq.n	fcac <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fcf4:	8ba3      	ldrh	r3, [r4, #28]
    fcf6:	f043 0320 	orr.w	r3, r3, #32
    fcfa:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    fcfc:	2300      	movs	r3, #0
    fcfe:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fd00:	8ba3      	ldrh	r3, [r4, #28]
    fd02:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    fd06:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fd08:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    fd0a:	d003      	beq.n	fd14 <process_event+0xfc>
		if (do_monitors
    fd0c:	68a2      	ldr	r2, [r4, #8]
    fd0e:	2a00      	cmp	r2, #0
    fd10:	f040 80f0 	bne.w	fef4 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    fd14:	b91d      	cbnz	r5, fd1e <process_event+0x106>
		    || (transit != NULL)) {
    fd16:	9a01      	ldr	r2, [sp, #4]
    fd18:	2a00      	cmp	r2, #0
    fd1a:	f000 8136 	beq.w	ff8a <process_event+0x372>
    fd1e:	f04f 0900 	mov.w	r9, #0
    fd22:	e0e9      	b.n	fef8 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    fd24:	2a04      	cmp	r2, #4
    fd26:	d10e      	bne.n	fd46 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fd28:	f023 0307 	bic.w	r3, r3, #7
    fd2c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    fd2e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    fd30:	4620      	mov	r0, r4
    fd32:	f00d f870 	bl	1ce16 <process_recheck>
    fd36:	4605      	mov	r5, r0
    fd38:	b118      	cbz	r0, fd42 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    fd3a:	f042 0220 	orr.w	r2, r2, #32
    fd3e:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    fd40:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    fd42:	9501      	str	r5, [sp, #4]
    fd44:	e7dc      	b.n	fd00 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    fd46:	4640      	mov	r0, r8
    fd48:	4963      	ldr	r1, [pc, #396]	; (fed8 <process_event+0x2c0>)
    fd4a:	f240 131b 	movw	r3, #283	; 0x11b
    fd4e:	463a      	mov	r2, r7
    fd50:	f00d f847 	bl	1cde2 <printk>
    fd54:	f240 111b 	movw	r1, #283	; 0x11b
    fd58:	4638      	mov	r0, r7
    fd5a:	f00d fa9c 	bl	1d296 <assert_post_action>
    fd5e:	e7ef      	b.n	fd40 <process_event+0x128>
		} else if (evt == EVT_START) {
    fd60:	2803      	cmp	r0, #3
    fd62:	d135      	bne.n	fdd0 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    fd64:	f1b9 0f00 	cmp.w	r9, #0
    fd68:	d00b      	beq.n	fd82 <process_event+0x16a>
    fd6a:	495c      	ldr	r1, [pc, #368]	; (fedc <process_event+0x2c4>)
    fd6c:	4640      	mov	r0, r8
    fd6e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    fd72:	463a      	mov	r2, r7
    fd74:	f00d f835 	bl	1cde2 <printk>
    fd78:	f44f 71ab 	mov.w	r1, #342	; 0x156
    fd7c:	4638      	mov	r0, r7
    fd7e:	f00d fa8a 	bl	1d296 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    fd82:	6823      	ldr	r3, [r4, #0]
    fd84:	b95b      	cbnz	r3, fd9e <process_event+0x186>
    fd86:	4956      	ldr	r1, [pc, #344]	; (fee0 <process_event+0x2c8>)
    fd88:	4640      	mov	r0, r8
    fd8a:	f240 1357 	movw	r3, #343	; 0x157
    fd8e:	463a      	mov	r2, r7
    fd90:	f00d f827 	bl	1cde2 <printk>
    fd94:	f240 1157 	movw	r1, #343	; 0x157
    fd98:	4638      	mov	r0, r7
    fd9a:	f00d fa7c 	bl	1d296 <assert_post_action>
			transit = mgr->transitions->start;
    fd9e:	6923      	ldr	r3, [r4, #16]
    fda0:	681b      	ldr	r3, [r3, #0]
    fda2:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    fda4:	b95b      	cbnz	r3, fdbe <process_event+0x1a6>
    fda6:	494f      	ldr	r1, [pc, #316]	; (fee4 <process_event+0x2cc>)
    fda8:	4640      	mov	r0, r8
    fdaa:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    fdae:	463a      	mov	r2, r7
    fdb0:	f00d f817 	bl	1cde2 <printk>
    fdb4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    fdb8:	4638      	mov	r0, r7
    fdba:	f00d fa6c 	bl	1d296 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fdbe:	8ba3      	ldrh	r3, [r4, #28]
    fdc0:	f023 0307 	bic.w	r3, r3, #7
    fdc4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    fdc8:	83a3      	strh	r3, [r4, #28]
}
    fdca:	2500      	movs	r5, #0
		res = 0;
    fdcc:	46ab      	mov	fp, r5
}
    fdce:	e797      	b.n	fd00 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    fdd0:	2804      	cmp	r0, #4
    fdd2:	d132      	bne.n	fe3a <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    fdd4:	f1b9 0f02 	cmp.w	r9, #2
    fdd8:	d00b      	beq.n	fdf2 <process_event+0x1da>
    fdda:	4943      	ldr	r1, [pc, #268]	; (fee8 <process_event+0x2d0>)
    fddc:	4640      	mov	r0, r8
    fdde:	f240 135d 	movw	r3, #349	; 0x15d
    fde2:	463a      	mov	r2, r7
    fde4:	f00c fffd 	bl	1cde2 <printk>
    fde8:	f240 115d 	movw	r1, #349	; 0x15d
    fdec:	4638      	mov	r0, r7
    fdee:	f00d fa52 	bl	1d296 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    fdf2:	8be3      	ldrh	r3, [r4, #30]
    fdf4:	b15b      	cbz	r3, fe0e <process_event+0x1f6>
    fdf6:	493d      	ldr	r1, [pc, #244]	; (feec <process_event+0x2d4>)
    fdf8:	4640      	mov	r0, r8
    fdfa:	f44f 73af 	mov.w	r3, #350	; 0x15e
    fdfe:	463a      	mov	r2, r7
    fe00:	f00c ffef 	bl	1cde2 <printk>
    fe04:	f44f 71af 	mov.w	r1, #350	; 0x15e
    fe08:	4638      	mov	r0, r7
    fe0a:	f00d fa44 	bl	1d296 <assert_post_action>
			transit = mgr->transitions->stop;
    fe0e:	6923      	ldr	r3, [r4, #16]
    fe10:	685b      	ldr	r3, [r3, #4]
    fe12:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    fe14:	b95b      	cbnz	r3, fe2e <process_event+0x216>
    fe16:	4933      	ldr	r1, [pc, #204]	; (fee4 <process_event+0x2cc>)
    fe18:	4640      	mov	r0, r8
    fe1a:	f240 1361 	movw	r3, #353	; 0x161
    fe1e:	463a      	mov	r2, r7
    fe20:	f00c ffdf 	bl	1cde2 <printk>
    fe24:	f240 1161 	movw	r1, #353	; 0x161
    fe28:	4638      	mov	r0, r7
    fe2a:	f00d fa34 	bl	1d296 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fe2e:	8ba3      	ldrh	r3, [r4, #28]
    fe30:	f023 0307 	bic.w	r3, r3, #7
    fe34:	f043 0304 	orr.w	r3, r3, #4
    fe38:	e7c6      	b.n	fdc8 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    fe3a:	2805      	cmp	r0, #5
    fe3c:	d132      	bne.n	fea4 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    fe3e:	f1b9 0f01 	cmp.w	r9, #1
    fe42:	d00b      	beq.n	fe5c <process_event+0x244>
    fe44:	492a      	ldr	r1, [pc, #168]	; (fef0 <process_event+0x2d8>)
    fe46:	4640      	mov	r0, r8
    fe48:	f44f 73b2 	mov.w	r3, #356	; 0x164
    fe4c:	463a      	mov	r2, r7
    fe4e:	f00c ffc8 	bl	1cde2 <printk>
    fe52:	f44f 71b2 	mov.w	r1, #356	; 0x164
    fe56:	4638      	mov	r0, r7
    fe58:	f00d fa1d 	bl	1d296 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    fe5c:	6823      	ldr	r3, [r4, #0]
    fe5e:	b95b      	cbnz	r3, fe78 <process_event+0x260>
    fe60:	491f      	ldr	r1, [pc, #124]	; (fee0 <process_event+0x2c8>)
    fe62:	4640      	mov	r0, r8
    fe64:	f240 1365 	movw	r3, #357	; 0x165
    fe68:	463a      	mov	r2, r7
    fe6a:	f00c ffba 	bl	1cde2 <printk>
    fe6e:	f240 1165 	movw	r1, #357	; 0x165
    fe72:	4638      	mov	r0, r7
    fe74:	f00d fa0f 	bl	1d296 <assert_post_action>
			transit = mgr->transitions->reset;
    fe78:	6923      	ldr	r3, [r4, #16]
    fe7a:	689b      	ldr	r3, [r3, #8]
    fe7c:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    fe7e:	b95b      	cbnz	r3, fe98 <process_event+0x280>
    fe80:	4918      	ldr	r1, [pc, #96]	; (fee4 <process_event+0x2cc>)
    fe82:	4640      	mov	r0, r8
    fe84:	f44f 73b4 	mov.w	r3, #360	; 0x168
    fe88:	463a      	mov	r2, r7
    fe8a:	f00c ffaa 	bl	1cde2 <printk>
    fe8e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    fe92:	4638      	mov	r0, r7
    fe94:	f00d f9ff 	bl	1d296 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fe98:	8ba3      	ldrh	r3, [r4, #28]
    fe9a:	f023 0307 	bic.w	r3, r3, #7
    fe9e:	f043 0305 	orr.w	r3, r3, #5
    fea2:	e791      	b.n	fdc8 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    fea4:	490c      	ldr	r1, [pc, #48]	; (fed8 <process_event+0x2c0>)
    fea6:	f240 136b 	movw	r3, #363	; 0x16b
    feaa:	463a      	mov	r2, r7
    feac:	4640      	mov	r0, r8
    feae:	f00c ff98 	bl	1cde2 <printk>
    feb2:	2500      	movs	r5, #0
    feb4:	f240 116b 	movw	r1, #363	; 0x16b
    feb8:	4638      	mov	r0, r7
    feba:	f00d f9ec 	bl	1d296 <assert_post_action>
		onoff_transition_fn transit = NULL;
    febe:	9501      	str	r5, [sp, #4]
    fec0:	e784      	b.n	fdcc <process_event+0x1b4>
    fec2:	bf00      	nop
    fec4:	00020b35 	.word	0x00020b35
    fec8:	00020b5b 	.word	0x00020b5b
    fecc:	00020a75 	.word	0x00020a75
    fed0:	00020b72 	.word	0x00020b72
    fed4:	00020a92 	.word	0x00020a92
    fed8:	00022787 	.word	0x00022787
    fedc:	00020ab4 	.word	0x00020ab4
    fee0:	00020ac0 	.word	0x00020ac0
    fee4:	00020ae3 	.word	0x00020ae3
    fee8:	00020afa 	.word	0x00020afa
    feec:	00020b10 	.word	0x00020b10
    fef0:	00020b1f 	.word	0x00020b1f
				   && !sys_slist_is_empty(&mgr->monitors);
    fef4:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    fef8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    fefc:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    ff00:	83a3      	strh	r3, [r4, #28]
    ff02:	4650      	mov	r0, sl
    ff04:	f009 fb22 	bl	1954c <z_spin_unlock_valid>
    ff08:	b968      	cbnz	r0, ff26 <process_event+0x30e>
    ff0a:	4a3a      	ldr	r2, [pc, #232]	; (fff4 <process_event+0x3dc>)
    ff0c:	493a      	ldr	r1, [pc, #232]	; (fff8 <process_event+0x3e0>)
    ff0e:	23ac      	movs	r3, #172	; 0xac
    ff10:	4640      	mov	r0, r8
    ff12:	f00c ff66 	bl	1cde2 <printk>
    ff16:	4839      	ldr	r0, [pc, #228]	; (fffc <process_event+0x3e4>)
    ff18:	4651      	mov	r1, sl
    ff1a:	f00c ff62 	bl	1cde2 <printk>
    ff1e:	4835      	ldr	r0, [pc, #212]	; (fff4 <process_event+0x3dc>)
    ff20:	21ac      	movs	r1, #172	; 0xac
    ff22:	f00d f9b8 	bl	1d296 <assert_post_action>
    ff26:	9b03      	ldr	r3, [sp, #12]
    ff28:	f383 8811 	msr	BASEPRI, r3
    ff2c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    ff30:	f1b9 0f00 	cmp.w	r9, #0
    ff34:	d138      	bne.n	ffa8 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    ff36:	2d00      	cmp	r5, #0
    ff38:	d14b      	bne.n	ffd2 <process_event+0x3ba>
			if (transit != NULL) {
    ff3a:	9b01      	ldr	r3, [sp, #4]
    ff3c:	b113      	cbz	r3, ff44 <process_event+0x32c>
				transit(mgr, transition_complete);
    ff3e:	4930      	ldr	r1, [pc, #192]	; (10000 <process_event+0x3e8>)
    ff40:	4620      	mov	r0, r4
    ff42:	4798      	blx	r3
	__asm__ volatile(
    ff44:	f04f 0340 	mov.w	r3, #64	; 0x40
    ff48:	f3ef 8b11 	mrs	fp, BASEPRI
    ff4c:	f383 8812 	msr	BASEPRI_MAX, r3
    ff50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff54:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    ff56:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ff5a:	f009 fae9 	bl	19530 <z_spin_lock_valid>
    ff5e:	b968      	cbnz	r0, ff7c <process_event+0x364>
    ff60:	4a24      	ldr	r2, [pc, #144]	; (fff4 <process_event+0x3dc>)
    ff62:	4928      	ldr	r1, [pc, #160]	; (10004 <process_event+0x3ec>)
    ff64:	2381      	movs	r3, #129	; 0x81
    ff66:	4640      	mov	r0, r8
    ff68:	f00c ff3b 	bl	1cde2 <printk>
    ff6c:	4826      	ldr	r0, [pc, #152]	; (10008 <process_event+0x3f0>)
    ff6e:	4651      	mov	r1, sl
    ff70:	f00c ff37 	bl	1cde2 <printk>
    ff74:	481f      	ldr	r0, [pc, #124]	; (fff4 <process_event+0x3dc>)
    ff76:	2181      	movs	r1, #129	; 0x81
    ff78:	f00d f98d 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
    ff7c:	4650      	mov	r0, sl
    ff7e:	f009 faf5 	bl	1956c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    ff82:	8ba3      	ldrh	r3, [r4, #28]
    ff84:	f023 0308 	bic.w	r3, r3, #8
    ff88:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ff8a:	8ba3      	ldrh	r3, [r4, #28]
    ff8c:	06da      	lsls	r2, r3, #27
    ff8e:	d528      	bpl.n	ffe2 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ff90:	f023 0310 	bic.w	r3, r3, #16
    ff94:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    ff96:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    ff98:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    ff9c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    ffa0:	2900      	cmp	r1, #0
    ffa2:	f47f ae6b 	bne.w	fc7c <process_event+0x64>
out:
    ffa6:	e649      	b.n	fc3c <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ffa8:	68a1      	ldr	r1, [r4, #8]
    ffaa:	2900      	cmp	r1, #0
    ffac:	d0c3      	beq.n	ff36 <process_event+0x31e>
	return node->next;
    ffae:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    ffb0:	9a02      	ldr	r2, [sp, #8]
    ffb2:	2b00      	cmp	r3, #0
    ffb4:	bf38      	it	cc
    ffb6:	2300      	movcc	r3, #0
    ffb8:	4699      	mov	r9, r3
    ffba:	684b      	ldr	r3, [r1, #4]
    ffbc:	4620      	mov	r0, r4
    ffbe:	461e      	mov	r6, r3
    ffc0:	465b      	mov	r3, fp
    ffc2:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ffc4:	f1b9 0f00 	cmp.w	r9, #0
    ffc8:	d0b5      	beq.n	ff36 <process_event+0x31e>
    ffca:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ffce:	4649      	mov	r1, r9
    ffd0:	e7ee      	b.n	ffb0 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ffd2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ffd4:	9a02      	ldr	r2, [sp, #8]
    ffd6:	682d      	ldr	r5, [r5, #0]
    ffd8:	465b      	mov	r3, fp
    ffda:	4620      	mov	r0, r4
    ffdc:	f00c ff37 	bl	1ce4e <notify_one>
    ffe0:	e7a9      	b.n	ff36 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    ffe2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    ffe6:	bf1e      	ittt	ne
    ffe8:	f023 0320 	bicne.w	r3, r3, #32
    ffec:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    ffee:	2102      	movne	r1, #2
    fff0:	e7d2      	b.n	ff98 <process_event+0x380>
    fff2:	bf00      	nop
    fff4:	00020b35 	.word	0x00020b35
    fff8:	00020b5b 	.word	0x00020b5b
    fffc:	00020b72 	.word	0x00020b72
   10000:	0001000d 	.word	0x0001000d
   10004:	00020b87 	.word	0x00020b87
   10008:	00020b9c 	.word	0x00020b9c

0001000c <transition_complete>:
{
   1000c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1000e:	4604      	mov	r4, r0
   10010:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10012:	f100 0614 	add.w	r6, r0, #20
   10016:	f04f 0340 	mov.w	r3, #64	; 0x40
   1001a:	f3ef 8711 	mrs	r7, BASEPRI
   1001e:	f383 8812 	msr	BASEPRI_MAX, r3
   10022:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10026:	4630      	mov	r0, r6
   10028:	f009 fa82 	bl	19530 <z_spin_lock_valid>
   1002c:	b968      	cbnz	r0, 1004a <transition_complete+0x3e>
   1002e:	4a0c      	ldr	r2, [pc, #48]	; (10060 <transition_complete+0x54>)
   10030:	490c      	ldr	r1, [pc, #48]	; (10064 <transition_complete+0x58>)
   10032:	480d      	ldr	r0, [pc, #52]	; (10068 <transition_complete+0x5c>)
   10034:	2381      	movs	r3, #129	; 0x81
   10036:	f00c fed4 	bl	1cde2 <printk>
   1003a:	480c      	ldr	r0, [pc, #48]	; (1006c <transition_complete+0x60>)
   1003c:	4631      	mov	r1, r6
   1003e:	f00c fed0 	bl	1cde2 <printk>
   10042:	4807      	ldr	r0, [pc, #28]	; (10060 <transition_complete+0x54>)
   10044:	2181      	movs	r1, #129	; 0x81
   10046:	f00d f926 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1004a:	4630      	mov	r0, r6
   1004c:	f009 fa8e 	bl	1956c <z_spin_lock_set_owner>
	mgr->last_res = res;
   10050:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   10052:	463a      	mov	r2, r7
   10054:	4620      	mov	r0, r4
   10056:	2101      	movs	r1, #1
}
   10058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1005c:	f7ff bddc 	b.w	fc18 <process_event>
   10060:	00020b35 	.word	0x00020b35
   10064:	00020b87 	.word	0x00020b87
   10068:	00020a75 	.word	0x00020a75
   1006c:	00020b9c 	.word	0x00020b9c

00010070 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10074:	4604      	mov	r4, r0
   10076:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10078:	f00c feff 	bl	1ce7a <validate_args>

	if (rv < 0) {
   1007c:	1e05      	subs	r5, r0, #0
   1007e:	db5e      	blt.n	1013e <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10080:	f104 0914 	add.w	r9, r4, #20
   10084:	f04f 0340 	mov.w	r3, #64	; 0x40
   10088:	f3ef 8a11 	mrs	sl, BASEPRI
   1008c:	f383 8812 	msr	BASEPRI_MAX, r3
   10090:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10094:	4648      	mov	r0, r9
   10096:	f009 fa4b 	bl	19530 <z_spin_lock_valid>
   1009a:	b968      	cbnz	r0, 100b8 <onoff_request+0x48>
   1009c:	4a38      	ldr	r2, [pc, #224]	; (10180 <onoff_request+0x110>)
   1009e:	4939      	ldr	r1, [pc, #228]	; (10184 <onoff_request+0x114>)
   100a0:	4839      	ldr	r0, [pc, #228]	; (10188 <onoff_request+0x118>)
   100a2:	2381      	movs	r3, #129	; 0x81
   100a4:	f00c fe9d 	bl	1cde2 <printk>
   100a8:	4838      	ldr	r0, [pc, #224]	; (1018c <onoff_request+0x11c>)
   100aa:	4649      	mov	r1, r9
   100ac:	f00c fe99 	bl	1cde2 <printk>
   100b0:	4833      	ldr	r0, [pc, #204]	; (10180 <onoff_request+0x110>)
   100b2:	2181      	movs	r1, #129	; 0x81
   100b4:	f00d f8ef 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   100b8:	4648      	mov	r0, r9
   100ba:	f009 fa57 	bl	1956c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   100be:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   100c0:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   100c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   100c6:	428b      	cmp	r3, r1
   100c8:	f002 0607 	and.w	r6, r2, #7
   100cc:	d050      	beq.n	10170 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   100ce:	2e02      	cmp	r6, #2
   100d0:	d124      	bne.n	1011c <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   100d2:	3301      	adds	r3, #1
   100d4:	83e3      	strh	r3, [r4, #30]
	rv = state;
   100d6:	4635      	mov	r5, r6
		notify = true;
   100d8:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   100dc:	4648      	mov	r0, r9
   100de:	f009 fa35 	bl	1954c <z_spin_unlock_valid>
   100e2:	b968      	cbnz	r0, 10100 <onoff_request+0x90>
   100e4:	4a26      	ldr	r2, [pc, #152]	; (10180 <onoff_request+0x110>)
   100e6:	492a      	ldr	r1, [pc, #168]	; (10190 <onoff_request+0x120>)
   100e8:	4827      	ldr	r0, [pc, #156]	; (10188 <onoff_request+0x118>)
   100ea:	23ac      	movs	r3, #172	; 0xac
   100ec:	f00c fe79 	bl	1cde2 <printk>
   100f0:	4828      	ldr	r0, [pc, #160]	; (10194 <onoff_request+0x124>)
   100f2:	4649      	mov	r1, r9
   100f4:	f00c fe75 	bl	1cde2 <printk>
   100f8:	4821      	ldr	r0, [pc, #132]	; (10180 <onoff_request+0x110>)
   100fa:	21ac      	movs	r1, #172	; 0xac
   100fc:	f00d f8cb 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   10100:	f38a 8811 	msr	BASEPRI, sl
   10104:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   10108:	f1b8 0f00 	cmp.w	r8, #0
   1010c:	d017      	beq.n	1013e <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   1010e:	2300      	movs	r3, #0
   10110:	4632      	mov	r2, r6
   10112:	4639      	mov	r1, r7
   10114:	4620      	mov	r0, r4
   10116:	f00c fe9a 	bl	1ce4e <notify_one>
   1011a:	e010      	b.n	1013e <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   1011c:	0793      	lsls	r3, r2, #30
   1011e:	d001      	beq.n	10124 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   10120:	2e06      	cmp	r6, #6
   10122:	d10f      	bne.n	10144 <onoff_request+0xd4>
	parent->next = child;
   10124:	2300      	movs	r3, #0
   10126:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   10128:	6863      	ldr	r3, [r4, #4]
   1012a:	b9f3      	cbnz	r3, 1016a <onoff_request+0xfa>
	list->head = node;
   1012c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   10130:	4635      	mov	r5, r6
   10132:	b9fe      	cbnz	r6, 10174 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   10134:	4652      	mov	r2, sl
   10136:	2102      	movs	r1, #2
   10138:	4620      	mov	r0, r4
   1013a:	f7ff fd6d 	bl	fc18 <process_event>
		}
	}

	return rv;
}
   1013e:	4628      	mov	r0, r5
   10140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   10144:	2e05      	cmp	r6, #5
   10146:	d018      	beq.n	1017a <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10148:	2e01      	cmp	r6, #1
   1014a:	d00b      	beq.n	10164 <onoff_request+0xf4>
   1014c:	4912      	ldr	r1, [pc, #72]	; (10198 <onoff_request+0x128>)
   1014e:	480e      	ldr	r0, [pc, #56]	; (10188 <onoff_request+0x118>)
   10150:	4a12      	ldr	r2, [pc, #72]	; (1019c <onoff_request+0x12c>)
   10152:	f240 13c9 	movw	r3, #457	; 0x1c9
   10156:	f00c fe44 	bl	1cde2 <printk>
   1015a:	4810      	ldr	r0, [pc, #64]	; (1019c <onoff_request+0x12c>)
   1015c:	f240 11c9 	movw	r1, #457	; 0x1c9
   10160:	f00d f899 	bl	1d296 <assert_post_action>
		rv = -EIO;
   10164:	f06f 0504 	mvn.w	r5, #4
   10168:	e004      	b.n	10174 <onoff_request+0x104>
	parent->next = child;
   1016a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1016c:	6067      	str	r7, [r4, #4]
}
   1016e:	e7df      	b.n	10130 <onoff_request+0xc0>
		rv = -EAGAIN;
   10170:	f06f 050a 	mvn.w	r5, #10
   10174:	f04f 0800 	mov.w	r8, #0
   10178:	e7b0      	b.n	100dc <onoff_request+0x6c>
		rv = -ENOTSUP;
   1017a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1017e:	e7f9      	b.n	10174 <onoff_request+0x104>
   10180:	00020b35 	.word	0x00020b35
   10184:	00020b87 	.word	0x00020b87
   10188:	00020a75 	.word	0x00020a75
   1018c:	00020b9c 	.word	0x00020b9c
   10190:	00020b5b 	.word	0x00020b5b
   10194:	00020b72 	.word	0x00020b72
   10198:	00020b1f 	.word	0x00020b1f
   1019c:	00020a92 	.word	0x00020a92

000101a0 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   101a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   101a2:	460e      	mov	r6, r1
   101a4:	2900      	cmp	r1, #0
   101a6:	d043      	beq.n	10230 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   101a8:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   101aa:	68ab      	ldr	r3, [r5, #8]
   101ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   101b0:	bf2c      	ite	cs
   101b2:	2408      	movcs	r4, #8
   101b4:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   101b6:	1b0c      	subs	r4, r1, r4
   101b8:	1b64      	subs	r4, r4, r5
   101ba:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   101bc:	2201      	movs	r2, #1
   101be:	4621      	mov	r1, r4
   101c0:	4628      	mov	r0, r5
   101c2:	f00c fe86 	bl	1ced2 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   101c6:	07c3      	lsls	r3, r0, #31
   101c8:	d40d      	bmi.n	101e6 <sys_heap_free+0x46>
   101ca:	4a1a      	ldr	r2, [pc, #104]	; (10234 <sys_heap_free+0x94>)
   101cc:	491a      	ldr	r1, [pc, #104]	; (10238 <sys_heap_free+0x98>)
   101ce:	481b      	ldr	r0, [pc, #108]	; (1023c <sys_heap_free+0x9c>)
   101d0:	239a      	movs	r3, #154	; 0x9a
   101d2:	f00c fe06 	bl	1cde2 <printk>
   101d6:	481a      	ldr	r0, [pc, #104]	; (10240 <sys_heap_free+0xa0>)
   101d8:	4631      	mov	r1, r6
   101da:	f00c fe02 	bl	1cde2 <printk>
   101de:	4815      	ldr	r0, [pc, #84]	; (10234 <sys_heap_free+0x94>)
   101e0:	219a      	movs	r1, #154	; 0x9a
   101e2:	f00d f858 	bl	1d296 <assert_post_action>
	return c + chunk_size(h, c);
   101e6:	4621      	mov	r1, r4
   101e8:	4628      	mov	r0, r5
   101ea:	f00c fe88 	bl	1cefe <chunk_size>
   101ee:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   101f0:	4639      	mov	r1, r7
   101f2:	2200      	movs	r2, #0
   101f4:	4628      	mov	r0, r5
   101f6:	f00c fe6c 	bl	1ced2 <chunk_field>
   101fa:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   101fc:	42bc      	cmp	r4, r7
   101fe:	d00d      	beq.n	1021c <sys_heap_free+0x7c>
   10200:	4a0c      	ldr	r2, [pc, #48]	; (10234 <sys_heap_free+0x94>)
   10202:	4910      	ldr	r1, [pc, #64]	; (10244 <sys_heap_free+0xa4>)
   10204:	480d      	ldr	r0, [pc, #52]	; (1023c <sys_heap_free+0x9c>)
   10206:	23a2      	movs	r3, #162	; 0xa2
   10208:	f00c fdeb 	bl	1cde2 <printk>
   1020c:	480e      	ldr	r0, [pc, #56]	; (10248 <sys_heap_free+0xa8>)
   1020e:	4631      	mov	r1, r6
   10210:	f00c fde7 	bl	1cde2 <printk>
   10214:	4807      	ldr	r0, [pc, #28]	; (10234 <sys_heap_free+0x94>)
   10216:	21a2      	movs	r1, #162	; 0xa2
   10218:	f00d f83d 	bl	1d296 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   1021c:	4621      	mov	r1, r4
   1021e:	4628      	mov	r0, r5
   10220:	2200      	movs	r2, #0
   10222:	f00c fe72 	bl	1cf0a <set_chunk_used>
	free_chunk(h, c);
   10226:	4621      	mov	r1, r4
}
   10228:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   1022c:	f00c bfa8 	b.w	1d180 <free_chunk>
}
   10230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10232:	bf00      	nop
   10234:	00020bb4 	.word	0x00020bb4
   10238:	00020bd5 	.word	0x00020bd5
   1023c:	00020a75 	.word	0x00020a75
   10240:	00020be6 	.word	0x00020be6
   10244:	00020c1e 	.word	0x00020c1e
   10248:	00020c44 	.word	0x00020c44

0001024c <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1024c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   10250:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   10252:	68b3      	ldr	r3, [r6, #8]
{
   10254:	4614      	mov	r4, r2
	return big_heap(h) ? 8 : 4;
   10256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	rew = align & -align;
   1025a:	f1c1 0200 	rsb	r2, r1, #0
   1025e:	ea02 0701 	and.w	r7, r2, r1
   10262:	bf2c      	ite	cs
   10264:	2508      	movcs	r5, #8
   10266:	2504      	movcc	r5, #4
	if (align != rew) {
   10268:	ea31 0202 	bics.w	r2, r1, r2
   1026c:	d01e      	beq.n	102ac <sys_heap_aligned_alloc+0x60>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1026e:	42bd      	cmp	r5, r7
   10270:	bf28      	it	cs
   10272:	463d      	movcs	r5, r7
   10274:	46b9      	mov	r9, r7
		align -= rew;
   10276:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10278:	f107 3aff 	add.w	sl, r7, #4294967295
   1027c:	ea1a 0f07 	tst.w	sl, r7
   10280:	d00e      	beq.n	102a0 <sys_heap_aligned_alloc+0x54>
   10282:	4936      	ldr	r1, [pc, #216]	; (1035c <sys_heap_aligned_alloc+0x110>)
   10284:	4a36      	ldr	r2, [pc, #216]	; (10360 <sys_heap_aligned_alloc+0x114>)
   10286:	4837      	ldr	r0, [pc, #220]	; (10364 <sys_heap_aligned_alloc+0x118>)
   10288:	f240 130d 	movw	r3, #269	; 0x10d
   1028c:	f00c fda9 	bl	1cde2 <printk>
   10290:	4835      	ldr	r0, [pc, #212]	; (10368 <sys_heap_aligned_alloc+0x11c>)
   10292:	f00c fda6 	bl	1cde2 <printk>
   10296:	4832      	ldr	r0, [pc, #200]	; (10360 <sys_heap_aligned_alloc+0x114>)
   10298:	f240 110d 	movw	r1, #269	; 0x10d
   1029c:	f00c fffb 	bl	1d296 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   102a0:	b974      	cbnz	r4, 102c0 <sys_heap_aligned_alloc+0x74>
		return NULL;
   102a2:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   102a6:	4648      	mov	r0, r9
   102a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   102ac:	42a9      	cmp	r1, r5
   102ae:	d804      	bhi.n	102ba <sys_heap_aligned_alloc+0x6e>
			return sys_heap_alloc(heap, bytes);
   102b0:	4621      	mov	r1, r4
}
   102b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   102b6:	f00c bfa5 	b.w	1d204 <sys_heap_alloc>
		rew = 0;
   102ba:	f04f 0900 	mov.w	r9, #0
   102be:	e7db      	b.n	10278 <sys_heap_aligned_alloc+0x2c>
	if (bytes == 0 || size_too_big(h, bytes)) {
   102c0:	68b3      	ldr	r3, [r6, #8]
   102c2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   102c6:	d9ec      	bls.n	102a2 <sys_heap_aligned_alloc+0x56>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   102c8:	1939      	adds	r1, r7, r4
   102ca:	1b49      	subs	r1, r1, r5
   102cc:	4630      	mov	r0, r6
   102ce:	f00c fe38 	bl	1cf42 <bytes_to_chunksz>
   102d2:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   102d4:	4630      	mov	r0, r6
   102d6:	f00c febe 	bl	1d056 <alloc_chunk>
	if (c0 == 0) {
   102da:	4680      	mov	r8, r0
   102dc:	2800      	cmp	r0, #0
   102de:	d0e0      	beq.n	102a2 <sys_heap_aligned_alloc+0x56>
	return big_heap(h) ? 8 : 4;
   102e0:	68b3      	ldr	r3, [r6, #8]
   102e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   102e6:	bf2c      	ite	cs
   102e8:	2308      	movcs	r3, #8
   102ea:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   102ec:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   102f0:	441d      	add	r5, r3
   102f2:	4435      	add	r5, r6
   102f4:	4455      	add	r5, sl
   102f6:	427f      	negs	r7, r7
   102f8:	402f      	ands	r7, r5
   102fa:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   102fe:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10300:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10304:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10306:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10308:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1030c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1030e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10312:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   10316:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1031a:	d208      	bcs.n	1032e <sys_heap_aligned_alloc+0xe2>
		split_chunks(h, c0, c);
   1031c:	4601      	mov	r1, r0
   1031e:	463a      	mov	r2, r7
   10320:	4630      	mov	r0, r6
   10322:	f00c fe42 	bl	1cfaa <split_chunks>
		free_list_add(h, c0);
   10326:	4641      	mov	r1, r8
   10328:	4630      	mov	r0, r6
   1032a:	f00c fecd 	bl	1d0c8 <free_list_add>
	return c + chunk_size(h, c);
   1032e:	4639      	mov	r1, r7
   10330:	4630      	mov	r0, r6
   10332:	f00c fde4 	bl	1cefe <chunk_size>
   10336:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   10338:	4284      	cmp	r4, r0
   1033a:	d208      	bcs.n	1034e <sys_heap_aligned_alloc+0x102>
		split_chunks(h, c, c_end);
   1033c:	4639      	mov	r1, r7
   1033e:	4630      	mov	r0, r6
   10340:	4622      	mov	r2, r4
   10342:	f00c fe32 	bl	1cfaa <split_chunks>
		free_list_add(h, c_end);
   10346:	4621      	mov	r1, r4
   10348:	4630      	mov	r0, r6
   1034a:	f00c febd 	bl	1d0c8 <free_list_add>
	set_chunk_used(h, c, true);
   1034e:	2201      	movs	r2, #1
   10350:	4639      	mov	r1, r7
   10352:	4630      	mov	r0, r6
   10354:	f00c fdd9 	bl	1cf0a <set_chunk_used>
	return mem;
   10358:	e7a5      	b.n	102a6 <sys_heap_aligned_alloc+0x5a>
   1035a:	bf00      	nop
   1035c:	00020c80 	.word	0x00020c80
   10360:	00020bb4 	.word	0x00020bb4
   10364:	00020a75 	.word	0x00020a75
   10368:	00020c9b 	.word	0x00020c9b

0001036c <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   1036c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   10370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10372:	4607      	mov	r7, r0
   10374:	460d      	mov	r5, r1
   10376:	4616      	mov	r6, r2
   10378:	d212      	bcs.n	103a0 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1037a:	2a04      	cmp	r2, #4
   1037c:	d80e      	bhi.n	1039c <sys_heap_init+0x30>
   1037e:	4944      	ldr	r1, [pc, #272]	; (10490 <sys_heap_init+0x124>)
   10380:	4a44      	ldr	r2, [pc, #272]	; (10494 <sys_heap_init+0x128>)
   10382:	4845      	ldr	r0, [pc, #276]	; (10498 <sys_heap_init+0x12c>)
   10384:	f44f 73c1 	mov.w	r3, #386	; 0x182
   10388:	f00c fd2b 	bl	1cde2 <printk>
   1038c:	4843      	ldr	r0, [pc, #268]	; (1049c <sys_heap_init+0x130>)
   1038e:	f00c fd28 	bl	1cde2 <printk>
   10392:	4840      	ldr	r0, [pc, #256]	; (10494 <sys_heap_init+0x128>)
   10394:	f44f 71c1 	mov.w	r1, #386	; 0x182
   10398:	f00c ff7d 	bl	1d296 <assert_post_action>
   1039c:	2204      	movs	r2, #4
   1039e:	e000      	b.n	103a2 <sys_heap_init+0x36>
   103a0:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   103a2:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   103a4:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   103a6:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   103a8:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   103ac:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   103b0:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   103b2:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   103b4:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   103b8:	d80e      	bhi.n	103d8 <sys_heap_init+0x6c>
   103ba:	4939      	ldr	r1, [pc, #228]	; (104a0 <sys_heap_init+0x134>)
   103bc:	4a35      	ldr	r2, [pc, #212]	; (10494 <sys_heap_init+0x128>)
   103be:	4836      	ldr	r0, [pc, #216]	; (10498 <sys_heap_init+0x12c>)
   103c0:	f240 138b 	movw	r3, #395	; 0x18b
   103c4:	f00c fd0d 	bl	1cde2 <printk>
   103c8:	4834      	ldr	r0, [pc, #208]	; (1049c <sys_heap_init+0x130>)
   103ca:	f00c fd0a 	bl	1cde2 <printk>
   103ce:	4831      	ldr	r0, [pc, #196]	; (10494 <sys_heap_init+0x128>)
   103d0:	f240 118b 	movw	r1, #395	; 0x18b
   103d4:	f00c ff5f 	bl	1d296 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   103d8:	2300      	movs	r3, #0
	heap->heap = h;
   103da:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   103dc:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   103de:	60e3      	str	r3, [r4, #12]
	h->end_chunk = heap_sz;
   103e0:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   103e2:	4620      	mov	r0, r4
   103e4:	f00c fdb7 	bl	1cf56 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   103e8:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   103ea:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   103ec:	1c47      	adds	r7, r0, #1
   103ee:	4620      	mov	r0, r4
   103f0:	f00c fda7 	bl	1cf42 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   103f4:	351b      	adds	r5, #27
   103f6:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   103f8:	4428      	add	r0, r5
   103fa:	42b0      	cmp	r0, r6
   103fc:	d90e      	bls.n	1041c <sys_heap_init+0xb0>
   103fe:	4929      	ldr	r1, [pc, #164]	; (104a4 <sys_heap_init+0x138>)
   10400:	4a24      	ldr	r2, [pc, #144]	; (10494 <sys_heap_init+0x128>)
   10402:	4825      	ldr	r0, [pc, #148]	; (10498 <sys_heap_init+0x12c>)
   10404:	f44f 73cb 	mov.w	r3, #406	; 0x196
   10408:	f00c fceb 	bl	1cde2 <printk>
   1040c:	4823      	ldr	r0, [pc, #140]	; (1049c <sys_heap_init+0x130>)
   1040e:	f00c fce8 	bl	1cde2 <printk>
   10412:	4820      	ldr	r0, [pc, #128]	; (10494 <sys_heap_init+0x128>)
   10414:	f44f 71cb 	mov.w	r1, #406	; 0x196
   10418:	f00c ff3d 	bl	1d296 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   1041c:	2300      	movs	r3, #0
   1041e:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   10422:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
   10424:	42bb      	cmp	r3, r7
   10426:	db2f      	blt.n	10488 <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   10428:	462a      	mov	r2, r5
   1042a:	4620      	mov	r0, r4
   1042c:	2100      	movs	r1, #0
   1042e:	f00c fd84 	bl	1cf3a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   10432:	2300      	movs	r3, #0
   10434:	461a      	mov	r2, r3
   10436:	4619      	mov	r1, r3
   10438:	4620      	mov	r0, r4
   1043a:	f00c fd55 	bl	1cee8 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1043e:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   10440:	4620      	mov	r0, r4
   10442:	2201      	movs	r2, #1
   10444:	2100      	movs	r1, #0
   10446:	f00c fd60 	bl	1cf0a <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1044a:	463a      	mov	r2, r7
   1044c:	4629      	mov	r1, r5
   1044e:	f00c fd74 	bl	1cf3a <set_chunk_size>
   10452:	462b      	mov	r3, r5
   10454:	4629      	mov	r1, r5
   10456:	4620      	mov	r0, r4
   10458:	2200      	movs	r2, #0
   1045a:	f00c fd45 	bl	1cee8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1045e:	4631      	mov	r1, r6
   10460:	4620      	mov	r0, r4
   10462:	2200      	movs	r2, #0
   10464:	f00c fd69 	bl	1cf3a <set_chunk_size>
   10468:	463b      	mov	r3, r7
   1046a:	4631      	mov	r1, r6
   1046c:	4620      	mov	r0, r4
   1046e:	2200      	movs	r2, #0
   10470:	f00c fd3a 	bl	1cee8 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   10474:	4631      	mov	r1, r6
   10476:	4620      	mov	r0, r4
   10478:	2201      	movs	r2, #1
   1047a:	f00c fd46 	bl	1cf0a <set_chunk_used>

	free_list_add(h, chunk0_size);
   1047e:	4629      	mov	r1, r5
}
   10480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   10484:	f00c be20 	b.w	1d0c8 <free_list_add>
		h->buckets[i].next = 0;
   10488:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1048c:	3301      	adds	r3, #1
   1048e:	e7c9      	b.n	10424 <sys_heap_init+0xb8>
   10490:	00020cb8 	.word	0x00020cb8
   10494:	00020bb4 	.word	0x00020bb4
   10498:	00020a75 	.word	0x00020a75
   1049c:	00020cd9 	.word	0x00020cd9
   104a0:	00020cf2 	.word	0x00020cf2
   104a4:	00020d1b 	.word	0x00020d1b

000104a8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   104a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   104aa:	4e09      	ldr	r6, [pc, #36]	; (104d0 <extract_decimal+0x28>)
   104ac:	6801      	ldr	r1, [r0, #0]
{
   104ae:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   104b0:	270a      	movs	r7, #10
	size_t val = 0;
   104b2:	2000      	movs	r0, #0
   104b4:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
   104b6:	3101      	adds	r1, #1
   104b8:	7823      	ldrb	r3, [r4, #0]
   104ba:	5d9d      	ldrb	r5, [r3, r6]
   104bc:	076d      	lsls	r5, r5, #29
   104be:	d401      	bmi.n	104c4 <extract_decimal+0x1c>
	}
	*str = sp;
   104c0:	6014      	str	r4, [r2, #0]
	return val;
}
   104c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   104c4:	fb07 3300 	mla	r3, r7, r0, r3
   104c8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   104cc:	e7f2      	b.n	104b4 <extract_decimal+0xc>
   104ce:	bf00      	nop
   104d0:	000227e5 	.word	0x000227e5

000104d4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   104d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104d8:	4614      	mov	r4, r2
   104da:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   104dc:	78d3      	ldrb	r3, [r2, #3]
   104de:	4a24      	ldr	r2, [pc, #144]	; (10570 <encode_uint+0x9c>)
   104e0:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
   104e4:	2b6f      	cmp	r3, #111	; 0x6f
   104e6:	f00a 0203 	and.w	r2, sl, #3
{
   104ea:	4606      	mov	r6, r0
   104ec:	460f      	mov	r7, r1
   104ee:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   104f0:	d02d      	beq.n	1054e <encode_uint+0x7a>
   104f2:	d828      	bhi.n	10546 <encode_uint+0x72>
		return 16;
   104f4:	2b58      	cmp	r3, #88	; 0x58
   104f6:	bf14      	ite	ne
   104f8:	250a      	movne	r5, #10
   104fa:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   104fc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   10500:	46aa      	mov	sl, r5
   10502:	f04f 0b00 	mov.w	fp, #0
   10506:	4652      	mov	r2, sl
   10508:	465b      	mov	r3, fp
   1050a:	4630      	mov	r0, r6
   1050c:	4639      	mov	r1, r7
   1050e:	f7ef fdf7 	bl	100 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   10512:	2a09      	cmp	r2, #9
   10514:	b2d3      	uxtb	r3, r2
   10516:	d81f      	bhi.n	10558 <encode_uint+0x84>
   10518:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   1051a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1051c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   1051e:	bf08      	it	eq
   10520:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10522:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   10526:	d301      	bcc.n	1052c <encode_uint+0x58>
   10528:	45c8      	cmp	r8, r9
   1052a:	d812      	bhi.n	10552 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   1052c:	7823      	ldrb	r3, [r4, #0]
   1052e:	069b      	lsls	r3, r3, #26
   10530:	d505      	bpl.n	1053e <encode_uint+0x6a>
		if (radix == 8) {
   10532:	2d08      	cmp	r5, #8
   10534:	d116      	bne.n	10564 <encode_uint+0x90>
			conv->altform_0 = true;
   10536:	78a3      	ldrb	r3, [r4, #2]
   10538:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   1053c:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   1053e:	4640      	mov	r0, r8
   10540:	b003      	add	sp, #12
   10542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   10546:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1054a:	2b70      	cmp	r3, #112	; 0x70
   1054c:	e7d3      	b.n	104f6 <encode_uint+0x22>
	switch (specifier) {
   1054e:	2508      	movs	r5, #8
   10550:	e7d4      	b.n	104fc <encode_uint+0x28>
		value /= radix;
   10552:	4606      	mov	r6, r0
   10554:	460f      	mov	r7, r1
   10556:	e7d6      	b.n	10506 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10558:	9a01      	ldr	r2, [sp, #4]
   1055a:	2a01      	cmp	r2, #1
   1055c:	bf0c      	ite	eq
   1055e:	3337      	addeq	r3, #55	; 0x37
   10560:	3357      	addne	r3, #87	; 0x57
   10562:	e7da      	b.n	1051a <encode_uint+0x46>
		} else if (radix == 16) {
   10564:	2d10      	cmp	r5, #16
   10566:	d1ea      	bne.n	1053e <encode_uint+0x6a>
			conv->altform_0c = true;
   10568:	78a3      	ldrb	r3, [r4, #2]
   1056a:	f043 0310 	orr.w	r3, r3, #16
   1056e:	e7e5      	b.n	1053c <encode_uint+0x68>
   10570:	000227e5 	.word	0x000227e5

00010574 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10578:	4682      	mov	sl, r0
   1057a:	b093      	sub	sp, #76	; 0x4c
   1057c:	468b      	mov	fp, r1
   1057e:	4691      	mov	r9, r2
   10580:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10582:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10584:	f899 0000 	ldrb.w	r0, [r9]
   10588:	b908      	cbnz	r0, 1058e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1058a:	4628      	mov	r0, r5
   1058c:	e33a      	b.n	10c04 <cbvprintf+0x690>
		if (*fp != '%') {
   1058e:	f109 0301 	add.w	r3, r9, #1
   10592:	2825      	cmp	r0, #37	; 0x25
   10594:	9302      	str	r3, [sp, #8]
   10596:	d006      	beq.n	105a6 <cbvprintf+0x32>
			OUTC('%');
   10598:	4659      	mov	r1, fp
   1059a:	47d0      	blx	sl
   1059c:	2800      	cmp	r0, #0
   1059e:	f2c0 8331 	blt.w	10c04 <cbvprintf+0x690>
   105a2:	3501      	adds	r5, #1
			break;
   105a4:	e1f1      	b.n	1098a <cbvprintf+0x416>
		} state = {
   105a6:	2218      	movs	r2, #24
   105a8:	2100      	movs	r1, #0
   105aa:	a80c      	add	r0, sp, #48	; 0x30
   105ac:	f00f fd2e 	bl	2000c <memset>
	if (*sp == '%') {
   105b0:	f899 3001 	ldrb.w	r3, [r9, #1]
   105b4:	2b25      	cmp	r3, #37	; 0x25
   105b6:	d059      	beq.n	1066c <cbvprintf+0xf8>
   105b8:	9a02      	ldr	r2, [sp, #8]
   105ba:	4616      	mov	r6, r2
		switch (*sp) {
   105bc:	f812 3b01 	ldrb.w	r3, [r2], #1
   105c0:	2b2b      	cmp	r3, #43	; 0x2b
   105c2:	f000 808b 	beq.w	106dc <cbvprintf+0x168>
   105c6:	d879      	bhi.n	106bc <cbvprintf+0x148>
   105c8:	2b20      	cmp	r3, #32
   105ca:	f000 808c 	beq.w	106e6 <cbvprintf+0x172>
   105ce:	2b23      	cmp	r3, #35	; 0x23
   105d0:	f000 808e 	beq.w	106f0 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   105d4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   105d8:	f003 0244 	and.w	r2, r3, #68	; 0x44
   105dc:	2a44      	cmp	r2, #68	; 0x44
   105de:	d103      	bne.n	105e8 <cbvprintf+0x74>
		conv->flag_zero = false;
   105e0:	f36f 1386 	bfc	r3, #6, #1
   105e4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   105e8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   105ec:	9605      	str	r6, [sp, #20]
   105ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   105f2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   105f6:	7833      	ldrb	r3, [r6, #0]
   105f8:	2b2a      	cmp	r3, #42	; 0x2a
   105fa:	d17e      	bne.n	106fa <cbvprintf+0x186>
		conv->width_star = true;
   105fc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   10600:	f043 0301 	orr.w	r3, r3, #1
   10604:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   10608:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   1060a:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1060c:	781a      	ldrb	r2, [r3, #0]
   1060e:	2a2e      	cmp	r2, #46	; 0x2e
   10610:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10614:	bf0c      	ite	eq
   10616:	2101      	moveq	r1, #1
   10618:	2100      	movne	r1, #0
   1061a:	f361 0241 	bfi	r2, r1, #1, #1
   1061e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   10622:	d10b      	bne.n	1063c <cbvprintf+0xc8>
	++sp;
   10624:	1c5a      	adds	r2, r3, #1
   10626:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   10628:	785a      	ldrb	r2, [r3, #1]
   1062a:	2a2a      	cmp	r2, #42	; 0x2a
   1062c:	d17b      	bne.n	10726 <cbvprintf+0x1b2>
		conv->prec_star = true;
   1062e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10632:	f042 0204 	orr.w	r2, r2, #4
   10636:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1063a:	3302      	adds	r3, #2
	switch (*sp) {
   1063c:	4619      	mov	r1, r3
   1063e:	f811 0b01 	ldrb.w	r0, [r1], #1
   10642:	286c      	cmp	r0, #108	; 0x6c
   10644:	f000 80b6 	beq.w	107b4 <cbvprintf+0x240>
   10648:	d87d      	bhi.n	10746 <cbvprintf+0x1d2>
   1064a:	2868      	cmp	r0, #104	; 0x68
   1064c:	f000 8084 	beq.w	10758 <cbvprintf+0x1e4>
   10650:	286a      	cmp	r0, #106	; 0x6a
   10652:	f000 80b9 	beq.w	107c8 <cbvprintf+0x254>
   10656:	284c      	cmp	r0, #76	; 0x4c
   10658:	f000 80bd 	beq.w	107d6 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   1065c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10660:	f36f 02c6 	bfc	r2, #3, #4
   10664:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   10668:	4619      	mov	r1, r3
   1066a:	e080      	b.n	1076e <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   1066c:	f109 0202 	add.w	r2, r9, #2
   10670:	9202      	str	r2, [sp, #8]
   10672:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   10676:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1067a:	07d9      	lsls	r1, r3, #31
   1067c:	f140 8149 	bpl.w	10912 <cbvprintf+0x39e>
			width = va_arg(ap, int);
   10680:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   10684:	f1b8 0f00 	cmp.w	r8, #0
   10688:	da07      	bge.n	1069a <cbvprintf+0x126>
				conv->flag_dash = true;
   1068a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1068e:	f042 0204 	orr.w	r2, r2, #4
   10692:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   10696:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   1069a:	075a      	lsls	r2, r3, #29
   1069c:	f140 8142 	bpl.w	10924 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   106a0:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   106a4:	2f00      	cmp	r7, #0
   106a6:	f280 8141 	bge.w	1092c <cbvprintf+0x3b8>
				conv->prec_present = false;
   106aa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   106ae:	f36f 0341 	bfc	r3, #1, #1
   106b2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   106b6:	f04f 37ff 	mov.w	r7, #4294967295
   106ba:	e137      	b.n	1092c <cbvprintf+0x3b8>
		switch (*sp) {
   106bc:	2b2d      	cmp	r3, #45	; 0x2d
   106be:	d006      	beq.n	106ce <cbvprintf+0x15a>
   106c0:	2b30      	cmp	r3, #48	; 0x30
   106c2:	d187      	bne.n	105d4 <cbvprintf+0x60>
			conv->flag_zero = true;
   106c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   106c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106cc:	e003      	b.n	106d6 <cbvprintf+0x162>
			conv->flag_dash = true;
   106ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   106d2:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   106d6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   106da:	e76e      	b.n	105ba <cbvprintf+0x46>
			conv->flag_plus = true;
   106dc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   106e0:	f043 0308 	orr.w	r3, r3, #8
   106e4:	e7f7      	b.n	106d6 <cbvprintf+0x162>
			conv->flag_space = true;
   106e6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   106ea:	f043 0310 	orr.w	r3, r3, #16
   106ee:	e7f2      	b.n	106d6 <cbvprintf+0x162>
			conv->flag_hash = true;
   106f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   106f4:	f043 0320 	orr.w	r3, r3, #32
   106f8:	e7ed      	b.n	106d6 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   106fa:	a805      	add	r0, sp, #20
   106fc:	f7ff fed4 	bl	104a8 <extract_decimal>
	if (sp != wp) {
   10700:	9b05      	ldr	r3, [sp, #20]
   10702:	42b3      	cmp	r3, r6
   10704:	d081      	beq.n	1060a <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   10706:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   1070a:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   1070c:	f3c1 0240 	ubfx	r2, r1, #1, #1
   10710:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   10714:	0052      	lsls	r2, r2, #1
   10716:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1071a:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   1071e:	430a      	orrs	r2, r1
   10720:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   10724:	e771      	b.n	1060a <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   10726:	a805      	add	r0, sp, #20
   10728:	f7ff febe 	bl	104a8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1072c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   10730:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   10732:	f3c3 0240 	ubfx	r2, r3, #1, #1
   10736:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1073a:	f360 0341 	bfi	r3, r0, #1, #1
   1073e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   10742:	9b05      	ldr	r3, [sp, #20]
   10744:	e77a      	b.n	1063c <cbvprintf+0xc8>
	switch (*sp) {
   10746:	2874      	cmp	r0, #116	; 0x74
   10748:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1074c:	d040      	beq.n	107d0 <cbvprintf+0x25c>
   1074e:	287a      	cmp	r0, #122	; 0x7a
   10750:	d184      	bne.n	1065c <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   10752:	4613      	mov	r3, r2
   10754:	2206      	movs	r2, #6
   10756:	e028      	b.n	107aa <cbvprintf+0x236>
		if (*++sp == 'h') {
   10758:	785a      	ldrb	r2, [r3, #1]
   1075a:	2a68      	cmp	r2, #104	; 0x68
   1075c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10760:	d121      	bne.n	107a6 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   10762:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10764:	f361 02c6 	bfi	r2, r1, #3, #4
   10768:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1076c:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1076e:	460b      	mov	r3, r1
   10770:	f813 2b01 	ldrb.w	r2, [r3], #1
   10774:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   10776:	2a78      	cmp	r2, #120	; 0x78
   10778:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   1077c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   10780:	f200 80bf 	bhi.w	10902 <cbvprintf+0x38e>
   10784:	2a57      	cmp	r2, #87	; 0x57
   10786:	d833      	bhi.n	107f0 <cbvprintf+0x27c>
   10788:	2a41      	cmp	r2, #65	; 0x41
   1078a:	d003      	beq.n	10794 <cbvprintf+0x220>
   1078c:	3a45      	subs	r2, #69	; 0x45
   1078e:	2a02      	cmp	r2, #2
   10790:	f200 80b7 	bhi.w	10902 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   10794:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10798:	2204      	movs	r2, #4
   1079a:	f362 0302 	bfi	r3, r2, #0, #3
   1079e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   107a2:	2301      	movs	r3, #1
			break;
   107a4:	e084      	b.n	108b0 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   107a6:	4613      	mov	r3, r2
   107a8:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   107aa:	f362 03c6 	bfi	r3, r2, #3, #4
   107ae:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   107b2:	e7dc      	b.n	1076e <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   107b4:	785a      	ldrb	r2, [r3, #1]
   107b6:	2a6c      	cmp	r2, #108	; 0x6c
   107b8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   107bc:	d101      	bne.n	107c2 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   107be:	2104      	movs	r1, #4
   107c0:	e7d0      	b.n	10764 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   107c2:	4613      	mov	r3, r2
   107c4:	2203      	movs	r2, #3
   107c6:	e7f0      	b.n	107aa <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   107c8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   107cc:	2205      	movs	r2, #5
   107ce:	e7ec      	b.n	107aa <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   107d0:	4613      	mov	r3, r2
   107d2:	2207      	movs	r2, #7
   107d4:	e7e9      	b.n	107aa <cbvprintf+0x236>
		conv->unsupported = true;
   107d6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   107da:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   107de:	f023 0302 	bic.w	r3, r3, #2
   107e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   107e6:	f043 0302 	orr.w	r3, r3, #2
   107ea:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   107ee:	e7be      	b.n	1076e <cbvprintf+0x1fa>
   107f0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   107f4:	2920      	cmp	r1, #32
   107f6:	f200 8084 	bhi.w	10902 <cbvprintf+0x38e>
   107fa:	a001      	add	r0, pc, #4	; (adr r0, 10800 <cbvprintf+0x28c>)
   107fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   10800:	000108c5 	.word	0x000108c5
   10804:	00010903 	.word	0x00010903
   10808:	00010903 	.word	0x00010903
   1080c:	00010903 	.word	0x00010903
   10810:	00010903 	.word	0x00010903
   10814:	00010903 	.word	0x00010903
   10818:	00010903 	.word	0x00010903
   1081c:	00010903 	.word	0x00010903
   10820:	00010903 	.word	0x00010903
   10824:	00010795 	.word	0x00010795
   10828:	00010903 	.word	0x00010903
   1082c:	000108c5 	.word	0x000108c5
   10830:	00010885 	.word	0x00010885
   10834:	00010795 	.word	0x00010795
   10838:	00010795 	.word	0x00010795
   1083c:	00010795 	.word	0x00010795
   10840:	00010903 	.word	0x00010903
   10844:	00010885 	.word	0x00010885
   10848:	00010903 	.word	0x00010903
   1084c:	00010903 	.word	0x00010903
   10850:	00010903 	.word	0x00010903
   10854:	00010903 	.word	0x00010903
   10858:	000108cd 	.word	0x000108cd
   1085c:	000108c5 	.word	0x000108c5
   10860:	000108e9 	.word	0x000108e9
   10864:	00010903 	.word	0x00010903
   10868:	00010903 	.word	0x00010903
   1086c:	000108e9 	.word	0x000108e9
   10870:	00010903 	.word	0x00010903
   10874:	000108c5 	.word	0x000108c5
   10878:	00010903 	.word	0x00010903
   1087c:	00010903 	.word	0x00010903
   10880:	000108c5 	.word	0x000108c5
		conv->specifier_cat = SPECIFIER_SINT;
   10884:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   10888:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   1088a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1088e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10892:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10894:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   10898:	bf02      	ittt	eq
   1089a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1089e:	f041 0101 	orreq.w	r1, r1, #1
   108a2:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   108a6:	2a63      	cmp	r2, #99	; 0x63
   108a8:	d131      	bne.n	1090e <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   108aa:	3b00      	subs	r3, #0
   108ac:	bf18      	it	ne
   108ae:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   108b0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   108b4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   108b8:	430b      	orrs	r3, r1
   108ba:	f363 0241 	bfi	r2, r3, #1, #1
   108be:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   108c2:	e6d8      	b.n	10676 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   108c4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   108c8:	2002      	movs	r0, #2
   108ca:	e7de      	b.n	1088a <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   108cc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   108d0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   108d4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   108d8:	2103      	movs	r1, #3
   108da:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   108de:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   108e0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   108e4:	4143      	adcs	r3, r0
   108e6:	e7e3      	b.n	108b0 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   108e8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   108ec:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   108ee:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   108f2:	f361 0202 	bfi	r2, r1, #0, #3
   108f6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   108fa:	bf14      	ite	ne
   108fc:	2301      	movne	r3, #1
   108fe:	2300      	moveq	r3, #0
   10900:	e7d6      	b.n	108b0 <cbvprintf+0x33c>
		conv->invalid = true;
   10902:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10906:	f043 0301 	orr.w	r3, r3, #1
   1090a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   1090e:	2300      	movs	r3, #0
   10910:	e7ce      	b.n	108b0 <cbvprintf+0x33c>
		} else if (conv->width_present) {
   10912:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   10916:	2a00      	cmp	r2, #0
			width = conv->width_value;
   10918:	bfb4      	ite	lt
   1091a:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   1091e:	f04f 38ff 	movge.w	r8, #4294967295
   10922:	e6ba      	b.n	1069a <cbvprintf+0x126>
		} else if (conv->prec_present) {
   10924:	079f      	lsls	r7, r3, #30
   10926:	f57f aec6 	bpl.w	106b6 <cbvprintf+0x142>
			precision = conv->prec_value;
   1092a:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   1092c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   10930:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   10932:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   10936:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   1093a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1093e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   10940:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   10944:	d137      	bne.n	109b6 <cbvprintf+0x442>
			switch (length_mod) {
   10946:	1ecb      	subs	r3, r1, #3
   10948:	2b04      	cmp	r3, #4
   1094a:	d821      	bhi.n	10990 <cbvprintf+0x41c>
   1094c:	e8df f003 	tbb	[pc, r3]
   10950:	20070703 	.word	0x20070703
   10954:	20          	.byte	0x20
   10955:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   10956:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   1095a:	17d3      	asrs	r3, r2, #31
   1095c:	e004      	b.n	10968 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   1095e:	3407      	adds	r4, #7
   10960:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   10964:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   10968:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1096c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10970:	f013 0603 	ands.w	r6, r3, #3
   10974:	d055      	beq.n	10a22 <cbvprintf+0x4ae>
			OUTS(sp, fp);
   10976:	9b02      	ldr	r3, [sp, #8]
   10978:	464a      	mov	r2, r9
   1097a:	4659      	mov	r1, fp
   1097c:	4650      	mov	r0, sl
   1097e:	f00c fc74 	bl	1d26a <outs>
   10982:	2800      	cmp	r0, #0
   10984:	f2c0 813e 	blt.w	10c04 <cbvprintf+0x690>
   10988:	4405      	add	r5, r0
			OUTS(bps, bpe);
   1098a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1098e:	e5f9      	b.n	10584 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10990:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   10994:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10996:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1099a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1099e:	d105      	bne.n	109ac <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   109a0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   109a4:	930c      	str	r3, [sp, #48]	; 0x30
   109a6:	2300      	movs	r3, #0
   109a8:	930d      	str	r3, [sp, #52]	; 0x34
   109aa:	e7df      	b.n	1096c <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   109ac:	2902      	cmp	r1, #2
   109ae:	d1dd      	bne.n	1096c <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   109b0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   109b4:	e7d1      	b.n	1095a <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   109b6:	2b02      	cmp	r3, #2
   109b8:	d123      	bne.n	10a02 <cbvprintf+0x48e>
			switch (length_mod) {
   109ba:	1ecb      	subs	r3, r1, #3
   109bc:	2b04      	cmp	r3, #4
   109be:	d813      	bhi.n	109e8 <cbvprintf+0x474>
   109c0:	e8df f003 	tbb	[pc, r3]
   109c4:	120a0a03 	.word	0x120a0a03
   109c8:	12          	.byte	0x12
   109c9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   109ca:	6822      	ldr	r2, [r4, #0]
   109cc:	920c      	str	r2, [sp, #48]	; 0x30
   109ce:	2300      	movs	r3, #0
   109d0:	1d20      	adds	r0, r4, #4
   109d2:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   109d4:	4604      	mov	r4, r0
   109d6:	e7c9      	b.n	1096c <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   109d8:	3407      	adds	r4, #7
   109da:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   109de:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   109e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   109e6:	e7f5      	b.n	109d4 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   109e8:	f854 3b04 	ldr.w	r3, [r4], #4
   109ec:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   109ee:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   109f0:	f04f 0300 	mov.w	r3, #0
   109f4:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   109f6:	d0d3      	beq.n	109a0 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   109f8:	2902      	cmp	r1, #2
   109fa:	d1b7      	bne.n	1096c <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   109fc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   10a00:	e7d0      	b.n	109a4 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   10a02:	2b04      	cmp	r3, #4
   10a04:	d107      	bne.n	10a16 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   10a06:	3407      	adds	r4, #7
   10a08:	f024 0407 	bic.w	r4, r4, #7
   10a0c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   10a10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   10a14:	e7aa      	b.n	1096c <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10a16:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   10a18:	bf04      	itt	eq
   10a1a:	f854 3b04 	ldreq.w	r3, [r4], #4
   10a1e:	930c      	streq	r3, [sp, #48]	; 0x30
   10a20:	e7a4      	b.n	1096c <cbvprintf+0x3f8>
		switch (conv->specifier) {
   10a22:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   10a26:	2878      	cmp	r0, #120	; 0x78
   10a28:	d8af      	bhi.n	1098a <cbvprintf+0x416>
   10a2a:	2862      	cmp	r0, #98	; 0x62
   10a2c:	d820      	bhi.n	10a70 <cbvprintf+0x4fc>
   10a2e:	2825      	cmp	r0, #37	; 0x25
   10a30:	f43f adb2 	beq.w	10598 <cbvprintf+0x24>
   10a34:	2858      	cmp	r0, #88	; 0x58
   10a36:	d1a8      	bne.n	1098a <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   10a38:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   10a3c:	9300      	str	r3, [sp, #0]
   10a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   10a42:	ab06      	add	r3, sp, #24
   10a44:	aa0e      	add	r2, sp, #56	; 0x38
   10a46:	f7ff fd45 	bl	104d4 <encode_uint>
   10a4a:	4681      	mov	r9, r0
			if (precision >= 0) {
   10a4c:	2f00      	cmp	r7, #0
   10a4e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   10a52:	db0b      	blt.n	10a6c <cbvprintf+0x4f8>
				conv->flag_zero = false;
   10a54:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   10a58:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   10a5c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   10a60:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   10a62:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   10a66:	d901      	bls.n	10a6c <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   10a68:	1aff      	subs	r7, r7, r3
   10a6a:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   10a6c:	4607      	mov	r7, r0
   10a6e:	e03c      	b.n	10aea <cbvprintf+0x576>
   10a70:	3863      	subs	r0, #99	; 0x63
   10a72:	2815      	cmp	r0, #21
   10a74:	d889      	bhi.n	1098a <cbvprintf+0x416>
   10a76:	a201      	add	r2, pc, #4	; (adr r2, 10a7c <cbvprintf+0x508>)
   10a78:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   10a7c:	00010afb 	.word	0x00010afb
   10a80:	00010b5d 	.word	0x00010b5d
   10a84:	0001098b 	.word	0x0001098b
   10a88:	0001098b 	.word	0x0001098b
   10a8c:	0001098b 	.word	0x0001098b
   10a90:	0001098b 	.word	0x0001098b
   10a94:	00010b5d 	.word	0x00010b5d
   10a98:	0001098b 	.word	0x0001098b
   10a9c:	0001098b 	.word	0x0001098b
   10aa0:	0001098b 	.word	0x0001098b
   10aa4:	0001098b 	.word	0x0001098b
   10aa8:	00010bbb 	.word	0x00010bbb
   10aac:	00010b89 	.word	0x00010b89
   10ab0:	00010b8d 	.word	0x00010b8d
   10ab4:	0001098b 	.word	0x0001098b
   10ab8:	0001098b 	.word	0x0001098b
   10abc:	00010ad5 	.word	0x00010ad5
   10ac0:	0001098b 	.word	0x0001098b
   10ac4:	00010b89 	.word	0x00010b89
   10ac8:	0001098b 	.word	0x0001098b
   10acc:	0001098b 	.word	0x0001098b
   10ad0:	00010b89 	.word	0x00010b89
			if (precision >= 0) {
   10ad4:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   10ad6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   10ada:	db0a      	blt.n	10af2 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   10adc:	4639      	mov	r1, r7
   10ade:	4648      	mov	r0, r9
   10ae0:	f00f fab6 	bl	20050 <strnlen>
			bpe = bps + len;
   10ae4:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   10ae8:	2600      	movs	r6, #0
		if (bps == NULL) {
   10aea:	f1b9 0f00 	cmp.w	r9, #0
   10aee:	d10c      	bne.n	10b0a <cbvprintf+0x596>
   10af0:	e74b      	b.n	1098a <cbvprintf+0x416>
				len = strlen(bps);
   10af2:	4648      	mov	r0, r9
   10af4:	f7fb fb82 	bl	c1fc <strlen>
   10af8:	e7f4      	b.n	10ae4 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10afc:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   10b00:	2600      	movs	r6, #0
			bpe = buf + 1;
   10b02:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   10b06:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   10b0a:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   10b0e:	b106      	cbz	r6, 10b12 <cbvprintf+0x59e>
			nj_len += 1U;
   10b10:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   10b12:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   10b16:	06d0      	lsls	r0, r2, #27
   10b18:	d569      	bpl.n	10bee <cbvprintf+0x67a>
			nj_len += 2U;
   10b1a:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   10b1c:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   10b1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   10b20:	bf48      	it	mi
   10b22:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   10b24:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   10b26:	bf48      	it	mi
   10b28:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   10b2a:	f1b8 0f00 	cmp.w	r8, #0
   10b2e:	dd76      	ble.n	10c1e <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   10b30:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   10b34:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   10b38:	f3c2 0380 	ubfx	r3, r2, #2, #1
   10b3c:	9303      	str	r3, [sp, #12]
   10b3e:	0753      	lsls	r3, r2, #29
   10b40:	d46d      	bmi.n	10c1e <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   10b42:	0650      	lsls	r0, r2, #25
   10b44:	d561      	bpl.n	10c0a <cbvprintf+0x696>
					if (sign != 0) {
   10b46:	b13e      	cbz	r6, 10b58 <cbvprintf+0x5e4>
						OUTC(sign);
   10b48:	4659      	mov	r1, fp
   10b4a:	4630      	mov	r0, r6
   10b4c:	47d0      	blx	sl
   10b4e:	2800      	cmp	r0, #0
   10b50:	db58      	blt.n	10c04 <cbvprintf+0x690>
						sign = 0;
   10b52:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   10b54:	3501      	adds	r5, #1
						sign = 0;
   10b56:	461e      	mov	r6, r3
					pad = '0';
   10b58:	2330      	movs	r3, #48	; 0x30
   10b5a:	e057      	b.n	10c0c <cbvprintf+0x698>
			if (conv->flag_plus) {
   10b5c:	071e      	lsls	r6, r3, #28
   10b5e:	d411      	bmi.n	10b84 <cbvprintf+0x610>
				sign = ' ';
   10b60:	f013 0610 	ands.w	r6, r3, #16
   10b64:	bf18      	it	ne
   10b66:	2620      	movne	r6, #32
			sint = value->sint;
   10b68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   10b6c:	2a00      	cmp	r2, #0
   10b6e:	f173 0100 	sbcs.w	r1, r3, #0
   10b72:	f6bf af61 	bge.w	10a38 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   10b76:	4252      	negs	r2, r2
   10b78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10b7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   10b80:	262d      	movs	r6, #45	; 0x2d
   10b82:	e759      	b.n	10a38 <cbvprintf+0x4c4>
				sign = '+';
   10b84:	262b      	movs	r6, #43	; 0x2b
   10b86:	e7ef      	b.n	10b68 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   10b88:	2600      	movs	r6, #0
   10b8a:	e755      	b.n	10a38 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   10b8c:	980c      	ldr	r0, [sp, #48]	; 0x30
   10b8e:	b348      	cbz	r0, 10be4 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10b90:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   10b94:	9300      	str	r3, [sp, #0]
   10b96:	aa0e      	add	r2, sp, #56	; 0x38
   10b98:	ab06      	add	r3, sp, #24
   10b9a:	2100      	movs	r1, #0
   10b9c:	f7ff fc9a 	bl	104d4 <encode_uint>
				conv->altform_0c = true;
   10ba0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   10ba4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10ba8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   10bac:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   10bb0:	4681      	mov	r9, r0
				conv->altform_0c = true;
   10bb2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   10bb6:	2600      	movs	r6, #0
				goto prec_int_pad0;
   10bb8:	e748      	b.n	10a4c <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   10bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   10bbc:	2907      	cmp	r1, #7
   10bbe:	f63f aee4 	bhi.w	1098a <cbvprintf+0x416>
   10bc2:	e8df f001 	tbb	[pc, r1]
   10bc6:	040d      	.short	0x040d
   10bc8:	08080d06 	.word	0x08080d06
   10bcc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   10bce:	701d      	strb	r5, [r3, #0]
		break;
   10bd0:	e6db      	b.n	1098a <cbvprintf+0x416>
		*(short *)dp = (short)count;
   10bd2:	801d      	strh	r5, [r3, #0]
		break;
   10bd4:	e6d9      	b.n	1098a <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   10bd6:	4628      	mov	r0, r5
   10bd8:	17e9      	asrs	r1, r5, #31
   10bda:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   10bde:	e6d4      	b.n	1098a <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10be0:	601d      	str	r5, [r3, #0]
		break;
   10be2:	e6d2      	b.n	1098a <cbvprintf+0x416>
			bpe = bps + 5;
   10be4:	4f2e      	ldr	r7, [pc, #184]	; (10ca0 <cbvprintf+0x72c>)
   10be6:	4606      	mov	r6, r0
			bps = "(nil)";
   10be8:	f1a7 0905 	sub.w	r9, r7, #5
   10bec:	e78d      	b.n	10b0a <cbvprintf+0x596>
		} else if (conv->altform_0) {
   10bee:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   10bf0:	bf48      	it	mi
   10bf2:	3301      	addmi	r3, #1
   10bf4:	e792      	b.n	10b1c <cbvprintf+0x5a8>
					OUTC(pad);
   10bf6:	4618      	mov	r0, r3
   10bf8:	4659      	mov	r1, fp
   10bfa:	9303      	str	r3, [sp, #12]
   10bfc:	47d0      	blx	sl
   10bfe:	2800      	cmp	r0, #0
   10c00:	9b03      	ldr	r3, [sp, #12]
   10c02:	da04      	bge.n	10c0e <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   10c04:	b013      	add	sp, #76	; 0x4c
   10c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   10c0a:	2320      	movs	r3, #32
   10c0c:	4445      	add	r5, r8
   10c0e:	4642      	mov	r2, r8
				while (width-- > 0) {
   10c10:	2a00      	cmp	r2, #0
   10c12:	eba5 0108 	sub.w	r1, r5, r8
   10c16:	f108 38ff 	add.w	r8, r8, #4294967295
   10c1a:	dcec      	bgt.n	10bf6 <cbvprintf+0x682>
   10c1c:	460d      	mov	r5, r1
		if (sign != 0) {
   10c1e:	b12e      	cbz	r6, 10c2c <cbvprintf+0x6b8>
			OUTC(sign);
   10c20:	4659      	mov	r1, fp
   10c22:	4630      	mov	r0, r6
   10c24:	47d0      	blx	sl
   10c26:	2800      	cmp	r0, #0
   10c28:	dbec      	blt.n	10c04 <cbvprintf+0x690>
   10c2a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   10c2c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10c30:	06d9      	lsls	r1, r3, #27
   10c32:	d401      	bmi.n	10c38 <cbvprintf+0x6c4>
   10c34:	071a      	lsls	r2, r3, #28
   10c36:	d505      	bpl.n	10c44 <cbvprintf+0x6d0>
				OUTC('0');
   10c38:	4659      	mov	r1, fp
   10c3a:	2030      	movs	r0, #48	; 0x30
   10c3c:	47d0      	blx	sl
   10c3e:	2800      	cmp	r0, #0
   10c40:	dbe0      	blt.n	10c04 <cbvprintf+0x690>
   10c42:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   10c44:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10c48:	06db      	lsls	r3, r3, #27
   10c4a:	d506      	bpl.n	10c5a <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   10c4c:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   10c50:	4659      	mov	r1, fp
   10c52:	47d0      	blx	sl
   10c54:	2800      	cmp	r0, #0
   10c56:	dbd5      	blt.n	10c04 <cbvprintf+0x690>
   10c58:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   10c5a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   10c5c:	442e      	add	r6, r5
   10c5e:	1b73      	subs	r3, r6, r5
   10c60:	2b00      	cmp	r3, #0
   10c62:	dc15      	bgt.n	10c90 <cbvprintf+0x71c>
			OUTS(bps, bpe);
   10c64:	463b      	mov	r3, r7
   10c66:	464a      	mov	r2, r9
   10c68:	4659      	mov	r1, fp
   10c6a:	4650      	mov	r0, sl
   10c6c:	f00c fafd 	bl	1d26a <outs>
   10c70:	2800      	cmp	r0, #0
   10c72:	dbc7      	blt.n	10c04 <cbvprintf+0x690>
   10c74:	4405      	add	r5, r0
		while (width > 0) {
   10c76:	44a8      	add	r8, r5
   10c78:	eba8 0305 	sub.w	r3, r8, r5
   10c7c:	2b00      	cmp	r3, #0
   10c7e:	f77f ae84 	ble.w	1098a <cbvprintf+0x416>
			OUTC(' ');
   10c82:	4659      	mov	r1, fp
   10c84:	2020      	movs	r0, #32
   10c86:	47d0      	blx	sl
   10c88:	2800      	cmp	r0, #0
   10c8a:	dbbb      	blt.n	10c04 <cbvprintf+0x690>
   10c8c:	3501      	adds	r5, #1
			--width;
   10c8e:	e7f3      	b.n	10c78 <cbvprintf+0x704>
				OUTC('0');
   10c90:	4659      	mov	r1, fp
   10c92:	2030      	movs	r0, #48	; 0x30
   10c94:	47d0      	blx	sl
   10c96:	2800      	cmp	r0, #0
   10c98:	dbb4      	blt.n	10c04 <cbvprintf+0x690>
   10c9a:	3501      	adds	r5, #1
   10c9c:	e7df      	b.n	10c5e <cbvprintf+0x6ea>
   10c9e:	bf00      	nop
   10ca0:	00020d4b 	.word	0x00020d4b

00010ca4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ca6:	4605      	mov	r5, r0
	__asm__ volatile(
   10ca8:	f04f 0340 	mov.w	r3, #64	; 0x40
   10cac:	f3ef 8611 	mrs	r6, BASEPRI
   10cb0:	f383 8812 	msr	BASEPRI_MAX, r3
   10cb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10cb8:	481e      	ldr	r0, [pc, #120]	; (10d34 <pm_state_notify+0x90>)
   10cba:	f008 fc39 	bl	19530 <z_spin_lock_valid>
   10cbe:	b968      	cbnz	r0, 10cdc <pm_state_notify+0x38>
   10cc0:	4a1d      	ldr	r2, [pc, #116]	; (10d38 <pm_state_notify+0x94>)
   10cc2:	491e      	ldr	r1, [pc, #120]	; (10d3c <pm_state_notify+0x98>)
   10cc4:	481e      	ldr	r0, [pc, #120]	; (10d40 <pm_state_notify+0x9c>)
   10cc6:	2381      	movs	r3, #129	; 0x81
   10cc8:	f00c f88b 	bl	1cde2 <printk>
   10ccc:	4919      	ldr	r1, [pc, #100]	; (10d34 <pm_state_notify+0x90>)
   10cce:	481d      	ldr	r0, [pc, #116]	; (10d44 <pm_state_notify+0xa0>)
   10cd0:	f00c f887 	bl	1cde2 <printk>
   10cd4:	4818      	ldr	r0, [pc, #96]	; (10d38 <pm_state_notify+0x94>)
   10cd6:	2181      	movs	r1, #129	; 0x81
   10cd8:	f00c fadd 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   10cdc:	4815      	ldr	r0, [pc, #84]	; (10d34 <pm_state_notify+0x90>)
   10cde:	f008 fc45 	bl	1956c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10ce2:	4b19      	ldr	r3, [pc, #100]	; (10d48 <pm_state_notify+0xa4>)
   10ce4:	681c      	ldr	r4, [r3, #0]
   10ce6:	2c00      	cmp	r4, #0
   10ce8:	bf38      	it	cc
   10cea:	2400      	movcc	r4, #0
   10cec:	b15c      	cbz	r4, 10d06 <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   10cee:	4f17      	ldr	r7, [pc, #92]	; (10d4c <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   10cf0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   10cf4:	2d00      	cmp	r5, #0
   10cf6:	bf08      	it	eq
   10cf8:	4613      	moveq	r3, r2
		if (callback) {
   10cfa:	b10b      	cbz	r3, 10d00 <pm_state_notify+0x5c>
			callback(z_power_state.state);
   10cfc:	7838      	ldrb	r0, [r7, #0]
   10cfe:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10d00:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10d02:	2c00      	cmp	r4, #0
   10d04:	d1f4      	bne.n	10cf0 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d06:	480b      	ldr	r0, [pc, #44]	; (10d34 <pm_state_notify+0x90>)
   10d08:	f008 fc20 	bl	1954c <z_spin_unlock_valid>
   10d0c:	b968      	cbnz	r0, 10d2a <pm_state_notify+0x86>
   10d0e:	4a0a      	ldr	r2, [pc, #40]	; (10d38 <pm_state_notify+0x94>)
   10d10:	490f      	ldr	r1, [pc, #60]	; (10d50 <pm_state_notify+0xac>)
   10d12:	480b      	ldr	r0, [pc, #44]	; (10d40 <pm_state_notify+0x9c>)
   10d14:	23ac      	movs	r3, #172	; 0xac
   10d16:	f00c f864 	bl	1cde2 <printk>
   10d1a:	4906      	ldr	r1, [pc, #24]	; (10d34 <pm_state_notify+0x90>)
   10d1c:	480d      	ldr	r0, [pc, #52]	; (10d54 <pm_state_notify+0xb0>)
   10d1e:	f00c f860 	bl	1cde2 <printk>
   10d22:	4805      	ldr	r0, [pc, #20]	; (10d38 <pm_state_notify+0x94>)
   10d24:	21ac      	movs	r1, #172	; 0xac
   10d26:	f00c fab6 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   10d2a:	f386 8811 	msr	BASEPRI, r6
   10d2e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d34:	20001c00 	.word	0x20001c00
   10d38:	00020b35 	.word	0x00020b35
   10d3c:	00020b87 	.word	0x00020b87
   10d40:	00020a75 	.word	0x00020a75
   10d44:	00020b9c 	.word	0x00020b9c
   10d48:	20001c04 	.word	0x20001c04
   10d4c:	20001c0c 	.word	0x20001c0c
   10d50:	00020b5b 	.word	0x00020b5b
   10d54:	00020b72 	.word	0x00020b72

00010d58 <pm_system_resume>:

void pm_system_resume(void)
{
   10d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   10d5a:	4b0f      	ldr	r3, [pc, #60]	; (10d98 <pm_system_resume+0x40>)
   10d5c:	681a      	ldr	r2, [r3, #0]
   10d5e:	b9ba      	cbnz	r2, 10d90 <pm_system_resume+0x38>
		post_ops_done = 1;
   10d60:	2201      	movs	r2, #1
   10d62:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   10d64:	4a0d      	ldr	r2, [pc, #52]	; (10d9c <pm_system_resume+0x44>)
   10d66:	ca07      	ldmia	r2, {r0, r1, r2}
   10d68:	ab01      	add	r3, sp, #4
   10d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   10d6e:	4a0c      	ldr	r2, [pc, #48]	; (10da0 <pm_system_resume+0x48>)
   10d70:	b14a      	cbz	r2, 10d86 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   10d72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10d76:	f00c fc99 	bl	1d6ac <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   10d7a:	2000      	movs	r0, #0
	}
}
   10d7c:	b005      	add	sp, #20
   10d7e:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   10d82:	f7ff bf8f 	b.w	10ca4 <pm_state_notify>
   10d86:	f382 8811 	msr	BASEPRI, r2
   10d8a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10d8e:	e7f4      	b.n	10d7a <pm_system_resume+0x22>
}
   10d90:	b005      	add	sp, #20
   10d92:	f85d fb04 	ldr.w	pc, [sp], #4
   10d96:	bf00      	nop
   10d98:	2000041c 	.word	0x2000041c
   10d9c:	20001c0c 	.word	0x20001c0c
   10da0:	0001d6ad 	.word	0x0001d6ad

00010da4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   10da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10da6:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   10da8:	466e      	mov	r6, sp
   10daa:	4601      	mov	r1, r0
{
   10dac:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   10dae:	4630      	mov	r0, r6
   10db0:	f00c fa79 	bl	1d2a6 <pm_policy_next_state>
   10db4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10db8:	4c1f      	ldr	r4, [pc, #124]	; (10e38 <pm_system_suspend+0x94>)
   10dba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   10dbe:	7820      	ldrb	r0, [r4, #0]
   10dc0:	2800      	cmp	r0, #0
   10dc2:	d037      	beq.n	10e34 <pm_system_suspend+0x90>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   10dc4:	4b1d      	ldr	r3, [pc, #116]	; (10e3c <pm_system_suspend+0x98>)
   10dc6:	2000      	movs	r0, #0
   10dc8:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   10dca:	1c6b      	adds	r3, r5, #1
   10dcc:	d01d      	beq.n	10e0a <pm_system_suspend+0x66>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   10dce:	4291      	cmp	r1, r2
   10dd0:	d20c      	bcs.n	10dec <pm_system_suspend+0x48>
   10dd2:	491b      	ldr	r1, [pc, #108]	; (10e40 <pm_system_suspend+0x9c>)
   10dd4:	4a1b      	ldr	r2, [pc, #108]	; (10e44 <pm_system_suspend+0xa0>)
   10dd6:	481c      	ldr	r0, [pc, #112]	; (10e48 <pm_system_suspend+0xa4>)
   10dd8:	23ca      	movs	r3, #202	; 0xca
   10dda:	f00c f802 	bl	1cde2 <printk>
   10dde:	481b      	ldr	r0, [pc, #108]	; (10e4c <pm_system_suspend+0xa8>)
   10de0:	f00b ffff 	bl	1cde2 <printk>
   10de4:	4817      	ldr	r0, [pc, #92]	; (10e44 <pm_system_suspend+0xa0>)
   10de6:	21ca      	movs	r1, #202	; 0xca
   10de8:	f00c fa55 	bl	1d296 <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   10dec:	68a7      	ldr	r7, [r4, #8]
   10dee:	4818      	ldr	r0, [pc, #96]	; (10e50 <pm_system_suspend+0xac>)
   10df0:	4a18      	ldr	r2, [pc, #96]	; (10e54 <pm_system_suspend+0xb0>)
   10df2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10df6:	2100      	movs	r1, #0
   10df8:	2300      	movs	r3, #0
   10dfa:	fbe6 0107 	umlal	r0, r1, r6, r7
   10dfe:	f7ef f97f 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10e02:	2101      	movs	r1, #1
   10e04:	1a28      	subs	r0, r5, r0
   10e06:	f00b f90d 	bl	1c024 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10e0a:	f009 fe11 	bl	1aa30 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   10e0e:	2001      	movs	r0, #1
   10e10:	f7ff ff48 	bl	10ca4 <pm_state_notify>
	pm_state_set(z_power_state);
   10e14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   10e18:	ab05      	add	r3, sp, #20
   10e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   10e1e:	4a0e      	ldr	r2, [pc, #56]	; (10e58 <pm_system_suspend+0xb4>)
   10e20:	b11a      	cbz	r2, 10e2a <pm_system_suspend+0x86>
		pm_power_state_set(info);
   10e22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10e26:	f00c fc2e 	bl	1d686 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   10e2a:	f7ff ff95 	bl	10d58 <pm_system_resume>
	k_sched_unlock();
   10e2e:	f00a fb43 	bl	1b4b8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   10e32:	7820      	ldrb	r0, [r4, #0]
}
   10e34:	b009      	add	sp, #36	; 0x24
   10e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e38:	20001c0c 	.word	0x20001c0c
   10e3c:	2000041c 	.word	0x2000041c
   10e40:	00020dc2 	.word	0x00020dc2
   10e44:	00020d4c 	.word	0x00020d4c
   10e48:	00020a75 	.word	0x00020a75
   10e4c:	00020e02 	.word	0x00020e02
   10e50:	000f423f 	.word	0x000f423f
   10e54:	000f4240 	.word	0x000f4240
   10e58:	0001d687 	.word	0x0001d687

00010e5c <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   10e5c:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   10e5e:	4d06      	ldr	r5, [pc, #24]	; (10e78 <scan_default_param_set+0x1c>)
   10e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   10e62:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   10e64:	ac01      	add	r4, sp, #4
   10e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   10e68:	ae01      	add	r6, sp, #4
   10e6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e6c:	4c03      	ldr	r4, [pc, #12]	; (10e7c <scan_default_param_set+0x20>)
   10e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e70:	682b      	ldr	r3, [r5, #0]
   10e72:	6023      	str	r3, [r4, #0]
}
   10e74:	b006      	add	sp, #24
   10e76:	bd70      	pop	{r4, r5, r6, pc}
   10e78:	00020390 	.word	0x00020390
   10e7c:	20001c50 	.word	0x20001c50

00010e80 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
   10e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
   10e84:	7803      	ldrb	r3, [r0, #0]
   10e86:	2b09      	cmp	r3, #9
{
   10e88:	4605      	mov	r5, r0
   10e8a:	460c      	mov	r4, r1
	switch (data->type) {
   10e8c:	d11c      	bne.n	10ec8 <adv_data_found+0x48>
	return CONFIG_BT_SCAN_NAME_CNT && bt_scan.scan_filters.name.enabled;
   10e8e:	4e11      	ldr	r6, [pc, #68]	; (10ed4 <adv_data_found+0x54>)
	if (is_name_filter_enabled()) {
   10e90:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   10e94:	b1c3      	cbz	r3, 10ec8 <adv_data_found+0x48>
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   10e96:	f896 a020 	ldrb.w	sl, [r6, #32]
	uint8_t data_len = data->data_len;
   10e9a:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
   10e9e:	2700      	movs	r7, #0
   10ea0:	4557      	cmp	r7, sl
   10ea2:	d211      	bcs.n	10ec8 <adv_data_found+0x48>
		if (adv_name_cmp(data->data,
   10ea4:	eb06 1947 	add.w	r9, r6, r7, lsl #5
	return strncmp(target_name, data, data_len) == 0;
   10ea8:	6869      	ldr	r1, [r5, #4]
   10eaa:	4642      	mov	r2, r8
   10eac:	4648      	mov	r0, r9
   10eae:	f00f f8bd 	bl	2002c <strncmp>
		if (adv_name_cmp(data->data,
   10eb2:	b960      	cbnz	r0, 10ece <adv_data_found+0x4e>
			control->filter_match_cnt++;
   10eb4:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
   10eb6:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
   10eba:	3301      	adds	r3, #1
   10ebc:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
   10ebe:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
   10ec0:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
   10ec4:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
   10ec6:	70a3      	strb	r3, [r4, #2]
	default:
		break;
	}

	return true;
}
   10ec8:	2001      	movs	r0, #1
   10eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < counter; i++) {
   10ece:	3701      	adds	r7, #1
   10ed0:	e7e6      	b.n	10ea0 <adv_data_found+0x20>
   10ed2:	bf00      	nop
   10ed4:	20001c18 	.word	0x20001c18

00010ed8 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   10ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10eda:	4b0a      	ldr	r3, [pc, #40]	; (10f04 <notify_filter_matched.constprop.0+0x2c>)
   10edc:	681c      	ldr	r4, [r3, #0]
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   10ede:	4605      	mov	r5, r0
   10ee0:	460e      	mov	r6, r1
   10ee2:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   10ee4:	b10c      	cbz	r4, 10eea <notify_filter_matched.constprop.0+0x12>
   10ee6:	3c04      	subs	r4, #4
   10ee8:	b904      	cbnz	r4, 10eec <notify_filter_matched.constprop.0+0x14>
}
   10eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   10eec:	6823      	ldr	r3, [r4, #0]
   10eee:	681b      	ldr	r3, [r3, #0]
   10ef0:	b11b      	cbz	r3, 10efa <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   10ef2:	463a      	mov	r2, r7
   10ef4:	4631      	mov	r1, r6
   10ef6:	4628      	mov	r0, r5
   10ef8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   10efa:	1d23      	adds	r3, r4, #4
   10efc:	d0f5      	beq.n	10eea <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10efe:	6864      	ldr	r4, [r4, #4]
   10f00:	e7f0      	b.n	10ee4 <notify_filter_matched.constprop.0+0xc>
   10f02:	bf00      	nop
   10f04:	20001c6c 	.word	0x20001c6c

00010f08 <bt_scan_cb_register>:
	if (!cb) {
   10f08:	b150      	cbz	r0, 10f20 <bt_scan_cb_register+0x18>
	parent->next = child;
   10f0a:	2300      	movs	r3, #0
   10f0c:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   10f0e:	4b05      	ldr	r3, [pc, #20]	; (10f24 <bt_scan_cb_register+0x1c>)
   10f10:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   10f12:	1d02      	adds	r2, r0, #4
   10f14:	b911      	cbnz	r1, 10f1c <bt_scan_cb_register+0x14>
	list->head = node;
   10f16:	e9c3 2200 	strd	r2, r2, [r3]
}
   10f1a:	4770      	bx	lr
	parent->next = child;
   10f1c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10f1e:	605a      	str	r2, [r3, #4]
}
   10f20:	4770      	bx	lr
   10f22:	bf00      	nop
   10f24:	20001c6c 	.word	0x20001c6c

00010f28 <bt_scan_filter_add>:
{
   10f28:	b570      	push	{r4, r5, r6, lr}
   10f2a:	4604      	mov	r4, r0
	if (!data) {
   10f2c:	460d      	mov	r5, r1
   10f2e:	b379      	cbz	r1, 10f90 <bt_scan_filter_add+0x68>
	return z_impl_k_mutex_lock(mutex, timeout);
   10f30:	4819      	ldr	r0, [pc, #100]	; (10f98 <bt_scan_filter_add+0x70>)
   10f32:	f04f 32ff 	mov.w	r2, #4294967295
   10f36:	f04f 33ff 	mov.w	r3, #4294967295
   10f3a:	f008 fb4b 	bl	195d4 <z_impl_k_mutex_lock>
	switch (type) {
   10f3e:	b15c      	cbz	r4, 10f58 <bt_scan_filter_add+0x30>
   10f40:	3c01      	subs	r4, #1
   10f42:	2c04      	cmp	r4, #4
   10f44:	bf94      	ite	ls
   10f46:	f06f 040b 	mvnls.w	r4, #11
   10f4a:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
   10f4e:	4812      	ldr	r0, [pc, #72]	; (10f98 <bt_scan_filter_add+0x70>)
   10f50:	f008 fc40 	bl	197d4 <z_impl_k_mutex_unlock>
}
   10f54:	4620      	mov	r0, r4
   10f56:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   10f58:	4e10      	ldr	r6, [pc, #64]	; (10f9c <bt_scan_filter_add+0x74>)
	if (counter >= CONFIG_BT_SCAN_NAME_CNT) {
   10f5a:	f896 4020 	ldrb.w	r4, [r6, #32]
   10f5e:	b98c      	cbnz	r4, 10f84 <bt_scan_filter_add+0x5c>
	name_len = strlen(name);
   10f60:	4628      	mov	r0, r5
   10f62:	f7fb f94b 	bl	c1fc <strlen>
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   10f66:	1e43      	subs	r3, r0, #1
   10f68:	2b1f      	cmp	r3, #31
	name_len = strlen(name);
   10f6a:	4602      	mov	r2, r0
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   10f6c:	d80d      	bhi.n	10f8a <bt_scan_filter_add+0x62>
	memcpy(bt_scan.scan_filters.name.target_name[counter],
   10f6e:	2354      	movs	r3, #84	; 0x54
   10f70:	4629      	mov	r1, r5
   10f72:	4630      	mov	r0, r6
   10f74:	f00f f837 	bl	1ffe6 <__memcpy_chk>
	bt_scan.scan_filters.name.cnt++;
   10f78:	f896 3020 	ldrb.w	r3, [r6, #32]
   10f7c:	3301      	adds	r3, #1
   10f7e:	f886 3020 	strb.w	r3, [r6, #32]
	return 0;
   10f82:	e7e4      	b.n	10f4e <bt_scan_filter_add+0x26>
		return -ENOMEM;
   10f84:	f06f 040b 	mvn.w	r4, #11
   10f88:	e7e1      	b.n	10f4e <bt_scan_filter_add+0x26>
		return -EINVAL;
   10f8a:	f06f 0415 	mvn.w	r4, #21
   10f8e:	e7de      	b.n	10f4e <bt_scan_filter_add+0x26>
		return -EINVAL;
   10f90:	f06f 0415 	mvn.w	r4, #21
   10f94:	e7de      	b.n	10f54 <bt_scan_filter_add+0x2c>
   10f96:	bf00      	nop
   10f98:	20000654 	.word	0x20000654
   10f9c:	20001c18 	.word	0x20001c18

00010fa0 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
   10fa0:	4b07      	ldr	r3, [pc, #28]	; (10fc0 <bt_scan_filter_disable+0x20>)
   10fa2:	2200      	movs	r2, #0
   10fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.short_name.enabled = false;
   10fa8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bt_scan.scan_filters.addr.enabled = false;
   10fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.uuid.enabled = false;
   10fb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	bt_scan.scan_filters.appearance.enabled = false;
   10fb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   10fb8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   10fbc:	4770      	bx	lr
   10fbe:	bf00      	nop
   10fc0:	20001c18 	.word	0x20001c18

00010fc4 <bt_scan_filter_enable>:
{
   10fc4:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
   10fc6:	0683      	lsls	r3, r0, #26
   10fc8:	d025      	beq.n	11016 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
   10fca:	f7ff ffe9 	bl	10fa0 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
   10fce:	4b13      	ldr	r3, [pc, #76]	; (1101c <bt_scan_filter_enable+0x58>)
   10fd0:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   10fd4:	bf1c      	itt	ne
   10fd6:	2201      	movne	r2, #1
   10fd8:	f883 2025 	strbne.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_NAME_FILTER) {
   10fdc:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   10fde:	bf44      	itt	mi
   10fe0:	2201      	movmi	r2, #1
   10fe2:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   10fe6:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   10fe8:	bf44      	itt	mi
   10fea:	2201      	movmi	r2, #1
   10fec:	f883 2023 	strbmi.w	r2, [r3, #35]	; 0x23
	if (mode & BT_SCAN_UUID_FILTER) {
   10ff0:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   10ff2:	bf44      	itt	mi
   10ff4:	2201      	movmi	r2, #1
   10ff6:	f883 2029 	strbmi.w	r2, [r3, #41]	; 0x29
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   10ffa:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   10ffc:	bf44      	itt	mi
   10ffe:	2201      	movmi	r2, #1
   11000:	f883 202d 	strbmi.w	r2, [r3, #45]	; 0x2d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   11004:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   11006:	bf44      	itt	mi
   11008:	2201      	movmi	r2, #1
   1100a:	f883 202f 	strbmi.w	r2, [r3, #47]	; 0x2f
	filters->all_mode = match_all;
   1100e:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
	return 0;
   11012:	2000      	movs	r0, #0
}
   11014:	bd08      	pop	{r3, pc}
		return -EINVAL;
   11016:	f06f 0015 	mvn.w	r0, #21
   1101a:	e7fb      	b.n	11014 <bt_scan_filter_enable+0x50>
   1101c:	20001c18 	.word	0x20001c18

00011020 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   11020:	b570      	push	{r4, r5, r6, lr}
   11022:	b086      	sub	sp, #24
   11024:	460e      	mov	r6, r1
   11026:	4605      	mov	r5, r0
	bt_scan_stop();
   11028:	f00c f942 	bl	1d2b0 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   1102c:	4b18      	ldr	r3, [pc, #96]	; (11090 <scan_connect_with_target.part.0+0x70>)
   1102e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11030:	ac02      	add	r4, sp, #8
   11032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   11036:	ab01      	add	r3, sp, #4
   11038:	4621      	mov	r1, r4
   1103a:	4a16      	ldr	r2, [pc, #88]	; (11094 <scan_connect_with_target.part.0+0x74>)
   1103c:	4630      	mov	r0, r6
   1103e:	f002 ff2f 	bl	13ea0 <bt_conn_le_create>
	if (err) {
   11042:	4b15      	ldr	r3, [pc, #84]	; (11098 <scan_connect_with_target.part.0+0x78>)
   11044:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11046:	681c      	ldr	r4, [r3, #0]
	if (err) {
   11048:	b168      	cbz	r0, 11066 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1104a:	b10c      	cbz	r4, 11050 <scan_connect_with_target.part.0+0x30>
   1104c:	3c04      	subs	r4, #4
   1104e:	b90c      	cbnz	r4, 11054 <scan_connect_with_target.part.0+0x34>
}
   11050:	b006      	add	sp, #24
   11052:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   11054:	6823      	ldr	r3, [r4, #0]
   11056:	689b      	ldr	r3, [r3, #8]
   11058:	b10b      	cbz	r3, 1105e <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   1105a:	4628      	mov	r0, r5
   1105c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1105e:	1d22      	adds	r2, r4, #4
   11060:	d0f6      	beq.n	11050 <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11062:	6864      	ldr	r4, [r4, #4]
   11064:	e7f1      	b.n	1104a <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11066:	b91c      	cbnz	r4, 11070 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   11068:	9801      	ldr	r0, [sp, #4]
   1106a:	f002 fcaf 	bl	139cc <bt_conn_unref>
   1106e:	e7ef      	b.n	11050 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   11070:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11072:	3c04      	subs	r4, #4
   11074:	2c00      	cmp	r4, #0
   11076:	d0f7      	beq.n	11068 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   11078:	6823      	ldr	r3, [r4, #0]
   1107a:	68db      	ldr	r3, [r3, #12]
   1107c:	b113      	cbz	r3, 11084 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   1107e:	4631      	mov	r1, r6
   11080:	4628      	mov	r0, r5
   11082:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   11084:	1d23      	adds	r3, r4, #4
   11086:	d0ef      	beq.n	11068 <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11088:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1108a:	2c00      	cmp	r4, #0
   1108c:	d1f1      	bne.n	11072 <scan_connect_with_target.part.0+0x52>
   1108e:	e7eb      	b.n	11068 <scan_connect_with_target.part.0+0x48>
   11090:	000203a4 	.word	0x000203a4
   11094:	20001c64 	.word	0x20001c64
   11098:	20001c6c 	.word	0x20001c6c

0001109c <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   1109c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   110a0:	4f31      	ldr	r7, [pc, #196]	; (11168 <scan_recv+0xcc>)
{
   110a2:	b094      	sub	sp, #80	; 0x50
	memset(&scan_control, 0, sizeof(scan_control));
   110a4:	2250      	movs	r2, #80	; 0x50
{
   110a6:	4605      	mov	r5, r0
   110a8:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   110aa:	4668      	mov	r0, sp
   110ac:	2100      	movs	r1, #0
   110ae:	f00e ffad 	bl	2000c <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   110b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
   110b6:	f88d 2003 	strb.w	r2, [sp, #3]
	control->filter_cnt = 0;
   110ba:	2200      	movs	r2, #0
   110bc:	f88d 2000 	strb.w	r2, [sp]
	if (is_name_filter_enabled()) {
   110c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   110c4:	b112      	cbz	r2, 110cc <scan_recv+0x30>
		control->filter_cnt++;
   110c6:	2301      	movs	r3, #1
   110c8:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   110cc:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   110ce:	4620      	mov	r0, r4
   110d0:	f003 0301 	and.w	r3, r3, #1
   110d4:	f88d 3004 	strb.w	r3, [sp, #4]
   110d8:	f00e f99d 	bl	1f416 <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   110dc:	4923      	ldr	r1, [pc, #140]	; (1116c <scan_recv+0xd0>)
	state->len = buf->len;
   110de:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   110e2:	4606      	mov	r6, r0
   110e4:	466a      	mov	r2, sp
   110e6:	4620      	mov	r0, r4
   110e8:	f00c fdef 	bl	1dcca <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   110ec:	4b20      	ldr	r3, [pc, #128]	; (11170 <scan_recv+0xd4>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   110ee:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   110f0:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.adv_data = ad;
   110f4:	e9cd 3403 	strd	r3, r4, [sp, #12]
	if (control->all_mode &&
   110f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
	scan_control.device_info.recv_info = info;
   110fc:	9502      	str	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
   110fe:	fa10 f686 	uxtah	r6, r0, r6
   11102:	6026      	str	r6, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   11104:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   11106:	b1ab      	cbz	r3, 11134 <scan_recv+0x98>
   11108:	f89d 2001 	ldrb.w	r2, [sp, #1]
   1110c:	f89d 3000 	ldrb.w	r3, [sp]
   11110:	429a      	cmp	r2, r3
   11112:	d113      	bne.n	1113c <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   11114:	f89d 2004 	ldrb.w	r2, [sp, #4]
   11118:	a905      	add	r1, sp, #20
   1111a:	a802      	add	r0, sp, #8
   1111c:	f7ff fedc 	bl	10ed8 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   11120:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   11124:	b11b      	cbz	r3, 1112e <scan_recv+0x92>
   11126:	4621      	mov	r1, r4
   11128:	4668      	mov	r0, sp
   1112a:	f7ff ff79 	bl	11020 <scan_connect_with_target.part.0>
}
   1112e:	b014      	add	sp, #80	; 0x50
   11130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   11134:	f89d 3002 	ldrb.w	r3, [sp, #2]
   11138:	2b00      	cmp	r3, #0
   1113a:	d1eb      	bne.n	11114 <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1113c:	4b0d      	ldr	r3, [pc, #52]	; (11174 <scan_recv+0xd8>)
   1113e:	681c      	ldr	r4, [r3, #0]
   11140:	2c00      	cmp	r4, #0
   11142:	d0f4      	beq.n	1112e <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   11144:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11148:	3c04      	subs	r4, #4
   1114a:	2c00      	cmp	r4, #0
   1114c:	d0ef      	beq.n	1112e <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   1114e:	6823      	ldr	r3, [r4, #0]
   11150:	685b      	ldr	r3, [r3, #4]
   11152:	b113      	cbz	r3, 1115a <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   11154:	4629      	mov	r1, r5
   11156:	a802      	add	r0, sp, #8
   11158:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1115a:	1d23      	adds	r3, r4, #4
   1115c:	d0e7      	beq.n	1112e <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1115e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   11160:	2c00      	cmp	r4, #0
   11162:	d1f1      	bne.n	11148 <scan_recv+0xac>
   11164:	e7e3      	b.n	1112e <scan_recv+0x92>
   11166:	bf00      	nop
   11168:	20001c18 	.word	0x20001c18
   1116c:	00010e81 	.word	0x00010e81
   11170:	20001c64 	.word	0x20001c64
   11174:	20001c6c 	.word	0x20001c6c

00011178 <bt_scan_init>:
{
   11178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   1117a:	4c18      	ldr	r4, [pc, #96]	; (111dc <bt_scan_init+0x64>)
{
   1117c:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   1117e:	4818      	ldr	r0, [pc, #96]	; (111e0 <bt_scan_init+0x68>)
   11180:	f002 fa34 	bl	135ec <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   11184:	2234      	movs	r2, #52	; 0x34
   11186:	2100      	movs	r1, #0
   11188:	4620      	mov	r0, r4
   1118a:	f00e ff3f 	bl	2000c <memset>
	if (init) {
   1118e:	4627      	mov	r7, r4
   11190:	b1d5      	cbz	r5, 111c8 <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   11192:	792b      	ldrb	r3, [r5, #4]
   11194:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (init->scan_param) {
   11198:	682c      	ldr	r4, [r5, #0]
   1119a:	b164      	cbz	r4, 111b6 <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   1119c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1119e:	f107 0638 	add.w	r6, r7, #56	; 0x38
   111a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   111a4:	6823      	ldr	r3, [r4, #0]
   111a6:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   111a8:	68aa      	ldr	r2, [r5, #8]
   111aa:	b13a      	cbz	r2, 111bc <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   111ac:	4b0d      	ldr	r3, [pc, #52]	; (111e4 <bt_scan_init+0x6c>)
   111ae:	6810      	ldr	r0, [r2, #0]
   111b0:	6851      	ldr	r1, [r2, #4]
   111b2:	c303      	stmia	r3!, {r0, r1}
}
   111b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   111b6:	f7ff fe51 	bl	10e5c <scan_default_param_set>
   111ba:	e7f5      	b.n	111a8 <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   111bc:	490a      	ldr	r1, [pc, #40]	; (111e8 <bt_scan_init+0x70>)
   111be:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   111c2:	e9c7 1313 	strd	r1, r3, [r7, #76]	; 0x4c
}
   111c6:	e7f5      	b.n	111b4 <bt_scan_init+0x3c>
		scan_default_param_set();
   111c8:	f7ff fe48 	bl	10e5c <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   111cc:	4a06      	ldr	r2, [pc, #24]	; (111e8 <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   111ce:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
	bt_scan.conn_param = *conn_param;
   111d2:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   111d6:	e9c4 2313 	strd	r2, r3, [r4, #76]	; 0x4c
}
   111da:	e7eb      	b.n	111b4 <bt_scan_init+0x3c>
   111dc:	20001c18 	.word	0x20001c18
   111e0:	20000420 	.word	0x20000420
   111e4:	20001c64 	.word	0x20001c64
   111e8:	00280018 	.word	0x00280018

000111ec <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   111ec:	b108      	cbz	r0, 111f2 <bt_scan_start+0x6>
   111ee:	2801      	cmp	r0, #1
   111f0:	d106      	bne.n	11200 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   111f2:	4b05      	ldr	r3, [pc, #20]	; (11208 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   111f4:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   111f6:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   111fa:	4804      	ldr	r0, [pc, #16]	; (1120c <bt_scan_start+0x20>)
   111fc:	f002 b960 	b.w	134c0 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   11200:	f06f 0015 	mvn.w	r0, #21
   11204:	4770      	bx	lr
   11206:	bf00      	nop
   11208:	20001c18 	.word	0x20001c18
   1120c:	20001c50 	.word	0x20001c50

00011210 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   11210:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   11212:	4e26      	ldr	r6, [pc, #152]	; (112ac <tc_aes128_set_encrypt_key+0x9c>)
{
   11214:	4607      	mov	r7, r0
   11216:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   11218:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1121a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   1121c:	ad01      	add	r5, sp, #4
   1121e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11220:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11224:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11228:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   1122c:	4638      	mov	r0, r7
   1122e:	2f00      	cmp	r7, #0
   11230:	d038      	beq.n	112a4 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   11232:	2c00      	cmp	r4, #0
   11234:	d038      	beq.n	112a8 <tc_aes128_set_encrypt_key+0x98>
   11236:	1f38      	subs	r0, r7, #4
   11238:	4621      	mov	r1, r4
   1123a:	4602      	mov	r2, r0
   1123c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1123e:	784b      	ldrb	r3, [r1, #1]
   11240:	780d      	ldrb	r5, [r1, #0]
   11242:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11244:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   11248:	78cd      	ldrb	r5, [r1, #3]
   1124a:	432b      	orrs	r3, r5
   1124c:	788d      	ldrb	r5, [r1, #2]
   1124e:	3104      	adds	r1, #4
   11250:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   11254:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11256:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1125a:	d1f0      	bne.n	1123e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1125c:	4c14      	ldr	r4, [pc, #80]	; (112b0 <tc_aes128_set_encrypt_key+0xa0>)
   1125e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   11260:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   11262:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   11264:	d116      	bne.n	11294 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11266:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1126a:	5ca5      	ldrb	r5, [r4, r2]
   1126c:	0e1a      	lsrs	r2, r3, #24
   1126e:	5ca2      	ldrb	r2, [r4, r2]
   11270:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   11274:	f3c3 2507 	ubfx	r5, r3, #8, #8
   11278:	b2db      	uxtb	r3, r3
   1127a:	5d65      	ldrb	r5, [r4, r5]
   1127c:	5ce3      	ldrb	r3, [r4, r3]
   1127e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   11282:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   11286:	ad0c      	add	r5, sp, #48	; 0x30
   11288:	f021 0303 	bic.w	r3, r1, #3
   1128c:	442b      	add	r3, r5
   1128e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   11292:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   11294:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   11298:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1129a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   1129c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1129e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   112a0:	d1de      	bne.n	11260 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   112a2:	2001      	movs	r0, #1
}
   112a4:	b00d      	add	sp, #52	; 0x34
   112a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   112a8:	4620      	mov	r0, r4
   112aa:	e7fb      	b.n	112a4 <tc_aes128_set_encrypt_key+0x94>
   112ac:	000203b4 	.word	0x000203b4
   112b0:	00020e27 	.word	0x00020e27

000112b4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   112b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   112b8:	4615      	mov	r5, r2
   112ba:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   112bc:	4606      	mov	r6, r0
   112be:	2800      	cmp	r0, #0
   112c0:	d058      	beq.n	11374 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   112c2:	2900      	cmp	r1, #0
   112c4:	d059      	beq.n	1137a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   112c6:	2a00      	cmp	r2, #0
   112c8:	d059      	beq.n	1137e <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   112ca:	2310      	movs	r3, #16
   112cc:	460a      	mov	r2, r1
   112ce:	4668      	mov	r0, sp
   112d0:	4619      	mov	r1, r3
   112d2:	f00b ffef 	bl	1d2b4 <_copy>
	add_round_key(state, s->words);
   112d6:	4629      	mov	r1, r5
   112d8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   112da:	4c2a      	ldr	r4, [pc, #168]	; (11384 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   112dc:	f00c f802 	bl	1d2e4 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   112e0:	f105 0710 	add.w	r7, r5, #16
   112e4:	46a1      	mov	r9, r4
   112e6:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   112e8:	46e8      	mov	r8, sp
{
   112ea:	466a      	mov	r2, sp
   112ec:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   112ee:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   112f0:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   112f2:	5c61      	ldrb	r1, [r4, r1]
   112f4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   112f8:	d1f9      	bne.n	112ee <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   112fa:	4668      	mov	r0, sp
   112fc:	f00c f837 	bl	1d36e <shift_rows>
	mult_row_column(t, s);
   11300:	4669      	mov	r1, sp
   11302:	a804      	add	r0, sp, #16
   11304:	f00c f86c 	bl	1d3e0 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   11308:	a901      	add	r1, sp, #4
   1130a:	a805      	add	r0, sp, #20
   1130c:	f00c f868 	bl	1d3e0 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   11310:	a902      	add	r1, sp, #8
   11312:	a806      	add	r0, sp, #24
   11314:	f00c f864 	bl	1d3e0 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   11318:	a903      	add	r1, sp, #12
   1131a:	a807      	add	r0, sp, #28
   1131c:	f00c f860 	bl	1d3e0 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   11320:	2310      	movs	r3, #16
   11322:	4619      	mov	r1, r3
   11324:	eb0d 0203 	add.w	r2, sp, r3
   11328:	4668      	mov	r0, sp
   1132a:	f00b ffc3 	bl	1d2b4 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1132e:	4639      	mov	r1, r7
   11330:	4668      	mov	r0, sp
   11332:	3710      	adds	r7, #16
   11334:	f00b ffd6 	bl	1d2e4 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   11338:	42af      	cmp	r7, r5
   1133a:	d1d5      	bne.n	112e8 <tc_aes_encrypt+0x34>
   1133c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   1133e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   11342:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   11344:	f819 3003 	ldrb.w	r3, [r9, r3]
   11348:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   1134c:	d1f7      	bne.n	1133e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1134e:	4668      	mov	r0, sp
   11350:	f00c f80d 	bl	1d36e <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   11354:	4629      	mov	r1, r5
   11356:	4668      	mov	r0, sp
   11358:	f00b ffc4 	bl	1d2e4 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1135c:	2310      	movs	r3, #16
   1135e:	4619      	mov	r1, r3
   11360:	466a      	mov	r2, sp
   11362:	4630      	mov	r0, r6
   11364:	f00b ffa6 	bl	1d2b4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   11368:	4668      	mov	r0, sp
   1136a:	2210      	movs	r2, #16
   1136c:	4621      	mov	r1, r4
   1136e:	f00b ffae 	bl	1d2ce <_set>

	return TC_CRYPTO_SUCCESS;
   11372:	2001      	movs	r0, #1
}
   11374:	b009      	add	sp, #36	; 0x24
   11376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1137a:	4608      	mov	r0, r1
   1137c:	e7fa      	b.n	11374 <tc_aes_encrypt+0xc0>
   1137e:	4610      	mov	r0, r2
   11380:	e7f8      	b.n	11374 <tc_aes_encrypt+0xc0>
   11382:	bf00      	nop
   11384:	00020e27 	.word	0x00020e27

00011388 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11388:	4901      	ldr	r1, [pc, #4]	; (11390 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1138a:	2210      	movs	r2, #16
	str	r2, [r1]
   1138c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1138e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11390:	e000ed10 	.word	0xe000ed10

00011394 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11394:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   11396:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11398:	f380 8811 	msr	BASEPRI, r0
	isb
   1139c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   113a0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   113a4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   113a6:	b662      	cpsie	i
	isb
   113a8:	f3bf 8f6f 	isb	sy

	bx	lr
   113ac:	4770      	bx	lr
   113ae:	bf00      	nop

000113b0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   113b0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   113b2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   113b4:	f381 8811 	msr	BASEPRI, r1

	wfe
   113b8:	bf20      	wfe

	msr	BASEPRI, r0
   113ba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   113be:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   113c0:	4770      	bx	lr
   113c2:	bf00      	nop

000113c4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   113c4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   113c6:	2b00      	cmp	r3, #0
   113c8:	db08      	blt.n	113dc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   113ca:	2201      	movs	r2, #1
   113cc:	f000 001f 	and.w	r0, r0, #31
   113d0:	fa02 f000 	lsl.w	r0, r2, r0
   113d4:	095b      	lsrs	r3, r3, #5
   113d6:	4a02      	ldr	r2, [pc, #8]	; (113e0 <arch_irq_enable+0x1c>)
   113d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   113dc:	4770      	bx	lr
   113de:	bf00      	nop
   113e0:	e000e100 	.word	0xe000e100

000113e4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   113e4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   113e6:	2b00      	cmp	r3, #0
   113e8:	db0d      	blt.n	11406 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   113ea:	2201      	movs	r2, #1
   113ec:	095b      	lsrs	r3, r3, #5
   113ee:	f000 001f 	and.w	r0, r0, #31
   113f2:	fa02 f000 	lsl.w	r0, r2, r0
   113f6:	3320      	adds	r3, #32
   113f8:	4a03      	ldr	r2, [pc, #12]	; (11408 <arch_irq_disable+0x24>)
   113fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   113fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11402:	f3bf 8f6f 	isb	sy
}
   11406:	4770      	bx	lr
   11408:	e000e100 	.word	0xe000e100

0001140c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1140c:	4b05      	ldr	r3, [pc, #20]	; (11424 <arch_irq_is_enabled+0x18>)
   1140e:	0942      	lsrs	r2, r0, #5
   11410:	f000 001f 	and.w	r0, r0, #31
   11414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11418:	2301      	movs	r3, #1
   1141a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1141e:	4010      	ands	r0, r2
   11420:	4770      	bx	lr
   11422:	bf00      	nop
   11424:	e000e100 	.word	0xe000e100

00011428 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   11428:	07d3      	lsls	r3, r2, #31
{
   1142a:	b570      	push	{r4, r5, r6, lr}
   1142c:	4605      	mov	r5, r0
   1142e:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   11430:	d425      	bmi.n	1147e <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   11432:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   11434:	2c07      	cmp	r4, #7
   11436:	d90f      	bls.n	11458 <z_arm_irq_priority_set+0x30>
   11438:	4a12      	ldr	r2, [pc, #72]	; (11484 <z_arm_irq_priority_set+0x5c>)
   1143a:	4913      	ldr	r1, [pc, #76]	; (11488 <z_arm_irq_priority_set+0x60>)
   1143c:	4813      	ldr	r0, [pc, #76]	; (1148c <z_arm_irq_priority_set+0x64>)
   1143e:	2358      	movs	r3, #88	; 0x58
   11440:	f00b fccf 	bl	1cde2 <printk>
   11444:	4812      	ldr	r0, [pc, #72]	; (11490 <z_arm_irq_priority_set+0x68>)
   11446:	4631      	mov	r1, r6
   11448:	2306      	movs	r3, #6
   1144a:	462a      	mov	r2, r5
   1144c:	f00b fcc9 	bl	1cde2 <printk>
   11450:	480c      	ldr	r0, [pc, #48]	; (11484 <z_arm_irq_priority_set+0x5c>)
   11452:	2158      	movs	r1, #88	; 0x58
   11454:	f00b ff1f 	bl	1d296 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11458:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1145a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1145c:	bfac      	ite	ge
   1145e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11462:	4b0c      	ldrlt	r3, [pc, #48]	; (11494 <z_arm_irq_priority_set+0x6c>)
   11464:	ea4f 1444 	mov.w	r4, r4, lsl #5
   11468:	bfb8      	it	lt
   1146a:	f005 050f 	andlt.w	r5, r5, #15
   1146e:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11470:	bfaa      	itet	ge
   11472:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11476:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11478:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   1147c:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1147e:	2400      	movs	r4, #0
   11480:	e7ea      	b.n	11458 <z_arm_irq_priority_set+0x30>
   11482:	bf00      	nop
   11484:	00020f27 	.word	0x00020f27
   11488:	00020f5d 	.word	0x00020f5d
   1148c:	00020a75 	.word	0x00020a75
   11490:	00020f78 	.word	0x00020f78
   11494:	e000ed14 	.word	0xe000ed14

00011498 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   11498:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1149a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1149c:	4b04      	ldr	r3, [pc, #16]	; (114b0 <_arch_isr_direct_pm+0x18>)
   1149e:	6998      	ldr	r0, [r3, #24]
   114a0:	b118      	cbz	r0, 114aa <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   114a2:	2200      	movs	r2, #0
   114a4:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   114a6:	f00e fc17 	bl	1fcd8 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   114aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   114ac:	bd08      	pop	{r3, pc}
   114ae:	bf00      	nop
   114b0:	20001f54 	.word	0x20001f54

000114b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   114b4:	bf30      	wfi
    b z_SysNmiOnReset
   114b6:	f7ff bffd 	b.w	114b4 <z_SysNmiOnReset>
   114ba:	bf00      	nop

000114bc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   114bc:	4a0b      	ldr	r2, [pc, #44]	; (114ec <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   114be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   114c0:	4b0b      	ldr	r3, [pc, #44]	; (114f0 <z_arm_prep_c+0x34>)
   114c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   114c6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   114c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   114cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   114d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   114d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   114d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   114dc:	f007 fc2e 	bl	18d3c <z_bss_zero>
	z_data_copy();
   114e0:	f00a fbcc 	bl	1bc7c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   114e4:	f000 fa2c 	bl	11940 <z_arm_interrupt_init>
	z_cstart();
   114e8:	f007 fc32 	bl	18d50 <z_cstart>
   114ec:	00000000 	.word	0x00000000
   114f0:	e000ed00 	.word	0xe000ed00

000114f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   114f4:	4a09      	ldr	r2, [pc, #36]	; (1151c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   114f6:	490a      	ldr	r1, [pc, #40]	; (11520 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   114f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   114fa:	6809      	ldr	r1, [r1, #0]
   114fc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   114fe:	4909      	ldr	r1, [pc, #36]	; (11524 <arch_swap+0x30>)
	_current->arch.basepri = key;
   11500:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11502:	684b      	ldr	r3, [r1, #4]
   11504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11508:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   1150a:	2300      	movs	r3, #0
   1150c:	f383 8811 	msr	BASEPRI, r3
   11510:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11514:	6893      	ldr	r3, [r2, #8]
}
   11516:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   11518:	4770      	bx	lr
   1151a:	bf00      	nop
   1151c:	20001f54 	.word	0x20001f54
   11520:	000208c4 	.word	0x000208c4
   11524:	e000ed00 	.word	0xe000ed00

00011528 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11528:	4912      	ldr	r1, [pc, #72]	; (11574 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1152a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1152c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11530:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11532:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11536:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1153a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1153c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11540:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11544:	4f0c      	ldr	r7, [pc, #48]	; (11578 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11546:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1154a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1154c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1154e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11550:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   11552:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11554:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11556:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1155a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1155c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1155e:	f000 fa85 	bl	11a6c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   11562:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11566:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1156a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1156e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11572:	4770      	bx	lr
    ldr r1, =_kernel
   11574:	20001f54 	.word	0x20001f54
    ldr v4, =_SCS_ICSR
   11578:	e000ed04 	.word	0xe000ed04

0001157c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1157c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11580:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11582:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11586:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1158a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1158c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11590:	2902      	cmp	r1, #2
    beq _oops
   11592:	d0ff      	beq.n	11594 <_oops>

00011594 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11594:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   11596:	f00c f864 	bl	1d662 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1159a:	bd01      	pop	{r0, pc}

0001159c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1159c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   115a0:	9b00      	ldr	r3, [sp, #0]
   115a2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   115a6:	490a      	ldr	r1, [pc, #40]	; (115d0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   115a8:	9b01      	ldr	r3, [sp, #4]
   115aa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   115ae:	9b02      	ldr	r3, [sp, #8]
   115b0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   115b4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   115b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   115bc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   115c0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   115c4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   115c6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   115c8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   115ca:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   115cc:	4770      	bx	lr
   115ce:	bf00      	nop
   115d0:	0001cebf 	.word	0x0001cebf

000115d4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   115d4:	4a0b      	ldr	r2, [pc, #44]	; (11604 <z_check_thread_stack_fail+0x30>)
{
   115d6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   115d8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   115da:	b190      	cbz	r0, 11602 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   115dc:	f113 0f16 	cmn.w	r3, #22
   115e0:	6e80      	ldr	r0, [r0, #104]	; 0x68
   115e2:	d005      	beq.n	115f0 <z_check_thread_stack_fail+0x1c>
   115e4:	f1a0 0220 	sub.w	r2, r0, #32
   115e8:	429a      	cmp	r2, r3
   115ea:	d806      	bhi.n	115fa <z_check_thread_stack_fail+0x26>
   115ec:	4283      	cmp	r3, r0
   115ee:	d204      	bcs.n	115fa <z_check_thread_stack_fail+0x26>
   115f0:	4281      	cmp	r1, r0
   115f2:	bf2c      	ite	cs
   115f4:	2100      	movcs	r1, #0
   115f6:	2101      	movcc	r1, #1
   115f8:	e000      	b.n	115fc <z_check_thread_stack_fail+0x28>
   115fa:	2100      	movs	r1, #0
   115fc:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   115fe:	bf08      	it	eq
   11600:	2000      	moveq	r0, #0
}
   11602:	4770      	bx	lr
   11604:	20001f54 	.word	0x20001f54

00011608 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11608:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1160a:	4b09      	ldr	r3, [pc, #36]	; (11630 <arch_switch_to_main_thread+0x28>)
   1160c:	6098      	str	r0, [r3, #8]
{
   1160e:	460d      	mov	r5, r1
   11610:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   11612:	f000 fa2b 	bl	11a6c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11616:	4620      	mov	r0, r4
   11618:	f385 8809 	msr	PSP, r5
   1161c:	2100      	movs	r1, #0
   1161e:	b663      	cpsie	if
   11620:	f381 8811 	msr	BASEPRI, r1
   11624:	f3bf 8f6f 	isb	sy
   11628:	2200      	movs	r2, #0
   1162a:	2300      	movs	r3, #0
   1162c:	f00b fc47 	bl	1cebe <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11630:	20001f54 	.word	0x20001f54

00011634 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11634:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11636:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11638:	4a0b      	ldr	r2, [pc, #44]	; (11668 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1163a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1163c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1163e:	bf1e      	ittt	ne
	movne	r1, #0
   11640:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11642:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   11644:	f00e fb48 	blne	1fcd8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11648:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1164a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1164e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11652:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11656:	4905      	ldr	r1, [pc, #20]	; (1166c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11658:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1165a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1165c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1165e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11662:	4903      	ldr	r1, [pc, #12]	; (11670 <_isr_wrapper+0x3c>)
	bx r1
   11664:	4708      	bx	r1
   11666:	0000      	.short	0x0000
	ldr r2, =_kernel
   11668:	20001f54 	.word	0x20001f54
	ldr r1, =_sw_isr_table
   1166c:	000201a8 	.word	0x000201a8
	ldr r1, =z_arm_int_exit
   11670:	00011675 	.word	0x00011675

00011674 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   11674:	4b04      	ldr	r3, [pc, #16]	; (11688 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   11676:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   11678:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1167a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1167c:	d003      	beq.n	11686 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1167e:	4903      	ldr	r1, [pc, #12]	; (1168c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   11680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   11684:	600a      	str	r2, [r1, #0]

00011686 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   11686:	4770      	bx	lr
	ldr r3, =_kernel
   11688:	20001f54 	.word	0x20001f54
	ldr r1, =_SCS_ICSR
   1168c:	e000ed04 	.word	0xe000ed04

00011690 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11690:	4b23      	ldr	r3, [pc, #140]	; (11720 <mem_manage_fault+0x90>)
{
   11692:	b570      	push	{r4, r5, r6, lr}
   11694:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   11698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1169a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   1169c:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1169e:	0790      	lsls	r0, r2, #30
   116a0:	d51a      	bpl.n	116d8 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   116a2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   116a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116a6:	0612      	lsls	r2, r2, #24
   116a8:	d516      	bpl.n	116d8 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   116aa:	b119      	cbz	r1, 116b4 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   116ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   116b2:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   116b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   116b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   116b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116ba:	06d6      	lsls	r6, r2, #27
   116bc:	d40f      	bmi.n	116de <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   116be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   116c0:	0799      	lsls	r1, r3, #30
   116c2:	d40c      	bmi.n	116de <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   116c4:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   116c6:	4a16      	ldr	r2, [pc, #88]	; (11720 <mem_manage_fault+0x90>)
   116c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   116ca:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   116ce:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   116d0:	2300      	movs	r3, #0
   116d2:	702b      	strb	r3, [r5, #0]

	return reason;
}
   116d4:	4620      	mov	r0, r4
   116d6:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   116d8:	f06f 0015 	mvn.w	r0, #21
   116dc:	e7ea      	b.n	116b4 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   116de:	4e10      	ldr	r6, [pc, #64]	; (11720 <mem_manage_fault+0x90>)
   116e0:	6873      	ldr	r3, [r6, #4]
   116e2:	051a      	lsls	r2, r3, #20
   116e4:	d5ee      	bpl.n	116c4 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   116e6:	4621      	mov	r1, r4
   116e8:	f7ff ff74 	bl	115d4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   116ec:	4604      	mov	r4, r0
   116ee:	b118      	cbz	r0, 116f8 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   116f0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   116f4:	2402      	movs	r4, #2
   116f6:	e7e6      	b.n	116c6 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   116f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   116fa:	06db      	lsls	r3, r3, #27
   116fc:	d5e2      	bpl.n	116c4 <mem_manage_fault+0x34>
   116fe:	4a09      	ldr	r2, [pc, #36]	; (11724 <mem_manage_fault+0x94>)
   11700:	4909      	ldr	r1, [pc, #36]	; (11728 <mem_manage_fault+0x98>)
   11702:	480a      	ldr	r0, [pc, #40]	; (1172c <mem_manage_fault+0x9c>)
   11704:	f240 1349 	movw	r3, #329	; 0x149
   11708:	f00b fb6b 	bl	1cde2 <printk>
   1170c:	4808      	ldr	r0, [pc, #32]	; (11730 <mem_manage_fault+0xa0>)
   1170e:	f00b fb68 	bl	1cde2 <printk>
   11712:	4804      	ldr	r0, [pc, #16]	; (11724 <mem_manage_fault+0x94>)
   11714:	f240 1149 	movw	r1, #329	; 0x149
   11718:	f00b fdbd 	bl	1d296 <assert_post_action>
   1171c:	e7d3      	b.n	116c6 <mem_manage_fault+0x36>
   1171e:	bf00      	nop
   11720:	e000ed00 	.word	0xe000ed00
   11724:	00020fb8 	.word	0x00020fb8
   11728:	00020ff2 	.word	0x00020ff2
   1172c:	00020a75 	.word	0x00020a75
   11730:	0002103c 	.word	0x0002103c

00011734 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11734:	4b0d      	ldr	r3, [pc, #52]	; (1176c <bus_fault.isra.0+0x38>)
   11736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1173a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1173c:	0592      	lsls	r2, r2, #22
   1173e:	d508      	bpl.n	11752 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11740:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11744:	0412      	lsls	r2, r2, #16
   11746:	d504      	bpl.n	11752 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   11748:	b118      	cbz	r0, 11752 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1174a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1174c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11750:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   11752:	4b06      	ldr	r3, [pc, #24]	; (1176c <bus_fault.isra.0+0x38>)
   11754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   11756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11758:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1175a:	bf58      	it	pl
   1175c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1175e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   11760:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   11762:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   11766:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11768:	7008      	strb	r0, [r1, #0]

	return reason;
}
   1176a:	4770      	bx	lr
   1176c:	e000ed00 	.word	0xe000ed00

00011770 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11770:	4b07      	ldr	r3, [pc, #28]	; (11790 <usage_fault.isra.0+0x20>)
   11772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   11776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   11778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1177a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1177c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1177e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11780:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   11784:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   11788:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   1178a:	2000      	movs	r0, #0
   1178c:	4770      	bx	lr
   1178e:	bf00      	nop
   11790:	e000ed00 	.word	0xe000ed00

00011794 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11794:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11796:	4b57      	ldr	r3, [pc, #348]	; (118f4 <z_arm_fault+0x160>)
   11798:	685c      	ldr	r4, [r3, #4]
{
   1179a:	b08b      	sub	sp, #44	; 0x2c
   1179c:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1179e:	f3c4 0408 	ubfx	r4, r4, #0, #9
   117a2:	2600      	movs	r6, #0
   117a4:	f386 8811 	msr	BASEPRI, r6
   117a8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   117ac:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   117b0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   117b4:	d108      	bne.n	117c8 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   117b6:	f002 030c 	and.w	r3, r2, #12
   117ba:	2b08      	cmp	r3, #8
   117bc:	d004      	beq.n	117c8 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   117be:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   117c0:	bf5c      	itt	pl
   117c2:	4605      	movpl	r5, r0
			*nested_exc = true;
   117c4:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   117c6:	b97d      	cbnz	r5, 117e8 <z_arm_fault+0x54>
   117c8:	4a4b      	ldr	r2, [pc, #300]	; (118f8 <z_arm_fault+0x164>)
   117ca:	494c      	ldr	r1, [pc, #304]	; (118fc <z_arm_fault+0x168>)
   117cc:	484c      	ldr	r0, [pc, #304]	; (11900 <z_arm_fault+0x16c>)
   117ce:	f240 33f2 	movw	r3, #1010	; 0x3f2
   117d2:	f00b fb06 	bl	1cde2 <printk>
   117d6:	484b      	ldr	r0, [pc, #300]	; (11904 <z_arm_fault+0x170>)
   117d8:	f00b fb03 	bl	1cde2 <printk>
   117dc:	4846      	ldr	r0, [pc, #280]	; (118f8 <z_arm_fault+0x164>)
   117de:	f240 31f2 	movw	r1, #1010	; 0x3f2
   117e2:	f00b fd58 	bl	1d296 <assert_post_action>
   117e6:	2500      	movs	r5, #0
	*recoverable = false;
   117e8:	2300      	movs	r3, #0
   117ea:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   117ee:	1ee3      	subs	r3, r4, #3
   117f0:	2b03      	cmp	r3, #3
   117f2:	d878      	bhi.n	118e6 <z_arm_fault+0x152>
   117f4:	e8df f003 	tbb	[pc, r3]
   117f8:	4f736f02 	.word	0x4f736f02
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   117fc:	4b3d      	ldr	r3, [pc, #244]	; (118f4 <z_arm_fault+0x160>)
   117fe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   11800:	f014 0402 	ands.w	r4, r4, #2
   11804:	d16f      	bne.n	118e6 <z_arm_fault+0x152>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11808:	2a00      	cmp	r2, #0
   1180a:	db18      	blt.n	1183e <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1180e:	005b      	lsls	r3, r3, #1
   11810:	d554      	bpl.n	118bc <z_arm_fault+0x128>
	uint16_t fault_insn = *(ret_addr - 1);
   11812:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11814:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   11818:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1181c:	429a      	cmp	r2, r3
   1181e:	d00d      	beq.n	1183c <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
   11820:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   11824:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   11828:	781b      	ldrb	r3, [r3, #0]
   1182a:	b33b      	cbz	r3, 1187c <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   1182c:	f10d 0207 	add.w	r2, sp, #7
   11830:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   11832:	4628      	mov	r0, r5
   11834:	f7ff ff2c 	bl	11690 <mem_manage_fault>
		reason = usage_fault(esf);
   11838:	4604      	mov	r4, r0
		break;
   1183a:	e000      	b.n	1183e <z_arm_fault+0xaa>
			reason = esf->basic.r0;
   1183c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1183e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11842:	b9cb      	cbnz	r3, 11878 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11844:	aa02      	add	r2, sp, #8
   11846:	f105 0720 	add.w	r7, r5, #32
   1184a:	6828      	ldr	r0, [r5, #0]
   1184c:	6869      	ldr	r1, [r5, #4]
   1184e:	4613      	mov	r3, r2
   11850:	c303      	stmia	r3!, {r0, r1}
   11852:	3508      	adds	r5, #8
   11854:	42bd      	cmp	r5, r7
   11856:	461a      	mov	r2, r3
   11858:	d1f7      	bne.n	1184a <z_arm_fault+0xb6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1185a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1185c:	2e00      	cmp	r6, #0
   1185e:	d044      	beq.n	118ea <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11860:	f3c3 0208 	ubfx	r2, r3, #0, #9
   11864:	b922      	cbnz	r2, 11870 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11866:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1186a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1186e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11870:	a902      	add	r1, sp, #8
   11872:	4620      	mov	r0, r4
   11874:	f00b fef3 	bl	1d65e <z_arm_fatal_error>
}
   11878:	b00b      	add	sp, #44	; 0x2c
   1187a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   1187c:	4b22      	ldr	r3, [pc, #136]	; (11908 <z_arm_fault+0x174>)
   1187e:	781b      	ldrb	r3, [r3, #0]
   11880:	b12b      	cbz	r3, 1188e <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   11882:	f10d 0107 	add.w	r1, sp, #7
   11886:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   11888:	f7ff ff54 	bl	11734 <bus_fault.isra.0>
   1188c:	e7d4      	b.n	11838 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
   1188e:	4b1f      	ldr	r3, [pc, #124]	; (1190c <z_arm_fault+0x178>)
   11890:	881b      	ldrh	r3, [r3, #0]
   11892:	b29b      	uxth	r3, r3
   11894:	b113      	cbz	r3, 1189c <z_arm_fault+0x108>
		reason = usage_fault(esf);
   11896:	f7ff ff6b 	bl	11770 <usage_fault.isra.0>
   1189a:	e7cd      	b.n	11838 <z_arm_fault+0xa4>
			__ASSERT(0,
   1189c:	491c      	ldr	r1, [pc, #112]	; (11910 <z_arm_fault+0x17c>)
   1189e:	4a16      	ldr	r2, [pc, #88]	; (118f8 <z_arm_fault+0x164>)
   118a0:	4817      	ldr	r0, [pc, #92]	; (11900 <z_arm_fault+0x16c>)
   118a2:	f240 23c3 	movw	r3, #707	; 0x2c3
   118a6:	f00b fa9c 	bl	1cde2 <printk>
   118aa:	481a      	ldr	r0, [pc, #104]	; (11914 <z_arm_fault+0x180>)
   118ac:	f00b fa99 	bl	1cde2 <printk>
   118b0:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   118b4:	4810      	ldr	r0, [pc, #64]	; (118f8 <z_arm_fault+0x164>)
   118b6:	f00b fcee 	bl	1d296 <assert_post_action>
   118ba:	e7c0      	b.n	1183e <z_arm_fault+0xaa>
   118bc:	4914      	ldr	r1, [pc, #80]	; (11910 <z_arm_fault+0x17c>)
   118be:	4a0e      	ldr	r2, [pc, #56]	; (118f8 <z_arm_fault+0x164>)
   118c0:	480f      	ldr	r0, [pc, #60]	; (11900 <z_arm_fault+0x16c>)
   118c2:	f240 23c7 	movw	r3, #711	; 0x2c7
   118c6:	f00b fa8c 	bl	1cde2 <printk>
   118ca:	4813      	ldr	r0, [pc, #76]	; (11918 <z_arm_fault+0x184>)
   118cc:	f00b fa89 	bl	1cde2 <printk>
   118d0:	f240 21c7 	movw	r1, #711	; 0x2c7
   118d4:	e7ee      	b.n	118b4 <z_arm_fault+0x120>
		reason = mem_manage_fault(esf, 0, recoverable);
   118d6:	f10d 0207 	add.w	r2, sp, #7
   118da:	2100      	movs	r1, #0
   118dc:	e7a9      	b.n	11832 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
   118de:	f10d 0107 	add.w	r1, sp, #7
   118e2:	2000      	movs	r0, #0
   118e4:	e7d0      	b.n	11888 <z_arm_fault+0xf4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   118e6:	2400      	movs	r4, #0
   118e8:	e7a9      	b.n	1183e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   118ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   118ee:	f023 0301 	bic.w	r3, r3, #1
   118f2:	e7bc      	b.n	1186e <z_arm_fault+0xda>
   118f4:	e000ed00 	.word	0xe000ed00
   118f8:	00020fb8 	.word	0x00020fb8
   118fc:	0002105f 	.word	0x0002105f
   11900:	00020a75 	.word	0x00020a75
   11904:	00021072 	.word	0x00021072
   11908:	e000ed29 	.word	0xe000ed29
   1190c:	e000ed2a 	.word	0xe000ed2a
   11910:	00022787 	.word	0x00022787
   11914:	000210b0 	.word	0x000210b0
   11918:	000210d4 	.word	0x000210d4

0001191c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1191c:	4a02      	ldr	r2, [pc, #8]	; (11928 <z_arm_fault_init+0xc>)
   1191e:	6953      	ldr	r3, [r2, #20]
   11920:	f043 0310 	orr.w	r3, r3, #16
   11924:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   11926:	4770      	bx	lr
   11928:	e000ed00 	.word	0xe000ed00

0001192c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1192c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11930:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11934:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11936:	4672      	mov	r2, lr
	bl z_arm_fault
   11938:	f7ff ff2c 	bl	11794 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1193c:	bd01      	pop	{r0, pc}
   1193e:	bf00      	nop

00011940 <z_arm_interrupt_init>:
   11940:	4804      	ldr	r0, [pc, #16]	; (11954 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11942:	2300      	movs	r3, #0
   11944:	2140      	movs	r1, #64	; 0x40
   11946:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11948:	3301      	adds	r3, #1
   1194a:	2b30      	cmp	r3, #48	; 0x30
   1194c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11950:	d1f9      	bne.n	11946 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11952:	4770      	bx	lr
   11954:	e000e100 	.word	0xe000e100

00011958 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11958:	2000      	movs	r0, #0
    msr CONTROL, r0
   1195a:	f380 8814 	msr	CONTROL, r0
    isb
   1195e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11962:	f00e fb83 	bl	2006c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11966:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11968:	490d      	ldr	r1, [pc, #52]	; (119a0 <__start+0x48>)
    str r0, [r1]
   1196a:	6008      	str	r0, [r1, #0]
    dsb
   1196c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11970:	480c      	ldr	r0, [pc, #48]	; (119a4 <__start+0x4c>)
    msr msp, r0
   11972:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11976:	f000 f829 	bl	119cc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1197a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1197c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11980:	4809      	ldr	r0, [pc, #36]	; (119a8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11982:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   11986:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11988:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1198c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11990:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11992:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11994:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11998:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1199c:	f7ff fd8e 	bl	114bc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   119a0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   119a4:	20003fc0 	.word	0x20003fc0
    ldr r0, =z_interrupt_stacks
   119a8:	20004140 	.word	0x20004140

000119ac <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   119ac:	4a06      	ldr	r2, [pc, #24]	; (119c8 <z_arm_clear_arm_mpu_config+0x1c>)
   119ae:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   119b0:	2300      	movs	r3, #0
	int num_regions =
   119b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   119b6:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   119b8:	428b      	cmp	r3, r1
   119ba:	d100      	bne.n	119be <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   119bc:	4770      	bx	lr
  MPU->RNR = rnr;
   119be:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   119c0:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   119c2:	3301      	adds	r3, #1
   119c4:	e7f8      	b.n	119b8 <z_arm_clear_arm_mpu_config+0xc>
   119c6:	bf00      	nop
   119c8:	e000ed90 	.word	0xe000ed90

000119cc <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   119cc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   119ce:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   119d0:	2300      	movs	r3, #0
   119d2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   119d6:	f7ff ffe9 	bl	119ac <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   119da:	4b14      	ldr	r3, [pc, #80]	; (11a2c <z_arm_init_arch_hw_at_boot+0x60>)
   119dc:	f04f 32ff 	mov.w	r2, #4294967295
   119e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   119e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   119e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   119ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   119f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   119f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   119f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   119fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11a00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11a04:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   11a08:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   11a0c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   11a10:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   11a14:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   11a18:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   11a1c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   11a20:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11a22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a26:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11a2a:	bd08      	pop	{r3, pc}
   11a2c:	e000e100 	.word	0xe000e100

00011a30 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11a30:	4b06      	ldr	r3, [pc, #24]	; (11a4c <z_impl_k_thread_abort+0x1c>)
   11a32:	689b      	ldr	r3, [r3, #8]
   11a34:	4283      	cmp	r3, r0
   11a36:	d107      	bne.n	11a48 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11a38:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11a3c:	b123      	cbz	r3, 11a48 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11a3e:	4a04      	ldr	r2, [pc, #16]	; (11a50 <z_impl_k_thread_abort+0x20>)
   11a40:	6853      	ldr	r3, [r2, #4]
   11a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11a46:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   11a48:	f009 bffa 	b.w	1ba40 <z_thread_abort>
   11a4c:	20001f54 	.word	0x20001f54
   11a50:	e000ed00 	.word	0xe000ed00

00011a54 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11a54:	4b02      	ldr	r3, [pc, #8]	; (11a60 <z_arm_configure_static_mpu_regions+0xc>)
   11a56:	4a03      	ldr	r2, [pc, #12]	; (11a64 <z_arm_configure_static_mpu_regions+0x10>)
   11a58:	4803      	ldr	r0, [pc, #12]	; (11a68 <z_arm_configure_static_mpu_regions+0x14>)
   11a5a:	2101      	movs	r1, #1
   11a5c:	f000 b868 	b.w	11b30 <arm_core_mpu_configure_static_mpu_regions>
   11a60:	20020000 	.word	0x20020000
   11a64:	20000000 	.word	0x20000000
   11a68:	00020418 	.word	0x00020418

00011a6c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   11a6c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   11a6e:	4b05      	ldr	r3, [pc, #20]	; (11a84 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   11a70:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   11a72:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   11a74:	4a04      	ldr	r2, [pc, #16]	; (11a88 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   11a76:	2120      	movs	r1, #32
   11a78:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   11a7c:	4618      	mov	r0, r3
   11a7e:	2101      	movs	r1, #1
   11a80:	f000 b87e 	b.w	11b80 <arm_core_mpu_configure_dynamic_mpu_regions>
   11a84:	20001c74 	.word	0x20001c74
   11a88:	150b0000 	.word	0x150b0000

00011a8c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   11a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   11a8e:	4f1e      	ldr	r7, [pc, #120]	; (11b08 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11a90:	2600      	movs	r6, #0
   11a92:	428e      	cmp	r6, r1
   11a94:	db01      	blt.n	11a9a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   11a96:	4610      	mov	r0, r2
   11a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   11a9a:	6844      	ldr	r4, [r0, #4]
   11a9c:	b384      	cbz	r4, 11b00 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   11a9e:	b153      	cbz	r3, 11ab6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   11aa0:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   11aa4:	ea14 0f0c 	tst.w	r4, ip
   11aa8:	d118      	bne.n	11adc <mpu_configure_regions+0x50>
		&&
   11aaa:	2c1f      	cmp	r4, #31
   11aac:	d916      	bls.n	11adc <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   11aae:	6805      	ldr	r5, [r0, #0]
		&&
   11ab0:	ea1c 0f05 	tst.w	ip, r5
   11ab4:	d112      	bne.n	11adc <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   11ab6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   11ab8:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   11aba:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   11abe:	b2d2      	uxtb	r2, r2
   11ac0:	d90f      	bls.n	11ae2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   11ac2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   11ac6:	d80e      	bhi.n	11ae6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   11ac8:	3c01      	subs	r4, #1
   11aca:	fab4 f484 	clz	r4, r4
   11ace:	f1c4 041f 	rsb	r4, r4, #31
   11ad2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   11ad4:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   11ad6:	ea4c 0404 	orr.w	r4, ip, r4
   11ada:	d906      	bls.n	11aea <mpu_configure_regions+0x5e>
			return -EINVAL;
   11adc:	f06f 0215 	mvn.w	r2, #21
   11ae0:	e7d9      	b.n	11a96 <mpu_configure_regions+0xa>
		return REGION_32B;
   11ae2:	2408      	movs	r4, #8
   11ae4:	e7f6      	b.n	11ad4 <mpu_configure_regions+0x48>
		return REGION_4G;
   11ae6:	243e      	movs	r4, #62	; 0x3e
   11ae8:	e7f4      	b.n	11ad4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11aea:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   11aee:	4315      	orrs	r5, r2
   11af0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11af4:	f044 0401 	orr.w	r4, r4, #1
   11af8:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11afa:	60fd      	str	r5, [r7, #12]
		reg_index++;
   11afc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11afe:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   11b00:	3601      	adds	r6, #1
   11b02:	300c      	adds	r0, #12
   11b04:	e7c5      	b.n	11a92 <mpu_configure_regions+0x6>
   11b06:	bf00      	nop
   11b08:	e000ed90 	.word	0xe000ed90

00011b0c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11b0c:	4b03      	ldr	r3, [pc, #12]	; (11b1c <arm_core_mpu_enable+0x10>)
   11b0e:	2205      	movs	r2, #5
   11b10:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   11b12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11b16:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11b1a:	4770      	bx	lr
   11b1c:	e000ed90 	.word	0xe000ed90

00011b20 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11b20:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11b24:	4b01      	ldr	r3, [pc, #4]	; (11b2c <arm_core_mpu_disable+0xc>)
   11b26:	2200      	movs	r2, #0
   11b28:	605a      	str	r2, [r3, #4]
}
   11b2a:	4770      	bx	lr
   11b2c:	e000ed90 	.word	0xe000ed90

00011b30 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11b30:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11b32:	4d0e      	ldr	r5, [pc, #56]	; (11b6c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   11b34:	2301      	movs	r3, #1
   11b36:	782a      	ldrb	r2, [r5, #0]
   11b38:	460c      	mov	r4, r1
   11b3a:	f7ff ffa7 	bl	11a8c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11b3e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   11b40:	3016      	adds	r0, #22
   11b42:	d111      	bne.n	11b68 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11b44:	f240 1311 	movw	r3, #273	; 0x111
   11b48:	4a09      	ldr	r2, [pc, #36]	; (11b70 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11b4a:	490a      	ldr	r1, [pc, #40]	; (11b74 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   11b4c:	480a      	ldr	r0, [pc, #40]	; (11b78 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   11b4e:	f00b f948 	bl	1cde2 <printk>
   11b52:	4621      	mov	r1, r4
   11b54:	4809      	ldr	r0, [pc, #36]	; (11b7c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   11b56:	f00b f944 	bl	1cde2 <printk>
			regions_num);
	}
}
   11b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   11b5e:	4804      	ldr	r0, [pc, #16]	; (11b70 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   11b60:	f240 1111 	movw	r1, #273	; 0x111
   11b64:	f00b bb97 	b.w	1d296 <assert_post_action>
}
   11b68:	bd38      	pop	{r3, r4, r5, pc}
   11b6a:	bf00      	nop
   11b6c:	20001fca 	.word	0x20001fca
   11b70:	00021104 	.word	0x00021104
   11b74:	00022787 	.word	0x00022787
   11b78:	00020a75 	.word	0x00020a75
   11b7c:	0002113b 	.word	0x0002113b

00011b80 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   11b80:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   11b82:	4a12      	ldr	r2, [pc, #72]	; (11bcc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   11b84:	2300      	movs	r3, #0
   11b86:	7812      	ldrb	r2, [r2, #0]
   11b88:	460c      	mov	r4, r1
   11b8a:	f7ff ff7f 	bl	11a8c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   11b8e:	f110 0f16 	cmn.w	r0, #22
   11b92:	d008      	beq.n	11ba6 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   11b94:	4b0e      	ldr	r3, [pc, #56]	; (11bd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   11b96:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11b98:	2807      	cmp	r0, #7
   11b9a:	dd00      	ble.n	11b9e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   11b9c:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   11b9e:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   11ba0:	611a      	str	r2, [r3, #16]
   11ba2:	3001      	adds	r0, #1
   11ba4:	e7f8      	b.n	11b98 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   11ba6:	4a0b      	ldr	r2, [pc, #44]	; (11bd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   11ba8:	490b      	ldr	r1, [pc, #44]	; (11bd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   11baa:	480c      	ldr	r0, [pc, #48]	; (11bdc <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   11bac:	f44f 7398 	mov.w	r3, #304	; 0x130
   11bb0:	f00b f917 	bl	1cde2 <printk>
   11bb4:	4621      	mov	r1, r4
   11bb6:	480a      	ldr	r0, [pc, #40]	; (11be0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   11bb8:	f00b f913 	bl	1cde2 <printk>
}
   11bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   11bc0:	4804      	ldr	r0, [pc, #16]	; (11bd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   11bc2:	f44f 7198 	mov.w	r1, #304	; 0x130
   11bc6:	f00b bb66 	b.w	1d296 <assert_post_action>
   11bca:	bf00      	nop
   11bcc:	20001fca 	.word	0x20001fca
   11bd0:	e000ed90 	.word	0xe000ed90
   11bd4:	00021104 	.word	0x00021104
   11bd8:	00022787 	.word	0x00022787
   11bdc:	00020a75 	.word	0x00020a75
   11be0:	00021167 	.word	0x00021167

00011be4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11be4:	4925      	ldr	r1, [pc, #148]	; (11c7c <z_arm_mpu_init+0x98>)
{
   11be6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   11be8:	680c      	ldr	r4, [r1, #0]
   11bea:	2c08      	cmp	r4, #8
   11bec:	d913      	bls.n	11c16 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   11bee:	f44f 73a4 	mov.w	r3, #328	; 0x148
   11bf2:	4a23      	ldr	r2, [pc, #140]	; (11c80 <z_arm_mpu_init+0x9c>)
   11bf4:	4923      	ldr	r1, [pc, #140]	; (11c84 <z_arm_mpu_init+0xa0>)
   11bf6:	4824      	ldr	r0, [pc, #144]	; (11c88 <z_arm_mpu_init+0xa4>)
   11bf8:	f00b f8f3 	bl	1cde2 <printk>
   11bfc:	4823      	ldr	r0, [pc, #140]	; (11c8c <z_arm_mpu_init+0xa8>)
   11bfe:	2208      	movs	r2, #8
   11c00:	4621      	mov	r1, r4
   11c02:	f00b f8ee 	bl	1cde2 <printk>
   11c06:	481e      	ldr	r0, [pc, #120]	; (11c80 <z_arm_mpu_init+0x9c>)
   11c08:	f44f 71a4 	mov.w	r1, #328	; 0x148
   11c0c:	f00b fb43 	bl	1d296 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   11c10:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11c14:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   11c16:	f7ff ff83 	bl	11b20 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11c1a:	6848      	ldr	r0, [r1, #4]
   11c1c:	491c      	ldr	r1, [pc, #112]	; (11c90 <z_arm_mpu_init+0xac>)
   11c1e:	2200      	movs	r2, #0
   11c20:	4294      	cmp	r4, r2
   11c22:	f100 000c 	add.w	r0, r0, #12
   11c26:	d119      	bne.n	11c5c <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   11c28:	4b1a      	ldr	r3, [pc, #104]	; (11c94 <z_arm_mpu_init+0xb0>)
   11c2a:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   11c2c:	f7ff ff6e 	bl	11b0c <arm_core_mpu_enable>
	__ASSERT(
   11c30:	680b      	ldr	r3, [r1, #0]
   11c32:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11c36:	2b08      	cmp	r3, #8
   11c38:	d00e      	beq.n	11c58 <z_arm_mpu_init+0x74>
   11c3a:	4917      	ldr	r1, [pc, #92]	; (11c98 <z_arm_mpu_init+0xb4>)
   11c3c:	4a10      	ldr	r2, [pc, #64]	; (11c80 <z_arm_mpu_init+0x9c>)
   11c3e:	4812      	ldr	r0, [pc, #72]	; (11c88 <z_arm_mpu_init+0xa4>)
   11c40:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11c44:	f00b f8cd 	bl	1cde2 <printk>
   11c48:	4814      	ldr	r0, [pc, #80]	; (11c9c <z_arm_mpu_init+0xb8>)
   11c4a:	f00b f8ca 	bl	1cde2 <printk>
   11c4e:	480c      	ldr	r0, [pc, #48]	; (11c80 <z_arm_mpu_init+0x9c>)
   11c50:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11c54:	f00b fb1f 	bl	1d296 <assert_post_action>
	return 0;
   11c58:	2000      	movs	r0, #0
   11c5a:	e7db      	b.n	11c14 <z_arm_mpu_init+0x30>
   11c5c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11c5e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   11c62:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   11c66:	4313      	orrs	r3, r2
   11c68:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   11c6c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   11c6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   11c72:	f043 0301 	orr.w	r3, r3, #1
   11c76:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11c78:	3201      	adds	r2, #1
   11c7a:	e7d1      	b.n	11c20 <z_arm_mpu_init+0x3c>
   11c7c:	00020424 	.word	0x00020424
   11c80:	00021104 	.word	0x00021104
   11c84:	00022787 	.word	0x00022787
   11c88:	00020a75 	.word	0x00020a75
   11c8c:	00021194 	.word	0x00021194
   11c90:	e000ed90 	.word	0xe000ed90
   11c94:	20001fca 	.word	0x20001fca
   11c98:	000211c8 	.word	0x000211c8
   11c9c:	00021218 	.word	0x00021218

00011ca0 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   11ca0:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   11ca2:	4b0b      	ldr	r3, [pc, #44]	; (11cd0 <malloc_prepare+0x30>)
   11ca4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   11ca8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   11cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11cb0:	d20c      	bcs.n	11ccc <malloc_prepare+0x2c>
   11cb2:	4908      	ldr	r1, [pc, #32]	; (11cd4 <malloc_prepare+0x34>)
   11cb4:	4a08      	ldr	r2, [pc, #32]	; (11cd8 <malloc_prepare+0x38>)
   11cb6:	4809      	ldr	r0, [pc, #36]	; (11cdc <malloc_prepare+0x3c>)
   11cb8:	2380      	movs	r3, #128	; 0x80
   11cba:	f00b f892 	bl	1cde2 <printk>
   11cbe:	4808      	ldr	r0, [pc, #32]	; (11ce0 <malloc_prepare+0x40>)
   11cc0:	f00b f88f 	bl	1cde2 <printk>
   11cc4:	4804      	ldr	r0, [pc, #16]	; (11cd8 <malloc_prepare+0x38>)
   11cc6:	2180      	movs	r1, #128	; 0x80
   11cc8:	f00b fae5 	bl	1d296 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   11ccc:	2000      	movs	r0, #0
   11cce:	bd08      	pop	{r3, pc}
   11cd0:	200059a1 	.word	0x200059a1
   11cd4:	00021269 	.word	0x00021269
   11cd8:	00021239 	.word	0x00021239
   11cdc:	00020a75 	.word	0x00020a75
   11ce0:	000212b0 	.word	0x000212b0

00011ce4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11ce4:	4b01      	ldr	r3, [pc, #4]	; (11cec <__stdout_hook_install+0x8>)
   11ce6:	6018      	str	r0, [r3, #0]
}
   11ce8:	4770      	bx	lr
   11cea:	bf00      	nop
   11cec:	2000042c 	.word	0x2000042c

00011cf0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   11cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cf2:	4f0a      	ldr	r7, [pc, #40]	; (11d1c <z_impl_zephyr_write_stdout+0x2c>)
   11cf4:	460d      	mov	r5, r1
   11cf6:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11cf8:	f1c0 0401 	rsb	r4, r0, #1
   11cfc:	19a3      	adds	r3, r4, r6
   11cfe:	429d      	cmp	r5, r3
   11d00:	dc01      	bgt.n	11d06 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   11d02:	4628      	mov	r0, r5
   11d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11d06:	7873      	ldrb	r3, [r6, #1]
   11d08:	2b0a      	cmp	r3, #10
   11d0a:	d102      	bne.n	11d12 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11d0c:	683b      	ldr	r3, [r7, #0]
   11d0e:	200d      	movs	r0, #13
   11d10:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   11d12:	683b      	ldr	r3, [r7, #0]
   11d14:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11d18:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11d1a:	e7ef      	b.n	11cfc <z_impl_zephyr_write_stdout+0xc>
   11d1c:	2000042c 	.word	0x2000042c

00011d20 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11d20:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   11d22:	211d      	movs	r1, #29
   11d24:	4804      	ldr	r0, [pc, #16]	; (11d38 <__chk_fail+0x18>)
   11d26:	f7ff ffe3 	bl	11cf0 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11d2a:	4040      	eors	r0, r0
   11d2c:	f380 8811 	msr	BASEPRI, r0
   11d30:	f04f 0003 	mov.w	r0, #3
   11d34:	df02      	svc	2
	CODE_UNREACHABLE;
   11d36:	bf00      	nop
   11d38:	00021337 	.word	0x00021337

00011d3c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   11d3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d40:	f3ef 8211 	mrs	r2, BASEPRI
   11d44:	f383 8812 	msr	BASEPRI_MAX, r3
   11d48:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11d4c:	4906      	ldr	r1, [pc, #24]	; (11d68 <nordicsemi_nrf52_init+0x2c>)
   11d4e:	2301      	movs	r3, #1
   11d50:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   11d54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11d58:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   11d5c:	f382 8811 	msr	BASEPRI, r2
   11d60:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11d64:	2000      	movs	r0, #0
   11d66:	4770      	bx	lr
   11d68:	4001e000 	.word	0x4001e000

00011d6c <sys_arch_reboot>:
    *p_gpregret = val;
   11d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d70:	b2c0      	uxtb	r0, r0
   11d72:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   11d76:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11d7a:	4905      	ldr	r1, [pc, #20]	; (11d90 <sys_arch_reboot+0x24>)
   11d7c:	4b05      	ldr	r3, [pc, #20]	; (11d94 <sys_arch_reboot+0x28>)
   11d7e:	68ca      	ldr	r2, [r1, #12]
   11d80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11d84:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11d86:	60cb      	str	r3, [r1, #12]
   11d88:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11d8c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11d8e:	e7fd      	b.n	11d8c <sys_arch_reboot+0x20>
   11d90:	e000ed00 	.word	0xe000ed00
   11d94:	05fa0004 	.word	0x05fa0004

00011d98 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11d98:	b120      	cbz	r0, 11da4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   11d9a:	4b03      	ldr	r3, [pc, #12]	; (11da8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   11d9c:	0180      	lsls	r0, r0, #6
   11d9e:	f043 0301 	orr.w	r3, r3, #1
   11da2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11da4:	4770      	bx	lr
   11da6:	bf00      	nop
   11da8:	00020400 	.word	0x00020400

00011dac <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   11dac:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dae:	460b      	mov	r3, r1
	switch (src->type) {
   11db0:	7801      	ldrb	r1, [r0, #0]
   11db2:	2901      	cmp	r1, #1
{
   11db4:	4602      	mov	r2, r0
	switch (src->type) {
   11db6:	d015      	beq.n	11de4 <uuid_to_uuid128+0x38>
   11db8:	2902      	cmp	r1, #2
   11dba:	d02b      	beq.n	11e14 <uuid_to_uuid128+0x68>
   11dbc:	b989      	cbnz	r1, 11de2 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11dbe:	4c1c      	ldr	r4, [pc, #112]	; (11e30 <uuid_to_uuid128+0x84>)
   11dc0:	461d      	mov	r5, r3
   11dc2:	f104 0710 	add.w	r7, r4, #16
   11dc6:	6820      	ldr	r0, [r4, #0]
   11dc8:	6861      	ldr	r1, [r4, #4]
   11dca:	462e      	mov	r6, r5
   11dcc:	c603      	stmia	r6!, {r0, r1}
   11dce:	3408      	adds	r4, #8
   11dd0:	42bc      	cmp	r4, r7
   11dd2:	4635      	mov	r5, r6
   11dd4:	d1f7      	bne.n	11dc6 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   11dd6:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   11dd8:	7821      	ldrb	r1, [r4, #0]
   11dda:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   11ddc:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   11dde:	0a12      	lsrs	r2, r2, #8
   11de0:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   11de4:	4c12      	ldr	r4, [pc, #72]	; (11e30 <uuid_to_uuid128+0x84>)
   11de6:	461d      	mov	r5, r3
   11de8:	f104 0710 	add.w	r7, r4, #16
   11dec:	6820      	ldr	r0, [r4, #0]
   11dee:	6861      	ldr	r1, [r4, #4]
   11df0:	462e      	mov	r6, r5
   11df2:	c603      	stmia	r6!, {r0, r1}
   11df4:	3408      	adds	r4, #8
   11df6:	42bc      	cmp	r4, r7
   11df8:	4635      	mov	r5, r6
   11dfa:	d1f7      	bne.n	11dec <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   11dfc:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   11dfe:	7821      	ldrb	r1, [r4, #0]
   11e00:	7031      	strb	r1, [r6, #0]
   11e02:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   11e06:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   11e08:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   11e0a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   11e0c:	0a12      	lsrs	r2, r2, #8
   11e0e:	7399      	strb	r1, [r3, #14]
   11e10:	741a      	strb	r2, [r3, #16]
}
   11e12:	e7e6      	b.n	11de2 <uuid_to_uuid128+0x36>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11e14:	f100 0510 	add.w	r5, r0, #16
   11e18:	6810      	ldr	r0, [r2, #0]
   11e1a:	6851      	ldr	r1, [r2, #4]
   11e1c:	461c      	mov	r4, r3
   11e1e:	c403      	stmia	r4!, {r0, r1}
   11e20:	3208      	adds	r2, #8
   11e22:	42aa      	cmp	r2, r5
   11e24:	4623      	mov	r3, r4
   11e26:	d1f7      	bne.n	11e18 <uuid_to_uuid128+0x6c>
   11e28:	7812      	ldrb	r2, [r2, #0]
   11e2a:	7022      	strb	r2, [r4, #0]
   11e2c:	e7d9      	b.n	11de2 <uuid_to_uuid128+0x36>
   11e2e:	bf00      	nop
   11e30:	00021364 	.word	0x00021364

00011e34 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11e34:	b570      	push	{r4, r5, r6, lr}
   11e36:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11e38:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   11e3c:	2b01      	cmp	r3, #1
{
   11e3e:	4605      	mov	r5, r0
   11e40:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11e42:	d00e      	beq.n	11e62 <bt_buf_get_rx+0x2e>
   11e44:	2805      	cmp	r0, #5
   11e46:	d00c      	beq.n	11e62 <bt_buf_get_rx+0x2e>
   11e48:	490d      	ldr	r1, [pc, #52]	; (11e80 <bt_buf_get_rx+0x4c>)
   11e4a:	4a0e      	ldr	r2, [pc, #56]	; (11e84 <bt_buf_get_rx+0x50>)
   11e4c:	480e      	ldr	r0, [pc, #56]	; (11e88 <bt_buf_get_rx+0x54>)
   11e4e:	2342      	movs	r3, #66	; 0x42
   11e50:	f00a ffc7 	bl	1cde2 <printk>
   11e54:	480d      	ldr	r0, [pc, #52]	; (11e8c <bt_buf_get_rx+0x58>)
   11e56:	f00a ffc4 	bl	1cde2 <printk>
   11e5a:	480a      	ldr	r0, [pc, #40]	; (11e84 <bt_buf_get_rx+0x50>)
   11e5c:	2142      	movs	r1, #66	; 0x42
   11e5e:	f00b fa1a 	bl	1d296 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   11e62:	4623      	mov	r3, r4
   11e64:	480a      	ldr	r0, [pc, #40]	; (11e90 <bt_buf_get_rx+0x5c>)
   11e66:	4632      	mov	r2, r6
   11e68:	f00d faba 	bl	1f3e0 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11e6c:	4604      	mov	r4, r0
   11e6e:	b120      	cbz	r0, 11e7a <bt_buf_get_rx+0x46>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   11e70:	2100      	movs	r1, #0
   11e72:	3008      	adds	r0, #8
   11e74:	f004 f974 	bl	16160 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11e78:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11e7a:	4620      	mov	r0, r4
   11e7c:	bd70      	pop	{r4, r5, r6, pc}
   11e7e:	bf00      	nop
   11e80:	000213a4 	.word	0x000213a4
   11e84:	00021375 	.word	0x00021375
   11e88:	00020a75 	.word	0x00020a75
   11e8c:	000213e9 	.word	0x000213e9
   11e90:	20000764 	.word	0x20000764

00011e94 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11e94:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11e96:	490b      	ldr	r1, [pc, #44]	; (11ec4 <bt_buf_get_cmd_complete+0x30>)
{
   11e98:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11e9a:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   11e9e:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   11ea0:	b920      	cbnz	r0, 11eac <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11ea6:	2001      	movs	r0, #1
   11ea8:	f7ff bfc4 	b.w	11e34 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11eac:	f004 f9fc 	bl	162a8 <net_buf_ref>
   11eb0:	2301      	movs	r3, #1
		buf->len = 0U;
   11eb2:	2100      	movs	r1, #0
   11eb4:	7503      	strb	r3, [r0, #20]
   11eb6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   11eb8:	4604      	mov	r4, r0
   11eba:	3008      	adds	r0, #8
   11ebc:	f004 f950 	bl	16160 <net_buf_simple_reserve>
}
   11ec0:	4620      	mov	r0, r4
   11ec2:	bd10      	pop	{r4, pc}
   11ec4:	200002a0 	.word	0x200002a0

00011ec8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11ec8:	b570      	push	{r4, r5, r6, lr}
   11eca:	4604      	mov	r4, r0
	switch (evt) {
   11ecc:	2c0f      	cmp	r4, #15
{
   11ece:	460d      	mov	r5, r1
   11ed0:	4610      	mov	r0, r2
   11ed2:	4619      	mov	r1, r3
	switch (evt) {
   11ed4:	d805      	bhi.n	11ee2 <bt_buf_get_evt+0x1a>
   11ed6:	2c0d      	cmp	r4, #13
   11ed8:	d912      	bls.n	11f00 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11ede:	f7ff bfd9 	b.w	11e94 <bt_buf_get_cmd_complete>
	switch (evt) {
   11ee2:	2c13      	cmp	r4, #19
   11ee4:	d10c      	bne.n	11f00 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   11ee6:	480b      	ldr	r0, [pc, #44]	; (11f14 <bt_buf_get_evt+0x4c>)
   11ee8:	f00d fa7a 	bl	1f3e0 <net_buf_alloc_fixed>
			if (buf) {
   11eec:	4604      	mov	r4, r0
   11eee:	b128      	cbz	r0, 11efc <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   11ef0:	2100      	movs	r1, #0
   11ef2:	3008      	adds	r0, #8
   11ef4:	f004 f934 	bl	16160 <net_buf_simple_reserve>
   11ef8:	2301      	movs	r3, #1
   11efa:	7523      	strb	r3, [r4, #20]
}
   11efc:	4620      	mov	r0, r4
   11efe:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11f00:	4602      	mov	r2, r0
   11f02:	460b      	mov	r3, r1
		if (discardable) {
   11f04:	b10d      	cbz	r5, 11f0a <bt_buf_get_evt+0x42>
   11f06:	4804      	ldr	r0, [pc, #16]	; (11f18 <bt_buf_get_evt+0x50>)
   11f08:	e7ee      	b.n	11ee8 <bt_buf_get_evt+0x20>
}
   11f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11f0e:	2001      	movs	r0, #1
   11f10:	f7ff bf90 	b.w	11e34 <bt_buf_get_rx>
   11f14:	20000790 	.word	0x20000790
   11f18:	200006e0 	.word	0x200006e0

00011f1c <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   11f1c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11f1e:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   11f20:	781a      	ldrb	r2, [r3, #0]
   11f22:	b972      	cbnz	r2, 11f42 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11f24:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   11f28:	4620      	mov	r0, r4
   11f2a:	f001 fd79 	bl	13a20 <bt_conn_lookup_handle>
	if (!conn) {
   11f2e:	4605      	mov	r5, r0
   11f30:	b940      	cbnz	r0, 11f44 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11f32:	4b08      	ldr	r3, [pc, #32]	; (11f54 <hci_disconn_complete_prio+0x38>)
   11f34:	881a      	ldrh	r2, [r3, #0]
   11f36:	b922      	cbnz	r2, 11f42 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11f38:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11f3c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11f40:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   11f42:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11f44:	2101      	movs	r1, #1
   11f46:	f001 fd77 	bl	13a38 <bt_conn_set_state>
	bt_conn_unref(conn);
   11f4a:	4628      	mov	r0, r5
}
   11f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11f50:	f001 bd3c 	b.w	139cc <bt_conn_unref>
   11f54:	20001fb0 	.word	0x20001fb0

00011f58 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_connectionless_iq_report)),
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   11f58:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   11f5a:	2101      	movs	r1, #1
   11f5c:	4604      	mov	r4, r0
   11f5e:	3008      	adds	r0, #8
   11f60:	f004 fa6a 	bl	16438 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11f64:	4621      	mov	r1, r4
   11f66:	4a03      	ldr	r2, [pc, #12]	; (11f74 <hci_le_meta_event+0x1c>)
   11f68:	7800      	ldrb	r0, [r0, #0]
}
   11f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   11f6e:	2308      	movs	r3, #8
   11f70:	f00b bc1e 	b.w	1d7b0 <handle_event>
   11f74:	00020474 	.word	0x00020474

00011f78 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   11f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11f7c:	4f3b      	ldr	r7, [pc, #236]	; (1206c <hci_rx_thread+0xf4>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   11f7e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 12080 <hci_rx_thread+0x108>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   11f82:	4e3b      	ldr	r6, [pc, #236]	; (12070 <hci_rx_thread+0xf8>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11f84:	f04f 33ff 	mov.w	r3, #4294967295
   11f88:	f04f 32ff 	mov.w	r2, #4294967295
   11f8c:	4638      	mov	r0, r7
   11f8e:	f004 f8b3 	bl	160f8 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11f92:	7d03      	ldrb	r3, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   11f94:	2b01      	cmp	r3, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   11f96:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   11f98:	d039      	beq.n	1200e <hci_rx_thread+0x96>
   11f9a:	2b03      	cmp	r3, #3
   11f9c:	d120      	bne.n	11fe0 <hci_rx_thread+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   11f9e:	8983      	ldrh	r3, [r0, #12]
   11fa0:	2b03      	cmp	r3, #3
   11fa2:	d80c      	bhi.n	11fbe <hci_rx_thread+0x46>
   11fa4:	4933      	ldr	r1, [pc, #204]	; (12074 <hci_rx_thread+0xfc>)
   11fa6:	4834      	ldr	r0, [pc, #208]	; (12078 <hci_rx_thread+0x100>)
   11fa8:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   11fac:	4632      	mov	r2, r6
   11fae:	f00a ff18 	bl	1cde2 <printk>
   11fb2:	4040      	eors	r0, r0
   11fb4:	f380 8811 	msr	BASEPRI, r0
   11fb8:	f04f 0003 	mov.w	r0, #3
   11fbc:	df02      	svc	2
   11fbe:	2104      	movs	r1, #4
   11fc0:	f104 0008 	add.w	r0, r4, #8
   11fc4:	f004 fa38 	bl	16438 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11fc8:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   11fca:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   11fcc:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   11fd0:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   11fd2:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   11fd4:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   11fd8:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   11fda:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   11fdc:	d003      	beq.n	11fe6 <hci_rx_thread+0x6e>
	net_buf_unref(buf);
   11fde:	4620      	mov	r0, r4
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   11fe0:	f004 f91c 	bl	1621c <net_buf_unref>
			break;
   11fe4:	e010      	b.n	12008 <hci_rx_thread+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   11fe6:	f001 fd1b 	bl	13a20 <bt_conn_lookup_handle>
	if (!conn) {
   11fea:	4605      	mov	r5, r0
   11fec:	2800      	cmp	r0, #0
   11fee:	d0f6      	beq.n	11fde <hci_rx_thread+0x66>
	acl(buf)->index = bt_conn_index(conn);
   11ff0:	f001 fdec 	bl	13bcc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   11ff4:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   11ff8:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   11ffa:	4621      	mov	r1, r4
   11ffc:	4628      	mov	r0, r5
   11ffe:	f00b feff 	bl	1de00 <bt_conn_recv>
	bt_conn_unref(conn);
   12002:	4628      	mov	r0, r5
   12004:	f001 fce2 	bl	139cc <bt_conn_unref>
	z_impl_k_yield();
   12008:	f009 fb7a 	bl	1b700 <z_impl_k_yield>
	while (1) {
   1200c:	e7ba      	b.n	11f84 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1200e:	8983      	ldrh	r3, [r0, #12]
   12010:	2b01      	cmp	r3, #1
   12012:	d80c      	bhi.n	1202e <hci_rx_thread+0xb6>
   12014:	4917      	ldr	r1, [pc, #92]	; (12074 <hci_rx_thread+0xfc>)
   12016:	4818      	ldr	r0, [pc, #96]	; (12078 <hci_rx_thread+0x100>)
   12018:	f640 130d 	movw	r3, #2317	; 0x90d
   1201c:	4632      	mov	r2, r6
   1201e:	f00a fee0 	bl	1cde2 <printk>
   12022:	4040      	eors	r0, r0
   12024:	f380 8811 	msr	BASEPRI, r0
   12028:	f04f 0003 	mov.w	r0, #3
   1202c:	df02      	svc	2
   1202e:	2102      	movs	r1, #2
   12030:	f104 0008 	add.w	r0, r4, #8
   12034:	f004 fa00 	bl	16438 <net_buf_simple_pull_mem>
   12038:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1203a:	7800      	ldrb	r0, [r0, #0]
   1203c:	f00b fba6 	bl	1d78c <bt_hci_evt_get_flags>
   12040:	0783      	lsls	r3, r0, #30
   12042:	d40c      	bmi.n	1205e <hci_rx_thread+0xe6>
   12044:	490d      	ldr	r1, [pc, #52]	; (1207c <hci_rx_thread+0x104>)
   12046:	480c      	ldr	r0, [pc, #48]	; (12078 <hci_rx_thread+0x100>)
   12048:	f640 1311 	movw	r3, #2321	; 0x911
   1204c:	4632      	mov	r2, r6
   1204e:	f00a fec8 	bl	1cde2 <printk>
   12052:	4040      	eors	r0, r0
   12054:	f380 8811 	msr	BASEPRI, r0
   12058:	f04f 0003 	mov.w	r0, #3
   1205c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1205e:	7828      	ldrb	r0, [r5, #0]
   12060:	2304      	movs	r3, #4
   12062:	4642      	mov	r2, r8
   12064:	4621      	mov	r1, r4
   12066:	f00b fba3 	bl	1d7b0 <handle_event>
   1206a:	e7b8      	b.n	11fde <hci_rx_thread+0x66>
   1206c:	200003d4 	.word	0x200003d4
   12070:	00021409 	.word	0x00021409
   12074:	0002143d 	.word	0x0002143d
   12078:	00020a75 	.word	0x00020a75
   1207c:	00021456 	.word	0x00021456
   12080:	000204c4 	.word	0x000204c4

00012084 <hci_cmd_done>:
{
   12084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12086:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12088:	7990      	ldrb	r0, [r2, #6]
{
   1208a:	460e      	mov	r6, r1
   1208c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1208e:	f003 ff25 	bl	15edc <net_buf_pool_get>
   12092:	4b30      	ldr	r3, [pc, #192]	; (12154 <hci_cmd_done+0xd0>)
   12094:	4283      	cmp	r3, r0
   12096:	d15b      	bne.n	12150 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
   12098:	4620      	mov	r0, r4
   1209a:	f003 ff27 	bl	15eec <net_buf_id>
   1209e:	4d2e      	ldr	r5, [pc, #184]	; (12158 <hci_cmd_done+0xd4>)
   120a0:	230c      	movs	r3, #12
   120a2:	fb03 5300 	mla	r3, r3, r0, r5
   120a6:	885b      	ldrh	r3, [r3, #2]
   120a8:	42bb      	cmp	r3, r7
   120aa:	d151      	bne.n	12150 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
   120ac:	4f2b      	ldr	r7, [pc, #172]	; (1215c <hci_cmd_done+0xd8>)
   120ae:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   120b2:	b120      	cbz	r0, 120be <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   120b4:	f004 f8b2 	bl	1621c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   120b8:	2300      	movs	r3, #0
   120ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   120be:	4620      	mov	r0, r4
   120c0:	f003 ff14 	bl	15eec <net_buf_id>
   120c4:	270c      	movs	r7, #12
   120c6:	fb07 5000 	mla	r0, r7, r0, r5
   120ca:	6843      	ldr	r3, [r0, #4]
   120cc:	b1e3      	cbz	r3, 12108 <hci_cmd_done+0x84>
   120ce:	b9de      	cbnz	r6, 12108 <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   120d0:	4620      	mov	r0, r4
   120d2:	f003 ff0b 	bl	15eec <net_buf_id>
   120d6:	fb07 5000 	mla	r0, r7, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   120da:	2201      	movs	r2, #1
   120dc:	6840      	ldr	r0, [r0, #4]
   120de:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   120e2:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   120e4:	f001 071f 	and.w	r7, r1, #31
   120e8:	40ba      	lsls	r2, r7
	if (val) {
   120ea:	0949      	lsrs	r1, r1, #5
   120ec:	b318      	cbz	r0, 12136 <hci_cmd_done+0xb2>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   120ee:	f3bf 8f5b 	dmb	ish
   120f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   120f6:	e853 1f00 	ldrex	r1, [r3]
   120fa:	4311      	orrs	r1, r2
   120fc:	e843 1000 	strex	r0, r1, [r3]
   12100:	2800      	cmp	r0, #0
   12102:	d1f8      	bne.n	120f6 <hci_cmd_done+0x72>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12104:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   12108:	4620      	mov	r0, r4
   1210a:	f003 feef 	bl	15eec <net_buf_id>
   1210e:	270c      	movs	r7, #12
   12110:	fb07 5000 	mla	r0, r7, r0, r5
   12114:	6883      	ldr	r3, [r0, #8]
   12116:	b1db      	cbz	r3, 12150 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
   12118:	4620      	mov	r0, r4
   1211a:	f003 fee7 	bl	15eec <net_buf_id>
   1211e:	4378      	muls	r0, r7
   12120:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   12122:	4620      	mov	r0, r4
   12124:	f003 fee2 	bl	15eec <net_buf_id>
   12128:	fb07 5500 	mla	r5, r7, r0, r5
   1212c:	68a8      	ldr	r0, [r5, #8]
}
   1212e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   12132:	f007 bd7b 	b.w	19c2c <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12136:	43d2      	mvns	r2, r2
   12138:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1213c:	f3bf 8f5b 	dmb	ish
   12140:	e853 1f00 	ldrex	r1, [r3]
   12144:	4011      	ands	r1, r2
   12146:	e843 1000 	strex	r0, r1, [r3]
   1214a:	2800      	cmp	r0, #0
   1214c:	d0da      	beq.n	12104 <hci_cmd_done+0x80>
   1214e:	e7f7      	b.n	12140 <hci_cmd_done+0xbc>
   12150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12152:	bf00      	nop
   12154:	20000738 	.word	0x20000738
   12158:	20001c80 	.word	0x20001c80
   1215c:	200002a0 	.word	0x200002a0

00012160 <hci_cmd_status>:
{
   12160:	b538      	push	{r3, r4, r5, lr}
   12162:	2104      	movs	r1, #4
   12164:	4604      	mov	r4, r0
   12166:	3008      	adds	r0, #8
   12168:	f004 f966 	bl	16438 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1216c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1216e:	7801      	ldrb	r1, [r0, #0]
   12170:	8840      	ldrh	r0, [r0, #2]
   12172:	4622      	mov	r2, r4
   12174:	f7ff ff86 	bl	12084 <hci_cmd_done>
	if (ncmd) {
   12178:	b125      	cbz	r5, 12184 <hci_cmd_status+0x24>
   1217a:	4803      	ldr	r0, [pc, #12]	; (12188 <hci_cmd_status+0x28>)
}
   1217c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12180:	f007 bd54 	b.w	19c2c <z_impl_k_sem_give>
   12184:	bd38      	pop	{r3, r4, r5, pc}
   12186:	bf00      	nop
   12188:	200003b8 	.word	0x200003b8

0001218c <hci_cmd_complete>:
{
   1218c:	b538      	push	{r3, r4, r5, lr}
   1218e:	2103      	movs	r1, #3
   12190:	4604      	mov	r4, r0
   12192:	3008      	adds	r0, #8
   12194:	f004 f950 	bl	16438 <net_buf_simple_pull_mem>
	status = buf->data[0];
   12198:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   1219a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1219c:	7819      	ldrb	r1, [r3, #0]
   1219e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   121a2:	4622      	mov	r2, r4
   121a4:	f7ff ff6e 	bl	12084 <hci_cmd_done>
	if (ncmd) {
   121a8:	b125      	cbz	r5, 121b4 <hci_cmd_complete+0x28>
   121aa:	4803      	ldr	r0, [pc, #12]	; (121b8 <hci_cmd_complete+0x2c>)
}
   121ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   121b0:	f007 bd3c 	b.w	19c2c <z_impl_k_sem_give>
   121b4:	bd38      	pop	{r3, r4, r5, pc}
   121b6:	bf00      	nop
   121b8:	200003b8 	.word	0x200003b8

000121bc <bt_hci_cmd_state_set_init>:
{
   121bc:	b510      	push	{r4, lr}
	state->bit = bit;
   121be:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   121c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   121c6:	720b      	strb	r3, [r1, #8]
{
   121c8:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   121ca:	f003 fe8f 	bl	15eec <net_buf_id>
   121ce:	4b03      	ldr	r3, [pc, #12]	; (121dc <bt_hci_cmd_state_set_init+0x20>)
   121d0:	220c      	movs	r2, #12
   121d2:	fb02 3000 	mla	r0, r2, r0, r3
   121d6:	6044      	str	r4, [r0, #4]
}
   121d8:	bd10      	pop	{r4, pc}
   121da:	bf00      	nop
   121dc:	20001c80 	.word	0x20001c80

000121e0 <bt_hci_cmd_create>:
{
   121e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   121e4:	f04f 32ff 	mov.w	r2, #4294967295
   121e8:	4605      	mov	r5, r0
   121ea:	f04f 33ff 	mov.w	r3, #4294967295
   121ee:	481b      	ldr	r0, [pc, #108]	; (1225c <bt_hci_cmd_create+0x7c>)
   121f0:	460e      	mov	r6, r1
   121f2:	f00d f8f5 	bl	1f3e0 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   121f6:	4604      	mov	r4, r0
   121f8:	b948      	cbnz	r0, 1220e <bt_hci_cmd_create+0x2e>
   121fa:	4919      	ldr	r1, [pc, #100]	; (12260 <bt_hci_cmd_create+0x80>)
   121fc:	4819      	ldr	r0, [pc, #100]	; (12264 <bt_hci_cmd_create+0x84>)
   121fe:	4a1a      	ldr	r2, [pc, #104]	; (12268 <bt_hci_cmd_create+0x88>)
   12200:	23e9      	movs	r3, #233	; 0xe9
   12202:	f00a fdee 	bl	1cde2 <printk>
   12206:	4818      	ldr	r0, [pc, #96]	; (12268 <bt_hci_cmd_create+0x88>)
   12208:	21e9      	movs	r1, #233	; 0xe9
   1220a:	f00b f844 	bl	1d296 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   1220e:	f104 0b08 	add.w	fp, r4, #8
   12212:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12214:	2700      	movs	r7, #0
   12216:	4658      	mov	r0, fp
   12218:	f003 ffa2 	bl	16160 <net_buf_simple_reserve>
   1221c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   1221e:	4620      	mov	r0, r4
   12220:	f003 fe64 	bl	15eec <net_buf_id>
   12224:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1226c <bt_hci_cmd_create+0x8c>
   12228:	f04f 0a0c 	mov.w	sl, #12
   1222c:	fb0a 8000 	mla	r0, sl, r0, r8
   12230:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   12232:	4620      	mov	r0, r4
   12234:	f003 fe5a 	bl	15eec <net_buf_id>
   12238:	fb0a 8000 	mla	r0, sl, r0, r8
   1223c:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1223e:	4620      	mov	r0, r4
   12240:	f003 fe54 	bl	15eec <net_buf_id>
   12244:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   12248:	2103      	movs	r1, #3
   1224a:	6047      	str	r7, [r0, #4]
   1224c:	4658      	mov	r0, fp
   1224e:	f004 f915 	bl	1647c <net_buf_simple_add>
	hdr->param_len = param_len;
   12252:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   12254:	8005      	strh	r5, [r0, #0]
}
   12256:	4620      	mov	r0, r4
   12258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1225c:	20000738 	.word	0x20000738
   12260:	00021484 	.word	0x00021484
   12264:	00020a75 	.word	0x00020a75
   12268:	00021409 	.word	0x00021409
   1226c:	20001c80 	.word	0x20001c80

00012270 <bt_hci_cmd_send_sync>:
{
   12270:	b5f0      	push	{r4, r5, r6, r7, lr}
   12272:	4615      	mov	r5, r2
   12274:	b087      	sub	sp, #28
	if (!buf) {
   12276:	460c      	mov	r4, r1
   12278:	b921      	cbnz	r1, 12284 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   1227a:	f7ff ffb1 	bl	121e0 <bt_hci_cmd_create>
		if (!buf) {
   1227e:	4604      	mov	r4, r0
   12280:	2800      	cmp	r0, #0
   12282:	d048      	beq.n	12316 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   12284:	2201      	movs	r2, #1
   12286:	2100      	movs	r1, #0
   12288:	4668      	mov	r0, sp
   1228a:	f00d fd5a 	bl	1fd42 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1228e:	4620      	mov	r0, r4
   12290:	f003 fe2c 	bl	15eec <net_buf_id>
   12294:	4e21      	ldr	r6, [pc, #132]	; (1231c <bt_hci_cmd_send_sync+0xac>)
   12296:	230c      	movs	r3, #12
   12298:	fb03 6000 	mla	r0, r3, r0, r6
   1229c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   122a0:	4620      	mov	r0, r4
   122a2:	f004 f801 	bl	162a8 <net_buf_ref>
   122a6:	4601      	mov	r1, r0
   122a8:	481d      	ldr	r0, [pc, #116]	; (12320 <bt_hci_cmd_send_sync+0xb0>)
   122aa:	f003 ff83 	bl	161b4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   122ae:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   122b2:	2300      	movs	r3, #0
   122b4:	4668      	mov	r0, sp
   122b6:	f007 fcfd 	bl	19cb4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   122ba:	4607      	mov	r7, r0
   122bc:	b180      	cbz	r0, 122e0 <bt_hci_cmd_send_sync+0x70>
   122be:	4a19      	ldr	r2, [pc, #100]	; (12324 <bt_hci_cmd_send_sync+0xb4>)
   122c0:	4919      	ldr	r1, [pc, #100]	; (12328 <bt_hci_cmd_send_sync+0xb8>)
   122c2:	481a      	ldr	r0, [pc, #104]	; (1232c <bt_hci_cmd_send_sync+0xbc>)
   122c4:	f44f 7399 	mov.w	r3, #306	; 0x132
   122c8:	f00a fd8b 	bl	1cde2 <printk>
   122cc:	4818      	ldr	r0, [pc, #96]	; (12330 <bt_hci_cmd_send_sync+0xc0>)
   122ce:	4639      	mov	r1, r7
   122d0:	f00a fd87 	bl	1cde2 <printk>
   122d4:	4040      	eors	r0, r0
   122d6:	f380 8811 	msr	BASEPRI, r0
   122da:	f04f 0003 	mov.w	r0, #3
   122de:	df02      	svc	2
	status = cmd(buf)->status;
   122e0:	4620      	mov	r0, r4
   122e2:	f003 fe03 	bl	15eec <net_buf_id>
   122e6:	230c      	movs	r3, #12
   122e8:	4343      	muls	r3, r0
   122ea:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   122ec:	b156      	cbz	r6, 12304 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   122ee:	4620      	mov	r0, r4
   122f0:	f003 ff94 	bl	1621c <net_buf_unref>
			return -EIO;
   122f4:	2e09      	cmp	r6, #9
   122f6:	bf0c      	ite	eq
   122f8:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   122fc:	f06f 0004 	mvnne.w	r0, #4
}
   12300:	b007      	add	sp, #28
   12302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   12304:	b115      	cbz	r5, 1230c <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   12306:	602c      	str	r4, [r5, #0]
	return 0;
   12308:	4630      	mov	r0, r6
   1230a:	e7f9      	b.n	12300 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   1230c:	4620      	mov	r0, r4
   1230e:	f003 ff85 	bl	1621c <net_buf_unref>
	return 0;
   12312:	4628      	mov	r0, r5
   12314:	e7f4      	b.n	12300 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   12316:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1231a:	e7f1      	b.n	12300 <bt_hci_cmd_send_sync+0x90>
   1231c:	20001c80 	.word	0x20001c80
   12320:	200003f0 	.word	0x200003f0
   12324:	00021409 	.word	0x00021409
   12328:	00021488 	.word	0x00021488
   1232c:	00020a75 	.word	0x00020a75
   12330:	00021491 	.word	0x00021491

00012334 <hci_init>:
{
   12334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   12336:	4d41      	ldr	r5, [pc, #260]	; (1243c <hci_init+0x108>)
   12338:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   1233c:	6899      	ldr	r1, [r3, #8]
   1233e:	f011 0101 	ands.w	r1, r1, #1
   12342:	d123      	bne.n	1238c <hci_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   12344:	aa01      	add	r2, sp, #4
   12346:	f640 4003 	movw	r0, #3075	; 0xc03
   1234a:	f7ff ff91 	bl	12270 <bt_hci_cmd_send_sync>
		if (err) {
   1234e:	4604      	mov	r4, r0
   12350:	2800      	cmp	r0, #0
   12352:	d170      	bne.n	12436 <hci_init+0x102>
		hci_reset_complete(rsp);
   12354:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   12356:	689b      	ldr	r3, [r3, #8]
	if (status) {
   12358:	781b      	ldrb	r3, [r3, #0]
   1235a:	b9a3      	cbnz	r3, 12386 <hci_init+0x52>
		bt_scan_reset();
   1235c:	f000 ff7a 	bl	13254 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12360:	f3bf 8f5b 	dmb	ish
   12364:	462b      	mov	r3, r5
   12366:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   1236a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1236e:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12372:	f3bf 8f5b 	dmb	ish
   12376:	e853 1f00 	ldrex	r1, [r3]
   1237a:	e843 2000 	strex	r0, r2, [r3]
   1237e:	2800      	cmp	r0, #0
   12380:	d1f9      	bne.n	12376 <hci_init+0x42>
   12382:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   12386:	9801      	ldr	r0, [sp, #4]
   12388:	f003 ff48 	bl	1621c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1238c:	aa01      	add	r2, sp, #4
   1238e:	2100      	movs	r1, #0
   12390:	f241 0003 	movw	r0, #4099	; 0x1003
   12394:	f7ff ff6c 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   12398:	4604      	mov	r4, r0
   1239a:	2800      	cmp	r0, #0
   1239c:	d14b      	bne.n	12436 <hci_init+0x102>
	read_local_features_complete(rsp);
   1239e:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   123a0:	4e27      	ldr	r6, [pc, #156]	; (12440 <hci_init+0x10c>)
   123a2:	6893      	ldr	r3, [r2, #8]
   123a4:	f853 0f01 	ldr.w	r0, [r3, #1]!
   123a8:	6859      	ldr	r1, [r3, #4]
   123aa:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   123ac:	4610      	mov	r0, r2
   123ae:	f003 ff35 	bl	1621c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   123b2:	4621      	mov	r1, r4
   123b4:	aa01      	add	r2, sp, #4
   123b6:	f241 0001 	movw	r0, #4097	; 0x1001
   123ba:	f7ff ff59 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   123be:	4604      	mov	r4, r0
   123c0:	2800      	cmp	r0, #0
   123c2:	d138      	bne.n	12436 <hci_init+0x102>
	read_local_ver_complete(rsp);
   123c4:	9801      	ldr	r0, [sp, #4]
   123c6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   123c8:	785a      	ldrb	r2, [r3, #1]
   123ca:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   123ce:	78d9      	ldrb	r1, [r3, #3]
   123d0:	789a      	ldrb	r2, [r3, #2]
   123d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   123d6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   123da:	791a      	ldrb	r2, [r3, #4]
   123dc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   123e0:	7a19      	ldrb	r1, [r3, #8]
   123e2:	79da      	ldrb	r2, [r3, #7]
   123e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   123e8:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   123ec:	795a      	ldrb	r2, [r3, #5]
   123ee:	799b      	ldrb	r3, [r3, #6]
   123f0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   123f4:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   123f8:	f003 ff10 	bl	1621c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   123fc:	4621      	mov	r1, r4
   123fe:	aa01      	add	r2, sp, #4
   12400:	f241 0002 	movw	r0, #4098	; 0x1002
   12404:	f7ff ff34 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   12408:	4604      	mov	r4, r0
   1240a:	b9a0      	cbnz	r0, 12436 <hci_init+0x102>
	read_supported_commands_complete(rsp);
   1240c:	9f01      	ldr	r7, [sp, #4]
   1240e:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   12410:	1c53      	adds	r3, r2, #1
   12412:	3241      	adds	r2, #65	; 0x41
   12414:	6818      	ldr	r0, [r3, #0]
   12416:	6859      	ldr	r1, [r3, #4]
   12418:	4634      	mov	r4, r6
   1241a:	c403      	stmia	r4!, {r0, r1}
   1241c:	3308      	adds	r3, #8
   1241e:	4293      	cmp	r3, r2
   12420:	4626      	mov	r6, r4
   12422:	d1f7      	bne.n	12414 <hci_init+0xe0>
	net_buf_unref(rsp);
   12424:	4638      	mov	r0, r7
   12426:	f003 fef9 	bl	1621c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1242a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1242e:	065e      	lsls	r6, r3, #25
   12430:	d408      	bmi.n	12444 <hci_init+0x110>
		return -ENODEV;
   12432:	f06f 0412 	mvn.w	r4, #18
}
   12436:	4620      	mov	r0, r4
   12438:	b003      	add	sp, #12
   1243a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1243c:	200002a0 	.word	0x200002a0
   12440:	20000310 	.word	0x20000310
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   12444:	aa01      	add	r2, sp, #4
   12446:	2100      	movs	r1, #0
   12448:	f242 0003 	movw	r0, #8195	; 0x2003
   1244c:	f7ff ff10 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   12450:	4604      	mov	r4, r0
   12452:	2800      	cmp	r0, #0
   12454:	d1ef      	bne.n	12436 <hci_init+0x102>
	read_le_features_complete(rsp);
   12456:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12458:	4e95      	ldr	r6, [pc, #596]	; (126b0 <hci_init+0x37c>)
   1245a:	6893      	ldr	r3, [r2, #8]
   1245c:	f853 0f01 	ldr.w	r0, [r3, #1]!
   12460:	6859      	ldr	r1, [r3, #4]
   12462:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   12464:	4610      	mov	r0, r2
   12466:	f003 fed9 	bl	1621c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1246a:	4621      	mov	r1, r4
   1246c:	aa01      	add	r2, sp, #4
   1246e:	f242 0002 	movw	r0, #8194	; 0x2002
   12472:	f7ff fefd 	bl	12270 <bt_hci_cmd_send_sync>
		if (err) {
   12476:	4604      	mov	r4, r0
   12478:	2800      	cmp	r0, #0
   1247a:	d1dc      	bne.n	12436 <hci_init+0x102>
		le_read_buffer_size_complete(rsp);
   1247c:	9b01      	ldr	r3, [sp, #4]
   1247e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   12480:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   12484:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   12488:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1248a:	b129      	cbz	r1, 12498 <hci_init+0x164>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1248c:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1248e:	4611      	mov	r1, r2
   12490:	f106 0028 	add.w	r0, r6, #40	; 0x28
   12494:	f00d fc55 	bl	1fd42 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   12498:	9801      	ldr	r0, [sp, #4]
   1249a:	f003 febf 	bl	1621c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1249e:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   124a2:	f016 0620 	ands.w	r6, r6, #32
   124a6:	f000 80e7 	beq.w	12678 <hci_init+0x344>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   124aa:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   124ae:	071c      	lsls	r4, r3, #28
   124b0:	d511      	bpl.n	124d6 <hci_init+0x1a2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   124b2:	aa01      	add	r2, sp, #4
   124b4:	2100      	movs	r1, #0
   124b6:	f242 001c 	movw	r0, #8220	; 0x201c
   124ba:	f7ff fed9 	bl	12270 <bt_hci_cmd_send_sync>
		if (err) {
   124be:	4604      	mov	r4, r0
   124c0:	2800      	cmp	r0, #0
   124c2:	d1b8      	bne.n	12436 <hci_init+0x102>
		le_read_supp_states_complete(rsp);
   124c4:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   124c6:	6883      	ldr	r3, [r0, #8]
   124c8:	f853 2f01 	ldr.w	r2, [r3, #1]!
   124cc:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   124ce:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   124d2:	f003 fea3 	bl	1621c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   124d6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   124da:	0698      	lsls	r0, r3, #26
   124dc:	d523      	bpl.n	12526 <hci_init+0x1f2>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   124de:	f10d 0102 	add.w	r1, sp, #2
   124e2:	4668      	mov	r0, sp
   124e4:	f00b fa5b 	bl	1d99e <hci_le_read_max_data_len>
		if (err) {
   124e8:	4604      	mov	r4, r0
   124ea:	2800      	cmp	r0, #0
   124ec:	d1a3      	bne.n	12436 <hci_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   124ee:	2104      	movs	r1, #4
   124f0:	f242 0024 	movw	r0, #8228	; 0x2024
   124f4:	f7ff fe74 	bl	121e0 <bt_hci_cmd_create>
		if (!buf) {
   124f8:	4606      	mov	r6, r0
   124fa:	2800      	cmp	r0, #0
   124fc:	f000 80c3 	beq.w	12686 <hci_init+0x352>
   12500:	2104      	movs	r1, #4
   12502:	3008      	adds	r0, #8
   12504:	f003 ffba 	bl	1647c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   12508:	f8bd 3000 	ldrh.w	r3, [sp]
   1250c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1250e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12512:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   12514:	4622      	mov	r2, r4
   12516:	4631      	mov	r1, r6
   12518:	f242 0024 	movw	r0, #8228	; 0x2024
   1251c:	f7ff fea8 	bl	12270 <bt_hci_cmd_send_sync>
		if (err) {
   12520:	4604      	mov	r4, r0
   12522:	2800      	cmp	r0, #0
   12524:	d187      	bne.n	12436 <hci_init+0x102>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   12526:	2108      	movs	r1, #8
   12528:	f242 0001 	movw	r0, #8193	; 0x2001
   1252c:	f7ff fe58 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   12530:	4604      	mov	r4, r0
   12532:	2800      	cmp	r0, #0
   12534:	f000 80a7 	beq.w	12686 <hci_init+0x352>
   12538:	2108      	movs	r1, #8
   1253a:	4408      	add	r0, r1
   1253c:	f003 ff9e 	bl	1647c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   12540:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   12544:	f012 0f02 	tst.w	r2, #2
   12548:	bf14      	ite	ne
   1254a:	232f      	movne	r3, #47	; 0x2f
   1254c:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1254e:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   12550:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   12554:	bf48      	it	mi
   12556:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1255a:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1255e:	bf18      	it	ne
   12560:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   12564:	2200      	movs	r2, #0
   12566:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   12568:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1256c:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1256e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   12570:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   12572:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   12574:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   12576:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   12578:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1257a:	4621      	mov	r1, r4
   1257c:	f242 0001 	movw	r0, #8193	; 0x2001
   12580:	f7ff fe76 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   12584:	4604      	mov	r4, r0
   12586:	2800      	cmp	r0, #0
   12588:	f47f af55 	bne.w	12436 <hci_init+0x102>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1258c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   12590:	069a      	lsls	r2, r3, #26
   12592:	d41e      	bmi.n	125d2 <hci_init+0x29e>
	if (bt_dev.le.acl_mtu) {
   12594:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   12598:	b9d9      	cbnz	r1, 125d2 <hci_init+0x29e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1259a:	aa01      	add	r2, sp, #4
   1259c:	f241 0005 	movw	r0, #4101	; 0x1005
   125a0:	f7ff fe66 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   125a4:	4604      	mov	r4, r0
   125a6:	2800      	cmp	r0, #0
   125a8:	f47f af45 	bne.w	12436 <hci_init+0x102>
	if (bt_dev.le.acl_mtu) {
   125ac:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   125b0:	b963      	cbnz	r3, 125cc <hci_init+0x298>
	read_buffer_size_complete(rsp);
   125b2:	9b01      	ldr	r3, [sp, #4]
   125b4:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   125b6:	785a      	ldrb	r2, [r3, #1]
   125b8:	7899      	ldrb	r1, [r3, #2]
   125ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   125be:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   125c2:	889a      	ldrh	r2, [r3, #4]
   125c4:	483b      	ldr	r0, [pc, #236]	; (126b4 <hci_init+0x380>)
   125c6:	4611      	mov	r1, r2
   125c8:	f00d fbbb 	bl	1fd42 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   125cc:	9801      	ldr	r0, [sp, #4]
   125ce:	f003 fe25 	bl	1621c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   125d2:	2108      	movs	r1, #8
   125d4:	f640 4001 	movw	r0, #3073	; 0xc01
   125d8:	f7ff fe02 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   125dc:	4604      	mov	r4, r0
   125de:	2800      	cmp	r0, #0
   125e0:	d051      	beq.n	12686 <hci_init+0x352>
   125e2:	2108      	movs	r1, #8
   125e4:	4408      	add	r0, r1
   125e6:	f003 ff49 	bl	1647c <net_buf_simple_add>
	dst[0] = val;
   125ea:	2310      	movs	r3, #16
   125ec:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   125ee:	2388      	movs	r3, #136	; 0x88
   125f0:	7043      	strb	r3, [r0, #1]
   125f2:	2302      	movs	r3, #2
	dst[0] = val;
   125f4:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   125f6:	70c3      	strb	r3, [r0, #3]
   125f8:	2320      	movs	r3, #32
	dst[0] = val;
   125fa:	7082      	strb	r2, [r0, #2]
   125fc:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   125fe:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   12600:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   12602:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   12604:	4621      	mov	r1, r4
   12606:	f640 4001 	movw	r0, #3073	; 0xc01
   1260a:	f7ff fe31 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   1260e:	4604      	mov	r4, r0
   12610:	2800      	cmp	r0, #0
   12612:	f47f af10 	bne.w	12436 <hci_init+0x102>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   12616:	4601      	mov	r1, r0
   12618:	aa01      	add	r2, sp, #4
   1261a:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1261e:	f7ff fe27 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   12622:	4604      	mov	r4, r0
   12624:	bb20      	cbnz	r0, 12670 <hci_init+0x33c>
	net_buf_unref(rsp);
   12626:	9801      	ldr	r0, [sp, #4]
   12628:	f003 fdf8 	bl	1621c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1262c:	4621      	mov	r1, r4
   1262e:	aa01      	add	r2, sp, #4
   12630:	f64f 4002 	movw	r0, #64514	; 0xfc02
   12634:	f7ff fe1c 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   12638:	4604      	mov	r4, r0
   1263a:	b9c8      	cbnz	r0, 12670 <hci_init+0x33c>
	rp.cmds = (void *)rsp->data;
   1263c:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1263e:	6883      	ldr	r3, [r0, #8]
   12640:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   12644:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   12648:	f003 fde8 	bl	1621c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1264c:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   12650:	075b      	lsls	r3, r3, #29
   12652:	d50d      	bpl.n	12670 <hci_init+0x33c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   12654:	aa01      	add	r2, sp, #4
   12656:	4621      	mov	r1, r4
   12658:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1265c:	f7ff fe08 	bl	12270 <bt_hci_cmd_send_sync>
		if (err) {
   12660:	b930      	cbnz	r0, 12670 <hci_init+0x33c>
		rp.feat = (void *)rsp->data;
   12662:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   12664:	6883      	ldr	r3, [r0, #8]
   12666:	785b      	ldrb	r3, [r3, #1]
   12668:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   1266c:	f003 fdd6 	bl	1621c <net_buf_unref>
	err = bt_id_init();
   12670:	f000 fd50 	bl	13114 <bt_id_init>
   12674:	4604      	mov	r4, r0
	if (err) {
   12676:	e6de      	b.n	12436 <hci_init+0x102>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   12678:	2102      	movs	r1, #2
   1267a:	f640 406d 	movw	r0, #3181	; 0xc6d
   1267e:	f7ff fdaf 	bl	121e0 <bt_hci_cmd_create>
		if (!buf) {
   12682:	4604      	mov	r4, r0
   12684:	b910      	cbnz	r0, 1268c <hci_init+0x358>
		return -ENOBUFS;
   12686:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1268a:	e6d4      	b.n	12436 <hci_init+0x102>
   1268c:	2102      	movs	r1, #2
   1268e:	3008      	adds	r0, #8
   12690:	f003 fef4 	bl	1647c <net_buf_simple_add>
		cp_le->le = 0x01;
   12694:	2301      	movs	r3, #1
   12696:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   12698:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1269a:	4621      	mov	r1, r4
   1269c:	4632      	mov	r2, r6
   1269e:	f640 406d 	movw	r0, #3181	; 0xc6d
   126a2:	f7ff fde5 	bl	12270 <bt_hci_cmd_send_sync>
		if (err) {
   126a6:	4604      	mov	r4, r0
   126a8:	2800      	cmp	r0, #0
   126aa:	f43f aefe 	beq.w	124aa <hci_init+0x176>
   126ae:	e6c2      	b.n	12436 <hci_init+0x102>
   126b0:	20000370 	.word	0x20000370
   126b4:	200003a0 	.word	0x200003a0

000126b8 <bt_le_create_conn_legacy>:
{
   126b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   126ba:	b085      	sub	sp, #20
   126bc:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   126be:	f10d 0103 	add.w	r1, sp, #3
   126c2:	2000      	movs	r0, #0
   126c4:	f000 fd06 	bl	130d4 <bt_id_set_create_conn_own_addr>
	if (err) {
   126c8:	4604      	mov	r4, r0
   126ca:	2800      	cmp	r0, #0
   126cc:	d145      	bne.n	1275a <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   126ce:	2119      	movs	r1, #25
   126d0:	f242 000d 	movw	r0, #8205	; 0x200d
   126d4:	f7ff fd84 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   126d8:	4607      	mov	r7, r0
   126da:	2800      	cmp	r0, #0
   126dc:	d040      	beq.n	12760 <bt_le_create_conn_legacy+0xa8>
   126de:	2119      	movs	r1, #25
   126e0:	3008      	adds	r0, #8
   126e2:	f003 fecb 	bl	1647c <net_buf_simple_add>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   126e6:	2219      	movs	r2, #25
   126e8:	4605      	mov	r5, r0
   126ea:	4621      	mov	r1, r4
   126ec:	f00d fc8e 	bl	2000c <memset>
	cp->own_addr_type = own_addr_type;
   126f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   126f4:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   126f6:	f106 0190 	add.w	r1, r6, #144	; 0x90
   126fa:	1d68      	adds	r0, r5, #5
   126fc:	f00b f87c 	bl	1d7f8 <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   12700:	4b19      	ldr	r3, [pc, #100]	; (12768 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   12702:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   12704:	899a      	ldrh	r2, [r3, #12]
   12706:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   12708:	89da      	ldrh	r2, [r3, #14]
   1270a:	806a      	strh	r2, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   1270c:	f8b6 20a8 	ldrh.w	r2, [r6, #168]	; 0xa8
   12710:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   12714:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
   12718:	f8a5 200f 	strh.w	r2, [r5, #15]
	state->target = target;
   1271c:	33cc      	adds	r3, #204	; 0xcc
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   1271e:	f8b6 20ac 	ldrh.w	r2, [r6, #172]	; 0xac
   12722:	f8a5 2011 	strh.w	r2, [r5, #17]
	state->target = target;
   12726:	9301      	str	r3, [sp, #4]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   12728:	f8b6 20ae 	ldrh.w	r2, [r6, #174]	; 0xae
   1272c:	f8a5 2013 	strh.w	r2, [r5, #19]
	state->bit = bit;
   12730:	230b      	movs	r3, #11
   12732:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
   12734:	4638      	mov	r0, r7
	state->val = val;
   12736:	2301      	movs	r3, #1
   12738:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   1273c:	f003 fbd6 	bl	15eec <net_buf_id>
   12740:	4b0a      	ldr	r3, [pc, #40]	; (1276c <bt_le_create_conn_legacy+0xb4>)
   12742:	220c      	movs	r2, #12
   12744:	fb02 3300 	mla	r3, r2, r0, r3
   12748:	aa01      	add	r2, sp, #4
   1274a:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   1274c:	4639      	mov	r1, r7
   1274e:	4622      	mov	r2, r4
   12750:	f242 000d 	movw	r0, #8205	; 0x200d
   12754:	f7ff fd8c 	bl	12270 <bt_hci_cmd_send_sync>
   12758:	4604      	mov	r4, r0
}
   1275a:	4620      	mov	r0, r4
   1275c:	b005      	add	sp, #20
   1275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   12760:	f06f 0468 	mvn.w	r4, #104	; 0x68
   12764:	e7f9      	b.n	1275a <bt_le_create_conn_legacy+0xa2>
   12766:	bf00      	nop
   12768:	200002a0 	.word	0x200002a0
   1276c:	20001c80 	.word	0x20001c80

00012770 <bt_le_create_conn_cancel>:
{
   12770:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   12772:	2100      	movs	r1, #0
{
   12774:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   12776:	f242 000e 	movw	r0, #8206	; 0x200e
   1277a:	f7ff fd31 	bl	121e0 <bt_hci_cmd_create>
	state->target = target;
   1277e:	4b0c      	ldr	r3, [pc, #48]	; (127b0 <bt_le_create_conn_cancel+0x40>)
   12780:	9301      	str	r3, [sp, #4]
	state->val = val;
   12782:	2500      	movs	r5, #0
	state->bit = bit;
   12784:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   12786:	4604      	mov	r4, r0
	state->bit = bit;
   12788:	9302      	str	r3, [sp, #8]
	state->val = val;
   1278a:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   1278e:	f003 fbad 	bl	15eec <net_buf_id>
   12792:	4b08      	ldr	r3, [pc, #32]	; (127b4 <bt_le_create_conn_cancel+0x44>)
   12794:	220c      	movs	r2, #12
   12796:	fb02 3000 	mla	r0, r2, r0, r3
   1279a:	ab01      	add	r3, sp, #4
   1279c:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   1279e:	462a      	mov	r2, r5
   127a0:	4621      	mov	r1, r4
   127a2:	f242 000e 	movw	r0, #8206	; 0x200e
   127a6:	f7ff fd63 	bl	12270 <bt_hci_cmd_send_sync>
}
   127aa:	b005      	add	sp, #20
   127ac:	bd30      	pop	{r4, r5, pc}
   127ae:	bf00      	nop
   127b0:	2000036c 	.word	0x2000036c
   127b4:	20001c80 	.word	0x20001c80

000127b8 <bt_send>:
	return bt_dev.drv->send(buf);
   127b8:	4b02      	ldr	r3, [pc, #8]	; (127c4 <bt_send+0xc>)
   127ba:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   127be:	691b      	ldr	r3, [r3, #16]
   127c0:	4718      	bx	r3
   127c2:	bf00      	nop
   127c4:	200002a0 	.word	0x200002a0

000127c8 <bt_hci_cmd_send>:
{
   127c8:	b538      	push	{r3, r4, r5, lr}
   127ca:	4605      	mov	r5, r0
	if (!buf) {
   127cc:	460c      	mov	r4, r1
   127ce:	b919      	cbnz	r1, 127d8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   127d0:	f7ff fd06 	bl	121e0 <bt_hci_cmd_create>
		if (!buf) {
   127d4:	4604      	mov	r4, r0
   127d6:	b198      	cbz	r0, 12800 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   127d8:	f640 4335 	movw	r3, #3125	; 0xc35
   127dc:	429d      	cmp	r5, r3
   127de:	d109      	bne.n	127f4 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   127e0:	4620      	mov	r0, r4
   127e2:	f7ff ffe9 	bl	127b8 <bt_send>
		if (err) {
   127e6:	4605      	mov	r5, r0
   127e8:	b110      	cbz	r0, 127f0 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   127ea:	4620      	mov	r0, r4
   127ec:	f003 fd16 	bl	1621c <net_buf_unref>
}
   127f0:	4628      	mov	r0, r5
   127f2:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   127f4:	4804      	ldr	r0, [pc, #16]	; (12808 <bt_hci_cmd_send+0x40>)
   127f6:	4621      	mov	r1, r4
   127f8:	f003 fcdc 	bl	161b4 <net_buf_put>
	return 0;
   127fc:	2500      	movs	r5, #0
   127fe:	e7f7      	b.n	127f0 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   12800:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12804:	e7f4      	b.n	127f0 <bt_hci_cmd_send+0x28>
   12806:	bf00      	nop
   12808:	200003f0 	.word	0x200003f0

0001280c <conn_auto_initiate>:
{
   1280c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1280e:	7a83      	ldrb	r3, [r0, #10]
   12810:	2b07      	cmp	r3, #7
{
   12812:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   12814:	d121      	bne.n	1285a <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12816:	f3bf 8f5b 	dmb	ish
   1281a:	6843      	ldr	r3, [r0, #4]
   1281c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12820:	049b      	lsls	r3, r3, #18
   12822:	f100 0604 	add.w	r6, r0, #4
   12826:	d41a      	bmi.n	1285e <conn_auto_initiate+0x52>
   12828:	78c3      	ldrb	r3, [r0, #3]
   1282a:	b123      	cbz	r3, 12836 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   1282c:	4b29      	ldr	r3, [pc, #164]	; (128d4 <conn_auto_initiate+0xc8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1282e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   12832:	071d      	lsls	r5, r3, #28
   12834:	d513      	bpl.n	1285e <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12836:	2102      	movs	r1, #2
   12838:	f242 0016 	movw	r0, #8214	; 0x2016
   1283c:	f7ff fcd0 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   12840:	4605      	mov	r5, r0
   12842:	b160      	cbz	r0, 1285e <conn_auto_initiate+0x52>
   12844:	2102      	movs	r1, #2
   12846:	3008      	adds	r0, #8
   12848:	f003 fe18 	bl	1647c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1284c:	8823      	ldrh	r3, [r4, #0]
   1284e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   12850:	4629      	mov	r1, r5
   12852:	f242 0016 	movw	r0, #8214	; 0x2016
   12856:	f7ff ffb7 	bl	127c8 <bt_hci_cmd_send>
}
   1285a:	b004      	add	sp, #16
   1285c:	bd70      	pop	{r4, r5, r6, pc}
   1285e:	f3bf 8f5b 	dmb	ish
   12862:	6863      	ldr	r3, [r4, #4]
   12864:	4d1b      	ldr	r5, [pc, #108]	; (128d4 <conn_auto_initiate+0xc8>)
   12866:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1286a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1286e:	f3c3 3100 	ubfx	r1, r3, #12, #1
   12872:	d117      	bne.n	128a4 <conn_auto_initiate+0x98>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   12874:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   12878:	07d8      	lsls	r0, r3, #31
   1287a:	d513      	bpl.n	128a4 <conn_auto_initiate+0x98>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1287c:	2302      	movs	r3, #2
   1287e:	9100      	str	r1, [sp, #0]
   12880:	461a      	mov	r2, r3
   12882:	4620      	mov	r0, r4
   12884:	f00b f8fd 	bl	1da82 <bt_le_set_phy>
		if (!err) {
   12888:	b960      	cbnz	r0, 128a4 <conn_auto_initiate+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1288a:	f3bf 8f5b 	dmb	ish
   1288e:	e856 3f00 	ldrex	r3, [r6]
   12892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12896:	e846 3200 	strex	r2, r3, [r6]
   1289a:	2a00      	cmp	r2, #0
   1289c:	d1f7      	bne.n	1288e <conn_auto_initiate+0x82>
   1289e:	f3bf 8f5b 	dmb	ish
			return;
   128a2:	e7da      	b.n	1285a <conn_auto_initiate+0x4e>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   128a4:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   128a8:	069a      	lsls	r2, r3, #26
   128aa:	d5d6      	bpl.n	1285a <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   128ac:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   128b0:	689b      	ldr	r3, [r3, #8]
   128b2:	079b      	lsls	r3, r3, #30
   128b4:	d5d1      	bpl.n	1285a <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   128b6:	f10d 010e 	add.w	r1, sp, #14
   128ba:	a803      	add	r0, sp, #12
   128bc:	f00b f86f 	bl	1d99e <hci_le_read_max_data_len>
			if (!err) {
   128c0:	2800      	cmp	r0, #0
   128c2:	d1ca      	bne.n	1285a <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   128c4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   128c8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   128cc:	4620      	mov	r0, r4
   128ce:	f00b f8bb 	bl	1da48 <bt_le_set_data_len>
		}
   128d2:	e7c2      	b.n	1285a <conn_auto_initiate+0x4e>
   128d4:	200002a0 	.word	0x200002a0

000128d8 <bt_hci_le_enh_conn_complete>:
{
   128d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   128dc:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   128e0:	4a5e      	ldr	r2, [pc, #376]	; (12a5c <bt_hci_le_enh_conn_complete+0x184>)
	if (evt->status) {
   128e2:	7806      	ldrb	r6, [r0, #0]
		if (disconnected_handles[i] == handle) {
   128e4:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   128e6:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   128ea:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   128ee:	b29b      	uxth	r3, r3
   128f0:	4299      	cmp	r1, r3
   128f2:	f04f 0700 	mov.w	r7, #0
			disconnected_handles[i] = 0;
   128f6:	bf08      	it	eq
   128f8:	8017      	strheq	r7, [r2, #0]
{
   128fa:	b085      	sub	sp, #20
   128fc:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   128fe:	fa1f f988 	uxth.w	r9, r8
			return true;
   12902:	bf08      	it	eq
   12904:	2701      	moveq	r7, #1
	if (evt->status) {
   12906:	b306      	cbz	r6, 1294a <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12908:	2e02      	cmp	r6, #2
   1290a:	d11b      	bne.n	12944 <bt_hci_le_enh_conn_complete+0x6c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1290c:	2100      	movs	r1, #0
   1290e:	2206      	movs	r2, #6
   12910:	4608      	mov	r0, r1
   12912:	f001 faa3 	bl	13e5c <bt_conn_lookup_state_le>
	if (!conn) {
   12916:	4604      	mov	r4, r0
   12918:	b188      	cbz	r0, 1293e <bt_hci_le_enh_conn_complete+0x66>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1291a:	7246      	strb	r6, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1291c:	2100      	movs	r1, #0
   1291e:	f001 f88b 	bl	13a38 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12922:	f3bf 8f5b 	dmb	ish
   12926:	6863      	ldr	r3, [r4, #4]
   12928:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1292c:	07db      	lsls	r3, r3, #31
   1292e:	d503      	bpl.n	12938 <bt_hci_le_enh_conn_complete+0x60>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   12930:	4631      	mov	r1, r6
   12932:	4620      	mov	r0, r4
   12934:	f001 f880 	bl	13a38 <bt_conn_set_state>
	bt_conn_unref(conn);
   12938:	4620      	mov	r0, r4
   1293a:	f001 f847 	bl	139cc <bt_conn_unref>
			bt_le_scan_update(false);
   1293e:	2000      	movs	r0, #0
   12940:	f000 fc8e 	bl	13260 <bt_le_scan_update>
}
   12944:	b005      	add	sp, #20
   12946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1294a:	7903      	ldrb	r3, [r0, #4]
   1294c:	3b02      	subs	r3, #2
   1294e:	2b01      	cmp	r3, #1
   12950:	f100 0404 	add.w	r4, r0, #4
   12954:	d82d      	bhi.n	129b2 <bt_hci_le_enh_conn_complete+0xda>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12956:	4621      	mov	r1, r4
   12958:	a802      	add	r0, sp, #8
   1295a:	f00a ff4d 	bl	1d7f8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1295e:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12962:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12966:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12968:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1296c:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12970:	f00a ff49 	bl	1d806 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12974:	2301      	movs	r3, #1
   12976:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   1297a:	78e8      	ldrb	r0, [r5, #3]
   1297c:	b9a0      	cbnz	r0, 129a8 <bt_hci_le_enh_conn_complete+0xd0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1297e:	2206      	movs	r2, #6
   12980:	a902      	add	r1, sp, #8
   12982:	f001 fa6b 	bl	13e5c <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12986:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   12988:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1298a:	b963      	cbnz	r3, 129a6 <bt_hci_le_enh_conn_complete+0xce>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1298c:	f3bf 8f5b 	dmb	ish
   12990:	4b33      	ldr	r3, [pc, #204]	; (12a60 <bt_hci_le_enh_conn_complete+0x188>)
   12992:	e853 2f00 	ldrex	r2, [r3]
   12996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1299a:	e843 2100 	strex	r1, r2, [r3]
   1299e:	2900      	cmp	r1, #0
   129a0:	d1f7      	bne.n	12992 <bt_hci_le_enh_conn_complete+0xba>
   129a2:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   129a6:	b9bc      	cbnz	r4, 129d8 <bt_hci_le_enh_conn_complete+0x100>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   129a8:	211f      	movs	r1, #31
   129aa:	4648      	mov	r0, r9
   129ac:	f00b f811 	bl	1d9d2 <bt_hci_disconnect>
		return;
   129b0:	e7c8      	b.n	12944 <bt_hci_le_enh_conn_complete+0x6c>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   129b2:	78c3      	ldrb	r3, [r0, #3]
   129b4:	2b01      	cmp	r3, #1
   129b6:	bf04      	itt	eq
   129b8:	4b2a      	ldreq	r3, [pc, #168]	; (12a64 <bt_hci_le_enh_conn_complete+0x18c>)
   129ba:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   129be:	4621      	mov	r1, r4
   129c0:	4630      	mov	r0, r6
   129c2:	f00b f9b5 	bl	1dd30 <bt_lookup_id_addr>
   129c6:	4601      	mov	r1, r0
   129c8:	a802      	add	r0, sp, #8
   129ca:	f00a ff15 	bl	1d7f8 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   129ce:	4621      	mov	r1, r4
   129d0:	4668      	mov	r0, sp
   129d2:	f00a ff11 	bl	1d7f8 <bt_addr_le_copy>
   129d6:	e7d0      	b.n	1297a <bt_hci_le_enh_conn_complete+0xa2>
	conn->handle = handle;
   129d8:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   129da:	a902      	add	r1, sp, #8
	conn->handle = handle;
   129dc:	f820 8b90 	strh.w	r8, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   129e0:	f00a ff0a 	bl	1d7f8 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   129e4:	7e2a      	ldrb	r2, [r5, #24]
   129e6:	7deb      	ldrb	r3, [r5, #23]
   129e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   129ec:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   129f0:	7eaa      	ldrb	r2, [r5, #26]
   129f2:	7e6b      	ldrb	r3, [r5, #25]
   129f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   129f8:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   129fc:	7f2a      	ldrb	r2, [r5, #28]
   129fe:	7eeb      	ldrb	r3, [r5, #27]
   12a00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12a04:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12a08:	78eb      	ldrb	r3, [r5, #3]
   12a0a:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   12a0c:	2200      	movs	r2, #0
   12a0e:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12a10:	b96b      	cbnz	r3, 12a2e <bt_hci_le_enh_conn_complete+0x156>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   12a12:	4669      	mov	r1, sp
   12a14:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12a18:	f00a feee 	bl	1d7f8 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   12a1c:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   12a1e:	4b11      	ldr	r3, [pc, #68]	; (12a64 <bt_hci_le_enh_conn_complete+0x18c>)
					&bt_dev.id_addr[conn->id]);
   12a20:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   12a24:	4419      	add	r1, r3
   12a26:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12a2a:	f00a fee5 	bl	1d7f8 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12a2e:	2107      	movs	r1, #7
   12a30:	4620      	mov	r0, r4
   12a32:	f001 f801 	bl	13a38 <bt_conn_set_state>
	if (is_disconnected) {
   12a36:	b11f      	cbz	r7, 12a40 <bt_hci_le_enh_conn_complete+0x168>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12a38:	2101      	movs	r1, #1
   12a3a:	4620      	mov	r0, r4
   12a3c:	f000 fffc 	bl	13a38 <bt_conn_set_state>
	bt_conn_connected(conn);
   12a40:	4620      	mov	r0, r4
   12a42:	f00b fa6a 	bl	1df1a <bt_conn_connected>
	conn_auto_initiate(conn);
   12a46:	4620      	mov	r0, r4
   12a48:	f7ff fee0 	bl	1280c <conn_auto_initiate>
	bt_conn_unref(conn);
   12a4c:	4620      	mov	r0, r4
   12a4e:	f000 ffbd 	bl	139cc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12a52:	78e3      	ldrb	r3, [r4, #3]
   12a54:	2b00      	cmp	r3, #0
   12a56:	f47f af75 	bne.w	12944 <bt_hci_le_enh_conn_complete+0x6c>
   12a5a:	e770      	b.n	1293e <bt_hci_le_enh_conn_complete+0x66>
   12a5c:	20001fb0 	.word	0x20001fb0
   12a60:	2000036c 	.word	0x2000036c
   12a64:	200002a0 	.word	0x200002a0

00012a68 <hci_tx_thread>:
{
   12a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   12a6c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 12b7c <hci_tx_thread+0x114>
		BT_ASSERT(err == 0);
   12a70:	f8df a120 	ldr.w	sl, [pc, #288]	; 12b94 <hci_tx_thread+0x12c>
		events[0].state = K_POLL_STATE_NOT_READY;
   12a74:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12a78:	483f      	ldr	r0, [pc, #252]	; (12b78 <hci_tx_thread+0x110>)
		events[0].state = K_POLL_STATE_NOT_READY;
   12a7a:	f36f 3352 	bfc	r3, #13, #6
   12a7e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   12a82:	f000 ff65 	bl	13950 <bt_conn_prepare_events>
   12a86:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   12a88:	483c      	ldr	r0, [pc, #240]	; (12b7c <hci_tx_thread+0x114>)
   12a8a:	f04f 32ff 	mov.w	r2, #4294967295
   12a8e:	f04f 33ff 	mov.w	r3, #4294967295
   12a92:	4629      	mov	r1, r5
   12a94:	f009 ffca 	bl	1ca2c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   12a98:	b160      	cbz	r0, 12ab4 <hci_tx_thread+0x4c>
   12a9a:	4939      	ldr	r1, [pc, #228]	; (12b80 <hci_tx_thread+0x118>)
   12a9c:	4839      	ldr	r0, [pc, #228]	; (12b84 <hci_tx_thread+0x11c>)
   12a9e:	f640 1389 	movw	r3, #2441	; 0x989
   12aa2:	4652      	mov	r2, sl
   12aa4:	f00a f99d 	bl	1cde2 <printk>
   12aa8:	4040      	eors	r0, r0
   12aaa:	f380 8811 	msr	BASEPRI, r0
   12aae:	f04f 0003 	mov.w	r0, #3
   12ab2:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12ab4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 12b98 <hci_tx_thread+0x130>
{
   12ab8:	4e30      	ldr	r6, [pc, #192]	; (12b7c <hci_tx_thread+0x114>)
	return z_impl_k_sem_take(sem, timeout);
   12aba:	f5a9 77a8 	sub.w	r7, r9, #336	; 0x150
   12abe:	f1a9 0b38 	sub.w	fp, r9, #56	; 0x38
	for (; count; ev++, count--) {
   12ac2:	b915      	cbnz	r5, 12aca <hci_tx_thread+0x62>
	z_impl_k_yield();
   12ac4:	f008 fe1c 	bl	1b700 <z_impl_k_yield>
	while (1) {
   12ac8:	e7d4      	b.n	12a74 <hci_tx_thread+0xc>
		switch (ev->state) {
   12aca:	68f3      	ldr	r3, [r6, #12]
   12acc:	f3c3 3345 	ubfx	r3, r3, #13, #6
   12ad0:	2b04      	cmp	r3, #4
   12ad2:	d147      	bne.n	12b64 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   12ad4:	7b33      	ldrb	r3, [r6, #12]
   12ad6:	2b00      	cmp	r3, #0
   12ad8:	d147      	bne.n	12b6a <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   12ada:	2200      	movs	r2, #0
   12adc:	2300      	movs	r3, #0
   12ade:	4648      	mov	r0, r9
   12ae0:	f003 fb0a 	bl	160f8 <net_buf_get>
	BT_ASSERT(buf);
   12ae4:	4604      	mov	r4, r0
   12ae6:	b960      	cbnz	r0, 12b02 <hci_tx_thread+0x9a>
   12ae8:	4927      	ldr	r1, [pc, #156]	; (12b88 <hci_tx_thread+0x120>)
   12aea:	4826      	ldr	r0, [pc, #152]	; (12b84 <hci_tx_thread+0x11c>)
   12aec:	f44f 6312 	mov.w	r3, #2336	; 0x920
   12af0:	4652      	mov	r2, sl
   12af2:	f00a f976 	bl	1cde2 <printk>
   12af6:	4040      	eors	r0, r0
   12af8:	f380 8811 	msr	BASEPRI, r0
   12afc:	f04f 0003 	mov.w	r0, #3
   12b00:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   12b02:	f04f 32ff 	mov.w	r2, #4294967295
   12b06:	f04f 33ff 	mov.w	r3, #4294967295
   12b0a:	4658      	mov	r0, fp
   12b0c:	f007 f8d2 	bl	19cb4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   12b10:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   12b14:	b120      	cbz	r0, 12b20 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   12b16:	f003 fb81 	bl	1621c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12b1a:	2300      	movs	r3, #0
   12b1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   12b20:	4620      	mov	r0, r4
   12b22:	f003 fbc1 	bl	162a8 <net_buf_ref>
   12b26:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   12b2a:	4620      	mov	r0, r4
   12b2c:	f7ff fe44 	bl	127b8 <bt_send>
	if (err) {
   12b30:	b1c0      	cbz	r0, 12b64 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   12b32:	4816      	ldr	r0, [pc, #88]	; (12b8c <hci_tx_thread+0x124>)
   12b34:	f007 f87a 	bl	19c2c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   12b38:	4620      	mov	r0, r4
   12b3a:	f003 f9d7 	bl	15eec <net_buf_id>
   12b3e:	4b14      	ldr	r3, [pc, #80]	; (12b90 <hci_tx_thread+0x128>)
   12b40:	220c      	movs	r2, #12
   12b42:	fb02 3000 	mla	r0, r2, r0, r3
   12b46:	211f      	movs	r1, #31
   12b48:	8840      	ldrh	r0, [r0, #2]
   12b4a:	4622      	mov	r2, r4
   12b4c:	f7ff fa9a 	bl	12084 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   12b50:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   12b54:	f003 fb62 	bl	1621c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   12b58:	2300      	movs	r3, #0
		net_buf_unref(buf);
   12b5a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   12b5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   12b60:	f003 fb5c 	bl	1621c <net_buf_unref>
	for (; count; ev++, count--) {
   12b64:	3614      	adds	r6, #20
   12b66:	3d01      	subs	r5, #1
   12b68:	e7ab      	b.n	12ac2 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   12b6a:	2b01      	cmp	r3, #1
   12b6c:	d1fa      	bne.n	12b64 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   12b6e:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   12b70:	3838      	subs	r0, #56	; 0x38
   12b72:	f001 fb0d 	bl	14190 <bt_conn_process_tx>
   12b76:	e7f5      	b.n	12b64 <hci_tx_thread+0xfc>
   12b78:	20000444 	.word	0x20000444
   12b7c:	20000430 	.word	0x20000430
   12b80:	00021488 	.word	0x00021488
   12b84:	00020a75 	.word	0x00020a75
   12b88:	00021484 	.word	0x00021484
   12b8c:	200003b8 	.word	0x200003b8
   12b90:	20001c80 	.word	0x20001c80
   12b94:	00021409 	.word	0x00021409
   12b98:	200003f0 	.word	0x200003f0

00012b9c <hci_event_prio>:
{
   12b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ba0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   12ba2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   12ba6:	4630      	mov	r0, r6
   12ba8:	f00c fc35 	bl	1f416 <net_buf_simple_headroom>
	state->len = buf->len;
   12bac:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12bb0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   12bb4:	4605      	mov	r5, r0
   12bb6:	d80c      	bhi.n	12bd2 <hci_event_prio+0x36>
   12bb8:	4a1c      	ldr	r2, [pc, #112]	; (12c2c <hci_event_prio+0x90>)
   12bba:	491d      	ldr	r1, [pc, #116]	; (12c30 <hci_event_prio+0x94>)
   12bbc:	481d      	ldr	r0, [pc, #116]	; (12c34 <hci_event_prio+0x98>)
   12bbe:	f640 5315 	movw	r3, #3349	; 0xd15
   12bc2:	f00a f90e 	bl	1cde2 <printk>
   12bc6:	4040      	eors	r0, r0
   12bc8:	f380 8811 	msr	BASEPRI, r0
   12bcc:	f04f 0003 	mov.w	r0, #3
   12bd0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   12bd2:	2102      	movs	r1, #2
   12bd4:	4630      	mov	r0, r6
   12bd6:	f003 fc2f 	bl	16438 <net_buf_simple_pull_mem>
   12bda:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12bdc:	7800      	ldrb	r0, [r0, #0]
   12bde:	f00a fdd5 	bl	1d78c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12be2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12be4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   12be6:	d40c      	bmi.n	12c02 <hci_event_prio+0x66>
   12be8:	4a10      	ldr	r2, [pc, #64]	; (12c2c <hci_event_prio+0x90>)
   12bea:	4913      	ldr	r1, [pc, #76]	; (12c38 <hci_event_prio+0x9c>)
   12bec:	4811      	ldr	r0, [pc, #68]	; (12c34 <hci_event_prio+0x98>)
   12bee:	f640 5319 	movw	r3, #3353	; 0xd19
   12bf2:	f00a f8f6 	bl	1cde2 <printk>
   12bf6:	4040      	eors	r0, r0
   12bf8:	f380 8811 	msr	BASEPRI, r0
   12bfc:	f04f 0003 	mov.w	r0, #3
   12c00:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   12c02:	2305      	movs	r3, #5
   12c04:	4a0d      	ldr	r2, [pc, #52]	; (12c3c <hci_event_prio+0xa0>)
   12c06:	7838      	ldrb	r0, [r7, #0]
   12c08:	4621      	mov	r1, r4
   12c0a:	f00a fdd1 	bl	1d7b0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12c0e:	07b3      	lsls	r3, r6, #30
   12c10:	d507      	bpl.n	12c22 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   12c12:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12c14:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12c18:	fa10 f585 	uxtah	r5, r0, r5
   12c1c:	60a5      	str	r5, [r4, #8]
}
   12c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   12c22:	4620      	mov	r0, r4
}
   12c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   12c28:	f003 baf8 	b.w	1621c <net_buf_unref>
   12c2c:	00021409 	.word	0x00021409
   12c30:	0002143d 	.word	0x0002143d
   12c34:	00020a75 	.word	0x00020a75
   12c38:	000214b1 	.word	0x000214b1
   12c3c:	000204e4 	.word	0x000204e4

00012c40 <bt_recv>:
{
   12c40:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12c42:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   12c44:	2b01      	cmp	r3, #1
{
   12c46:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   12c48:	d007      	beq.n	12c5a <bt_recv+0x1a>
   12c4a:	2b03      	cmp	r3, #3
   12c4c:	d113      	bne.n	12c76 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   12c4e:	480c      	ldr	r0, [pc, #48]	; (12c80 <bt_recv+0x40>)
   12c50:	4629      	mov	r1, r5
   12c52:	f003 faaf 	bl	161b4 <net_buf_put>
		return 0;
   12c56:	2000      	movs	r0, #0
   12c58:	e00c      	b.n	12c74 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12c5a:	6883      	ldr	r3, [r0, #8]
   12c5c:	7818      	ldrb	r0, [r3, #0]
   12c5e:	f00a fd95 	bl	1d78c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12c62:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   12c64:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   12c66:	d502      	bpl.n	12c6e <bt_recv+0x2e>
			hci_event_prio(buf);
   12c68:	4628      	mov	r0, r5
   12c6a:	f7ff ff97 	bl	12b9c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   12c6e:	f014 0002 	ands.w	r0, r4, #2
   12c72:	d1ec      	bne.n	12c4e <bt_recv+0xe>
}
   12c74:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   12c76:	f003 fad1 	bl	1621c <net_buf_unref>
		return -EINVAL;
   12c7a:	f06f 0015 	mvn.w	r0, #21
   12c7e:	e7f9      	b.n	12c74 <bt_recv+0x34>
   12c80:	200003d4 	.word	0x200003d4

00012c84 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   12c84:	4a08      	ldr	r2, [pc, #32]	; (12ca8 <bt_hci_driver_register+0x24>)
{
   12c86:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   12c88:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   12c8c:	b930      	cbnz	r0, 12c9c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   12c8e:	68d9      	ldr	r1, [r3, #12]
   12c90:	b139      	cbz	r1, 12ca2 <bt_hci_driver_register+0x1e>
   12c92:	6919      	ldr	r1, [r3, #16]
   12c94:	b129      	cbz	r1, 12ca2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   12c96:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   12c9a:	4770      	bx	lr
		return -EALREADY;
   12c9c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   12ca0:	4770      	bx	lr
		return -EINVAL;
   12ca2:	f06f 0015 	mvn.w	r0, #21
}
   12ca6:	4770      	bx	lr
   12ca8:	200002a0 	.word	0x200002a0

00012cac <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12cac:	4b07      	ldr	r3, [pc, #28]	; (12ccc <bt_finalize_init+0x20>)
   12cae:	f3bf 8f5b 	dmb	ish
   12cb2:	e853 2f00 	ldrex	r2, [r3]
   12cb6:	f042 0202 	orr.w	r2, r2, #2
   12cba:	e843 2100 	strex	r1, r2, [r3]
   12cbe:	2900      	cmp	r1, #0
   12cc0:	d1f7      	bne.n	12cb2 <bt_finalize_init+0x6>
   12cc2:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   12cc6:	2000      	movs	r0, #0
   12cc8:	f000 baca 	b.w	13260 <bt_le_scan_update>
   12ccc:	2000036c 	.word	0x2000036c

00012cd0 <init_work>:
{
   12cd0:	b510      	push	{r4, lr}
	err = hci_init();
   12cd2:	f7ff fb2f 	bl	12334 <hci_init>
	if (err) {
   12cd6:	4604      	mov	r4, r0
   12cd8:	b928      	cbnz	r0, 12ce6 <init_work+0x16>
		err = bt_conn_init();
   12cda:	f001 fac1 	bl	14260 <bt_conn_init>
		if (err) {
   12cde:	4604      	mov	r4, r0
   12ce0:	b908      	cbnz	r0, 12ce6 <init_work+0x16>
	bt_finalize_init();
   12ce2:	f7ff ffe3 	bl	12cac <bt_finalize_init>
	if (ready_cb) {
   12ce6:	4b04      	ldr	r3, [pc, #16]	; (12cf8 <init_work+0x28>)
   12ce8:	681b      	ldr	r3, [r3, #0]
   12cea:	b11b      	cbz	r3, 12cf4 <init_work+0x24>
		ready_cb(err);
   12cec:	4620      	mov	r0, r4
}
   12cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   12cf2:	4718      	bx	r3
}
   12cf4:	bd10      	pop	{r4, pc}
   12cf6:	bf00      	nop
   12cf8:	20001c98 	.word	0x20001c98

00012cfc <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   12cfc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   12d00:	4d32      	ldr	r5, [pc, #200]	; (12dcc <bt_enable+0xd0>)
   12d02:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   12d06:	b088      	sub	sp, #32
   12d08:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d058      	beq.n	12dc0 <bt_enable+0xc4>
   12d0e:	f3bf 8f5b 	dmb	ish
   12d12:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   12d16:	e853 4f00 	ldrex	r4, [r3]
   12d1a:	f044 0201 	orr.w	r2, r4, #1
   12d1e:	e843 2100 	strex	r1, r2, [r3]
   12d22:	2900      	cmp	r1, #0
   12d24:	d1f7      	bne.n	12d16 <bt_enable+0x1a>
   12d26:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12d2a:	f014 0401 	ands.w	r4, r4, #1
   12d2e:	d14a      	bne.n	12dc6 <bt_enable+0xca>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   12d30:	4b27      	ldr	r3, [pc, #156]	; (12dd0 <bt_enable+0xd4>)
   12d32:	f04f 0800 	mov.w	r8, #0
   12d36:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   12d38:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12d3c:	f06f 0308 	mvn.w	r3, #8
   12d40:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12d44:	e9cd 8906 	strd	r8, r9, [sp, #24]
   12d48:	e9cd 4400 	strd	r4, r4, [sp]
   12d4c:	4b21      	ldr	r3, [pc, #132]	; (12dd4 <bt_enable+0xd8>)
   12d4e:	4922      	ldr	r1, [pc, #136]	; (12dd8 <bt_enable+0xdc>)
   12d50:	9404      	str	r4, [sp, #16]
   12d52:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   12d56:	4821      	ldr	r0, [pc, #132]	; (12ddc <bt_enable+0xe0>)
   12d58:	f006 fb0c 	bl	19374 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12d5c:	4920      	ldr	r1, [pc, #128]	; (12de0 <bt_enable+0xe4>)
   12d5e:	481f      	ldr	r0, [pc, #124]	; (12ddc <bt_enable+0xe0>)
   12d60:	f00c ffb5 	bl	1fcce <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12d64:	f06f 0307 	mvn.w	r3, #7
   12d68:	e9cd 4302 	strd	r4, r3, [sp, #8]
   12d6c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   12d70:	e9cd 4400 	strd	r4, r4, [sp]
   12d74:	4b1b      	ldr	r3, [pc, #108]	; (12de4 <bt_enable+0xe8>)
   12d76:	491c      	ldr	r1, [pc, #112]	; (12de8 <bt_enable+0xec>)
   12d78:	9404      	str	r4, [sp, #16]
   12d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12d7e:	481b      	ldr	r0, [pc, #108]	; (12dec <bt_enable+0xf0>)
   12d80:	f006 faf8 	bl	19374 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12d84:	491a      	ldr	r1, [pc, #104]	; (12df0 <bt_enable+0xf4>)
   12d86:	4819      	ldr	r0, [pc, #100]	; (12dec <bt_enable+0xf0>)
   12d88:	f00c ffa1 	bl	1fcce <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   12d8c:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   12d90:	68db      	ldr	r3, [r3, #12]
   12d92:	4798      	blx	r3
	if (err) {
   12d94:	4604      	mov	r4, r0
   12d96:	b950      	cbnz	r0, 12dae <bt_enable+0xb2>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   12d98:	b96e      	cbnz	r6, 12db6 <bt_enable+0xba>
	err = hci_init();
   12d9a:	f7ff facb 	bl	12334 <hci_init>
	if (err) {
   12d9e:	4604      	mov	r4, r0
   12da0:	b928      	cbnz	r0, 12dae <bt_enable+0xb2>
		err = bt_conn_init();
   12da2:	f001 fa5d 	bl	14260 <bt_conn_init>
		if (err) {
   12da6:	4604      	mov	r4, r0
   12da8:	b908      	cbnz	r0, 12dae <bt_enable+0xb2>
	bt_finalize_init();
   12daa:	f7ff ff7f 	bl	12cac <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   12dae:	4620      	mov	r0, r4
   12db0:	b008      	add	sp, #32
   12db2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	k_work_submit(&bt_dev.init);
   12db6:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   12dba:	f007 fa97 	bl	1a2ec <k_work_submit>
	return 0;
   12dbe:	e7f6      	b.n	12dae <bt_enable+0xb2>
		return -ENODEV;
   12dc0:	f06f 0412 	mvn.w	r4, #18
   12dc4:	e7f3      	b.n	12dae <bt_enable+0xb2>
		return -EALREADY;
   12dc6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   12dca:	e7f0      	b.n	12dae <bt_enable+0xb2>
   12dcc:	200002a0 	.word	0x200002a0
   12dd0:	20001c98 	.word	0x20001c98
   12dd4:	00012a69 	.word	0x00012a69
   12dd8:	20002d60 	.word	0x20002d60
   12ddc:	20001550 	.word	0x20001550
   12de0:	000214ca 	.word	0x000214ca
   12de4:	00011f79 	.word	0x00011f79
   12de8:	20002940 	.word	0x20002940
   12dec:	200014d0 	.word	0x200014d0
   12df0:	000214d0 	.word	0x000214d0

00012df4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   12df4:	4800      	ldr	r0, [pc, #0]	; (12df8 <bt_get_name+0x4>)
   12df6:	4770      	bx	lr
   12df8:	000214d6 	.word	0x000214d6

00012dfc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   12dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   12dfe:	4f0b      	ldr	r7, [pc, #44]	; (12e2c <id_find+0x30>)
{
   12e00:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   12e02:	2500      	movs	r5, #0
   12e04:	79fb      	ldrb	r3, [r7, #7]
   12e06:	b2ec      	uxtb	r4, r5
   12e08:	42a3      	cmp	r3, r4
   12e0a:	d802      	bhi.n	12e12 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   12e0c:	f06f 0401 	mvn.w	r4, #1
   12e10:	e009      	b.n	12e26 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   12e12:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   12e16:	2207      	movs	r2, #7
   12e18:	4439      	add	r1, r7
   12e1a:	4630      	mov	r0, r6
   12e1c:	f00d f8c7 	bl	1ffae <memcmp>
   12e20:	3501      	adds	r5, #1
   12e22:	2800      	cmp	r0, #0
   12e24:	d1ee      	bne.n	12e04 <id_find+0x8>
}
   12e26:	4620      	mov	r0, r4
   12e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e2a:	bf00      	nop
   12e2c:	200002a0 	.word	0x200002a0

00012e30 <set_random_address>:
{
   12e30:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   12e32:	2206      	movs	r2, #6
   12e34:	4913      	ldr	r1, [pc, #76]	; (12e84 <set_random_address+0x54>)
   12e36:	4605      	mov	r5, r0
   12e38:	f00d f8b9 	bl	1ffae <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   12e3c:	4602      	mov	r2, r0
   12e3e:	b1d8      	cbz	r0, 12e78 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   12e40:	2106      	movs	r1, #6
   12e42:	f242 0005 	movw	r0, #8197	; 0x2005
   12e46:	f7ff f9cb 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   12e4a:	4604      	mov	r4, r0
   12e4c:	b1b0      	cbz	r0, 12e7c <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   12e4e:	2206      	movs	r2, #6
   12e50:	4629      	mov	r1, r5
   12e52:	3008      	adds	r0, #8
   12e54:	f00c faeb 	bl	1f42e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   12e58:	2200      	movs	r2, #0
   12e5a:	4621      	mov	r1, r4
   12e5c:	f242 0005 	movw	r0, #8197	; 0x2005
   12e60:	f7ff fa06 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   12e64:	4602      	mov	r2, r0
   12e66:	b938      	cbnz	r0, 12e78 <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   12e68:	4629      	mov	r1, r5
   12e6a:	4806      	ldr	r0, [pc, #24]	; (12e84 <set_random_address+0x54>)
   12e6c:	f00a ff54 	bl	1dd18 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   12e70:	4b05      	ldr	r3, [pc, #20]	; (12e88 <set_random_address+0x58>)
   12e72:	2101      	movs	r1, #1
   12e74:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
}
   12e78:	4610      	mov	r0, r2
   12e7a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   12e7c:	f06f 0268 	mvn.w	r2, #104	; 0x68
   12e80:	e7fa      	b.n	12e78 <set_random_address+0x48>
   12e82:	bf00      	nop
   12e84:	20000301 	.word	0x20000301
   12e88:	200002a0 	.word	0x200002a0

00012e8c <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   12e8c:	b530      	push	{r4, r5, lr}
   12e8e:	4604      	mov	r4, r0
   12e90:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   12e92:	460d      	mov	r5, r1
   12e94:	b199      	cbz	r1, 12ebe <id_create.isra.0+0x32>
   12e96:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   12e98:	2207      	movs	r2, #7
   12e9a:	a902      	add	r1, sp, #8
   12e9c:	4628      	mov	r0, r5
   12e9e:	9302      	str	r3, [sp, #8]
   12ea0:	f8cd 300b 	str.w	r3, [sp, #11]
   12ea4:	f00d f883 	bl	1ffae <memcmp>
   12ea8:	b148      	cbz	r0, 12ebe <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   12eaa:	4810      	ldr	r0, [pc, #64]	; (12eec <id_create.isra.0+0x60>)
   12eac:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   12eb0:	4629      	mov	r1, r5
   12eb2:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12eb4:	f00a ff35 	bl	1dd22 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   12eb8:	2000      	movs	r0, #0
}
   12eba:	b005      	add	sp, #20
   12ebc:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   12ebe:	4668      	mov	r0, sp
   12ec0:	f00a fc56 	bl	1d770 <bt_addr_le_create_static>
			if (err) {
   12ec4:	2800      	cmp	r0, #0
   12ec6:	d1f8      	bne.n	12eba <id_create.isra.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   12ec8:	4668      	mov	r0, sp
   12eca:	f7ff ff97 	bl	12dfc <id_find>
   12ece:	2800      	cmp	r0, #0
   12ed0:	daf5      	bge.n	12ebe <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   12ed2:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   12ed6:	4c05      	ldr	r4, [pc, #20]	; (12eec <id_create.isra.0+0x60>)
   12ed8:	4669      	mov	r1, sp
   12eda:	4420      	add	r0, r4
   12edc:	f00a ff21 	bl	1dd22 <bt_addr_le_copy>
		if (addr) {
   12ee0:	2d00      	cmp	r5, #0
   12ee2:	d0e9      	beq.n	12eb8 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   12ee4:	4601      	mov	r1, r0
   12ee6:	4628      	mov	r0, r5
   12ee8:	e7e4      	b.n	12eb4 <id_create.isra.0+0x28>
   12eea:	bf00      	nop
   12eec:	200002a0 	.word	0x200002a0

00012ef0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   12ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12ef2:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   12ef4:	4604      	mov	r4, r0
   12ef6:	b918      	cbnz	r0, 12f00 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   12ef8:	b1ee      	cbz	r6, 12f36 <bt_id_create+0x46>
		return -EINVAL;
   12efa:	f06f 0015 	mvn.w	r0, #21
   12efe:	e018      	b.n	12f32 <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   12f00:	2300      	movs	r3, #0
   12f02:	2207      	movs	r2, #7
   12f04:	4669      	mov	r1, sp
   12f06:	9300      	str	r3, [sp, #0]
   12f08:	f8cd 3003 	str.w	r3, [sp, #3]
   12f0c:	f00d f84f 	bl	1ffae <memcmp>
   12f10:	2800      	cmp	r0, #0
   12f12:	d0f1      	beq.n	12ef8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   12f14:	7823      	ldrb	r3, [r4, #0]
   12f16:	2b01      	cmp	r3, #1
   12f18:	d1ef      	bne.n	12efa <bt_id_create+0xa>
   12f1a:	79a3      	ldrb	r3, [r4, #6]
   12f1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   12f20:	2bc0      	cmp	r3, #192	; 0xc0
   12f22:	d1ea      	bne.n	12efa <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   12f24:	4620      	mov	r0, r4
   12f26:	f7ff ff69 	bl	12dfc <id_find>
   12f2a:	2800      	cmp	r0, #0
   12f2c:	dbe4      	blt.n	12ef8 <bt_id_create+0x8>
			return -EALREADY;
   12f2e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   12f32:	b002      	add	sp, #8
   12f34:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   12f36:	4d13      	ldr	r5, [pc, #76]	; (12f84 <bt_id_create+0x94>)
   12f38:	79eb      	ldrb	r3, [r5, #7]
   12f3a:	2b01      	cmp	r3, #1
   12f3c:	d01e      	beq.n	12f7c <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12f3e:	f3bf 8f5b 	dmb	ish
   12f42:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   12f46:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   12f4a:	07db      	lsls	r3, r3, #31
   12f4c:	d40b      	bmi.n	12f66 <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   12f4e:	2c00      	cmp	r4, #0
   12f50:	d0d3      	beq.n	12efa <bt_id_create+0xa>
   12f52:	2207      	movs	r2, #7
   12f54:	4669      	mov	r1, sp
   12f56:	4620      	mov	r0, r4
   12f58:	9600      	str	r6, [sp, #0]
   12f5a:	f8cd 6003 	str.w	r6, [sp, #3]
   12f5e:	f00d f826 	bl	1ffae <memcmp>
   12f62:	2800      	cmp	r0, #0
   12f64:	d0c9      	beq.n	12efa <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   12f66:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   12f68:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   12f6a:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   12f6c:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   12f6e:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   12f70:	f7ff ff8c 	bl	12e8c <id_create.isra.0>
	new_id = bt_dev.id_count++;
   12f74:	2800      	cmp	r0, #0
   12f76:	bf08      	it	eq
   12f78:	4630      	moveq	r0, r6
   12f7a:	e7da      	b.n	12f32 <bt_id_create+0x42>
		return -ENOMEM;
   12f7c:	f06f 000b 	mvn.w	r0, #11
   12f80:	e7d7      	b.n	12f32 <bt_id_create+0x42>
   12f82:	bf00      	nop
   12f84:	200002a0 	.word	0x200002a0

00012f88 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   12f88:	b570      	push	{r4, r5, r6, lr}
   12f8a:	b086      	sub	sp, #24
   12f8c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   12f8e:	aa01      	add	r2, sp, #4
   12f90:	2100      	movs	r1, #0
   12f92:	f241 0009 	movw	r0, #4105	; 0x1009
   12f96:	f7ff f96b 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   12f9a:	4604      	mov	r4, r0
   12f9c:	b970      	cbnz	r0, 12fbc <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   12f9e:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12fa0:	9002      	str	r0, [sp, #8]
   12fa2:	689d      	ldr	r5, [r3, #8]
   12fa4:	f8ad 000c 	strh.w	r0, [sp, #12]
   12fa8:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   12faa:	2206      	movs	r2, #6
   12fac:	a902      	add	r1, sp, #8
   12fae:	4628      	mov	r0, r5
   12fb0:	f00c fffd 	bl	1ffae <memcmp>
   12fb4:	b920      	cbnz	r0, 12fc0 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   12fb6:	9801      	ldr	r0, [sp, #4]
   12fb8:	f003 f930 	bl	1621c <net_buf_unref>
		return 0U;
   12fbc:	2000      	movs	r0, #0
   12fbe:	e015      	b.n	12fec <bt_id_read_public_addr+0x64>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   12fc0:	4b0b      	ldr	r3, [pc, #44]	; (12ff0 <bt_id_read_public_addr+0x68>)
   12fc2:	6818      	ldr	r0, [r3, #0]
   12fc4:	9004      	str	r0, [sp, #16]
   12fc6:	889b      	ldrh	r3, [r3, #4]
   12fc8:	f8ad 3014 	strh.w	r3, [sp, #20]
   12fcc:	2206      	movs	r2, #6
   12fce:	a904      	add	r1, sp, #16
   12fd0:	4628      	mov	r0, r5
   12fd2:	f00c ffec 	bl	1ffae <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   12fd6:	2800      	cmp	r0, #0
   12fd8:	d0ed      	beq.n	12fb6 <bt_id_read_public_addr+0x2e>
		return 0U;
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
   12fda:	4629      	mov	r1, r5
   12fdc:	1c70      	adds	r0, r6, #1
   12fde:	f00a fe9b 	bl	1dd18 <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   12fe2:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   12fe4:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   12fe6:	f003 f919 	bl	1621c <net_buf_unref>
	return 1U;
   12fea:	2001      	movs	r0, #1
}
   12fec:	b006      	add	sp, #24
   12fee:	bd70      	pop	{r4, r5, r6, pc}
   12ff0:	000203f4 	.word	0x000203f4

00012ff4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   12ff4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   12ff6:	4668      	mov	r0, sp
   12ff8:	f7ff ffc6 	bl	12f88 <bt_id_read_public_addr>
   12ffc:	4b04      	ldr	r3, [pc, #16]	; (13010 <bt_setup_public_id_addr+0x1c>)
   12ffe:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13000:	b118      	cbz	r0, 1300a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13002:	4669      	mov	r1, sp
   13004:	2000      	movs	r0, #0
   13006:	f7ff ff41 	bl	12e8c <id_create.isra.0>
}
   1300a:	b003      	add	sp, #12
   1300c:	f85d fb04 	ldr.w	pc, [sp], #4
   13010:	200002a0 	.word	0x200002a0

00013014 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13016:	4b18      	ldr	r3, [pc, #96]	; (13078 <bt_read_static_addr+0x64>)
   13018:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   1301c:	f014 0401 	ands.w	r4, r4, #1
{
   13020:	4605      	mov	r5, r0
   13022:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13024:	d015      	beq.n	13052 <bt_read_static_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13026:	aa01      	add	r2, sp, #4
   13028:	2100      	movs	r1, #0
   1302a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1302e:	f7ff f91f 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   13032:	4603      	mov	r3, r0
   13034:	b9e8      	cbnz	r0, 13072 <bt_read_static_addr+0x5e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   13036:	9801      	ldr	r0, [sp, #4]
   13038:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   1303a:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1303c:	f04f 0c16 	mov.w	ip, #22
   13040:	42b4      	cmp	r4, r6
   13042:	bf28      	it	cs
   13044:	4634      	movcs	r4, r6
   13046:	eb02 070c 	add.w	r7, r2, ip
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   1304a:	42a3      	cmp	r3, r4
   1304c:	db04      	blt.n	13058 <bt_read_static_addr+0x44>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
   1304e:	f003 f8e5 	bl	1621c <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   13052:	4620      	mov	r0, r4
   13054:	b003      	add	sp, #12
   13056:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13058:	1c96      	adds	r6, r2, #2
   1305a:	fb0c 5103 	mla	r1, ip, r3, r5
   1305e:	f856 eb04 	ldr.w	lr, [r6], #4
   13062:	f841 eb04 	str.w	lr, [r1], #4
   13066:	42be      	cmp	r6, r7
   13068:	d1f9      	bne.n	1305e <bt_read_static_addr+0x4a>
   1306a:	883e      	ldrh	r6, [r7, #0]
   1306c:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   1306e:	3301      	adds	r3, #1
   13070:	e7eb      	b.n	1304a <bt_read_static_addr+0x36>
		return 0;
   13072:	2400      	movs	r4, #0
   13074:	e7ed      	b.n	13052 <bt_read_static_addr+0x3e>
   13076:	bf00      	nop
   13078:	200002a0 	.word	0x200002a0

0001307c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1307c:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1307e:	4d14      	ldr	r5, [pc, #80]	; (130d0 <bt_setup_random_id_addr+0x54>)
   13080:	79ec      	ldrb	r4, [r5, #7]
{
   13082:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13084:	b92c      	cbnz	r4, 13092 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13086:	2101      	movs	r1, #1
   13088:	a802      	add	r0, sp, #8
   1308a:	f7ff ffc3 	bl	13014 <bt_read_static_addr>
   1308e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13090:	b9b0      	cbnz	r0, 130c0 <bt_setup_random_id_addr+0x44>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13092:	2100      	movs	r1, #0
   13094:	4608      	mov	r0, r1
   13096:	f7ff ff2b 	bl	12ef0 <bt_id_create>
   1309a:	e00f      	b.n	130bc <bt_setup_random_id_addr+0x40>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1309c:	ab02      	add	r3, sp, #8
   1309e:	fb06 3102 	mla	r1, r6, r2, r3
   130a2:	f10d 0001 	add.w	r0, sp, #1
   130a6:	f00a fe37 	bl	1dd18 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   130aa:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   130ac:	4669      	mov	r1, sp
   130ae:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   130b0:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   130b4:	f7ff feea 	bl	12e8c <id_create.isra.0>
				if (err) {
   130b8:	3401      	adds	r4, #1
   130ba:	b110      	cbz	r0, 130c2 <bt_setup_random_id_addr+0x46>
}
   130bc:	b008      	add	sp, #32
   130be:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   130c0:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   130c2:	79eb      	ldrb	r3, [r5, #7]
   130c4:	b2e2      	uxtb	r2, r4
   130c6:	4293      	cmp	r3, r2
   130c8:	d8e8      	bhi.n	1309c <bt_setup_random_id_addr+0x20>
			return 0;
   130ca:	2000      	movs	r0, #0
   130cc:	e7f6      	b.n	130bc <bt_setup_random_id_addr+0x40>
   130ce:	bf00      	nop
   130d0:	200002a0 	.word	0x200002a0

000130d4 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   130d4:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   130d6:	4c07      	ldr	r4, [pc, #28]	; (130f4 <bt_id_set_create_conn_own_addr+0x20>)
   130d8:	7823      	ldrb	r3, [r4, #0]
   130da:	2b01      	cmp	r3, #1
{
   130dc:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   130de:	d003      	beq.n	130e8 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   130e0:	7823      	ldrb	r3, [r4, #0]
   130e2:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   130e4:	2000      	movs	r0, #0
}
   130e6:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   130e8:	1c60      	adds	r0, r4, #1
   130ea:	f7ff fea1 	bl	12e30 <set_random_address>
			if (err) {
   130ee:	2800      	cmp	r0, #0
   130f0:	d0f6      	beq.n	130e0 <bt_id_set_create_conn_own_addr+0xc>
   130f2:	e7f8      	b.n	130e6 <bt_id_set_create_conn_own_addr+0x12>
   130f4:	200002a0 	.word	0x200002a0

000130f8 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   130f8:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   130fa:	4b05      	ldr	r3, [pc, #20]	; (13110 <bt_id_set_scan_own_addr+0x18>)
   130fc:	781b      	ldrb	r3, [r3, #0]
   130fe:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   13100:	2000      	movs	r0, #0
{
   13102:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   13104:	f00a fe16 	bl	1dd34 <bt_id_set_private_addr>
			if (err) {
   13108:	b908      	cbnz	r0, 1310e <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   1310a:	2301      	movs	r3, #1
   1310c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   1310e:	bd10      	pop	{r4, pc}
   13110:	200002a0 	.word	0x200002a0

00013114 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   13114:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13116:	4c0a      	ldr	r4, [pc, #40]	; (13140 <bt_id_init+0x2c>)
   13118:	79e3      	ldrb	r3, [r4, #7]
   1311a:	b10b      	cbz	r3, 13120 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1311c:	2000      	movs	r0, #0
}
   1311e:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   13120:	f7ff ff68 	bl	12ff4 <bt_setup_public_id_addr>
		if (err) {
   13124:	2800      	cmp	r0, #0
   13126:	d1fa      	bne.n	1311e <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   13128:	79e3      	ldrb	r3, [r4, #7]
   1312a:	2b00      	cmp	r3, #0
   1312c:	d1f6      	bne.n	1311c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1312e:	f7ff ffa5 	bl	1307c <bt_setup_random_id_addr>
		if (err) {
   13132:	2800      	cmp	r0, #0
   13134:	d1f3      	bne.n	1311e <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   13136:	1c60      	adds	r0, r4, #1
}
   13138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   1313c:	f7ff be78 	b.w	12e30 <set_random_address>
   13140:	200002a0 	.word	0x200002a0

00013144 <atomic_get.constprop.0>:
   13144:	4b03      	ldr	r3, [pc, #12]	; (13154 <atomic_get.constprop.0+0x10>)
   13146:	f3bf 8f5b 	dmb	ish
   1314a:	6818      	ldr	r0, [r3, #0]
   1314c:	f3bf 8f5b 	dmb	ish
}
   13150:	4770      	bx	lr
   13152:	bf00      	nop
   13154:	2000036c 	.word	0x2000036c

00013158 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   13158:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1315a:	2102      	movs	r1, #2
{
   1315c:	b087      	sub	sp, #28
   1315e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   13160:	f242 000c 	movw	r0, #8204	; 0x200c
   13164:	f7ff f83c 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   13168:	4605      	mov	r5, r0
   1316a:	b308      	cbz	r0, 131b0 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   1316c:	2102      	movs	r1, #2
   1316e:	3008      	adds	r0, #8
   13170:	f003 f984 	bl	1647c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   13174:	2c01      	cmp	r4, #1
   13176:	4602      	mov	r2, r0
   13178:	d117      	bne.n	131aa <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1317a:	f7ff ffe3 	bl	13144 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1317e:	f3c0 2000 	ubfx	r0, r0, #8, #1
   13182:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   13184:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   13186:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   13188:	425c      	negs	r4, r3
   1318a:	415c      	adcs	r4, r3
   1318c:	4a0a      	ldr	r2, [pc, #40]	; (131b8 <bt_le_scan_set_enable_legacy+0x60>)
   1318e:	9400      	str	r4, [sp, #0]
   13190:	a903      	add	r1, sp, #12
   13192:	4628      	mov	r0, r5
   13194:	2305      	movs	r3, #5
   13196:	f7ff f811 	bl	121bc <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   1319a:	2200      	movs	r2, #0
   1319c:	4629      	mov	r1, r5
   1319e:	f242 000c 	movw	r0, #8204	; 0x200c
   131a2:	f7ff f865 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   131a6:	b007      	add	sp, #28
   131a8:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   131aa:	2300      	movs	r3, #0
   131ac:	7043      	strb	r3, [r0, #1]
   131ae:	e7e9      	b.n	13184 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   131b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   131b4:	e7f7      	b.n	131a6 <bt_le_scan_set_enable_legacy+0x4e>
   131b6:	bf00      	nop
   131b8:	2000036c 	.word	0x2000036c

000131bc <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   131bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   131be:	2300      	movs	r3, #0
   131c0:	f88d 3005 	strb.w	r3, [sp, #5]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   131c4:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   131c8:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   131ca:	f88d 0000 	strb.w	r0, [sp]
{
   131ce:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   131d0:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   131d2:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   131d6:	4158      	adcs	r0, r3
   131d8:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   131dc:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   131e0:	f7ff ff8a 	bl	130f8 <bt_id_set_scan_own_addr>
	if (err) {
   131e4:	4604      	mov	r4, r0
   131e6:	bb38      	cbnz	r0, 13238 <start_le_scan_legacy+0x7c>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   131e8:	2107      	movs	r1, #7
   131ea:	f242 000b 	movw	r0, #8203	; 0x200b
   131ee:	f7fe fff7 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   131f2:	4606      	mov	r6, r0
   131f4:	b348      	cbz	r0, 1324a <start_le_scan_legacy+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   131f6:	2207      	movs	r2, #7
   131f8:	4669      	mov	r1, sp
   131fa:	3008      	adds	r0, #8
   131fc:	f00c f917 	bl	1f42e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   13200:	4622      	mov	r2, r4
   13202:	4631      	mov	r1, r6
   13204:	f242 000b 	movw	r0, #8203	; 0x200b
   13208:	f7ff f832 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   1320c:	4604      	mov	r4, r0
   1320e:	b998      	cbnz	r0, 13238 <start_le_scan_legacy+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   13210:	2001      	movs	r0, #1
   13212:	f7ff ffa1 	bl	13158 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   13216:	4604      	mov	r4, r0
   13218:	b970      	cbnz	r0, 13238 <start_le_scan_legacy+0x7c>
	if (val) {
   1321a:	2d01      	cmp	r5, #1
   1321c:	d10f      	bne.n	1323e <start_le_scan_legacy+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1321e:	f3bf 8f5b 	dmb	ish
   13222:	4b0b      	ldr	r3, [pc, #44]	; (13250 <start_le_scan_legacy+0x94>)
   13224:	e853 2f00 	ldrex	r2, [r3]
   13228:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1322c:	e843 2100 	strex	r1, r2, [r3]
   13230:	2900      	cmp	r1, #0
   13232:	d1f7      	bne.n	13224 <start_le_scan_legacy+0x68>
   13234:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   13238:	4620      	mov	r0, r4
   1323a:	b002      	add	sp, #8
   1323c:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1323e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   13242:	4803      	ldr	r0, [pc, #12]	; (13250 <start_le_scan_legacy+0x94>)
   13244:	f00a fd8a 	bl	1dd5c <atomic_and>
   13248:	e7f6      	b.n	13238 <start_le_scan_legacy+0x7c>
		return -ENOBUFS;
   1324a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1324e:	e7f3      	b.n	13238 <start_le_scan_legacy+0x7c>
   13250:	2000036c 	.word	0x2000036c

00013254 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   13254:	4b01      	ldr	r3, [pc, #4]	; (1325c <bt_scan_reset+0x8>)
   13256:	2200      	movs	r2, #0
   13258:	601a      	str	r2, [r3, #0]
}
   1325a:	4770      	bx	lr
   1325c:	20001ca4 	.word	0x20001ca4

00013260 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   13260:	b538      	push	{r3, r4, r5, lr}
   13262:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13264:	f7ff ff6e 	bl	13144 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13268:	0641      	lsls	r1, r0, #25
   1326a:	f3c0 1280 	ubfx	r2, r0, #6, #1
   1326e:	d501      	bpl.n	13274 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   13270:	2000      	movs	r0, #0
   13272:	e031      	b.n	132d8 <bt_le_scan_update+0x78>
   13274:	f7ff ff66 	bl	13144 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   13278:	0683      	lsls	r3, r0, #26
   1327a:	d428      	bmi.n	132ce <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1327c:	2100      	movs	r1, #0
   1327e:	2206      	movs	r2, #6
   13280:	4608      	mov	r0, r1
   13282:	f000 fdeb 	bl	13e5c <bt_conn_lookup_state_le>
		if (conn) {
   13286:	4604      	mov	r4, r0
   13288:	bb38      	cbnz	r0, 132da <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1328a:	2202      	movs	r2, #2
   1328c:	4601      	mov	r1, r0
   1328e:	f000 fde5 	bl	13e5c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   13292:	2800      	cmp	r0, #0
   13294:	d0ec      	beq.n	13270 <bt_le_scan_update+0x10>
   13296:	f3bf 8f5b 	dmb	ish
   1329a:	4b11      	ldr	r3, [pc, #68]	; (132e0 <bt_le_scan_update+0x80>)
   1329c:	e853 2f00 	ldrex	r2, [r3]
   132a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   132a4:	e843 2100 	strex	r1, r2, [r3]
   132a8:	2900      	cmp	r1, #0
   132aa:	d1f7      	bne.n	1329c <bt_le_scan_update+0x3c>
   132ac:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   132b0:	f000 fb8c 	bl	139cc <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   132b4:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   132b6:	4620      	mov	r0, r4
   132b8:	bf18      	it	ne
   132ba:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   132bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   132c0:	bf0a      	itet	eq
   132c2:	2212      	moveq	r2, #18
   132c4:	2160      	movne	r1, #96	; 0x60
   132c6:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   132ca:	f7ff bf77 	b.w	131bc <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   132ce:	4610      	mov	r0, r2
   132d0:	f7ff ff42 	bl	13158 <bt_le_scan_set_enable_legacy>
		if (err) {
   132d4:	2800      	cmp	r0, #0
   132d6:	d0d1      	beq.n	1327c <bt_le_scan_update+0x1c>
}
   132d8:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   132da:	f000 fb77 	bl	139cc <bt_conn_unref>
   132de:	e7c7      	b.n	13270 <bt_le_scan_update+0x10>
   132e0:	2000036c 	.word	0x2000036c

000132e4 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   132e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   132e8:	f100 0708 	add.w	r7, r0, #8
   132ec:	b08d      	sub	sp, #52	; 0x34
   132ee:	4604      	mov	r4, r0
   132f0:	4638      	mov	r0, r7
   132f2:	f00c f880 	bl	1f3f6 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   132f6:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 134bc <bt_hci_le_adv_report+0x1d8>
   132fa:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   132fc:	9b01      	ldr	r3, [sp, #4]
   132fe:	b913      	cbnz	r3, 13306 <bt_hci_le_adv_report+0x22>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   13300:	b00d      	add	sp, #52	; 0x34
   13302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   13306:	89a3      	ldrh	r3, [r4, #12]
   13308:	2b08      	cmp	r3, #8
   1330a:	d9f9      	bls.n	13300 <bt_hci_le_adv_report+0x1c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1330c:	2109      	movs	r1, #9
   1330e:	4638      	mov	r0, r7
   13310:	f003 f892 	bl	16438 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   13314:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   13318:	237f      	movs	r3, #127	; 0x7f
   1331a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   1331e:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   13322:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   13324:	7a5b      	ldrb	r3, [r3, #9]
   13326:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   1332a:	23ff      	movs	r3, #255	; 0xff
   1332c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   13330:	2300      	movs	r3, #0
   13332:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   13336:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   1333a:	7802      	ldrb	r2, [r0, #0]
   1333c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   13340:	2a04      	cmp	r2, #4
   13342:	bf9c      	itt	ls
   13344:	4b5b      	ldrls	r3, [pc, #364]	; (134b4 <bt_hci_le_adv_report+0x1d0>)
   13346:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
   13348:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   1334c:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   1334e:	f100 0801 	add.w	r8, r0, #1
   13352:	f7ff fef7 	bl	13144 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   13356:	0645      	lsls	r5, r0, #25
   13358:	d50d      	bpl.n	13376 <bt_hci_le_adv_report+0x92>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1335a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1335e:	0758      	lsls	r0, r3, #29
   13360:	d509      	bpl.n	13376 <bt_hci_le_adv_report+0x92>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   13362:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   13364:	4638      	mov	r0, r7
   13366:	3101      	adds	r1, #1
   13368:	f003 f846 	bl	163f8 <net_buf_simple_pull>
   1336c:	9b01      	ldr	r3, [sp, #4]
   1336e:	1e58      	subs	r0, r3, #1
   13370:	b2c3      	uxtb	r3, r0
   13372:	9301      	str	r3, [sp, #4]
   13374:	e7c2      	b.n	132fc <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   13376:	7873      	ldrb	r3, [r6, #1]
   13378:	1e9a      	subs	r2, r3, #2
   1337a:	2a01      	cmp	r2, #1
   1337c:	d84e      	bhi.n	1341c <bt_hci_le_adv_report+0x138>
		bt_addr_le_copy(&id_addr, addr);
   1337e:	4641      	mov	r1, r8
   13380:	a804      	add	r0, sp, #16
   13382:	f00a fcfa 	bl	1dd7a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   13386:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1338a:	3b02      	subs	r3, #2
   1338c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   13390:	ab04      	add	r3, sp, #16
   13392:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   13394:	f8da 3000 	ldr.w	r3, [sl]
   13398:	b1b3      	cbz	r3, 133c8 <bt_hci_le_adv_report+0xe4>
	state->offset = net_buf_simple_headroom(buf);
   1339a:	4638      	mov	r0, r7
   1339c:	f00c f83b 	bl	1f416 <net_buf_simple_headroom>
	state->len = buf->len;
   133a0:	89a3      	ldrh	r3, [r4, #12]
   133a2:	9302      	str	r3, [sp, #8]
	state->offset = net_buf_simple_headroom(buf);
   133a4:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   133a6:	463b      	mov	r3, r7
   133a8:	a804      	add	r0, sp, #16
   133aa:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   133ae:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   133b2:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
   133b6:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   133ba:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   133bc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   133be:	9b02      	ldr	r3, [sp, #8]
   133c0:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   133c2:	fa10 f08b 	uxtah	r0, r0, fp
   133c6:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   133c8:	4b3b      	ldr	r3, [pc, #236]	; (134b8 <bt_hci_le_adv_report+0x1d4>)
   133ca:	681b      	ldr	r3, [r3, #0]
   133cc:	2b00      	cmp	r3, #0
   133ce:	d036      	beq.n	1343e <bt_hci_le_adv_report+0x15a>
   133d0:	f1b3 0208 	subs.w	r2, r3, #8
   133d4:	d033      	beq.n	1343e <bt_hci_le_adv_report+0x15a>
   133d6:	681d      	ldr	r5, [r3, #0]
   133d8:	b105      	cbz	r5, 133dc <bt_hci_le_adv_report+0xf8>
   133da:	3d08      	subs	r5, #8
		if (listener->recv) {
   133dc:	6813      	ldr	r3, [r2, #0]
   133de:	9203      	str	r2, [sp, #12]
   133e0:	b193      	cbz	r3, 13408 <bt_hci_le_adv_report+0x124>
	state->offset = net_buf_simple_headroom(buf);
   133e2:	4638      	mov	r0, r7
   133e4:	f00c f817 	bl	1f416 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
   133e8:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   133ea:	89a3      	ldrh	r3, [r4, #12]
   133ec:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   133ee:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   133f2:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
   133f4:	4639      	mov	r1, r7
   133f6:	a808      	add	r0, sp, #32
	state->len = buf->len;
   133f8:	9302      	str	r3, [sp, #8]
   133fa:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   133fc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   133fe:	9b02      	ldr	r3, [sp, #8]
   13400:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   13402:	fa10 f08b 	uxtah	r0, r0, fp
   13406:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   13408:	b1cd      	cbz	r5, 1343e <bt_hci_le_adv_report+0x15a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1340a:	f115 0308 	adds.w	r3, r5, #8
   1340e:	d002      	beq.n	13416 <bt_hci_le_adv_report+0x132>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13410:	68ab      	ldr	r3, [r5, #8]
   13412:	b103      	cbz	r3, 13416 <bt_hci_le_adv_report+0x132>
   13414:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   13416:	462a      	mov	r2, r5
   13418:	461d      	mov	r5, r3
   1341a:	e7df      	b.n	133dc <bt_hci_le_adv_report+0xf8>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   1341c:	2bff      	cmp	r3, #255	; 0xff
   1341e:	d108      	bne.n	13432 <bt_hci_le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   13420:	2300      	movs	r3, #0
   13422:	9306      	str	r3, [sp, #24]
   13424:	a906      	add	r1, sp, #24
   13426:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
   1342a:	a804      	add	r0, sp, #16
   1342c:	f00a fca5 	bl	1dd7a <bt_addr_le_copy>
   13430:	e7ae      	b.n	13390 <bt_hci_le_adv_report+0xac>
   13432:	4641      	mov	r1, r8
   13434:	2000      	movs	r0, #0
   13436:	f00a fc7b 	bl	1dd30 <bt_lookup_id_addr>
   1343a:	4601      	mov	r1, r0
   1343c:	e7f5      	b.n	1342a <bt_hci_le_adv_report+0x146>
	check_pending_conn(&id_addr, addr, info->adv_props);
   1343e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   13442:	f7ff fe7f 	bl	13144 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13446:	0641      	lsls	r1, r0, #25
   13448:	f3c0 1580 	ubfx	r5, r0, #6, #1
   1344c:	d489      	bmi.n	13362 <bt_hci_le_adv_report+0x7e>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1344e:	07d2      	lsls	r2, r2, #31
   13450:	d587      	bpl.n	13362 <bt_hci_le_adv_report+0x7e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   13452:	2202      	movs	r2, #2
   13454:	a904      	add	r1, sp, #16
   13456:	4628      	mov	r0, r5
   13458:	f000 fd00 	bl	13e5c <bt_conn_lookup_state_le>
	if (!conn) {
   1345c:	4681      	mov	r9, r0
   1345e:	2800      	cmp	r0, #0
   13460:	f43f af7f 	beq.w	13362 <bt_hci_le_adv_report+0x7e>
   13464:	f7ff fe6e 	bl	13144 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   13468:	0683      	lsls	r3, r0, #26
   1346a:	d410      	bmi.n	1348e <bt_hci_le_adv_report+0x1aa>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   1346c:	f109 009e 	add.w	r0, r9, #158	; 0x9e
   13470:	4641      	mov	r1, r8
   13472:	f00a fc82 	bl	1dd7a <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   13476:	4648      	mov	r0, r9
   13478:	f00a faa9 	bl	1d9ce <bt_le_create_conn>
   1347c:	b960      	cbnz	r0, 13498 <bt_hci_le_adv_report+0x1b4>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1347e:	4648      	mov	r0, r9
   13480:	2106      	movs	r1, #6
   13482:	f000 fad9 	bl	13a38 <bt_conn_set_state>
	bt_conn_unref(conn);
   13486:	4648      	mov	r0, r9
   13488:	f000 faa0 	bl	139cc <bt_conn_unref>
	return;
   1348c:	e769      	b.n	13362 <bt_hci_le_adv_report+0x7e>
	return bt_le_scan_set_enable_legacy(enable);
   1348e:	4628      	mov	r0, r5
   13490:	f7ff fe62 	bl	13158 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   13494:	2800      	cmp	r0, #0
   13496:	d0e9      	beq.n	1346c <bt_hci_le_adv_report+0x188>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   13498:	231f      	movs	r3, #31
   1349a:	f889 3009 	strb.w	r3, [r9, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1349e:	2100      	movs	r1, #0
   134a0:	4648      	mov	r0, r9
   134a2:	f000 fac9 	bl	13a38 <bt_conn_set_state>
	bt_conn_unref(conn);
   134a6:	4648      	mov	r0, r9
   134a8:	f000 fa90 	bl	139cc <bt_conn_unref>
	bt_le_scan_update(false);
   134ac:	2000      	movs	r0, #0
   134ae:	f7ff fed7 	bl	13260 <bt_le_scan_update>
   134b2:	e756      	b.n	13362 <bt_hci_le_adv_report+0x7e>
   134b4:	000214dd 	.word	0x000214dd
   134b8:	20001c9c 	.word	0x20001c9c
   134bc:	20001ca4 	.word	0x20001ca4

000134c0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   134c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134c4:	4605      	mov	r5, r0
   134c6:	460f      	mov	r7, r1
   134c8:	f7ff fe3c 	bl	13144 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   134cc:	0780      	lsls	r0, r0, #30
   134ce:	d56f      	bpl.n	135b0 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   134d0:	782a      	ldrb	r2, [r5, #0]
   134d2:	2a01      	cmp	r2, #1
   134d4:	d904      	bls.n	134e0 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   134d6:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   134da:	4620      	mov	r0, r4
   134dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   134e0:	686b      	ldr	r3, [r5, #4]
   134e2:	f033 030f 	bics.w	r3, r3, #15
   134e6:	d1f6      	bne.n	134d6 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   134e8:	8928      	ldrh	r0, [r5, #8]
   134ea:	1f03      	subs	r3, r0, #4
   134ec:	b29b      	uxth	r3, r3
   134ee:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   134f2:	42a3      	cmp	r3, r4
   134f4:	d8ef      	bhi.n	134d6 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   134f6:	8969      	ldrh	r1, [r5, #10]
   134f8:	1f0b      	subs	r3, r1, #4
   134fa:	b29b      	uxth	r3, r3
   134fc:	42a3      	cmp	r3, r4
   134fe:	d8ea      	bhi.n	134d6 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   13500:	4288      	cmp	r0, r1
   13502:	d3e8      	bcc.n	134d6 <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   13504:	b99a      	cbnz	r2, 1352e <bt_le_scan_start+0x6e>
   13506:	f3bf 8f5b 	dmb	ish
   1350a:	4e2b      	ldr	r6, [pc, #172]	; (135b8 <bt_le_scan_start+0xf8>)
   1350c:	e856 0f00 	ldrex	r0, [r6]
   13510:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   13514:	e846 3200 	strex	r2, r3, [r6]
   13518:	2a00      	cmp	r2, #0
   1351a:	d1f7      	bne.n	1350c <bt_le_scan_start+0x4c>
   1351c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13520:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   13524:	46b0      	mov	r8, r6
   13526:	d007      	beq.n	13538 <bt_le_scan_start+0x78>
		return -EALREADY;
   13528:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1352c:	e7d5      	b.n	134da <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1352e:	f00a fc13 	bl	1dd58 <bt_id_scan_random_addr_check>
   13532:	2800      	cmp	r0, #0
   13534:	d1e7      	bne.n	13506 <bt_le_scan_start+0x46>
   13536:	e7ce      	b.n	134d6 <bt_le_scan_start+0x16>
   13538:	f7ff fe04 	bl	13144 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1353c:	0681      	lsls	r1, r0, #26
   1353e:	d50a      	bpl.n	13556 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   13540:	4610      	mov	r0, r2
   13542:	f7ff fe09 	bl	13158 <bt_le_scan_set_enable_legacy>
		if (err) {
   13546:	4604      	mov	r4, r0
   13548:	b128      	cbz	r0, 13556 <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1354a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1354e:	4630      	mov	r0, r6
   13550:	f00a fc04 	bl	1dd5c <atomic_and>
		return err;
   13554:	e7c1      	b.n	134da <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   13556:	686b      	ldr	r3, [r5, #4]
	if (val) {
   13558:	07db      	lsls	r3, r3, #31
   1355a:	d515      	bpl.n	13588 <bt_le_scan_start+0xc8>
   1355c:	f3bf 8f5b 	dmb	ish
   13560:	e858 3f00 	ldrex	r3, [r8]
   13564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   13568:	e848 3200 	strex	r2, r3, [r8]
   1356c:	2a00      	cmp	r2, #0
   1356e:	d1f7      	bne.n	13560 <bt_le_scan_start+0xa0>
   13570:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   13574:	89ab      	ldrh	r3, [r5, #12]
   13576:	b16b      	cbz	r3, 13594 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13578:	480f      	ldr	r0, [pc, #60]	; (135b8 <bt_le_scan_start+0xf8>)
   1357a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1357e:	f00a fbed 	bl	1dd5c <atomic_and>
			return -ENOTSUP;
   13582:	f06f 0485 	mvn.w	r4, #133	; 0x85
   13586:	e7a8      	b.n	134da <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13588:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1358c:	480a      	ldr	r0, [pc, #40]	; (135b8 <bt_le_scan_start+0xf8>)
   1358e:	f00a fbe5 	bl	1dd5c <atomic_and>
   13592:	e7ef      	b.n	13574 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   13594:	896a      	ldrh	r2, [r5, #10]
   13596:	8929      	ldrh	r1, [r5, #8]
   13598:	7828      	ldrb	r0, [r5, #0]
   1359a:	f7ff fe0f 	bl	131bc <start_le_scan_legacy>
	if (err) {
   1359e:	4604      	mov	r4, r0
   135a0:	b118      	cbz	r0, 135aa <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   135a2:	4805      	ldr	r0, [pc, #20]	; (135b8 <bt_le_scan_start+0xf8>)
   135a4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   135a8:	e7d2      	b.n	13550 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   135aa:	4b04      	ldr	r3, [pc, #16]	; (135bc <bt_le_scan_start+0xfc>)
   135ac:	601f      	str	r7, [r3, #0]
	return 0;
   135ae:	e794      	b.n	134da <bt_le_scan_start+0x1a>
		return -EAGAIN;
   135b0:	f06f 040a 	mvn.w	r4, #10
   135b4:	e791      	b.n	134da <bt_le_scan_start+0x1a>
   135b6:	bf00      	nop
   135b8:	2000036c 	.word	0x2000036c
   135bc:	20001ca4 	.word	0x20001ca4

000135c0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   135c0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   135c2:	4808      	ldr	r0, [pc, #32]	; (135e4 <bt_le_scan_stop+0x24>)
   135c4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   135c8:	f00a fbc8 	bl	1dd5c <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   135cc:	0643      	lsls	r3, r0, #25
   135ce:	d506      	bpl.n	135de <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   135d0:	4b05      	ldr	r3, [pc, #20]	; (135e8 <bt_le_scan_stop+0x28>)
   135d2:	2000      	movs	r0, #0
   135d4:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   135d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   135da:	f7ff be41 	b.w	13260 <bt_le_scan_update>
}
   135de:	f06f 0077 	mvn.w	r0, #119	; 0x77
   135e2:	bd08      	pop	{r3, pc}
   135e4:	2000036c 	.word	0x2000036c
   135e8:	20001ca4 	.word	0x20001ca4

000135ec <bt_le_scan_cb_register>:
	parent->next = child;
   135ec:	2300      	movs	r3, #0
   135ee:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   135f0:	4b05      	ldr	r3, [pc, #20]	; (13608 <bt_le_scan_cb_register+0x1c>)
   135f2:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   135f4:	f100 0208 	add.w	r2, r0, #8
   135f8:	b911      	cbnz	r1, 13600 <bt_le_scan_cb_register+0x14>
	list->head = node;
   135fa:	e9c3 2200 	strd	r2, r2, [r3]
}
   135fe:	4770      	bx	lr
	parent->next = child;
   13600:	600a      	str	r2, [r1, #0]
	list->tail = node;
   13602:	605a      	str	r2, [r3, #4]
}
   13604:	4770      	bx	lr
   13606:	bf00      	nop
   13608:	20001c9c 	.word	0x20001c9c

0001360c <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   1360c:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1360e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   13612:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   13614:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   13616:	4801      	ldr	r0, [pc, #4]	; (1361c <tx_free+0x10>)
   13618:	f00c bb7e 	b.w	1fd18 <k_queue_append>
   1361c:	20000698 	.word	0x20000698

00013620 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   13620:	4b19      	ldr	r3, [pc, #100]	; (13688 <notify_connected+0x68>)
{
   13622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   13626:	681d      	ldr	r5, [r3, #0]
{
   13628:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1362a:	b9ed      	cbnz	r5, 13668 <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1362c:	4e17      	ldr	r6, [pc, #92]	; (1368c <notify_connected+0x6c>)
   1362e:	4d18      	ldr	r5, [pc, #96]	; (13690 <notify_connected+0x70>)
   13630:	4f18      	ldr	r7, [pc, #96]	; (13694 <notify_connected+0x74>)
   13632:	46b0      	mov	r8, r6
   13634:	42b5      	cmp	r5, r6
   13636:	d90e      	bls.n	13656 <notify_connected+0x36>
   13638:	4917      	ldr	r1, [pc, #92]	; (13698 <notify_connected+0x78>)
   1363a:	4818      	ldr	r0, [pc, #96]	; (1369c <notify_connected+0x7c>)
   1363c:	f240 43fd 	movw	r3, #1277	; 0x4fd
   13640:	463a      	mov	r2, r7
   13642:	f009 fbce 	bl	1cde2 <printk>
   13646:	4816      	ldr	r0, [pc, #88]	; (136a0 <notify_connected+0x80>)
   13648:	f009 fbcb 	bl	1cde2 <printk>
   1364c:	f240 41fd 	movw	r1, #1277	; 0x4fd
   13650:	4638      	mov	r0, r7
   13652:	f009 fe20 	bl	1d296 <assert_post_action>
   13656:	4545      	cmp	r5, r8
   13658:	d30d      	bcc.n	13676 <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   1365a:	7a63      	ldrb	r3, [r4, #9]
   1365c:	b993      	cbnz	r3, 13684 <notify_connected+0x64>
		bt_gatt_connected(conn);
   1365e:	4620      	mov	r0, r4
	}
}
   13660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   13664:	f002 bb4e 	b.w	15d04 <bt_gatt_connected>
		if (cb->connected) {
   13668:	682b      	ldr	r3, [r5, #0]
   1366a:	b113      	cbz	r3, 13672 <notify_connected+0x52>
			cb->connected(conn, conn->err);
   1366c:	7a61      	ldrb	r1, [r4, #9]
   1366e:	4620      	mov	r0, r4
   13670:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   13672:	692d      	ldr	r5, [r5, #16]
   13674:	e7d9      	b.n	1362a <notify_connected+0xa>
		if (cb->connected) {
   13676:	682b      	ldr	r3, [r5, #0]
   13678:	b113      	cbz	r3, 13680 <notify_connected+0x60>
			cb->connected(conn, conn->err);
   1367a:	7a61      	ldrb	r1, [r4, #9]
   1367c:	4620      	mov	r0, r4
   1367e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13680:	3514      	adds	r5, #20
   13682:	e7d7      	b.n	13634 <notify_connected+0x14>
}
   13684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13688:	20001ca8 	.word	0x20001ca8
   1368c:	0002034c 	.word	0x0002034c
   13690:	0002034c 	.word	0x0002034c
   13694:	000214e2 	.word	0x000214e2
   13698:	00021512 	.word	0x00021512
   1369c:	00020a75 	.word	0x00020a75
   136a0:	0002152d 	.word	0x0002152d

000136a4 <send_frag>:
{
   136a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   136a8:	694d      	ldr	r5, [r1, #20]
{
   136aa:	4604      	mov	r4, r0
   136ac:	460e      	mov	r6, r1
   136ae:	4691      	mov	r9, r2
   136b0:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   136b2:	f04f 33ff 	mov.w	r3, #4294967295
   136b6:	4847      	ldr	r0, [pc, #284]	; (137d4 <send_frag+0x130>)
   136b8:	f04f 32ff 	mov.w	r2, #4294967295
   136bc:	f006 fafa 	bl	19cb4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   136c0:	7aa3      	ldrb	r3, [r4, #10]
   136c2:	2b07      	cmp	r3, #7
   136c4:	d146      	bne.n	13754 <send_frag+0xb0>
	__asm__ volatile(
   136c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   136ca:	f3ef 8211 	mrs	r2, BASEPRI
   136ce:	f383 8812 	msr	BASEPRI_MAX, r3
   136d2:	f3bf 8f6f 	isb	sy
	if (tx) {
   136d6:	2d00      	cmp	r5, #0
   136d8:	d04e      	beq.n	13778 <send_frag+0xd4>
	parent->next = child;
   136da:	2300      	movs	r3, #0
   136dc:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   136de:	69a3      	ldr	r3, [r4, #24]
   136e0:	2b00      	cmp	r3, #0
   136e2:	d146      	bne.n	13772 <send_frag+0xce>
	list->head = node;
   136e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   136e8:	f382 8811 	msr	BASEPRI, r2
   136ec:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   136f0:	2104      	movs	r1, #4
   136f2:	f106 0008 	add.w	r0, r6, #8
   136f6:	f002 fe5d 	bl	163b4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   136fa:	8823      	ldrh	r3, [r4, #0]
   136fc:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   13700:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   13704:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   13706:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1370a:	3b04      	subs	r3, #4
   1370c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1370e:	2302      	movs	r3, #2
   13710:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   13712:	4630      	mov	r0, r6
   13714:	f7ff f850 	bl	127b8 <bt_send>
	if (err) {
   13718:	2800      	cmp	r0, #0
   1371a:	d058      	beq.n	137ce <send_frag+0x12a>
	__asm__ volatile(
   1371c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13720:	f3ef 8911 	mrs	r9, BASEPRI
   13724:	f383 8812 	msr	BASEPRI_MAX, r3
   13728:	f3bf 8f6f 	isb	sy
		if (tx) {
   1372c:	2d00      	cmp	r5, #0
   1372e:	d039      	beq.n	137a4 <send_frag+0x100>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13730:	6963      	ldr	r3, [r4, #20]
   13732:	2200      	movs	r2, #0
   13734:	b153      	cbz	r3, 1374c <send_frag+0xa8>
   13736:	429d      	cmp	r5, r3
   13738:	d131      	bne.n	1379e <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
   1373a:	682b      	ldr	r3, [r5, #0]
   1373c:	bb4a      	cbnz	r2, 13792 <send_frag+0xee>
   1373e:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   13740:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   13742:	4295      	cmp	r5, r2
   13744:	d100      	bne.n	13748 <send_frag+0xa4>
	list->tail = node;
   13746:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   13748:	2300      	movs	r3, #0
   1374a:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1374c:	f389 8811 	msr	BASEPRI, r9
   13750:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   13754:	481f      	ldr	r0, [pc, #124]	; (137d4 <send_frag+0x130>)
   13756:	f006 fa69 	bl	19c2c <z_impl_k_sem_give>
	if (tx) {
   1375a:	b115      	cbz	r5, 13762 <send_frag+0xbe>
		tx_free(tx);
   1375c:	4628      	mov	r0, r5
   1375e:	f7ff ff55 	bl	1360c <tx_free>
	if (always_consume) {
   13762:	b11f      	cbz	r7, 1376c <send_frag+0xc8>
		net_buf_unref(buf);
   13764:	4630      	mov	r0, r6
   13766:	f002 fd59 	bl	1621c <net_buf_unref>
	return false;
   1376a:	2700      	movs	r7, #0
}
   1376c:	4638      	mov	r0, r7
   1376e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13772:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13774:	61a5      	str	r5, [r4, #24]
}
   13776:	e7b7      	b.n	136e8 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   13778:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1377a:	b133      	cbz	r3, 1378a <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
   1377c:	f103 080c 	add.w	r8, r3, #12
   13780:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   13782:	3301      	adds	r3, #1
   13784:	f8c8 3000 	str.w	r3, [r8]
   13788:	e7ae      	b.n	136e8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1378a:	69e3      	ldr	r3, [r4, #28]
   1378c:	f104 081c 	add.w	r8, r4, #28
   13790:	e7f7      	b.n	13782 <send_frag+0xde>
	parent->next = child;
   13792:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   13794:	69a3      	ldr	r3, [r4, #24]
   13796:	429d      	cmp	r5, r3
	list->tail = node;
   13798:	bf08      	it	eq
   1379a:	61a2      	streq	r2, [r4, #24]
}
   1379c:	e7d4      	b.n	13748 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1379e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   137a0:	681b      	ldr	r3, [r3, #0]
   137a2:	e7c7      	b.n	13734 <send_frag+0x90>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   137a4:	f8d8 3000 	ldr.w	r3, [r8]
   137a8:	b95b      	cbnz	r3, 137c2 <send_frag+0x11e>
   137aa:	490b      	ldr	r1, [pc, #44]	; (137d8 <send_frag+0x134>)
   137ac:	480b      	ldr	r0, [pc, #44]	; (137dc <send_frag+0x138>)
   137ae:	4a0c      	ldr	r2, [pc, #48]	; (137e0 <send_frag+0x13c>)
   137b0:	f240 2307 	movw	r3, #519	; 0x207
   137b4:	f009 fb15 	bl	1cde2 <printk>
   137b8:	4809      	ldr	r0, [pc, #36]	; (137e0 <send_frag+0x13c>)
   137ba:	f240 2107 	movw	r1, #519	; 0x207
   137be:	f009 fd6a 	bl	1d296 <assert_post_action>
			(*pending_no_cb)--;
   137c2:	f8d8 3000 	ldr.w	r3, [r8]
   137c6:	3b01      	subs	r3, #1
   137c8:	f8c8 3000 	str.w	r3, [r8]
   137cc:	e7be      	b.n	1374c <send_frag+0xa8>
	return true;
   137ce:	2701      	movs	r7, #1
   137d0:	e7cc      	b.n	1376c <send_frag+0xc8>
   137d2:	bf00      	nop
   137d4:	200003a0 	.word	0x200003a0
   137d8:	0002154c 	.word	0x0002154c
   137dc:	00020a75 	.word	0x00020a75
   137e0:	000214e2 	.word	0x000214e2

000137e4 <bt_conn_get_pkts>:
}
   137e4:	4800      	ldr	r0, [pc, #0]	; (137e8 <bt_conn_get_pkts+0x4>)
   137e6:	4770      	bx	lr
   137e8:	200003a0 	.word	0x200003a0

000137ec <bt_conn_new>:
{
   137ec:	b538      	push	{r3, r4, r5, lr}
   137ee:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   137f0:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   137f2:	2501      	movs	r5, #1
   137f4:	428b      	cmp	r3, r1
   137f6:	d102      	bne.n	137fe <bt_conn_new+0x12>
		return NULL;
   137f8:	2400      	movs	r4, #0
}
   137fa:	4620      	mov	r0, r4
   137fc:	bd38      	pop	{r3, r4, r5, pc}
   137fe:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   13802:	f3bf 8f5b 	dmb	ish
   13806:	e852 0f00 	ldrex	r0, [r2]
   1380a:	2800      	cmp	r0, #0
   1380c:	d104      	bne.n	13818 <bt_conn_new+0x2c>
   1380e:	e842 5c00 	strex	ip, r5, [r2]
   13812:	f1bc 0f00 	cmp.w	ip, #0
   13816:	d1f6      	bne.n	13806 <bt_conn_new+0x1a>
   13818:	f3bf 8f5b 	dmb	ish
   1381c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   13820:	d002      	beq.n	13828 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   13822:	3301      	adds	r3, #1
   13824:	4604      	mov	r4, r0
   13826:	e7e5      	b.n	137f4 <bt_conn_new+0x8>
	if (!conn) {
   13828:	2c00      	cmp	r4, #0
   1382a:	d0e6      	beq.n	137fa <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   1382c:	22c0      	movs	r2, #192	; 0xc0
   1382e:	2100      	movs	r1, #0
   13830:	4620      	mov	r0, r4
   13832:	f00c fbeb 	bl	2000c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   13836:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1383a:	4904      	ldr	r1, [pc, #16]	; (1384c <bt_conn_new+0x60>)
   1383c:	f006 fdce 	bl	1a3dc <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   13840:	4903      	ldr	r1, [pc, #12]	; (13850 <bt_conn_new+0x64>)
   13842:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13846:	f006 fcc5 	bl	1a1d4 <k_work_init>
	return conn;
   1384a:	e7d6      	b.n	137fa <bt_conn_new+0xe>
   1384c:	00014025 	.word	0x00014025
   13850:	0001dde9 	.word	0x0001dde9

00013854 <conn_cleanup>:
{
   13854:	b570      	push	{r4, r5, r6, lr}
   13856:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   13858:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1385c:	2200      	movs	r2, #0
   1385e:	2300      	movs	r3, #0
   13860:	4630      	mov	r0, r6
   13862:	f002 fc49 	bl	160f8 <net_buf_get>
   13866:	4605      	mov	r5, r0
   13868:	bb48      	cbnz	r0, 138be <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1386a:	6963      	ldr	r3, [r4, #20]
   1386c:	b173      	cbz	r3, 1388c <conn_cleanup+0x38>
   1386e:	4918      	ldr	r1, [pc, #96]	; (138d0 <conn_cleanup+0x7c>)
   13870:	4a18      	ldr	r2, [pc, #96]	; (138d4 <conn_cleanup+0x80>)
   13872:	4819      	ldr	r0, [pc, #100]	; (138d8 <conn_cleanup+0x84>)
   13874:	f240 238a 	movw	r3, #650	; 0x28a
   13878:	f009 fab3 	bl	1cde2 <printk>
   1387c:	4817      	ldr	r0, [pc, #92]	; (138dc <conn_cleanup+0x88>)
   1387e:	f009 fab0 	bl	1cde2 <printk>
   13882:	4814      	ldr	r0, [pc, #80]	; (138d4 <conn_cleanup+0x80>)
   13884:	f240 218a 	movw	r1, #650	; 0x28a
   13888:	f009 fd05 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1388c:	69e3      	ldr	r3, [r4, #28]
   1388e:	b15b      	cbz	r3, 138a8 <conn_cleanup+0x54>
   13890:	4913      	ldr	r1, [pc, #76]	; (138e0 <conn_cleanup+0x8c>)
   13892:	4811      	ldr	r0, [pc, #68]	; (138d8 <conn_cleanup+0x84>)
   13894:	4a0f      	ldr	r2, [pc, #60]	; (138d4 <conn_cleanup+0x80>)
   13896:	f240 238b 	movw	r3, #651	; 0x28b
   1389a:	f009 faa2 	bl	1cde2 <printk>
   1389e:	480d      	ldr	r0, [pc, #52]	; (138d4 <conn_cleanup+0x80>)
   138a0:	f240 218b 	movw	r1, #651	; 0x28b
   138a4:	f009 fcf7 	bl	1d296 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   138a8:	4620      	mov	r0, r4
   138aa:	f00a faa0 	bl	1ddee <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   138ae:	f104 0060 	add.w	r0, r4, #96	; 0x60
   138b2:	2200      	movs	r2, #0
}
   138b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   138b8:	2300      	movs	r3, #0
   138ba:	f006 beb3 	b.w	1a624 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   138be:	6968      	ldr	r0, [r5, #20]
   138c0:	b108      	cbz	r0, 138c6 <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   138c2:	f7ff fea3 	bl	1360c <tx_free>
		net_buf_unref(buf);
   138c6:	4628      	mov	r0, r5
   138c8:	f002 fca8 	bl	1621c <net_buf_unref>
   138cc:	e7c6      	b.n	1385c <conn_cleanup+0x8>
   138ce:	bf00      	nop
   138d0:	0002155f 	.word	0x0002155f
   138d4:	000214e2 	.word	0x000214e2
   138d8:	00020a75 	.word	0x00020a75
   138dc:	00021585 	.word	0x00021585
   138e0:	0002159a 	.word	0x0002159a

000138e4 <bt_conn_send_cb>:
{
   138e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138e6:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   138e8:	7a83      	ldrb	r3, [r0, #10]
   138ea:	2b07      	cmp	r3, #7
{
   138ec:	4604      	mov	r4, r0
   138ee:	460d      	mov	r5, r1
   138f0:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   138f2:	d114      	bne.n	1391e <bt_conn_send_cb+0x3a>
	if (cb) {
   138f4:	b312      	cbz	r2, 1393c <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   138f6:	f008 f88d 	bl	1ba14 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   138fa:	4b13      	ldr	r3, [pc, #76]	; (13948 <bt_conn_send_cb+0x64>)
   138fc:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   138fe:	4813      	ldr	r0, [pc, #76]	; (1394c <bt_conn_send_cb+0x68>)
   13900:	bf07      	ittee	eq
   13902:	2200      	moveq	r2, #0
   13904:	2300      	moveq	r3, #0
   13906:	f04f 32ff 	movne.w	r2, #4294967295
   1390a:	f04f 33ff 	movne.w	r3, #4294967295
   1390e:	f006 f921 	bl	19b54 <z_impl_k_queue_get>
		if (!tx) {
   13912:	b1a8      	cbz	r0, 13940 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   13914:	7aa3      	ldrb	r3, [r4, #10]
   13916:	2b07      	cmp	r3, #7
   13918:	d004      	beq.n	13924 <bt_conn_send_cb+0x40>
			tx_free(tx);
   1391a:	f7ff fe77 	bl	1360c <tx_free>
		return -ENOTCONN;
   1391e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   13922:	e00a      	b.n	1393a <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   13924:	2300      	movs	r3, #0
		tx->user_data = user_data;
   13926:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   1392a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1392c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1392e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13932:	4629      	mov	r1, r5
   13934:	f002 fc3e 	bl	161b4 <net_buf_put>
	return 0;
   13938:	2000      	movs	r0, #0
}
   1393a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   1393c:	614a      	str	r2, [r1, #20]
   1393e:	e7f6      	b.n	1392e <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   13940:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13944:	e7f9      	b.n	1393a <bt_conn_send_cb+0x56>
   13946:	bf00      	nop
   13948:	20001b58 	.word	0x20001b58
   1394c:	20000698 	.word	0x20000698

00013950 <bt_conn_prepare_events>:
{
   13950:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   13952:	4b1b      	ldr	r3, [pc, #108]	; (139c0 <bt_conn_prepare_events+0x70>)
   13954:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   13956:	2101      	movs	r1, #1
{
   13958:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   1395a:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1395c:	f009 f818 	bl	1c990 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   13960:	4b18      	ldr	r3, [pc, #96]	; (139c4 <bt_conn_prepare_events+0x74>)
   13962:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   13966:	f00a fa0f 	bl	1dd88 <atomic_get>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1396a:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   1396e:	4619      	mov	r1, r3
   13970:	b908      	cbnz	r0, 13976 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   13972:	2001      	movs	r0, #1
}
   13974:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   13976:	7a9a      	ldrb	r2, [r3, #10]
   13978:	b99a      	cbnz	r2, 139a2 <bt_conn_prepare_events+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1397a:	f3bf 8f5b 	dmb	ish
   1397e:	1d1a      	adds	r2, r3, #4
   13980:	e852 0f00 	ldrex	r0, [r2]
   13984:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   13988:	e842 ce00 	strex	lr, ip, [r2]
   1398c:	f1be 0f00 	cmp.w	lr, #0
   13990:	d1f6      	bne.n	13980 <bt_conn_prepare_events+0x30>
   13992:	f3bf 8f5b 	dmb	ish
   13996:	0642      	lsls	r2, r0, #25
   13998:	d503      	bpl.n	139a2 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   1399a:	4618      	mov	r0, r3
   1399c:	f7ff ff5a 	bl	13854 <conn_cleanup>
   139a0:	e7e7      	b.n	13972 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   139a2:	7a8b      	ldrb	r3, [r1, #10]
   139a4:	2b07      	cmp	r3, #7
   139a6:	d1e4      	bne.n	13972 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   139a8:	4b07      	ldr	r3, [pc, #28]	; (139c8 <bt_conn_prepare_events+0x78>)
   139aa:	4628      	mov	r0, r5
   139ac:	2200      	movs	r2, #0
   139ae:	2104      	movs	r1, #4
   139b0:	f008 ffee 	bl	1c990 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   139b4:	2301      	movs	r3, #1
   139b6:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   139ba:	2002      	movs	r0, #2
	return ev_count;
   139bc:	e7da      	b.n	13974 <bt_conn_prepare_events+0x24>
   139be:	bf00      	nop
   139c0:	2000046c 	.word	0x2000046c
   139c4:	200015d0 	.word	0x200015d0
   139c8:	20001608 	.word	0x20001608

000139cc <bt_conn_unref>:
{
   139cc:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   139ce:	30c0      	adds	r0, #192	; 0xc0
   139d0:	f3bf 8f5b 	dmb	ish
   139d4:	e850 3f00 	ldrex	r3, [r0]
   139d8:	1e5a      	subs	r2, r3, #1
   139da:	e840 2100 	strex	r1, r2, [r0]
   139de:	2900      	cmp	r1, #0
   139e0:	d1f8      	bne.n	139d4 <bt_conn_unref+0x8>
   139e2:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   139e6:	2b00      	cmp	r3, #0
   139e8:	dc10      	bgt.n	13a0c <bt_conn_unref+0x40>
   139ea:	4909      	ldr	r1, [pc, #36]	; (13a10 <bt_conn_unref+0x44>)
   139ec:	4a09      	ldr	r2, [pc, #36]	; (13a14 <bt_conn_unref+0x48>)
   139ee:	480a      	ldr	r0, [pc, #40]	; (13a18 <bt_conn_unref+0x4c>)
   139f0:	f240 4346 	movw	r3, #1094	; 0x446
   139f4:	f009 f9f5 	bl	1cde2 <printk>
   139f8:	4808      	ldr	r0, [pc, #32]	; (13a1c <bt_conn_unref+0x50>)
   139fa:	f009 f9f2 	bl	1cde2 <printk>
}
   139fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   13a02:	4804      	ldr	r0, [pc, #16]	; (13a14 <bt_conn_unref+0x48>)
   13a04:	f240 4146 	movw	r1, #1094	; 0x446
   13a08:	f009 bc45 	b.w	1d296 <assert_post_action>
}
   13a0c:	bd08      	pop	{r3, pc}
   13a0e:	bf00      	nop
   13a10:	000215b3 	.word	0x000215b3
   13a14:	000214e2 	.word	0x000214e2
   13a18:	00020a75 	.word	0x00020a75
   13a1c:	000215bb 	.word	0x000215bb

00013a20 <bt_conn_lookup_handle>:
{
   13a20:	4602      	mov	r2, r0
   13a22:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   13a24:	2101      	movs	r1, #1
   13a26:	4803      	ldr	r0, [pc, #12]	; (13a34 <bt_conn_lookup_handle+0x14>)
   13a28:	f00a fa55 	bl	1ded6 <conn_lookup_handle>
}
   13a2c:	2800      	cmp	r0, #0
   13a2e:	bf38      	it	cc
   13a30:	2000      	movcc	r0, #0
   13a32:	bd08      	pop	{r3, pc}
   13a34:	200015d0 	.word	0x200015d0

00013a38 <bt_conn_set_state>:
{
   13a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   13a3c:	7a85      	ldrb	r5, [r0, #10]
   13a3e:	428d      	cmp	r5, r1
{
   13a40:	4604      	mov	r4, r0
	if (conn->state == state) {
   13a42:	d03e      	beq.n	13ac2 <bt_conn_set_state+0x8a>
	conn->state = state;
   13a44:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   13a46:	b155      	cbz	r5, 13a5e <bt_conn_set_state+0x26>
   13a48:	2d06      	cmp	r5, #6
   13a4a:	d00e      	beq.n	13a6a <bt_conn_set_state+0x32>
	switch (conn->state) {
   13a4c:	7aa3      	ldrb	r3, [r4, #10]
   13a4e:	2b07      	cmp	r3, #7
   13a50:	d837      	bhi.n	13ac2 <bt_conn_set_state+0x8a>
   13a52:	e8df f003 	tbb	[pc, r3]
   13a56:	1138      	.short	0x1138
   13a58:	36363636 	.word	0x36363636
   13a5c:	2877      	.short	0x2877
		if (conn->type != BT_CONN_TYPE_ISO) {
   13a5e:	7883      	ldrb	r3, [r0, #2]
   13a60:	2b08      	cmp	r3, #8
   13a62:	d0f3      	beq.n	13a4c <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   13a64:	f00a fa1c 	bl	1dea0 <bt_conn_ref>
   13a68:	e7f0      	b.n	13a4c <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13a6a:	7883      	ldrb	r3, [r0, #2]
   13a6c:	2b01      	cmp	r3, #1
   13a6e:	d1ed      	bne.n	13a4c <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   13a70:	3060      	adds	r0, #96	; 0x60
   13a72:	f006 fddd 	bl	1a630 <k_work_cancel_delayable>
   13a76:	e7e9      	b.n	13a4c <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   13a78:	4d51      	ldr	r5, [pc, #324]	; (13bc0 <bt_conn_set_state+0x188>)
		tx->pending_no_cb = 0U;
   13a7a:	2600      	movs	r6, #0
	__asm__ volatile(
   13a7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13a80:	f3ef 8211 	mrs	r2, BASEPRI
   13a84:	f383 8812 	msr	BASEPRI_MAX, r3
   13a88:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   13a8c:	69e3      	ldr	r3, [r4, #28]
   13a8e:	2b00      	cmp	r3, #0
   13a90:	d075      	beq.n	13b7e <bt_conn_set_state+0x146>
			conn->pending_no_cb--;
   13a92:	3b01      	subs	r3, #1
   13a94:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   13a96:	f382 8811 	msr	BASEPRI, r2
   13a9a:	f3bf 8f6f 	isb	sy
   13a9e:	4628      	mov	r0, r5
   13aa0:	f006 f8c4 	bl	19c2c <z_impl_k_sem_give>
}
   13aa4:	e7ea      	b.n	13a7c <bt_conn_set_state+0x44>
		if (conn->type == BT_CONN_TYPE_SCO) {
   13aa6:	78a3      	ldrb	r3, [r4, #2]
   13aa8:	2b04      	cmp	r3, #4
   13aaa:	d00a      	beq.n	13ac2 <bt_conn_set_state+0x8a>
	z_impl_k_queue_init(queue);
   13aac:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13ab0:	f00c f925 	bl	1fcfe <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   13ab4:	4843      	ldr	r0, [pc, #268]	; (13bc4 <bt_conn_set_state+0x18c>)
   13ab6:	2100      	movs	r1, #0
   13ab8:	f009 f8c6 	bl	1cc48 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   13abc:	2300      	movs	r3, #0
	list->tail = NULL;
   13abe:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   13ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   13ac6:	78a3      	ldrb	r3, [r4, #2]
   13ac8:	2b04      	cmp	r3, #4
   13aca:	d104      	bne.n	13ad6 <bt_conn_set_state+0x9e>
			bt_conn_unref(conn);
   13acc:	4620      	mov	r0, r4
}
   13ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   13ad2:	f7ff bf7b 	b.w	139cc <bt_conn_unref>
		switch (old_state) {
   13ad6:	3d01      	subs	r5, #1
   13ad8:	2d05      	cmp	r5, #5
   13ada:	d8f2      	bhi.n	13ac2 <bt_conn_set_state+0x8a>
   13adc:	a301      	add	r3, pc, #4	; (adr r3, 13ae4 <bt_conn_set_state+0xac>)
   13ade:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   13ae2:	bf00      	nop
   13ae4:	00013afd 	.word	0x00013afd
   13ae8:	00013b37 	.word	0x00013b37
   13aec:	00013acd 	.word	0x00013acd
   13af0:	00013acd 	.word	0x00013acd
   13af4:	00013b37 	.word	0x00013b37
   13af8:	00013b37 	.word	0x00013b37
			tx_notify(conn);
   13afc:	4620      	mov	r0, r4
   13afe:	f00a f950 	bl	1dda2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   13b02:	78a3      	ldrb	r3, [r4, #2]
   13b04:	2b01      	cmp	r3, #1
   13b06:	d103      	bne.n	13b10 <bt_conn_set_state+0xd8>
				k_work_cancel_delayable(&conn->deferred_work);
   13b08:	f104 0060 	add.w	r0, r4, #96	; 0x60
   13b0c:	f006 fd90 	bl	1a630 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13b10:	f3bf 8f5b 	dmb	ish
   13b14:	3404      	adds	r4, #4
   13b16:	e854 3f00 	ldrex	r3, [r4]
   13b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b1e:	e844 3200 	strex	r2, r3, [r4]
   13b22:	2a00      	cmp	r2, #0
   13b24:	d1f7      	bne.n	13b16 <bt_conn_set_state+0xde>
   13b26:	f3bf 8f5b 	dmb	ish
   13b2a:	4826      	ldr	r0, [pc, #152]	; (13bc4 <bt_conn_set_state+0x18c>)
}
   13b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13b30:	2100      	movs	r1, #0
   13b32:	f009 b889 	b.w	1cc48 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   13b36:	7a63      	ldrb	r3, [r4, #9]
   13b38:	2b00      	cmp	r3, #0
   13b3a:	d0c7      	beq.n	13acc <bt_conn_set_state+0x94>
				notify_connected(conn);
   13b3c:	4620      	mov	r0, r4
   13b3e:	f7ff fd6f 	bl	13620 <notify_connected>
   13b42:	e7c3      	b.n	13acc <bt_conn_set_state+0x94>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   13b44:	78a3      	ldrb	r3, [r4, #2]
   13b46:	2b01      	cmp	r3, #1
   13b48:	d1bb      	bne.n	13ac2 <bt_conn_set_state+0x8a>
					K_MSEC(10 * bt_dev.create_param.timeout));
   13b4a:	4b1f      	ldr	r3, [pc, #124]	; (13bc8 <bt_conn_set_state+0x190>)
   13b4c:	8a9b      	ldrh	r3, [r3, #20]
   13b4e:	210a      	movs	r1, #10
   13b50:	4359      	muls	r1, r3
		} else {
			return (t * to_hz + off) / from_hz;
   13b52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   13b56:	f240 36e7 	movw	r6, #999	; 0x3e7
   13b5a:	2700      	movs	r7, #0
   13b5c:	fbc0 6701 	smlal	r6, r7, r0, r1
   13b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13b64:	2300      	movs	r3, #0
   13b66:	4630      	mov	r0, r6
   13b68:	4639      	mov	r1, r7
   13b6a:	f7ec fac9 	bl	100 <__aeabi_uldivmod>
   13b6e:	4602      	mov	r2, r0
   13b70:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   13b72:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   13b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   13b7a:	f006 bcd7 	b.w	1a52c <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   13b7e:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   13b80:	b128      	cbz	r0, 13b8e <bt_conn_set_state+0x156>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13b82:	69a1      	ldr	r1, [r4, #24]
   13b84:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   13b86:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13b88:	4288      	cmp	r0, r1
	list->tail = node;
   13b8a:	bf08      	it	eq
   13b8c:	61a3      	streq	r3, [r4, #24]
   13b8e:	f382 8811 	msr	BASEPRI, r2
   13b92:	f3bf 8f6f 	isb	sy
		if (!node) {
   13b96:	2800      	cmp	r0, #0
   13b98:	d093      	beq.n	13ac2 <bt_conn_set_state+0x8a>
	__asm__ volatile(
   13b9a:	f04f 0240 	mov.w	r2, #64	; 0x40
   13b9e:	f3ef 8311 	mrs	r3, BASEPRI
   13ba2:	f382 8812 	msr	BASEPRI_MAX, r2
   13ba6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   13baa:	68c2      	ldr	r2, [r0, #12]
   13bac:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   13bae:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   13bb0:	f383 8811 	msr	BASEPRI, r3
   13bb4:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   13bb8:	f7ff fd28 	bl	1360c <tx_free>
   13bbc:	e76f      	b.n	13a9e <bt_conn_set_state+0x66>
   13bbe:	bf00      	nop
   13bc0:	200003a0 	.word	0x200003a0
   13bc4:	2000046c 	.word	0x2000046c
   13bc8:	200002a0 	.word	0x200002a0

00013bcc <bt_conn_index>:
		index = conn - acl_conns;
   13bcc:	4a0c      	ldr	r2, [pc, #48]	; (13c00 <bt_conn_index+0x34>)
{
   13bce:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   13bd0:	1a84      	subs	r4, r0, r2
   13bd2:	10e3      	asrs	r3, r4, #3
   13bd4:	4c0b      	ldr	r4, [pc, #44]	; (13c04 <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   13bd6:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   13bd8:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   13bdc:	d00e      	beq.n	13bfc <bt_conn_index+0x30>
   13bde:	490a      	ldr	r1, [pc, #40]	; (13c08 <bt_conn_index+0x3c>)
   13be0:	4a0a      	ldr	r2, [pc, #40]	; (13c0c <bt_conn_index+0x40>)
   13be2:	480b      	ldr	r0, [pc, #44]	; (13c10 <bt_conn_index+0x44>)
   13be4:	f240 4364 	movw	r3, #1124	; 0x464
   13be8:	f009 f8fb 	bl	1cde2 <printk>
   13bec:	4809      	ldr	r0, [pc, #36]	; (13c14 <bt_conn_index+0x48>)
   13bee:	f009 f8f8 	bl	1cde2 <printk>
   13bf2:	4806      	ldr	r0, [pc, #24]	; (13c0c <bt_conn_index+0x40>)
   13bf4:	f240 4164 	movw	r1, #1124	; 0x464
   13bf8:	f009 fb4d 	bl	1d296 <assert_post_action>
}
   13bfc:	b2e0      	uxtb	r0, r4
   13bfe:	bd10      	pop	{r4, pc}
   13c00:	200015d0 	.word	0x200015d0
   13c04:	c28f5c29 	.word	0xc28f5c29
   13c08:	000215d9 	.word	0x000215d9
   13c0c:	000214e2 	.word	0x000214e2
   13c10:	00020a75 	.word	0x00020a75
   13c14:	000216a0 	.word	0x000216a0

00013c18 <bt_conn_create_pdu_timeout>:
{
   13c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13c1a:	4604      	mov	r4, r0
   13c1c:	460d      	mov	r5, r1
   13c1e:	4617      	mov	r7, r2
   13c20:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   13c22:	f00c f84e 	bl	1fcc2 <k_is_in_isr>
   13c26:	b158      	cbz	r0, 13c40 <bt_conn_create_pdu_timeout+0x28>
   13c28:	490d      	ldr	r1, [pc, #52]	; (13c60 <bt_conn_create_pdu_timeout+0x48>)
   13c2a:	480e      	ldr	r0, [pc, #56]	; (13c64 <bt_conn_create_pdu_timeout+0x4c>)
   13c2c:	4a0e      	ldr	r2, [pc, #56]	; (13c68 <bt_conn_create_pdu_timeout+0x50>)
   13c2e:	f44f 6390 	mov.w	r3, #1152	; 0x480
   13c32:	f009 f8d6 	bl	1cde2 <printk>
   13c36:	480c      	ldr	r0, [pc, #48]	; (13c68 <bt_conn_create_pdu_timeout+0x50>)
   13c38:	f44f 6190 	mov.w	r1, #1152	; 0x480
   13c3c:	f009 fb2b 	bl	1d296 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   13c40:	480a      	ldr	r0, [pc, #40]	; (13c6c <bt_conn_create_pdu_timeout+0x54>)
   13c42:	463a      	mov	r2, r7
   13c44:	2c00      	cmp	r4, #0
   13c46:	bf18      	it	ne
   13c48:	4620      	movne	r0, r4
   13c4a:	4633      	mov	r3, r6
   13c4c:	f00b fbc8 	bl	1f3e0 <net_buf_alloc_fixed>
	if (!buf) {
   13c50:	4604      	mov	r4, r0
   13c52:	b118      	cbz	r0, 13c5c <bt_conn_create_pdu_timeout+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
   13c54:	1d29      	adds	r1, r5, #4
   13c56:	3008      	adds	r0, #8
   13c58:	f002 fa82 	bl	16160 <net_buf_simple_reserve>
}
   13c5c:	4620      	mov	r0, r4
   13c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13c60:	000216ba 	.word	0x000216ba
   13c64:	00020a75 	.word	0x00020a75
   13c68:	000214e2 	.word	0x000214e2
   13c6c:	200006b4 	.word	0x200006b4

00013c70 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   13c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13c74:	1d03      	adds	r3, r0, #4
{
   13c76:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13c78:	4618      	mov	r0, r3
   13c7a:	f00a f885 	bl	1dd88 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13c7e:	0582      	lsls	r2, r0, #22
   13c80:	d519      	bpl.n	13cb6 <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   13c82:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   13c86:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   13c8a:	4291      	cmp	r1, r2
   13c8c:	d813      	bhi.n	13cb6 <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   13c8e:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   13c92:	4291      	cmp	r1, r2
   13c94:	d30f      	bcc.n	13cb6 <notify_le_param_updated+0x46>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   13c96:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   13c9a:	4291      	cmp	r1, r2
   13c9c:	d10b      	bne.n	13cb6 <notify_le_param_updated+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c9e:	f3bf 8f5b 	dmb	ish
   13ca2:	e853 2f00 	ldrex	r2, [r3]
   13ca6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   13caa:	e843 2100 	strex	r1, r2, [r3]
   13cae:	2900      	cmp	r1, #0
   13cb0:	d1f7      	bne.n	13ca2 <notify_le_param_updated+0x32>
   13cb2:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   13cb6:	4b1b      	ldr	r3, [pc, #108]	; (13d24 <notify_le_param_updated+0xb4>)
   13cb8:	681d      	ldr	r5, [r3, #0]
   13cba:	b9c5      	cbnz	r5, 13cee <notify_le_param_updated+0x7e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13cbc:	4e1a      	ldr	r6, [pc, #104]	; (13d28 <notify_le_param_updated+0xb8>)
   13cbe:	4d1b      	ldr	r5, [pc, #108]	; (13d2c <notify_le_param_updated+0xbc>)
   13cc0:	4f1b      	ldr	r7, [pc, #108]	; (13d30 <notify_le_param_updated+0xc0>)
   13cc2:	46b1      	mov	r9, r6
   13cc4:	42b5      	cmp	r5, r6
   13cc6:	d90e      	bls.n	13ce6 <notify_le_param_updated+0x76>
   13cc8:	491a      	ldr	r1, [pc, #104]	; (13d34 <notify_le_param_updated+0xc4>)
   13cca:	481b      	ldr	r0, [pc, #108]	; (13d38 <notify_le_param_updated+0xc8>)
   13ccc:	f240 534b 	movw	r3, #1355	; 0x54b
   13cd0:	463a      	mov	r2, r7
   13cd2:	f009 f886 	bl	1cde2 <printk>
   13cd6:	4819      	ldr	r0, [pc, #100]	; (13d3c <notify_le_param_updated+0xcc>)
   13cd8:	f009 f883 	bl	1cde2 <printk>
   13cdc:	f240 514b 	movw	r1, #1355	; 0x54b
   13ce0:	4638      	mov	r0, r7
   13ce2:	f009 fad8 	bl	1d296 <assert_post_action>
   13ce6:	454d      	cmp	r5, r9
   13ce8:	d30d      	bcc.n	13d06 <notify_le_param_updated+0x96>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   13cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
   13cee:	68ee      	ldr	r6, [r5, #12]
   13cf0:	b13e      	cbz	r6, 13d02 <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
   13cf2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   13cf6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   13cfa:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   13cfe:	4620      	mov	r0, r4
   13d00:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   13d02:	692d      	ldr	r5, [r5, #16]
   13d04:	e7d9      	b.n	13cba <notify_le_param_updated+0x4a>
		if (cb->le_param_updated) {
   13d06:	f8d5 800c 	ldr.w	r8, [r5, #12]
   13d0a:	f1b8 0f00 	cmp.w	r8, #0
   13d0e:	d007      	beq.n	13d20 <notify_le_param_updated+0xb0>
			cb->le_param_updated(conn, conn->le.interval,
   13d10:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   13d14:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   13d18:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   13d1c:	4620      	mov	r0, r4
   13d1e:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13d20:	3514      	adds	r5, #20
   13d22:	e7cf      	b.n	13cc4 <notify_le_param_updated+0x54>
   13d24:	20001ca8 	.word	0x20001ca8
   13d28:	0002034c 	.word	0x0002034c
   13d2c:	0002034c 	.word	0x0002034c
   13d30:	000214e2 	.word	0x000214e2
   13d34:	00021512 	.word	0x00021512
   13d38:	00020a75 	.word	0x00020a75
   13d3c:	0002152d 	.word	0x0002152d

00013d40 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   13d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d44:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   13d46:	4608      	mov	r0, r1
{
   13d48:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   13d4a:	f009 fe5d 	bl	1da08 <bt_le_conn_params_valid>
   13d4e:	4605      	mov	r5, r0
   13d50:	b918      	cbnz	r0, 13d5a <le_param_req+0x1a>
		return false;
   13d52:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   13d54:	4628      	mov	r0, r5
   13d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   13d5a:	4b1d      	ldr	r3, [pc, #116]	; (13dd0 <le_param_req+0x90>)
   13d5c:	681e      	ldr	r6, [r3, #0]
   13d5e:	b9e6      	cbnz	r6, 13d9a <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13d60:	f8df 8080 	ldr.w	r8, [pc, #128]	; 13de4 <le_param_req+0xa4>
   13d64:	4e1b      	ldr	r6, [pc, #108]	; (13dd4 <le_param_req+0x94>)
   13d66:	f8df 9080 	ldr.w	r9, [pc, #128]	; 13de8 <le_param_req+0xa8>
   13d6a:	46c2      	mov	sl, r8
   13d6c:	4546      	cmp	r6, r8
   13d6e:	d90e      	bls.n	13d8e <le_param_req+0x4e>
   13d70:	4919      	ldr	r1, [pc, #100]	; (13dd8 <le_param_req+0x98>)
   13d72:	481a      	ldr	r0, [pc, #104]	; (13ddc <le_param_req+0x9c>)
   13d74:	f240 5393 	movw	r3, #1427	; 0x593
   13d78:	464a      	mov	r2, r9
   13d7a:	f009 f832 	bl	1cde2 <printk>
   13d7e:	4818      	ldr	r0, [pc, #96]	; (13de0 <le_param_req+0xa0>)
   13d80:	f009 f82f 	bl	1cde2 <printk>
   13d84:	f240 5193 	movw	r1, #1427	; 0x593
   13d88:	4648      	mov	r0, r9
   13d8a:	f009 fa84 	bl	1d296 <assert_post_action>
   13d8e:	4556      	cmp	r6, sl
   13d90:	d2e0      	bcs.n	13d54 <le_param_req+0x14>
		if (!cb->le_param_req) {
   13d92:	68b3      	ldr	r3, [r6, #8]
   13d94:	b983      	cbnz	r3, 13db8 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   13d96:	3614      	adds	r6, #20
   13d98:	e7e8      	b.n	13d6c <le_param_req+0x2c>
		if (!cb->le_param_req) {
   13d9a:	68b3      	ldr	r3, [r6, #8]
   13d9c:	b90b      	cbnz	r3, 13da2 <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   13d9e:	6936      	ldr	r6, [r6, #16]
   13da0:	e7dd      	b.n	13d5e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   13da2:	4621      	mov	r1, r4
   13da4:	4638      	mov	r0, r7
   13da6:	4798      	blx	r3
   13da8:	2800      	cmp	r0, #0
   13daa:	d0d2      	beq.n	13d52 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   13dac:	4620      	mov	r0, r4
   13dae:	f009 fe2b 	bl	1da08 <bt_le_conn_params_valid>
   13db2:	2800      	cmp	r0, #0
   13db4:	d1f3      	bne.n	13d9e <le_param_req+0x5e>
   13db6:	e7cc      	b.n	13d52 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   13db8:	4621      	mov	r1, r4
   13dba:	4638      	mov	r0, r7
   13dbc:	4798      	blx	r3
   13dbe:	2800      	cmp	r0, #0
   13dc0:	d0c7      	beq.n	13d52 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   13dc2:	4620      	mov	r0, r4
   13dc4:	f009 fe20 	bl	1da08 <bt_le_conn_params_valid>
   13dc8:	2800      	cmp	r0, #0
   13dca:	d1e4      	bne.n	13d96 <le_param_req+0x56>
   13dcc:	e7c1      	b.n	13d52 <le_param_req+0x12>
   13dce:	bf00      	nop
   13dd0:	20001ca8 	.word	0x20001ca8
   13dd4:	0002034c 	.word	0x0002034c
   13dd8:	00021512 	.word	0x00021512
   13ddc:	00020a75 	.word	0x00020a75
   13de0:	0002152d 	.word	0x0002152d
   13de4:	0002034c 	.word	0x0002034c
   13de8:	000214e2 	.word	0x000214e2

00013dec <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   13dec:	b538      	push	{r3, r4, r5, lr}
   13dee:	4605      	mov	r5, r0
   13df0:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   13df2:	4809      	ldr	r0, [pc, #36]	; (13e18 <bt_conn_add_le+0x2c>)
   13df4:	2101      	movs	r1, #1
   13df6:	f7ff fcf9 	bl	137ec <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   13dfa:	4602      	mov	r2, r0
   13dfc:	b148      	cbz	r0, 13e12 <bt_conn_add_le+0x26>
		return NULL;
	}

	conn->id = id;
   13dfe:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
   13e00:	4621      	mov	r1, r4
   13e02:	3090      	adds	r0, #144	; 0x90
   13e04:	f009 ffc6 	bl	1dd94 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   13e08:	2301      	movs	r3, #1
   13e0a:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   13e0c:	4b03      	ldr	r3, [pc, #12]	; (13e1c <bt_conn_add_le+0x30>)
   13e0e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   13e12:	4610      	mov	r0, r2
   13e14:	bd38      	pop	{r3, r4, r5, pc}
   13e16:	bf00      	nop
   13e18:	200015d0 	.word	0x200015d0
   13e1c:	00280018 	.word	0x00280018

00013e20 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   13e20:	b570      	push	{r4, r5, r6, lr}
   13e22:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13e24:	480c      	ldr	r0, [pc, #48]	; (13e58 <bt_conn_lookup_addr_le+0x38>)
{
   13e26:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13e28:	f00a f83a 	bl	1dea0 <bt_conn_ref>

		if (!conn) {
   13e2c:	4604      	mov	r4, r0
   13e2e:	b128      	cbz	r0, 13e3c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   13e30:	7883      	ldrb	r3, [r0, #2]
   13e32:	2b01      	cmp	r3, #1
   13e34:	d004      	beq.n	13e40 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   13e36:	f7ff fdc9 	bl	139cc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   13e3a:	2400      	movs	r4, #0
}
   13e3c:	4620      	mov	r0, r4
   13e3e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   13e40:	4629      	mov	r1, r5
   13e42:	4632      	mov	r2, r6
   13e44:	f00a f874 	bl	1df30 <bt_conn_is_peer_addr_le>
   13e48:	4605      	mov	r5, r0
   13e4a:	2800      	cmp	r0, #0
   13e4c:	d1f6      	bne.n	13e3c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   13e4e:	4620      	mov	r0, r4
   13e50:	f7ff fdbc 	bl	139cc <bt_conn_unref>
	return NULL;
   13e54:	462c      	mov	r4, r5
			continue;
   13e56:	e7f1      	b.n	13e3c <bt_conn_lookup_addr_le+0x1c>
   13e58:	200015d0 	.word	0x200015d0

00013e5c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   13e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e5e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13e60:	480e      	ldr	r0, [pc, #56]	; (13e9c <bt_conn_lookup_state_le+0x40>)
{
   13e62:	460e      	mov	r6, r1
   13e64:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   13e66:	f00a f81b 	bl	1dea0 <bt_conn_ref>

		if (!conn) {
   13e6a:	4604      	mov	r4, r0
   13e6c:	b1a0      	cbz	r0, 13e98 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   13e6e:	7883      	ldrb	r3, [r0, #2]
   13e70:	2b01      	cmp	r3, #1
   13e72:	d003      	beq.n	13e7c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   13e74:	f7ff fdaa 	bl	139cc <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   13e78:	2400      	movs	r4, #0
			continue;
   13e7a:	e00d      	b.n	13e98 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   13e7c:	b136      	cbz	r6, 13e8c <bt_conn_lookup_state_le+0x30>
   13e7e:	4632      	mov	r2, r6
   13e80:	4629      	mov	r1, r5
   13e82:	f00a f855 	bl	1df30 <bt_conn_is_peer_addr_le>
   13e86:	b908      	cbnz	r0, 13e8c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   13e88:	4620      	mov	r0, r4
   13e8a:	e7f3      	b.n	13e74 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   13e8c:	7aa3      	ldrb	r3, [r4, #10]
   13e8e:	42bb      	cmp	r3, r7
   13e90:	d1fa      	bne.n	13e88 <bt_conn_lookup_state_le+0x2c>
   13e92:	7a23      	ldrb	r3, [r4, #8]
   13e94:	42ab      	cmp	r3, r5
   13e96:	d1f7      	bne.n	13e88 <bt_conn_lookup_state_le+0x2c>
}
   13e98:	4620      	mov	r0, r4
   13e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e9c:	200015d0 	.word	0x200015d0

00013ea0 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   13ea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13ea4:	4604      	mov	r4, r0
   13ea6:	4843      	ldr	r0, [pc, #268]	; (13fb4 <bt_conn_le_create+0x114>)
   13ea8:	460e      	mov	r6, r1
   13eaa:	4615      	mov	r5, r2
   13eac:	461f      	mov	r7, r3
   13eae:	f009 ff6b 	bl	1dd88 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13eb2:	0781      	lsls	r1, r0, #30
   13eb4:	d405      	bmi.n	13ec2 <bt_conn_le_create+0x22>
		return -EAGAIN;
   13eb6:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   13eba:	4628      	mov	r0, r5
   13ebc:	b002      	add	sp, #8
   13ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   13ec2:	4610      	mov	r0, r2
   13ec4:	f009 fda0 	bl	1da08 <bt_le_conn_params_valid>
   13ec8:	b910      	cbnz	r0, 13ed0 <bt_conn_le_create+0x30>
		return -EINVAL;
   13eca:	f06f 0515 	mvn.w	r5, #21
   13ece:	e7f4      	b.n	13eba <bt_conn_le_create+0x1a>
   13ed0:	4838      	ldr	r0, [pc, #224]	; (13fb4 <bt_conn_le_create+0x114>)
   13ed2:	f009 ff59 	bl	1dd88 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   13ed6:	0642      	lsls	r2, r0, #25
   13ed8:	d4ed      	bmi.n	13eb6 <bt_conn_le_create+0x16>
   13eda:	4836      	ldr	r0, [pc, #216]	; (13fb4 <bt_conn_le_create+0x114>)
   13edc:	f009 ff54 	bl	1dd88 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   13ee0:	0503      	lsls	r3, r0, #20
   13ee2:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   13ee6:	d45e      	bmi.n	13fa6 <bt_conn_le_create+0x106>
	if (!bt_id_scan_random_addr_check()) {
   13ee8:	f009 ff36 	bl	1dd58 <bt_id_scan_random_addr_check>
   13eec:	2800      	cmp	r0, #0
   13eee:	d0ec      	beq.n	13eca <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   13ef0:	4621      	mov	r1, r4
   13ef2:	4640      	mov	r0, r8
   13ef4:	f00a f83c 	bl	1df70 <bt_conn_exists_le>
   13ef8:	2800      	cmp	r0, #0
   13efa:	d1e6      	bne.n	13eca <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   13efc:	7823      	ldrb	r3, [r4, #0]
   13efe:	3b02      	subs	r3, #2
   13f00:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&dst, peer);
   13f02:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   13f04:	d846      	bhi.n	13f94 <bt_conn_le_create+0xf4>
		bt_addr_le_copy(&dst, peer);
   13f06:	4668      	mov	r0, sp
   13f08:	f009 ff44 	bl	1dd94 <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   13f0c:	f89d 3000 	ldrb.w	r3, [sp]
   13f10:	3b02      	subs	r3, #2
   13f12:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   13f16:	4669      	mov	r1, sp
   13f18:	2000      	movs	r0, #0
   13f1a:	f7ff ff67 	bl	13dec <bt_conn_add_le>
	if (!conn) {
   13f1e:	4604      	mov	r4, r0
   13f20:	2800      	cmp	r0, #0
   13f22:	d043      	beq.n	13fac <bt_conn_le_create+0x10c>
	conn->le.interval_min = param->interval_min;
   13f24:	882b      	ldrh	r3, [r5, #0]
   13f26:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   13f2a:	886b      	ldrh	r3, [r5, #2]
   13f2c:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   13f30:	88ab      	ldrh	r3, [r5, #4]
   13f32:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   13f36:	88eb      	ldrh	r3, [r5, #6]
   13f38:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   13f3c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   13f40:	4d1d      	ldr	r5, [pc, #116]	; (13fb8 <bt_conn_le_create+0x118>)
   13f42:	f105 0c08 	add.w	ip, r5, #8
   13f46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   13f4a:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	bf08      	it	eq
   13f50:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   13f54:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   13f56:	8a2b      	ldrh	r3, [r5, #16]
   13f58:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
   13f5a:	b903      	cbnz	r3, 13f5e <bt_conn_le_create+0xbe>
   13f5c:	89ab      	ldrh	r3, [r5, #12]
   13f5e:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   13f60:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   13f62:	b903      	cbnz	r3, 13f66 <bt_conn_le_create+0xc6>
   13f64:	89d3      	ldrh	r3, [r2, #14]
   13f66:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   13f68:	2106      	movs	r1, #6
   13f6a:	4620      	mov	r0, r4
   13f6c:	f7ff fd64 	bl	13a38 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   13f70:	4620      	mov	r0, r4
   13f72:	f009 fd2c 	bl	1d9ce <bt_le_create_conn>
	if (err) {
   13f76:	4605      	mov	r5, r0
   13f78:	b198      	cbz	r0, 13fa2 <bt_conn_le_create+0x102>
		conn->err = 0;
   13f7a:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13f7c:	4631      	mov	r1, r6
   13f7e:	4620      	mov	r0, r4
		conn->err = 0;
   13f80:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13f82:	f7ff fd59 	bl	13a38 <bt_conn_set_state>
		bt_conn_unref(conn);
   13f86:	4620      	mov	r0, r4
   13f88:	f7ff fd20 	bl	139cc <bt_conn_unref>
		bt_le_scan_update(false);
   13f8c:	4630      	mov	r0, r6
   13f8e:	f7ff f967 	bl	13260 <bt_le_scan_update>
		return err;
   13f92:	e792      	b.n	13eba <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   13f94:	f009 fecc 	bl	1dd30 <bt_lookup_id_addr>
   13f98:	4601      	mov	r1, r0
   13f9a:	4668      	mov	r0, sp
   13f9c:	f009 fefa 	bl	1dd94 <bt_addr_le_copy>
   13fa0:	e7b9      	b.n	13f16 <bt_conn_le_create+0x76>
	*ret_conn = conn;
   13fa2:	603c      	str	r4, [r7, #0]
	return 0;
   13fa4:	e789      	b.n	13eba <bt_conn_le_create+0x1a>
		return -EALREADY;
   13fa6:	f06f 0577 	mvn.w	r5, #119	; 0x77
   13faa:	e786      	b.n	13eba <bt_conn_le_create+0x1a>
		return -ENOMEM;
   13fac:	f06f 050b 	mvn.w	r5, #11
   13fb0:	e783      	b.n	13eba <bt_conn_le_create+0x1a>
   13fb2:	bf00      	nop
   13fb4:	2000036c 	.word	0x2000036c
   13fb8:	200002a0 	.word	0x200002a0

00013fbc <send_conn_le_param_update>:
{
   13fbc:	b538      	push	{r3, r4, r5, lr}
   13fbe:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   13fc0:	4608      	mov	r0, r1
{
   13fc2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   13fc4:	f009 fd20 	bl	1da08 <bt_le_conn_params_valid>
   13fc8:	b338      	cbz	r0, 1401a <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   13fca:	4b15      	ldr	r3, [pc, #84]	; (14020 <send_conn_le_param_update+0x64>)
   13fcc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   13fd0:	0799      	lsls	r1, r3, #30
   13fd2:	d407      	bmi.n	13fe4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   13fd4:	78e3      	ldrb	r3, [r4, #3]
   13fd6:	b173      	cbz	r3, 13ff6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   13fd8:	4629      	mov	r1, r5
   13fda:	4620      	mov	r0, r4
}
   13fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   13fe0:	f000 b9f6 	b.w	143d0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   13fe4:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   13fe8:	079a      	lsls	r2, r3, #30
   13fea:	d5f3      	bpl.n	13fd4 <send_conn_le_param_update+0x18>
   13fec:	1d20      	adds	r0, r4, #4
   13fee:	f009 fecb 	bl	1dd88 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   13ff2:	0543      	lsls	r3, r0, #21
   13ff4:	d4ee      	bmi.n	13fd4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   13ff6:	4629      	mov	r1, r5
   13ff8:	4620      	mov	r0, r4
   13ffa:	f009 ffc1 	bl	1df80 <bt_conn_le_conn_update>
		if (rc == 0) {
   13ffe:	b958      	cbnz	r0, 14018 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   14000:	882b      	ldrh	r3, [r5, #0]
   14002:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   14006:	886b      	ldrh	r3, [r5, #2]
   14008:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   1400c:	88ab      	ldrh	r3, [r5, #4]
   1400e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   14012:	88eb      	ldrh	r3, [r5, #6]
   14014:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   14018:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1401a:	f06f 0015 	mvn.w	r0, #21
   1401e:	e7fb      	b.n	14018 <send_conn_le_param_update+0x5c>
   14020:	200002a0 	.word	0x200002a0

00014024 <deferred_work>:
{
   14024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   14028:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   1402c:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   1402e:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   14032:	2b00      	cmp	r3, #0
   14034:	d133      	bne.n	1409e <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
   14036:	4630      	mov	r0, r6
   14038:	f00a f827 	bl	1e08a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1403c:	4b2f      	ldr	r3, [pc, #188]	; (140fc <deferred_work+0xd8>)
   1403e:	681d      	ldr	r5, [r3, #0]
   14040:	b9ed      	cbnz	r5, 1407e <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14042:	4f2f      	ldr	r7, [pc, #188]	; (14100 <deferred_work+0xdc>)
   14044:	4d2f      	ldr	r5, [pc, #188]	; (14104 <deferred_work+0xe0>)
   14046:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 14114 <deferred_work+0xf0>
   1404a:	46b9      	mov	r9, r7
   1404c:	42bd      	cmp	r5, r7
   1404e:	d90e      	bls.n	1406e <deferred_work+0x4a>
   14050:	492d      	ldr	r1, [pc, #180]	; (14108 <deferred_work+0xe4>)
   14052:	482e      	ldr	r0, [pc, #184]	; (1410c <deferred_work+0xe8>)
   14054:	f240 5312 	movw	r3, #1298	; 0x512
   14058:	4642      	mov	r2, r8
   1405a:	f008 fec2 	bl	1cde2 <printk>
   1405e:	482c      	ldr	r0, [pc, #176]	; (14110 <deferred_work+0xec>)
   14060:	f008 febf 	bl	1cde2 <printk>
   14064:	f240 5112 	movw	r1, #1298	; 0x512
   14068:	4640      	mov	r0, r8
   1406a:	f009 f914 	bl	1d296 <assert_post_action>
   1406e:	454d      	cmp	r5, r9
   14070:	d30d      	bcc.n	1408e <deferred_work+0x6a>
		bt_conn_unref(conn);
   14072:	4630      	mov	r0, r6
   14074:	f7ff fcaa 	bl	139cc <bt_conn_unref>
}
   14078:	b003      	add	sp, #12
   1407a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
   1407e:	686b      	ldr	r3, [r5, #4]
   14080:	b11b      	cbz	r3, 1408a <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
   14082:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   14086:	4630      	mov	r0, r6
   14088:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1408a:	692d      	ldr	r5, [r5, #16]
   1408c:	e7d8      	b.n	14040 <deferred_work+0x1c>
		if (cb->disconnected) {
   1408e:	686b      	ldr	r3, [r5, #4]
   14090:	b11b      	cbz	r3, 1409a <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
   14092:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   14096:	4630      	mov	r0, r6
   14098:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1409a:	3514      	adds	r5, #20
   1409c:	e7d6      	b.n	1404c <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
   1409e:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   140a2:	2b01      	cmp	r3, #1
   140a4:	d1e8      	bne.n	14078 <deferred_work+0x54>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   140a6:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   140aa:	b913      	cbnz	r3, 140b2 <deferred_work+0x8e>
		bt_le_create_conn_cancel();
   140ac:	f7fe fb60 	bl	12770 <bt_le_create_conn_cancel>
		return;
   140b0:	e7e2      	b.n	14078 <deferred_work+0x54>
	if (atomic_test_and_clear_bit(conn->flags,
   140b2:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   140b6:	f3bf 8f5b 	dmb	ish
   140ba:	e855 3f00 	ldrex	r3, [r5]
   140be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   140c2:	e845 2100 	strex	r1, r2, [r5]
   140c6:	2900      	cmp	r1, #0
   140c8:	d1f7      	bne.n	140ba <deferred_work+0x96>
   140ca:	f3bf 8f5b 	dmb	ish
   140ce:	059b      	lsls	r3, r3, #22
   140d0:	d507      	bpl.n	140e2 <deferred_work+0xbe>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   140d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   140d4:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   140d6:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   140d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   140da:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   140dc:	4630      	mov	r0, r6
   140de:	f7ff ff6d 	bl	13fbc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   140e2:	f3bf 8f5b 	dmb	ish
   140e6:	e855 3f00 	ldrex	r3, [r5]
   140ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   140ee:	e845 3200 	strex	r2, r3, [r5]
   140f2:	2a00      	cmp	r2, #0
   140f4:	d1f7      	bne.n	140e6 <deferred_work+0xc2>
   140f6:	f3bf 8f5b 	dmb	ish
   140fa:	e7bd      	b.n	14078 <deferred_work+0x54>
   140fc:	20001ca8 	.word	0x20001ca8
   14100:	0002034c 	.word	0x0002034c
   14104:	0002034c 	.word	0x0002034c
   14108:	00021512 	.word	0x00021512
   1410c:	00020a75 	.word	0x00020a75
   14110:	0002152d 	.word	0x0002152d
   14114:	000214e2 	.word	0x000214e2

00014118 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   14118:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1411a:	4801      	ldr	r0, [pc, #4]	; (14120 <bt_conn_create_frag_timeout+0x8>)
   1411c:	f7ff bd7c 	b.w	13c18 <bt_conn_create_pdu_timeout>
   14120:	2000070c 	.word	0x2000070c

00014124 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   14124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14128:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1412a:	f04f 33ff 	mov.w	r3, #4294967295
   1412e:	f04f 32ff 	mov.w	r2, #4294967295
   14132:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   14134:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   14136:	f7ff ffef 	bl	14118 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1413a:	7833      	ldrb	r3, [r6, #0]
   1413c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1413e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14140:	f04f 0600 	mov.w	r6, #0
   14144:	d005      	beq.n	14152 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   14146:	f002 f869 	bl	1621c <net_buf_unref>
		return NULL;
   1414a:	4635      	mov	r5, r6
}
   1414c:	4628      	mov	r0, r5
   1414e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   14152:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14154:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   14158:	4e0c      	ldr	r6, [pc, #48]	; (1418c <create_frag.isra.0+0x68>)
   1415a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1415c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   14160:	f00b f95d 	bl	1f41e <net_buf_simple_tailroom>
   14164:	4580      	cmp	r8, r0
   14166:	d20c      	bcs.n	14182 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   14168:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1416c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   14170:	4632      	mov	r2, r6
   14172:	4638      	mov	r0, r7
   14174:	f00b f95b 	bl	1f42e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   14178:	4631      	mov	r1, r6
   1417a:	4620      	mov	r0, r4
   1417c:	f002 f93c 	bl	163f8 <net_buf_simple_pull>
   14180:	e7e4      	b.n	1414c <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   14182:	4638      	mov	r0, r7
   14184:	f00b f94b 	bl	1f41e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   14188:	b286      	uxth	r6, r0
   1418a:	e7ef      	b.n	1416c <create_frag.isra.0+0x48>
   1418c:	200002a0 	.word	0x200002a0

00014190 <bt_conn_process_tx>:
{
   14190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14192:	7a83      	ldrb	r3, [r0, #10]
{
   14194:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   14196:	b993      	cbnz	r3, 141be <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14198:	f3bf 8f5b 	dmb	ish
   1419c:	1d03      	adds	r3, r0, #4
   1419e:	e853 2f00 	ldrex	r2, [r3]
   141a2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   141a6:	e843 1400 	strex	r4, r1, [r3]
   141aa:	2c00      	cmp	r4, #0
   141ac:	d1f7      	bne.n	1419e <bt_conn_process_tx+0xe>
   141ae:	f3bf 8f5b 	dmb	ish
   141b2:	0653      	lsls	r3, r2, #25
   141b4:	d503      	bpl.n	141be <bt_conn_process_tx+0x2e>
}
   141b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   141ba:	f7ff bb4b 	b.w	13854 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   141be:	2200      	movs	r2, #0
   141c0:	2300      	movs	r3, #0
   141c2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   141c6:	f001 ff97 	bl	160f8 <net_buf_get>
	BT_ASSERT(buf);
   141ca:	4604      	mov	r4, r0
   141cc:	b960      	cbnz	r0, 141e8 <bt_conn_process_tx+0x58>
   141ce:	4a20      	ldr	r2, [pc, #128]	; (14250 <bt_conn_process_tx+0xc0>)
   141d0:	4920      	ldr	r1, [pc, #128]	; (14254 <bt_conn_process_tx+0xc4>)
   141d2:	4821      	ldr	r0, [pc, #132]	; (14258 <bt_conn_process_tx+0xc8>)
   141d4:	f240 23df 	movw	r3, #735	; 0x2df
   141d8:	f008 fe03 	bl	1cde2 <printk>
   141dc:	4040      	eors	r0, r0
   141de:	f380 8811 	msr	BASEPRI, r0
   141e2:	f04f 0003 	mov.w	r0, #3
   141e6:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   141e8:	4f1c      	ldr	r7, [pc, #112]	; (1425c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   141ea:	89a1      	ldrh	r1, [r4, #12]
   141ec:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   141f0:	4291      	cmp	r1, r2
   141f2:	d807      	bhi.n	14204 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   141f4:	2300      	movs	r3, #0
   141f6:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   141f8:	4621      	mov	r1, r4
   141fa:	4628      	mov	r0, r5
   141fc:	f7ff fa52 	bl	136a4 <send_frag>
	if (!send_buf(conn, buf)) {
   14200:	b140      	cbz	r0, 14214 <bt_conn_process_tx+0x84>
}
   14202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   14204:	f105 060a 	add.w	r6, r5, #10
   14208:	4621      	mov	r1, r4
   1420a:	4630      	mov	r0, r6
   1420c:	f7ff ff8a 	bl	14124 <create_frag.isra.0>
	if (!frag) {
   14210:	4601      	mov	r1, r0
   14212:	b920      	cbnz	r0, 1421e <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   14214:	4620      	mov	r0, r4
}
   14216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1421a:	f001 bfff 	b.w	1621c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1421e:	2301      	movs	r3, #1
   14220:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   14222:	4628      	mov	r0, r5
   14224:	f7ff fa3e 	bl	136a4 <send_frag>
   14228:	2800      	cmp	r0, #0
   1422a:	d0f3      	beq.n	14214 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   1422c:	89a2      	ldrh	r2, [r4, #12]
   1422e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   14232:	429a      	cmp	r2, r3
   14234:	d802      	bhi.n	1423c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   14236:	2300      	movs	r3, #0
   14238:	2203      	movs	r2, #3
   1423a:	e7dd      	b.n	141f8 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   1423c:	4621      	mov	r1, r4
   1423e:	4630      	mov	r0, r6
   14240:	f7ff ff70 	bl	14124 <create_frag.isra.0>
		if (!frag) {
   14244:	4601      	mov	r1, r0
   14246:	2800      	cmp	r0, #0
   14248:	d0e4      	beq.n	14214 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1424a:	2301      	movs	r3, #1
   1424c:	461a      	mov	r2, r3
   1424e:	e7e8      	b.n	14222 <bt_conn_process_tx+0x92>
   14250:	000214e2 	.word	0x000214e2
   14254:	00021484 	.word	0x00021484
   14258:	00020a75 	.word	0x00020a75
   1425c:	200002a0 	.word	0x200002a0

00014260 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   14260:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   14262:	4914      	ldr	r1, [pc, #80]	; (142b4 <bt_conn_init+0x54>)
   14264:	4814      	ldr	r0, [pc, #80]	; (142b8 <bt_conn_init+0x58>)
   14266:	f00b fd57 	bl	1fd18 <k_queue_append>
   1426a:	4914      	ldr	r1, [pc, #80]	; (142bc <bt_conn_init+0x5c>)
   1426c:	4812      	ldr	r0, [pc, #72]	; (142b8 <bt_conn_init+0x58>)
   1426e:	f00b fd53 	bl	1fd18 <k_queue_append>
   14272:	4913      	ldr	r1, [pc, #76]	; (142c0 <bt_conn_init+0x60>)
   14274:	4810      	ldr	r0, [pc, #64]	; (142b8 <bt_conn_init+0x58>)
   14276:	f00b fd4f 	bl	1fd18 <k_queue_append>
	}

	bt_att_init();
   1427a:	f00a fc14 	bl	1eaa6 <bt_att_init>

	err = bt_smp_init();
   1427e:	f00b f8ac 	bl	1f3da <bt_smp_init>
	if (err) {
   14282:	4605      	mov	r5, r0
   14284:	b998      	cbnz	r0, 142ae <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   14286:	f009 fff2 	bl	1e26e <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1428a:	480e      	ldr	r0, [pc, #56]	; (142c4 <bt_conn_init+0x64>)
   1428c:	f009 fe08 	bl	1dea0 <bt_conn_ref>

			if (!conn) {
   14290:	4604      	mov	r4, r0
   14292:	b160      	cbz	r0, 142ae <bt_conn_init+0x4e>
   14294:	3004      	adds	r0, #4
   14296:	f009 fd77 	bl	1dd88 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   1429a:	07c3      	lsls	r3, r0, #31
   1429c:	d504      	bpl.n	142a8 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   1429e:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   142a0:	2102      	movs	r1, #2
   142a2:	4620      	mov	r0, r4
   142a4:	f7ff fbc8 	bl	13a38 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   142a8:	4620      	mov	r0, r4
   142aa:	f7ff fb8f 	bl	139cc <bt_conn_unref>
		}
	}

	return 0;
}
   142ae:	4628      	mov	r0, r5
   142b0:	bd38      	pop	{r3, r4, r5, pc}
   142b2:	bf00      	nop
   142b4:	20001cac 	.word	0x20001cac
   142b8:	20000698 	.word	0x20000698
   142bc:	20001cbc 	.word	0x20001cbc
   142c0:	20001ccc 	.word	0x20001ccc
   142c4:	200015d0 	.word	0x200015d0

000142c8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   142c8:	4b04      	ldr	r3, [pc, #16]	; (142dc <l2cap_accept+0x14>)
   142ca:	6818      	ldr	r0, [r3, #0]
   142cc:	b918      	cbnz	r0, 142d6 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   142ce:	4a04      	ldr	r2, [pc, #16]	; (142e0 <l2cap_accept+0x18>)
   142d0:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   142d2:	600b      	str	r3, [r1, #0]

		return 0;
   142d4:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   142d6:	f06f 000b 	mvn.w	r0, #11
}
   142da:	4770      	bx	lr
   142dc:	20001698 	.word	0x20001698
   142e0:	0002052c 	.word	0x0002052c

000142e4 <bt_l2cap_connected>:
{
   142e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   142e8:	4f32      	ldr	r7, [pc, #200]	; (143b4 <bt_l2cap_connected+0xd0>)
   142ea:	4e33      	ldr	r6, [pc, #204]	; (143b8 <bt_l2cap_connected+0xd4>)
   142ec:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 143cc <bt_l2cap_connected+0xe8>
{
   142f0:	4604      	mov	r4, r0
   142f2:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   142f4:	42be      	cmp	r6, r7
   142f6:	d90e      	bls.n	14316 <bt_l2cap_connected+0x32>
   142f8:	4930      	ldr	r1, [pc, #192]	; (143bc <bt_l2cap_connected+0xd8>)
   142fa:	4831      	ldr	r0, [pc, #196]	; (143c0 <bt_l2cap_connected+0xdc>)
   142fc:	f240 1365 	movw	r3, #357	; 0x165
   14300:	4642      	mov	r2, r8
   14302:	f008 fd6e 	bl	1cde2 <printk>
   14306:	482f      	ldr	r0, [pc, #188]	; (143c4 <bt_l2cap_connected+0xe0>)
   14308:	f008 fd6b 	bl	1cde2 <printk>
   1430c:	f240 1165 	movw	r1, #357	; 0x165
   14310:	4640      	mov	r0, r8
   14312:	f008 ffc0 	bl	1d296 <assert_post_action>
   14316:	454e      	cmp	r6, r9
   14318:	d302      	bcc.n	14320 <bt_l2cap_connected+0x3c>
}
   1431a:	b002      	add	sp, #8
   1431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   14320:	6873      	ldr	r3, [r6, #4]
   14322:	a901      	add	r1, sp, #4
   14324:	4620      	mov	r0, r4
   14326:	4798      	blx	r3
   14328:	2800      	cmp	r0, #0
   1432a:	db3d      	blt.n	143a8 <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   1432c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1432e:	8833      	ldrh	r3, [r6, #0]
   14330:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   14334:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   14338:	4923      	ldr	r1, [pc, #140]	; (143c8 <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1433a:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1433e:	f105 0010 	add.w	r0, r5, #16
   14342:	f006 f84b 	bl	1a3dc <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14346:	f3bf 8f5b 	dmb	ish
   1434a:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1434e:	2200      	movs	r2, #0
   14350:	e853 1f00 	ldrex	r1, [r3]
   14354:	e843 2000 	strex	r0, r2, [r3]
   14358:	2800      	cmp	r0, #0
   1435a:	d1f9      	bne.n	14350 <bt_l2cap_connected+0x6c>
   1435c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   14360:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   14362:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   14364:	f105 0308 	add.w	r3, r5, #8
   14368:	bb02      	cbnz	r2, 143ac <bt_l2cap_connected+0xc8>
	list->head = node;
   1436a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   1436e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   14370:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   14372:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   14374:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   14378:	681b      	ldr	r3, [r3, #0]
   1437a:	b103      	cbz	r3, 1437e <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   1437c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1437e:	9b01      	ldr	r3, [sp, #4]
   14380:	f3bf 8f5b 	dmb	ish
   14384:	3368      	adds	r3, #104	; 0x68
   14386:	e853 2f00 	ldrex	r2, [r3]
   1438a:	f042 0201 	orr.w	r2, r2, #1
   1438e:	e843 2100 	strex	r1, r2, [r3]
   14392:	2900      	cmp	r1, #0
   14394:	d1f7      	bne.n	14386 <bt_l2cap_connected+0xa2>
   14396:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1439a:	9801      	ldr	r0, [sp, #4]
   1439c:	6843      	ldr	r3, [r0, #4]
   1439e:	699b      	ldr	r3, [r3, #24]
   143a0:	b113      	cbz	r3, 143a8 <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   143a2:	f100 0168 	add.w	r1, r0, #104	; 0x68
   143a6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   143a8:	360c      	adds	r6, #12
   143aa:	e7a3      	b.n	142f4 <bt_l2cap_connected+0x10>
	parent->next = child;
   143ac:	6013      	str	r3, [r2, #0]
	list->tail = node;
   143ae:	65a3      	str	r3, [r4, #88]	; 0x58
}
   143b0:	e7dd      	b.n	1436e <bt_l2cap_connected+0x8a>
   143b2:	bf00      	nop
   143b4:	0002034c 	.word	0x0002034c
   143b8:	00020328 	.word	0x00020328
   143bc:	000216fa 	.word	0x000216fa
   143c0:	00020a75 	.word	0x00020a75
   143c4:	0002152d 	.word	0x0002152d
   143c8:	0001e073 	.word	0x0001e073
   143cc:	000216c9 	.word	0x000216c9

000143d0 <bt_l2cap_update_conn_param>:
{
   143d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   143d2:	4b17      	ldr	r3, [pc, #92]	; (14430 <bt_l2cap_update_conn_param+0x60>)
   143d4:	781a      	ldrb	r2, [r3, #0]
   143d6:	3201      	adds	r2, #1
	if (!ident) {
   143d8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   143dc:	bf08      	it	eq
   143de:	2201      	moveq	r2, #1
   143e0:	701a      	strb	r2, [r3, #0]
{
   143e2:	4606      	mov	r6, r0
   143e4:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   143e6:	2208      	movs	r2, #8
   143e8:	7819      	ldrb	r1, [r3, #0]
   143ea:	2012      	movs	r0, #18
   143ec:	f009 fdf4 	bl	1dfd8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   143f0:	4604      	mov	r4, r0
   143f2:	b1d0      	cbz	r0, 1442a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   143f4:	2108      	movs	r1, #8
   143f6:	4408      	add	r0, r1
   143f8:	f002 f840 	bl	1647c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   143fc:	882b      	ldrh	r3, [r5, #0]
   143fe:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   14400:	886b      	ldrh	r3, [r5, #2]
   14402:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   14404:	88ab      	ldrh	r3, [r5, #4]
   14406:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   14408:	88eb      	ldrh	r3, [r5, #6]
   1440a:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1440c:	2300      	movs	r3, #0
   1440e:	9300      	str	r3, [sp, #0]
   14410:	4622      	mov	r2, r4
   14412:	2105      	movs	r1, #5
   14414:	4630      	mov	r0, r6
   14416:	f009 fe51 	bl	1e0bc <bt_l2cap_send_cb>
	if (err) {
   1441a:	4605      	mov	r5, r0
   1441c:	b110      	cbz	r0, 14424 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1441e:	4620      	mov	r0, r4
   14420:	f001 fefc 	bl	1621c <net_buf_unref>
}
   14424:	4628      	mov	r0, r5
   14426:	b002      	add	sp, #8
   14428:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1442a:	f06f 050b 	mvn.w	r5, #11
   1442e:	e7f9      	b.n	14424 <bt_l2cap_update_conn_param+0x54>
   14430:	20001fcb 	.word	0x20001fcb

00014434 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   14434:	4b02      	ldr	r3, [pc, #8]	; (14440 <att_cfm_sent+0xc>)
   14436:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1443a:	f009 bf46 	b.w	1e2ca <att_sent>
   1443e:	bf00      	nop
   14440:	0001e7af 	.word	0x0001e7af

00014444 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   14444:	4b02      	ldr	r3, [pc, #8]	; (14450 <att_rsp_sent+0xc>)
   14446:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1444a:	f009 bf3e 	b.w	1e2ca <att_sent>
   1444e:	bf00      	nop
   14450:	0001e7cb 	.word	0x0001e7cb

00014454 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   14454:	4b02      	ldr	r3, [pc, #8]	; (14460 <att_req_sent+0xc>)
   14456:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1445a:	f009 bf36 	b.w	1e2ca <att_sent>
   1445e:	bf00      	nop
   14460:	0001e6f3 	.word	0x0001e6f3

00014464 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   14464:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   14466:	3808      	subs	r0, #8
   14468:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1446a:	a901      	add	r1, sp, #4
   1446c:	4802      	ldr	r0, [pc, #8]	; (14478 <bt_att_released+0x14>)
   1446e:	f004 feb9 	bl	191e4 <k_mem_slab_free>
}
   14472:	b003      	add	sp, #12
   14474:	f85d fb04 	ldr.w	pc, [sp], #4
   14478:	20000600 	.word	0x20000600

0001447c <read_group_cb>:
{
   1447c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14480:	4606      	mov	r6, r0
   14482:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14484:	f04f 0800 	mov.w	r8, #0
   14488:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1448c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1448e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14490:	f88d 8008 	strb.w	r8, [sp, #8]
   14494:	a902      	add	r1, sp, #8
{
   14496:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   14498:	f8ad 300a 	strh.w	r3, [sp, #10]
   1449c:	f009 f911 	bl	1d6c2 <bt_uuid_cmp>
   144a0:	b1a0      	cbz	r0, 144cc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   144a2:	f642 0301 	movw	r3, #10241	; 0x2801
   144a6:	6830      	ldr	r0, [r6, #0]
   144a8:	f88d 800c 	strb.w	r8, [sp, #12]
   144ac:	a903      	add	r1, sp, #12
   144ae:	f8ad 300e 	strh.w	r3, [sp, #14]
   144b2:	f009 f906 	bl	1d6c2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   144b6:	b148      	cbz	r0, 144cc <read_group_cb+0x50>
		if (data->group &&
   144b8:	6923      	ldr	r3, [r4, #16]
   144ba:	b11b      	cbz	r3, 144c4 <read_group_cb+0x48>
   144bc:	885a      	ldrh	r2, [r3, #2]
   144be:	42aa      	cmp	r2, r5
   144c0:	d200      	bcs.n	144c4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   144c2:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   144c4:	2001      	movs	r0, #1
}
   144c6:	b004      	add	sp, #16
   144c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   144cc:	6861      	ldr	r1, [r4, #4]
   144ce:	6830      	ldr	r0, [r6, #0]
   144d0:	f009 f8f7 	bl	1d6c2 <bt_uuid_cmp>
   144d4:	b110      	cbz	r0, 144dc <read_group_cb+0x60>
		data->group = NULL;
   144d6:	2300      	movs	r3, #0
   144d8:	6123      	str	r3, [r4, #16]
   144da:	e7f3      	b.n	144c4 <read_group_cb+0x48>
	if (data->rsp->len &&
   144dc:	68e3      	ldr	r3, [r4, #12]
   144de:	68a0      	ldr	r0, [r4, #8]
   144e0:	781a      	ldrb	r2, [r3, #0]
   144e2:	b13a      	cbz	r2, 144f4 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   144e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   144e8:	8981      	ldrh	r1, [r0, #12]
   144ea:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   144ec:	4293      	cmp	r3, r2
   144ee:	da01      	bge.n	144f4 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   144f0:	2000      	movs	r0, #0
   144f2:	e7e8      	b.n	144c6 <read_group_cb+0x4a>
   144f4:	2104      	movs	r1, #4
   144f6:	3008      	adds	r0, #8
   144f8:	f001 ffc0 	bl	1647c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   144fc:	4b09      	ldr	r3, [pc, #36]	; (14524 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   144fe:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14500:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   14502:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   14504:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   14506:	4631      	mov	r1, r6
   14508:	9300      	str	r3, [sp, #0]
   1450a:	9401      	str	r4, [sp, #4]
   1450c:	2300      	movs	r3, #0
   1450e:	4638      	mov	r0, r7
   14510:	f009 ff7f 	bl	1e412 <att_chan_read>
	if (read < 0) {
   14514:	2800      	cmp	r0, #0
   14516:	dbeb      	blt.n	144f0 <read_group_cb+0x74>
	if (!data->group) {
   14518:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1451a:	3800      	subs	r0, #0
   1451c:	bf18      	it	ne
   1451e:	2001      	movne	r0, #1
   14520:	e7d1      	b.n	144c6 <read_group_cb+0x4a>
   14522:	bf00      	nop
   14524:	0001e651 	.word	0x0001e651

00014528 <read_type_cb>:
{
   14528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1452c:	f8d2 8000 	ldr.w	r8, [r2]
{
   14530:	4606      	mov	r6, r0
   14532:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   14534:	6800      	ldr	r0, [r0, #0]
   14536:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   14538:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1453c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1453e:	f009 f8c0 	bl	1d6c2 <bt_uuid_cmp>
   14542:	4607      	mov	r7, r0
   14544:	2800      	cmp	r0, #0
   14546:	d13e      	bne.n	145c6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   14548:	4628      	mov	r0, r5
   1454a:	2215      	movs	r2, #21
   1454c:	4631      	mov	r1, r6
   1454e:	f00a fe1e 	bl	1f18e <bt_gatt_check_perm>
   14552:	4605      	mov	r5, r0
   14554:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   14556:	b148      	cbz	r0, 1456c <read_type_cb+0x44>
		if (data->rsp->len) {
   14558:	68e3      	ldr	r3, [r4, #12]
   1455a:	781b      	ldrb	r3, [r3, #0]
   1455c:	b923      	cbnz	r3, 14568 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1455e:	2500      	movs	r5, #0
}
   14560:	4628      	mov	r0, r5
   14562:	b003      	add	sp, #12
   14564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   14568:	7527      	strb	r7, [r4, #20]
   1456a:	e7f8      	b.n	1455e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1456c:	68a0      	ldr	r0, [r4, #8]
   1456e:	f001 feb5 	bl	162dc <net_buf_frag_last>
   14572:	2102      	movs	r1, #2
   14574:	3008      	adds	r0, #8
   14576:	f001 ff81 	bl	1647c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1457a:	4b14      	ldr	r3, [pc, #80]	; (145cc <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1457c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1457e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   14580:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   14584:	4631      	mov	r1, r6
   14586:	9300      	str	r3, [sp, #0]
   14588:	9401      	str	r4, [sp, #4]
   1458a:	462b      	mov	r3, r5
   1458c:	4640      	mov	r0, r8
   1458e:	f009 ff40 	bl	1e412 <att_chan_read>
	if (read < 0) {
   14592:	2800      	cmp	r0, #0
   14594:	da07      	bge.n	145a6 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   14596:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1459a:	bf26      	itte	cs
   1459c:	4240      	negcs	r0, r0
   1459e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   145a0:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   145a2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   145a4:	e7dc      	b.n	14560 <read_type_cb+0x38>
	if (!data->item) {
   145a6:	6923      	ldr	r3, [r4, #16]
   145a8:	2b00      	cmp	r3, #0
   145aa:	d0d8      	beq.n	1455e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   145ac:	68a0      	ldr	r0, [r4, #8]
   145ae:	f009 fe84 	bl	1e2ba <net_buf_frags_len>
   145b2:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   145b6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   145b8:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   145ba:	7818      	ldrb	r0, [r3, #0]
   145bc:	4285      	cmp	r5, r0
   145be:	bf94      	ite	ls
   145c0:	2500      	movls	r5, #0
   145c2:	2501      	movhi	r5, #1
   145c4:	e7cc      	b.n	14560 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   145c6:	2501      	movs	r5, #1
   145c8:	e7ca      	b.n	14560 <read_type_cb+0x38>
   145ca:	bf00      	nop
   145cc:	0001e2d7 	.word	0x0001e2d7

000145d0 <chan_send>:
{
   145d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   145d4:	688b      	ldr	r3, [r1, #8]
   145d6:	781b      	ldrb	r3, [r3, #0]
   145d8:	2bd2      	cmp	r3, #210	; 0xd2
{
   145da:	4606      	mov	r6, r0
   145dc:	460c      	mov	r4, r1
   145de:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   145e0:	d10c      	bne.n	145fc <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   145e2:	6803      	ldr	r3, [r0, #0]
   145e4:	6818      	ldr	r0, [r3, #0]
   145e6:	f00a fef5 	bl	1f3d4 <bt_smp_sign>
		if (err) {
   145ea:	4605      	mov	r5, r0
   145ec:	b130      	cbz	r0, 145fc <chan_send+0x2c>
			net_buf_unref(buf);
   145ee:	4620      	mov	r0, r4
   145f0:	f001 fe14 	bl	1621c <net_buf_unref>
}
   145f4:	4628      	mov	r0, r5
   145f6:	b003      	add	sp, #12
   145f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   145fc:	f104 0008 	add.w	r0, r4, #8
   14600:	f00a ff09 	bl	1f416 <net_buf_simple_headroom>
	state->len = buf->len;
   14604:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   14608:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1460a:	b957      	cbnz	r7, 14622 <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   1460c:	68a3      	ldr	r3, [r4, #8]
   1460e:	7818      	ldrb	r0, [r3, #0]
   14610:	f009 fe73 	bl	1e2fa <att_op_get_type>
   14614:	3801      	subs	r0, #1
   14616:	b2c0      	uxtb	r0, r0
   14618:	2804      	cmp	r0, #4
   1461a:	bf9c      	itt	ls
   1461c:	4b13      	ldrls	r3, [pc, #76]	; (1466c <chan_send+0x9c>)
   1461e:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14622:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   14624:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14628:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   1462a:	4b11      	ldr	r3, [pc, #68]	; (14670 <chan_send+0xa0>)
   1462c:	429f      	cmp	r7, r3
   1462e:	d018      	beq.n	14662 <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   14630:	4b10      	ldr	r3, [pc, #64]	; (14674 <chan_send+0xa4>)
   14632:	429f      	cmp	r7, r3
   14634:	d017      	beq.n	14666 <chan_send+0x96>
		return att_sent;
   14636:	4910      	ldr	r1, [pc, #64]	; (14678 <chan_send+0xa8>)
   14638:	4b10      	ldr	r3, [pc, #64]	; (1467c <chan_send+0xac>)
   1463a:	4a11      	ldr	r2, [pc, #68]	; (14680 <chan_send+0xb0>)
   1463c:	428f      	cmp	r7, r1
   1463e:	bf18      	it	ne
   14640:	4613      	movne	r3, r2
			       &chan->chan.chan);
   14642:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   14644:	9600      	str	r6, [sp, #0]
   14646:	4622      	mov	r2, r4
   14648:	2104      	movs	r1, #4
   1464a:	f009 fd37 	bl	1e0bc <bt_l2cap_send_cb>
	if (err) {
   1464e:	4605      	mov	r5, r0
   14650:	2800      	cmp	r0, #0
   14652:	d0cf      	beq.n	145f4 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   14654:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14656:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1465a:	fa10 f088 	uxtah	r0, r0, r8
   1465e:	60a0      	str	r0, [r4, #8]
}
   14660:	e7c8      	b.n	145f4 <chan_send+0x24>
		return att_rsp_sent;
   14662:	4b08      	ldr	r3, [pc, #32]	; (14684 <chan_send+0xb4>)
   14664:	e7ed      	b.n	14642 <chan_send+0x72>
		return att_cfm_sent;
   14666:	4b08      	ldr	r3, [pc, #32]	; (14688 <chan_send+0xb8>)
   14668:	e7eb      	b.n	14642 <chan_send+0x72>
   1466a:	bf00      	nop
   1466c:	00020550 	.word	0x00020550
   14670:	0001e7cb 	.word	0x0001e7cb
   14674:	0001e7af 	.word	0x0001e7af
   14678:	0001e6f3 	.word	0x0001e6f3
   1467c:	00014455 	.word	0x00014455
   14680:	0001e2cb 	.word	0x0001e2cb
   14684:	00014445 	.word	0x00014445
   14688:	00014435 	.word	0x00014435

0001468c <bt_att_chan_req_send>:
{
   1468c:	b538      	push	{r3, r4, r5, lr}
   1468e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   14690:	4604      	mov	r4, r0
   14692:	b958      	cbnz	r0, 146ac <bt_att_chan_req_send+0x20>
   14694:	491d      	ldr	r1, [pc, #116]	; (1470c <bt_att_chan_req_send+0x80>)
   14696:	481e      	ldr	r0, [pc, #120]	; (14710 <bt_att_chan_req_send+0x84>)
   14698:	4a1e      	ldr	r2, [pc, #120]	; (14714 <bt_att_chan_req_send+0x88>)
   1469a:	f240 2332 	movw	r3, #562	; 0x232
   1469e:	f008 fba0 	bl	1cde2 <printk>
   146a2:	481c      	ldr	r0, [pc, #112]	; (14714 <bt_att_chan_req_send+0x88>)
   146a4:	f240 2132 	movw	r1, #562	; 0x232
   146a8:	f008 fdf5 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(req);
   146ac:	b95d      	cbnz	r5, 146c6 <bt_att_chan_req_send+0x3a>
   146ae:	491a      	ldr	r1, [pc, #104]	; (14718 <bt_att_chan_req_send+0x8c>)
   146b0:	4817      	ldr	r0, [pc, #92]	; (14710 <bt_att_chan_req_send+0x84>)
   146b2:	4a18      	ldr	r2, [pc, #96]	; (14714 <bt_att_chan_req_send+0x88>)
   146b4:	f240 2333 	movw	r3, #563	; 0x233
   146b8:	f008 fb93 	bl	1cde2 <printk>
   146bc:	4815      	ldr	r0, [pc, #84]	; (14714 <bt_att_chan_req_send+0x88>)
   146be:	f240 2133 	movw	r1, #563	; 0x233
   146c2:	f008 fde8 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   146c6:	686b      	ldr	r3, [r5, #4]
   146c8:	b95b      	cbnz	r3, 146e2 <bt_att_chan_req_send+0x56>
   146ca:	4914      	ldr	r1, [pc, #80]	; (1471c <bt_att_chan_req_send+0x90>)
   146cc:	4810      	ldr	r0, [pc, #64]	; (14710 <bt_att_chan_req_send+0x84>)
   146ce:	4a11      	ldr	r2, [pc, #68]	; (14714 <bt_att_chan_req_send+0x88>)
   146d0:	f44f 730d 	mov.w	r3, #564	; 0x234
   146d4:	f008 fb85 	bl	1cde2 <printk>
   146d8:	480e      	ldr	r0, [pc, #56]	; (14714 <bt_att_chan_req_send+0x88>)
   146da:	f44f 710d 	mov.w	r1, #564	; 0x234
   146de:	f008 fdda 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   146e2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   146e6:	b15b      	cbz	r3, 14700 <bt_att_chan_req_send+0x74>
   146e8:	490d      	ldr	r1, [pc, #52]	; (14720 <bt_att_chan_req_send+0x94>)
   146ea:	4809      	ldr	r0, [pc, #36]	; (14710 <bt_att_chan_req_send+0x84>)
   146ec:	4a09      	ldr	r2, [pc, #36]	; (14714 <bt_att_chan_req_send+0x88>)
   146ee:	f240 2335 	movw	r3, #565	; 0x235
   146f2:	f008 fb76 	bl	1cde2 <printk>
   146f6:	4807      	ldr	r0, [pc, #28]	; (14714 <bt_att_chan_req_send+0x88>)
   146f8:	f240 2135 	movw	r1, #565	; 0x235
   146fc:	f008 fdcb 	bl	1d296 <assert_post_action>
	return chan_req_send(chan, req);
   14700:	4629      	mov	r1, r5
   14702:	4620      	mov	r0, r4
}
   14704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   14708:	f009 bfb2 	b.w	1e670 <chan_req_send>
   1470c:	00021750 	.word	0x00021750
   14710:	00020a75 	.word	0x00020a75
   14714:	00021721 	.word	0x00021721
   14718:	00021766 	.word	0x00021766
   1471c:	00021755 	.word	0x00021755
   14720:	0002175f 	.word	0x0002175f

00014724 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   14724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   14726:	2300      	movs	r3, #0
{
   14728:	4607      	mov	r7, r0
   1472a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1472c:	481f      	ldr	r0, [pc, #124]	; (147ac <bt_att_accept+0x88>)
   1472e:	2200      	movs	r2, #0
   14730:	4669      	mov	r1, sp
   14732:	f004 fceb 	bl	1910c <k_mem_slab_alloc>
   14736:	4604      	mov	r4, r0
   14738:	b120      	cbz	r0, 14744 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1473a:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1473e:	4620      	mov	r0, r4
   14740:	b003      	add	sp, #12
   14742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14744:	4601      	mov	r1, r0
   14746:	2230      	movs	r2, #48	; 0x30
   14748:	9800      	ldr	r0, [sp, #0]
   1474a:	f00b fc5f 	bl	2000c <memset>
	att->conn = conn;
   1474e:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   14750:	4817      	ldr	r0, [pc, #92]	; (147b0 <bt_att_accept+0x8c>)
	list->tail = NULL;
   14752:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   14754:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   14758:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   1475c:	2200      	movs	r2, #0
   1475e:	2300      	movs	r3, #0
   14760:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   14762:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   14764:	f004 fcd2 	bl	1910c <k_mem_slab_alloc>
   14768:	4604      	mov	r4, r0
   1476a:	2800      	cmp	r0, #0
   1476c:	d1e5      	bne.n	1473a <bt_att_accept+0x16>
   1476e:	4601      	mov	r1, r0
   14770:	f44f 72ac 	mov.w	r2, #344	; 0x158
   14774:	9801      	ldr	r0, [sp, #4]
   14776:	f00b fc49 	bl	2000c <memset>
	chan->chan.chan.ops = &ops;
   1477a:	9801      	ldr	r0, [sp, #4]
   1477c:	4b0d      	ldr	r3, [pc, #52]	; (147b4 <bt_att_accept+0x90>)
   1477e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   14780:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14784:	f00b fabb 	bl	1fcfe <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14788:	9b01      	ldr	r3, [sp, #4]
   1478a:	f3bf 8f5b 	dmb	ish
   1478e:	33f8      	adds	r3, #248	; 0xf8
   14790:	e853 2f00 	ldrex	r2, [r3]
   14794:	e843 4100 	strex	r1, r4, [r3]
   14798:	2900      	cmp	r1, #0
   1479a:	d1f9      	bne.n	14790 <bt_att_accept+0x6c>
   1479c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   147a0:	9b01      	ldr	r3, [sp, #4]
   147a2:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   147a6:	6033      	str	r3, [r6, #0]
	return 0;
   147a8:	e7c9      	b.n	1473e <bt_att_accept+0x1a>
   147aa:	bf00      	nop
   147ac:	200005e0 	.word	0x200005e0
   147b0:	20000600 	.word	0x20000600
   147b4:	2000047c 	.word	0x2000047c

000147b8 <bt_att_connected>:
{
   147b8:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   147ba:	2104      	movs	r1, #4
{
   147bc:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   147be:	6800      	ldr	r0, [r0, #0]
   147c0:	f009 fd1a 	bl	1e1f8 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   147c4:	4605      	mov	r5, r0
   147c6:	b970      	cbnz	r0, 147e6 <bt_att_connected+0x2e>
   147c8:	491c      	ldr	r1, [pc, #112]	; (1483c <bt_att_connected+0x84>)
   147ca:	4a1d      	ldr	r2, [pc, #116]	; (14840 <bt_att_connected+0x88>)
   147cc:	481d      	ldr	r0, [pc, #116]	; (14844 <bt_att_connected+0x8c>)
   147ce:	f640 2329 	movw	r3, #2601	; 0xa29
   147d2:	f008 fb06 	bl	1cde2 <printk>
   147d6:	481c      	ldr	r0, [pc, #112]	; (14848 <bt_att_connected+0x90>)
   147d8:	f008 fb03 	bl	1cde2 <printk>
   147dc:	4818      	ldr	r0, [pc, #96]	; (14840 <bt_att_connected+0x88>)
   147de:	f640 2129 	movw	r1, #2601	; 0xa29
   147e2:	f008 fd58 	bl	1d296 <assert_post_action>
	struct bt_att *att = att_chan->att;
   147e6:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   147ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   147ec:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   147f0:	b91b      	cbnz	r3, 147fa <bt_att_connected+0x42>
   147f2:	f105 000c 	add.w	r0, r5, #12
   147f6:	f00b fa82 	bl	1fcfe <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   147fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   147fc:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   14800:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   14802:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   14806:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   14808:	b902      	cbnz	r2, 1480c <bt_att_connected+0x54>
	list->tail = node;
   1480a:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1480c:	f3bf 8f5b 	dmb	ish
   14810:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   14814:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   14818:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1481a:	bf58      	it	pl
   1481c:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   1481e:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14820:	bf5c      	itt	pl
   14822:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   14826:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   1482a:	f009 fdac 	bl	1e386 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1482e:	f504 708c 	add.w	r0, r4, #280	; 0x118
   14832:	4906      	ldr	r1, [pc, #24]	; (1484c <bt_att_connected+0x94>)
}
   14834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   14838:	f005 bdd0 	b.w	1a3dc <k_work_init_delayable>
   1483c:	00021750 	.word	0x00021750
   14840:	00021721 	.word	0x00021721
   14844:	00020a75 	.word	0x00020a75
   14848:	0002176a 	.word	0x0002176a
   1484c:	0001eb11 	.word	0x0001eb11

00014850 <att_write_cmd>:
{
   14850:	b5f0      	push	{r4, r5, r6, r7, lr}
   14852:	4604      	mov	r4, r0
   14854:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   14856:	f101 0008 	add.w	r0, r1, #8
   1485a:	460d      	mov	r5, r1
   1485c:	f00a fdd3 	bl	1f406 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14860:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   14862:	68af      	ldr	r7, [r5, #8]
   14864:	89ad      	ldrh	r5, [r5, #12]
   14866:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14868:	2100      	movs	r1, #0
   1486a:	6818      	ldr	r0, [r3, #0]
   1486c:	f00a fd5a 	bl	1f324 <bt_gatt_change_aware>
   14870:	b328      	cbz	r0, 148be <att_write_cmd+0x6e>
	if (!handle) {
   14872:	b336      	cbz	r6, 148c2 <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   14874:	2214      	movs	r2, #20
   14876:	2100      	movs	r1, #0
   14878:	a801      	add	r0, sp, #4
   1487a:	f00b fbc7 	bl	2000c <memset>
	data.conn = chan->att->conn;
   1487e:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14880:	4a11      	ldr	r2, [pc, #68]	; (148c8 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   14882:	681b      	ldr	r3, [r3, #0]
   14884:	9300      	str	r3, [sp, #0]
	data.req = req;
   14886:	2300      	movs	r3, #0
   14888:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   1488c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14890:	2301      	movs	r3, #1
   14892:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14896:	4631      	mov	r1, r6
   14898:	466b      	mov	r3, sp
   1489a:	4630      	mov	r0, r6
	data.value = value;
   1489c:	9703      	str	r7, [sp, #12]
	data.len = len;
   1489e:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   148a2:	f009 fdab 	bl	1e3fc <bt_gatt_foreach_attr>
	if (data.err) {
   148a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   148aa:	b92b      	cbnz	r3, 148b8 <att_write_cmd+0x68>
	if (data.buf) {
   148ac:	9901      	ldr	r1, [sp, #4]
   148ae:	b119      	cbz	r1, 148b8 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   148b0:	4a06      	ldr	r2, [pc, #24]	; (148cc <att_write_cmd+0x7c>)
   148b2:	4620      	mov	r0, r4
   148b4:	f009 ff0f 	bl	1e6d6 <bt_att_chan_send_rsp>
   148b8:	2000      	movs	r0, #0
}
   148ba:	b007      	add	sp, #28
   148bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   148be:	2012      	movs	r0, #18
   148c0:	e7fb      	b.n	148ba <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   148c2:	2001      	movs	r0, #1
   148c4:	e7f9      	b.n	148ba <att_write_cmd+0x6a>
   148c6:	bf00      	nop
   148c8:	0001e8b3 	.word	0x0001e8b3
   148cc:	0001e7cb 	.word	0x0001e7cb

000148d0 <att_indicate>:
{
   148d0:	b570      	push	{r4, r5, r6, lr}
   148d2:	4604      	mov	r4, r0
   148d4:	f101 0008 	add.w	r0, r1, #8
   148d8:	460d      	mov	r5, r1
   148da:	f00a fd94 	bl	1f406 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   148de:	6826      	ldr	r6, [r4, #0]
   148e0:	89ab      	ldrh	r3, [r5, #12]
   148e2:	68aa      	ldr	r2, [r5, #8]
   148e4:	4601      	mov	r1, r0
   148e6:	6830      	ldr	r0, [r6, #0]
   148e8:	f00a fca7 	bl	1f23a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   148ec:	211e      	movs	r1, #30
   148ee:	2200      	movs	r2, #0
   148f0:	4620      	mov	r0, r4
   148f2:	f00a f873 	bl	1e9dc <bt_att_chan_create_pdu>
	if (!buf) {
   148f6:	4601      	mov	r1, r0
   148f8:	b118      	cbz	r0, 14902 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   148fa:	4a03      	ldr	r2, [pc, #12]	; (14908 <att_indicate+0x38>)
   148fc:	4620      	mov	r0, r4
   148fe:	f009 feea 	bl	1e6d6 <bt_att_chan_send_rsp>
}
   14902:	2000      	movs	r0, #0
   14904:	bd70      	pop	{r4, r5, r6, pc}
   14906:	bf00      	nop
   14908:	0001e7af 	.word	0x0001e7af

0001490c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14910:	4688      	mov	r8, r1
   14912:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   14914:	2101      	movs	r1, #1
   14916:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   14918:	4605      	mov	r5, r0
   1491a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1491c:	f00a f85e 	bl	1e9dc <bt_att_chan_create_pdu>
	if (!buf) {
   14920:	4604      	mov	r4, r0
   14922:	b178      	cbz	r0, 14944 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   14924:	2104      	movs	r1, #4
   14926:	3008      	adds	r0, #8
   14928:	f001 fda8 	bl	1647c <net_buf_simple_add>
	rsp->request = req;
   1492c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   14930:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   14932:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   14936:	4621      	mov	r1, r4
   14938:	4628      	mov	r0, r5
   1493a:	4a03      	ldr	r2, [pc, #12]	; (14948 <send_err_rsp.part.0+0x3c>)
}
   1493c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   14940:	f009 bec9 	b.w	1e6d6 <bt_att_chan_send_rsp>
}
   14944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14948:	0001e7cb 	.word	0x0001e7cb

0001494c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1494c:	898b      	ldrh	r3, [r1, #12]
{
   1494e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14952:	4604      	mov	r4, r0
   14954:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   14956:	2b00      	cmp	r3, #0
   14958:	d05e      	beq.n	14a18 <bt_att_recv+0xcc>
	return net_buf_simple_pull_mem(&buf->b, len);
   1495a:	2101      	movs	r1, #1
   1495c:	f105 0008 	add.w	r0, r5, #8
   14960:	f001 fd6a 	bl	16438 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   14964:	f854 3c08 	ldr.w	r3, [r4, #-8]
   14968:	4607      	mov	r7, r0
   1496a:	2b00      	cmp	r3, #0
   1496c:	d054      	beq.n	14a18 <bt_att_recv+0xcc>
		if (hdr->code == handlers[i].op) {
   1496e:	4a2e      	ldr	r2, [pc, #184]	; (14a28 <bt_att_recv+0xdc>)
   14970:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   14972:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   14976:	2300      	movs	r3, #0
   14978:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1497a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1497e:	4288      	cmp	r0, r1
   14980:	d11a      	bne.n	149b8 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   14982:	00d9      	lsls	r1, r3, #3
   14984:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   14988:	f893 8002 	ldrb.w	r8, [r3, #2]
   1498c:	f1b8 0f01 	cmp.w	r8, #1
   14990:	d020      	beq.n	149d4 <bt_att_recv+0x88>
		} else if (handler->type == ATT_INDICATION &&
   14992:	f1b8 0f05 	cmp.w	r8, #5
   14996:	d12d      	bne.n	149f4 <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14998:	f3bf 8f5b 	dmb	ish
   1499c:	34f0      	adds	r4, #240	; 0xf0
   1499e:	e854 2f00 	ldrex	r2, [r4]
   149a2:	f042 0302 	orr.w	r3, r2, #2
   149a6:	e844 3000 	strex	r0, r3, [r4]
   149aa:	2800      	cmp	r0, #0
   149ac:	d1f7      	bne.n	1499e <bt_att_recv+0x52>
   149ae:	f3bf 8f5b 	dmb	ish
   149b2:	f012 0f02 	tst.w	r2, #2
   149b6:	e01c      	b.n	149f2 <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   149b8:	3301      	adds	r3, #1
   149ba:	2b1c      	cmp	r3, #28
   149bc:	d1dd      	bne.n	1497a <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   149be:	4608      	mov	r0, r1
   149c0:	f009 fc9b 	bl	1e2fa <att_op_get_type>
   149c4:	b340      	cbz	r0, 14a18 <bt_att_recv+0xcc>
	if (!req) {
   149c6:	b339      	cbz	r1, 14a18 <bt_att_recv+0xcc>
   149c8:	2306      	movs	r3, #6
   149ca:	2200      	movs	r2, #0
   149cc:	4630      	mov	r0, r6
   149ce:	f7ff ff9d 	bl	1490c <send_err_rsp.part.0>
   149d2:	e021      	b.n	14a18 <bt_att_recv+0xcc>
   149d4:	34f0      	adds	r4, #240	; 0xf0
   149d6:	f3bf 8f5b 	dmb	ish
   149da:	e854 3f00 	ldrex	r3, [r4]
   149de:	f043 0201 	orr.w	r2, r3, #1
   149e2:	e844 2000 	strex	r0, r2, [r4]
   149e6:	2800      	cmp	r0, #0
   149e8:	d1f7      	bne.n	149da <bt_att_recv+0x8e>
   149ea:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   149ee:	f013 0f01 	tst.w	r3, #1
   149f2:	d111      	bne.n	14a18 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
   149f4:	eb0c 0301 	add.w	r3, ip, r1
   149f8:	89a9      	ldrh	r1, [r5, #12]
   149fa:	785a      	ldrb	r2, [r3, #1]
   149fc:	4291      	cmp	r1, r2
   149fe:	d30e      	bcc.n	14a1e <bt_att_recv+0xd2>
		err = handler->func(att_chan, buf);
   14a00:	685b      	ldr	r3, [r3, #4]
   14a02:	4629      	mov	r1, r5
   14a04:	4630      	mov	r0, r6
   14a06:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   14a08:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   14a0c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   14a0e:	d103      	bne.n	14a18 <bt_att_recv+0xcc>
   14a10:	b110      	cbz	r0, 14a18 <bt_att_recv+0xcc>
		send_err_rsp(att_chan, hdr->code, 0, err);
   14a12:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   14a14:	2900      	cmp	r1, #0
   14a16:	d1d8      	bne.n	149ca <bt_att_recv+0x7e>
}
   14a18:	2000      	movs	r0, #0
   14a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   14a1e:	f1b8 0f01 	cmp.w	r8, #1
   14a22:	d1f9      	bne.n	14a18 <bt_att_recv+0xcc>
		err = BT_ATT_ERR_INVALID_PDU;
   14a24:	2304      	movs	r3, #4
   14a26:	e7f4      	b.n	14a12 <bt_att_recv+0xc6>
   14a28:	00020564 	.word	0x00020564

00014a2c <att_write_req>:
{
   14a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14a30:	4604      	mov	r4, r0
   14a32:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   14a34:	f101 0008 	add.w	r0, r1, #8
   14a38:	460d      	mov	r5, r1
   14a3a:	f00a fce4 	bl	1f406 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14a3e:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   14a40:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   14a44:	89ad      	ldrh	r5, [r5, #12]
   14a46:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   14a48:	2101      	movs	r1, #1
   14a4a:	6818      	ldr	r0, [r3, #0]
   14a4c:	f00a fc6a 	bl	1f324 <bt_gatt_change_aware>
   14a50:	2800      	cmp	r0, #0
   14a52:	d040      	beq.n	14ad6 <att_write_req+0xaa>
	if (!handle) {
   14a54:	2e00      	cmp	r6, #0
   14a56:	d040      	beq.n	14ada <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   14a58:	2218      	movs	r2, #24
   14a5a:	2100      	movs	r1, #0
   14a5c:	4668      	mov	r0, sp
   14a5e:	f00b fad5 	bl	2000c <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   14a62:	2200      	movs	r2, #0
   14a64:	2113      	movs	r1, #19
   14a66:	4620      	mov	r0, r4
   14a68:	f009 ffb8 	bl	1e9dc <bt_att_chan_create_pdu>
   14a6c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   14a6e:	b380      	cbz	r0, 14ad2 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   14a70:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14a72:	4a1b      	ldr	r2, [pc, #108]	; (14ae0 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   14a74:	681b      	ldr	r3, [r3, #0]
   14a76:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14a78:	2301      	movs	r3, #1
   14a7a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   14a7e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   14a82:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14a84:	466b      	mov	r3, sp
   14a86:	4631      	mov	r1, r6
   14a88:	4630      	mov	r0, r6
	data.len = len;
   14a8a:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   14a8e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   14a92:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   14a96:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   14a9a:	f009 fcaf 	bl	1e3fc <bt_gatt_foreach_attr>
	if (data.err) {
   14a9e:	f89d 5014 	ldrb.w	r5, [sp, #20]
   14aa2:	b175      	cbz	r5, 14ac2 <att_write_req+0x96>
			net_buf_unref(data.buf);
   14aa4:	9801      	ldr	r0, [sp, #4]
   14aa6:	f001 fbb9 	bl	1621c <net_buf_unref>
	if (!req) {
   14aaa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   14aae:	4632      	mov	r2, r6
   14ab0:	4641      	mov	r1, r8
   14ab2:	4620      	mov	r0, r4
   14ab4:	f7ff ff2a 	bl	1490c <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   14ab8:	463d      	mov	r5, r7
}
   14aba:	4628      	mov	r0, r5
   14abc:	b007      	add	sp, #28
   14abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   14ac2:	9901      	ldr	r1, [sp, #4]
   14ac4:	2900      	cmp	r1, #0
   14ac6:	d0f8      	beq.n	14aba <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14ac8:	4a06      	ldr	r2, [pc, #24]	; (14ae4 <att_write_req+0xb8>)
   14aca:	4620      	mov	r0, r4
   14acc:	f009 fe03 	bl	1e6d6 <bt_att_chan_send_rsp>
   14ad0:	e7f3      	b.n	14aba <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   14ad2:	250e      	movs	r5, #14
   14ad4:	e7f1      	b.n	14aba <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14ad6:	2512      	movs	r5, #18
   14ad8:	e7ef      	b.n	14aba <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   14ada:	2501      	movs	r5, #1
   14adc:	e7ed      	b.n	14aba <att_write_req+0x8e>
   14ade:	bf00      	nop
   14ae0:	0001e8b3 	.word	0x0001e8b3
   14ae4:	0001e7cb 	.word	0x0001e7cb

00014ae8 <att_read_group_req>:
{
   14ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14aec:	7b0c      	ldrb	r4, [r1, #12]
   14aee:	3c04      	subs	r4, #4
   14af0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   14af2:	2c02      	cmp	r4, #2
{
   14af4:	4605      	mov	r5, r0
   14af6:	b08c      	sub	sp, #48	; 0x30
   14af8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14afa:	d001      	beq.n	14b00 <att_read_group_req+0x18>
   14afc:	2c10      	cmp	r4, #16
   14afe:	d16f      	bne.n	14be0 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   14b00:	2104      	movs	r1, #4
   14b02:	3008      	adds	r0, #8
   14b04:	f001 fc98 	bl	16438 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14b08:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   14b0c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14b0e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14b10:	1d01      	adds	r1, r0, #4
   14b12:	4622      	mov	r2, r4
   14b14:	4640      	mov	r0, r8
   14b16:	f008 fdfe 	bl	1d716 <bt_uuid_create>
   14b1a:	2800      	cmp	r0, #0
   14b1c:	d062      	beq.n	14be4 <att_read_group_req+0xfc>
	if (!start || !end) {
   14b1e:	2e00      	cmp	r6, #0
   14b20:	d03a      	beq.n	14b98 <att_read_group_req+0xb0>
   14b22:	2400      	movs	r4, #0
   14b24:	2f00      	cmp	r7, #0
   14b26:	d036      	beq.n	14b96 <att_read_group_req+0xae>
	if (start > end) {
   14b28:	42be      	cmp	r6, r7
   14b2a:	d835      	bhi.n	14b98 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14b2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14b30:	a901      	add	r1, sp, #4
   14b32:	4640      	mov	r0, r8
   14b34:	f88d 4004 	strb.w	r4, [sp, #4]
   14b38:	f8ad 3006 	strh.w	r3, [sp, #6]
   14b3c:	f008 fdc1 	bl	1d6c2 <bt_uuid_cmp>
   14b40:	2800      	cmp	r0, #0
   14b42:	d134      	bne.n	14bae <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   14b44:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   14b46:	2214      	movs	r2, #20
   14b48:	2100      	movs	r1, #0
   14b4a:	a807      	add	r0, sp, #28
   14b4c:	f00b fa5e 	bl	2000c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   14b50:	2201      	movs	r2, #1
   14b52:	2111      	movs	r1, #17
   14b54:	4620      	mov	r0, r4
   14b56:	f009 ff66 	bl	1ea26 <bt_att_create_pdu>
   14b5a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   14b5c:	2800      	cmp	r0, #0
   14b5e:	d041      	beq.n	14be4 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   14b60:	2101      	movs	r1, #1
   14b62:	3008      	adds	r0, #8
	data.uuid = uuid;
   14b64:	e9cd 5807 	strd	r5, r8, [sp, #28]
   14b68:	f001 fc88 	bl	1647c <net_buf_simple_add>
	data.rsp->len = 0U;
   14b6c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   14b70:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14b72:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   14b74:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14b78:	4a1b      	ldr	r2, [pc, #108]	; (14be8 <att_read_group_req+0x100>)
	data.group = NULL;
   14b7a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14b7e:	4639      	mov	r1, r7
   14b80:	4630      	mov	r0, r6
   14b82:	f009 fc3b 	bl	1e3fc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   14b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14b88:	781c      	ldrb	r4, [r3, #0]
   14b8a:	bb1c      	cbnz	r4, 14bd4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   14b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14b8e:	f001 fb45 	bl	1621c <net_buf_unref>
	if (!req) {
   14b92:	230a      	movs	r3, #10
   14b94:	e018      	b.n	14bc8 <att_read_group_req+0xe0>
			*err = 0U;
   14b96:	463e      	mov	r6, r7
	if (!req) {
   14b98:	2301      	movs	r3, #1
   14b9a:	4632      	mov	r2, r6
   14b9c:	2110      	movs	r1, #16
   14b9e:	4628      	mov	r0, r5
   14ba0:	f7ff feb4 	bl	1490c <send_err_rsp.part.0>
		return 0;
   14ba4:	2400      	movs	r4, #0
}
   14ba6:	4620      	mov	r0, r4
   14ba8:	b00c      	add	sp, #48	; 0x30
   14baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   14bae:	f642 0301 	movw	r3, #10241	; 0x2801
   14bb2:	a907      	add	r1, sp, #28
   14bb4:	4640      	mov	r0, r8
   14bb6:	f88d 401c 	strb.w	r4, [sp, #28]
   14bba:	f8ad 301e 	strh.w	r3, [sp, #30]
   14bbe:	f008 fd80 	bl	1d6c2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   14bc2:	2800      	cmp	r0, #0
   14bc4:	d0be      	beq.n	14b44 <att_read_group_req+0x5c>
	if (!req) {
   14bc6:	2310      	movs	r3, #16
   14bc8:	4632      	mov	r2, r6
   14bca:	2110      	movs	r1, #16
   14bcc:	4628      	mov	r0, r5
   14bce:	f7ff fe9d 	bl	1490c <send_err_rsp.part.0>
		return 0;
   14bd2:	e7e8      	b.n	14ba6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14bd4:	4a05      	ldr	r2, [pc, #20]	; (14bec <att_read_group_req+0x104>)
   14bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
   14bd8:	4628      	mov	r0, r5
   14bda:	f009 fd7c 	bl	1e6d6 <bt_att_chan_send_rsp>
	return 0;
   14bde:	e7e1      	b.n	14ba4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   14be0:	2404      	movs	r4, #4
   14be2:	e7e0      	b.n	14ba6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   14be4:	240e      	movs	r4, #14
   14be6:	e7de      	b.n	14ba6 <att_read_group_req+0xbe>
   14be8:	0001447d 	.word	0x0001447d
   14bec:	0001e7cb 	.word	0x0001e7cb

00014bf0 <att_read_mult_req>:
{
   14bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14bf4:	6886      	ldr	r6, [r0, #8]
{
   14bf6:	b085      	sub	sp, #20
   14bf8:	4604      	mov	r4, r0
   14bfa:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14bfc:	4630      	mov	r0, r6
   14bfe:	2101      	movs	r1, #1
   14c00:	f00a fb90 	bl	1f324 <bt_gatt_change_aware>
   14c04:	2800      	cmp	r0, #0
   14c06:	d038      	beq.n	14c7a <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   14c08:	2210      	movs	r2, #16
   14c0a:	2100      	movs	r1, #0
   14c0c:	4668      	mov	r0, sp
   14c0e:	f00b f9fd 	bl	2000c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   14c12:	2200      	movs	r2, #0
   14c14:	210f      	movs	r1, #15
   14c16:	4630      	mov	r0, r6
   14c18:	f009 ff05 	bl	1ea26 <bt_att_create_pdu>
   14c1c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14c1e:	b370      	cbz	r0, 14c7e <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14c20:	f8df 9064 	ldr.w	r9, [pc, #100]	; 14c88 <att_read_mult_req+0x98>
	data.chan = chan;
   14c24:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   14c26:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14c2a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   14c2e:	89ab      	ldrh	r3, [r5, #12]
   14c30:	2b01      	cmp	r3, #1
   14c32:	d805      	bhi.n	14c40 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14c34:	4a13      	ldr	r2, [pc, #76]	; (14c84 <att_read_mult_req+0x94>)
   14c36:	9902      	ldr	r1, [sp, #8]
   14c38:	4620      	mov	r0, r4
   14c3a:	f009 fd4c 	bl	1e6d6 <bt_att_chan_send_rsp>
   14c3e:	e018      	b.n	14c72 <att_read_mult_req+0x82>
   14c40:	4638      	mov	r0, r7
   14c42:	f00a fbe0 	bl	1f406 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14c46:	466b      	mov	r3, sp
   14c48:	464a      	mov	r2, r9
   14c4a:	4601      	mov	r1, r0
   14c4c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   14c4e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14c52:	f009 fbd3 	bl	1e3fc <bt_gatt_foreach_attr>
		if (data.err) {
   14c56:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14c5a:	2b00      	cmp	r3, #0
   14c5c:	d0e7      	beq.n	14c2e <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   14c5e:	9802      	ldr	r0, [sp, #8]
   14c60:	f001 fadc 	bl	1621c <net_buf_unref>
	if (!req) {
   14c64:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14c68:	4632      	mov	r2, r6
   14c6a:	210e      	movs	r1, #14
   14c6c:	4620      	mov	r0, r4
   14c6e:	f7ff fe4d 	bl	1490c <send_err_rsp.part.0>
	return 0;
   14c72:	2000      	movs	r0, #0
}
   14c74:	b005      	add	sp, #20
   14c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14c7a:	2012      	movs	r0, #18
   14c7c:	e7fa      	b.n	14c74 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   14c7e:	200e      	movs	r0, #14
   14c80:	e7f8      	b.n	14c74 <att_read_mult_req+0x84>
   14c82:	bf00      	nop
   14c84:	0001e7cb 	.word	0x0001e7cb
   14c88:	0001e989 	.word	0x0001e989

00014c8c <att_read_rsp>:
{
   14c8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14c90:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   14c94:	4605      	mov	r5, r0
   14c96:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14c98:	4640      	mov	r0, r8
   14c9a:	2101      	movs	r1, #1
{
   14c9c:	4614      	mov	r4, r2
   14c9e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   14ca0:	f00a fb40 	bl	1f324 <bt_gatt_change_aware>
   14ca4:	b390      	cbz	r0, 14d0c <att_read_rsp+0x80>
	if (!handle) {
   14ca6:	b39e      	cbz	r6, 14d10 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   14ca8:	2210      	movs	r2, #16
   14caa:	2100      	movs	r1, #0
   14cac:	4668      	mov	r0, sp
   14cae:	f00b f9ad 	bl	2000c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   14cb2:	2200      	movs	r2, #0
   14cb4:	4621      	mov	r1, r4
   14cb6:	4640      	mov	r0, r8
   14cb8:	f009 feb5 	bl	1ea26 <bt_att_create_pdu>
   14cbc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14cbe:	b348      	cbz	r0, 14d14 <att_read_rsp+0x88>
	data.offset = offset;
   14cc0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   14cc4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14cc8:	2301      	movs	r3, #1
   14cca:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14cce:	4a12      	ldr	r2, [pc, #72]	; (14d18 <att_read_rsp+0x8c>)
	data.chan = chan;
   14cd0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   14cd2:	466b      	mov	r3, sp
   14cd4:	4631      	mov	r1, r6
   14cd6:	4630      	mov	r0, r6
   14cd8:	f009 fb90 	bl	1e3fc <bt_gatt_foreach_attr>
	if (data.err) {
   14cdc:	f89d 400c 	ldrb.w	r4, [sp, #12]
   14ce0:	b174      	cbz	r4, 14d00 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   14ce2:	9802      	ldr	r0, [sp, #8]
   14ce4:	f001 fa9a 	bl	1621c <net_buf_unref>
	if (!req) {
   14ce8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14cec:	4632      	mov	r2, r6
   14cee:	4639      	mov	r1, r7
   14cf0:	4628      	mov	r0, r5
   14cf2:	f7ff fe0b 	bl	1490c <send_err_rsp.part.0>
		return 0;
   14cf6:	2400      	movs	r4, #0
}
   14cf8:	4620      	mov	r0, r4
   14cfa:	b004      	add	sp, #16
   14cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14d00:	4a06      	ldr	r2, [pc, #24]	; (14d1c <att_read_rsp+0x90>)
   14d02:	9902      	ldr	r1, [sp, #8]
   14d04:	4628      	mov	r0, r5
   14d06:	f009 fce6 	bl	1e6d6 <bt_att_chan_send_rsp>
	return 0;
   14d0a:	e7f5      	b.n	14cf8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14d0c:	2412      	movs	r4, #18
   14d0e:	e7f3      	b.n	14cf8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   14d10:	2401      	movs	r4, #1
   14d12:	e7f1      	b.n	14cf8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   14d14:	240e      	movs	r4, #14
   14d16:	e7ef      	b.n	14cf8 <att_read_rsp+0x6c>
   14d18:	0001e989 	.word	0x0001e989
   14d1c:	0001e7cb 	.word	0x0001e7cb

00014d20 <att_read_type_req>:
{
   14d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14d24:	7b0c      	ldrb	r4, [r1, #12]
   14d26:	3c04      	subs	r4, #4
   14d28:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   14d2a:	2c02      	cmp	r4, #2
{
   14d2c:	4605      	mov	r5, r0
   14d2e:	b08c      	sub	sp, #48	; 0x30
   14d30:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14d32:	d001      	beq.n	14d38 <att_read_type_req+0x18>
   14d34:	2c10      	cmp	r4, #16
   14d36:	d150      	bne.n	14dda <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   14d38:	2104      	movs	r1, #4
   14d3a:	3008      	adds	r0, #8
   14d3c:	f001 fb7c 	bl	16438 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14d40:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   14d44:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14d46:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14d48:	1d01      	adds	r1, r0, #4
   14d4a:	4622      	mov	r2, r4
   14d4c:	4640      	mov	r0, r8
   14d4e:	f008 fce2 	bl	1d716 <bt_uuid_create>
   14d52:	b188      	cbz	r0, 14d78 <att_read_type_req+0x58>
	if (!start || !end) {
   14d54:	b19e      	cbz	r6, 14d7e <att_read_type_req+0x5e>
   14d56:	b18f      	cbz	r7, 14d7c <att_read_type_req+0x5c>
	if (start > end) {
   14d58:	42b7      	cmp	r7, r6
   14d5a:	d310      	bcc.n	14d7e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   14d5c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   14d5e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   14d60:	2100      	movs	r1, #0
   14d62:	eb0d 0002 	add.w	r0, sp, r2
   14d66:	f00b f951 	bl	2000c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   14d6a:	2201      	movs	r2, #1
   14d6c:	2109      	movs	r1, #9
   14d6e:	4620      	mov	r0, r4
   14d70:	f009 fe59 	bl	1ea26 <bt_att_create_pdu>
   14d74:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   14d76:	b968      	cbnz	r0, 14d94 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   14d78:	240e      	movs	r4, #14
   14d7a:	e007      	b.n	14d8c <att_read_type_req+0x6c>
			*err = 0U;
   14d7c:	463e      	mov	r6, r7
	if (!req) {
   14d7e:	2301      	movs	r3, #1
   14d80:	4632      	mov	r2, r6
   14d82:	2108      	movs	r1, #8
   14d84:	4628      	mov	r0, r5
   14d86:	f7ff fdc1 	bl	1490c <send_err_rsp.part.0>
		return 0;
   14d8a:	2400      	movs	r4, #0
}
   14d8c:	4620      	mov	r0, r4
   14d8e:	b00c      	add	sp, #48	; 0x30
   14d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   14d94:	2101      	movs	r1, #1
   14d96:	3008      	adds	r0, #8
	data.uuid = uuid;
   14d98:	e9cd 5806 	strd	r5, r8, [sp, #24]
   14d9c:	f001 fb6e 	bl	1647c <net_buf_simple_add>
	data.rsp->len = 0U;
   14da0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14da4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   14da6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14da8:	4a0d      	ldr	r2, [pc, #52]	; (14de0 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   14daa:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14dae:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14db0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14db4:	4630      	mov	r0, r6
   14db6:	ab06      	add	r3, sp, #24
   14db8:	f009 fb20 	bl	1e3fc <bt_gatt_foreach_attr>
	if (data.err) {
   14dbc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   14dc0:	b12c      	cbz	r4, 14dce <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   14dc2:	9808      	ldr	r0, [sp, #32]
   14dc4:	f001 fa2a 	bl	1621c <net_buf_unref>
	if (!req) {
   14dc8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   14dcc:	e7d8      	b.n	14d80 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14dce:	4a05      	ldr	r2, [pc, #20]	; (14de4 <att_read_type_req+0xc4>)
   14dd0:	9908      	ldr	r1, [sp, #32]
   14dd2:	4628      	mov	r0, r5
   14dd4:	f009 fc7f 	bl	1e6d6 <bt_att_chan_send_rsp>
	return 0;
   14dd8:	e7d8      	b.n	14d8c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   14dda:	2404      	movs	r4, #4
   14ddc:	e7d6      	b.n	14d8c <att_read_type_req+0x6c>
   14dde:	bf00      	nop
   14de0:	00014529 	.word	0x00014529
   14de4:	0001e7cb 	.word	0x0001e7cb

00014de8 <att_find_type_req>:
{
   14de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14dec:	4688      	mov	r8, r1
   14dee:	b086      	sub	sp, #24
   14df0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   14df2:	2106      	movs	r1, #6
   14df4:	f108 0008 	add.w	r0, r8, #8
   14df8:	f001 fb1e 	bl	16438 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   14dfc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   14dfe:	b317      	cbz	r7, 14e46 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   14e00:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   14e04:	f1b9 0f00 	cmp.w	r9, #0
   14e08:	d01c      	beq.n	14e44 <att_find_type_req+0x5c>
	if (start > end) {
   14e0a:	454f      	cmp	r7, r9
   14e0c:	d81b      	bhi.n	14e46 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   14e0e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   14e10:	f8ad 3002 	strh.w	r3, [sp, #2]
   14e14:	2400      	movs	r4, #0
   14e16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14e1a:	a901      	add	r1, sp, #4
   14e1c:	4668      	mov	r0, sp
	value = buf->data;
   14e1e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   14e22:	f88d 4000 	strb.w	r4, [sp]
   14e26:	f88d 4004 	strb.w	r4, [sp, #4]
   14e2a:	f8ad 3006 	strh.w	r3, [sp, #6]
   14e2e:	f008 fc48 	bl	1d6c2 <bt_uuid_cmp>
   14e32:	4606      	mov	r6, r0
   14e34:	b190      	cbz	r0, 14e5c <att_find_type_req+0x74>
	if (!req) {
   14e36:	230a      	movs	r3, #10
   14e38:	463a      	mov	r2, r7
   14e3a:	2106      	movs	r1, #6
   14e3c:	4628      	mov	r0, r5
   14e3e:	f7ff fd65 	bl	1490c <send_err_rsp.part.0>
		return 0;
   14e42:	e007      	b.n	14e54 <att_find_type_req+0x6c>
			*err = 0U;
   14e44:	464f      	mov	r7, r9
	if (!req) {
   14e46:	2301      	movs	r3, #1
   14e48:	463a      	mov	r2, r7
   14e4a:	2106      	movs	r1, #6
   14e4c:	4628      	mov	r0, r5
   14e4e:	f7ff fd5d 	bl	1490c <send_err_rsp.part.0>
		return 0;
   14e52:	2400      	movs	r4, #0
}
   14e54:	4620      	mov	r0, r4
   14e56:	b006      	add	sp, #24
   14e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14e5c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   14e60:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   14e64:	4601      	mov	r1, r0
   14e66:	2214      	movs	r2, #20
   14e68:	a801      	add	r0, sp, #4
   14e6a:	f00b f8cf 	bl	2000c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   14e6e:	4632      	mov	r2, r6
   14e70:	2107      	movs	r1, #7
   14e72:	4640      	mov	r0, r8
   14e74:	f009 fdd7 	bl	1ea26 <bt_att_create_pdu>
   14e78:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   14e7a:	b1e0      	cbz	r0, 14eb6 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14e7c:	230a      	movs	r3, #10
   14e7e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14e82:	4a0e      	ldr	r2, [pc, #56]	; (14ebc <att_find_type_req+0xd4>)
	data.value_len = value_len;
   14e84:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14e88:	ab01      	add	r3, sp, #4
   14e8a:	4649      	mov	r1, r9
   14e8c:	4638      	mov	r0, r7
	data.value = value;
   14e8e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   14e92:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14e94:	f009 fab2 	bl	1e3fc <bt_gatt_foreach_attr>
	if (data.err) {
   14e98:	f89d 4015 	ldrb.w	r4, [sp, #21]
   14e9c:	b12c      	cbz	r4, 14eaa <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   14e9e:	9802      	ldr	r0, [sp, #8]
   14ea0:	f001 f9bc 	bl	1621c <net_buf_unref>
	if (!req) {
   14ea4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14ea8:	e7ce      	b.n	14e48 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14eaa:	4a05      	ldr	r2, [pc, #20]	; (14ec0 <att_find_type_req+0xd8>)
   14eac:	9902      	ldr	r1, [sp, #8]
   14eae:	4628      	mov	r0, r5
   14eb0:	f009 fc11 	bl	1e6d6 <bt_att_chan_send_rsp>
	return 0;
   14eb4:	e7ce      	b.n	14e54 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   14eb6:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14eb8:	e7cc      	b.n	14e54 <att_find_type_req+0x6c>
   14eba:	bf00      	nop
   14ebc:	0001e529 	.word	0x0001e529
   14ec0:	0001e7cb 	.word	0x0001e7cb

00014ec4 <att_find_info_req>:
{
   14ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   14ec6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   14ec8:	881e      	ldrh	r6, [r3, #0]
{
   14eca:	b085      	sub	sp, #20
   14ecc:	4605      	mov	r5, r0
	if (!start || !end) {
   14ece:	b19e      	cbz	r6, 14ef8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   14ed0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   14ed2:	b184      	cbz	r4, 14ef6 <att_find_info_req+0x32>
	if (start > end) {
   14ed4:	42b4      	cmp	r4, r6
   14ed6:	d30f      	bcc.n	14ef8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   14ed8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   14eda:	2210      	movs	r2, #16
   14edc:	2100      	movs	r1, #0
   14ede:	4668      	mov	r0, sp
   14ee0:	f00b f894 	bl	2000c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   14ee4:	2200      	movs	r2, #0
   14ee6:	2105      	movs	r1, #5
   14ee8:	4638      	mov	r0, r7
   14eea:	f009 fd9c 	bl	1ea26 <bt_att_create_pdu>
   14eee:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   14ef0:	b958      	cbnz	r0, 14f0a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   14ef2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   14ef4:	e007      	b.n	14f06 <att_find_info_req+0x42>
			*err = 0U;
   14ef6:	4626      	mov	r6, r4
	if (!req) {
   14ef8:	2301      	movs	r3, #1
   14efa:	4632      	mov	r2, r6
   14efc:	2104      	movs	r1, #4
   14efe:	4628      	mov	r0, r5
   14f00:	f7ff fd04 	bl	1490c <send_err_rsp.part.0>
	return 0;
   14f04:	2000      	movs	r0, #0
}
   14f06:	b005      	add	sp, #20
   14f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14f0a:	4621      	mov	r1, r4
   14f0c:	4a09      	ldr	r2, [pc, #36]	; (14f34 <att_find_info_req+0x70>)
	data.chan = chan;
   14f0e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14f10:	466b      	mov	r3, sp
   14f12:	4630      	mov	r0, r6
   14f14:	f009 fa72 	bl	1e3fc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   14f18:	9c02      	ldr	r4, [sp, #8]
   14f1a:	b924      	cbnz	r4, 14f26 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   14f1c:	9801      	ldr	r0, [sp, #4]
   14f1e:	f001 f97d 	bl	1621c <net_buf_unref>
	if (!req) {
   14f22:	230a      	movs	r3, #10
   14f24:	e7e9      	b.n	14efa <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14f26:	4a04      	ldr	r2, [pc, #16]	; (14f38 <att_find_info_req+0x74>)
   14f28:	9901      	ldr	r1, [sp, #4]
   14f2a:	4628      	mov	r0, r5
   14f2c:	f009 fbd3 	bl	1e6d6 <bt_att_chan_send_rsp>
   14f30:	e7e8      	b.n	14f04 <att_find_info_req+0x40>
   14f32:	bf00      	nop
   14f34:	0001e709 	.word	0x0001e709
   14f38:	0001e7cb 	.word	0x0001e7cb

00014f3c <att_mtu_req>:
{
   14f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   14f3e:	6803      	ldr	r3, [r0, #0]
{
   14f40:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   14f42:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14f44:	f3bf 8f5b 	dmb	ish
   14f48:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   14f4c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   14f50:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   14f54:	071b      	lsls	r3, r3, #28
   14f56:	d41e      	bmi.n	14f96 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   14f58:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   14f5a:	881b      	ldrh	r3, [r3, #0]
   14f5c:	2b16      	cmp	r3, #22
   14f5e:	d91c      	bls.n	14f9a <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   14f60:	2202      	movs	r2, #2
   14f62:	2103      	movs	r1, #3
   14f64:	f009 fd5f 	bl	1ea26 <bt_att_create_pdu>
	if (!pdu) {
   14f68:	4606      	mov	r6, r0
   14f6a:	b1c0      	cbz	r0, 14f9e <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
   14f6c:	2102      	movs	r1, #2
   14f6e:	3008      	adds	r0, #8
   14f70:	f001 fa84 	bl	1647c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   14f74:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   14f76:	4a0b      	ldr	r2, [pc, #44]	; (14fa4 <att_mtu_req+0x68>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   14f78:	7007      	strb	r7, [r0, #0]
   14f7a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   14f7c:	4631      	mov	r1, r6
   14f7e:	4620      	mov	r0, r4
   14f80:	f009 fba9 	bl	1e6d6 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   14f84:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   14f86:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   14f8a:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   14f8e:	f009 f9fa 	bl	1e386 <att_chan_mtu_updated>
	return 0;
   14f92:	4628      	mov	r0, r5
}
   14f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   14f96:	2006      	movs	r0, #6
   14f98:	e7fc      	b.n	14f94 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   14f9a:	2004      	movs	r0, #4
   14f9c:	e7fa      	b.n	14f94 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   14f9e:	200e      	movs	r0, #14
   14fa0:	e7f8      	b.n	14f94 <att_mtu_req+0x58>
   14fa2:	bf00      	nop
   14fa4:	0001e7cb 	.word	0x0001e7cb

00014fa8 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   14fa8:	b513      	push	{r0, r1, r4, lr}
   14faa:	4602      	mov	r2, r0
   14fac:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   14fae:	4808      	ldr	r0, [pc, #32]	; (14fd0 <bt_att_req_alloc+0x28>)
   14fb0:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   14fb2:	2400      	movs	r4, #0
   14fb4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   14fb6:	f004 f8a9 	bl	1910c <k_mem_slab_alloc>
   14fba:	4601      	mov	r1, r0
   14fbc:	b930      	cbnz	r0, 14fcc <bt_att_req_alloc+0x24>
   14fbe:	9801      	ldr	r0, [sp, #4]
   14fc0:	2210      	movs	r2, #16
   14fc2:	f00b f823 	bl	2000c <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   14fc6:	9801      	ldr	r0, [sp, #4]
}
   14fc8:	b002      	add	sp, #8
   14fca:	bd10      	pop	{r4, pc}
		return NULL;
   14fcc:	4620      	mov	r0, r4
   14fce:	e7fb      	b.n	14fc8 <bt_att_req_alloc+0x20>
   14fd0:	20000620 	.word	0x20000620

00014fd4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   14fd4:	b507      	push	{r0, r1, r2, lr}
   14fd6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   14fd8:	6880      	ldr	r0, [r0, #8]
   14fda:	b120      	cbz	r0, 14fe6 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   14fdc:	f001 f91e 	bl	1621c <net_buf_unref>
		req->buf = NULL;
   14fe0:	9b01      	ldr	r3, [sp, #4]
   14fe2:	2200      	movs	r2, #0
   14fe4:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   14fe6:	4803      	ldr	r0, [pc, #12]	; (14ff4 <bt_att_req_free+0x20>)
   14fe8:	a901      	add	r1, sp, #4
   14fea:	f004 f8fb 	bl	191e4 <k_mem_slab_free>
}
   14fee:	b003      	add	sp, #12
   14ff0:	f85d fb04 	ldr.w	pc, [sp], #4
   14ff4:	20000620 	.word	0x20000620

00014ff8 <att_handle_rsp>:
{
   14ff8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14ffc:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   14ffe:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   15002:	4688      	mov	r8, r1
   15004:	4691      	mov	r9, r2
   15006:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   15008:	f005 fb12 	bl	1a630 <k_work_cancel_delayable>
	if (!chan->req) {
   1500c:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
   15010:	2600      	movs	r6, #0
   15012:	b1f0      	cbz	r0, 15052 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   15014:	4b10      	ldr	r3, [pc, #64]	; (15058 <att_handle_rsp+0x60>)
   15016:	4298      	cmp	r0, r3
   15018:	d112      	bne.n	15040 <att_handle_rsp+0x48>
		chan->req = NULL;
   1501a:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
   1501e:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   15020:	6820      	ldr	r0, [r4, #0]
   15022:	f009 fc1a 	bl	1e85a <att_req_send_process>
	if (func) {
   15026:	b13d      	cbz	r5, 15038 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   15028:	6820      	ldr	r0, [r4, #0]
   1502a:	f8cd a000 	str.w	sl, [sp]
   1502e:	6800      	ldr	r0, [r0, #0]
   15030:	464b      	mov	r3, r9
   15032:	4642      	mov	r2, r8
   15034:	4639      	mov	r1, r7
   15036:	47a8      	blx	r5
}
   15038:	2000      	movs	r0, #0
   1503a:	b002      	add	sp, #8
   1503c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   15040:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   15042:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   15044:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   15048:	f7ff ffc4 	bl	14fd4 <bt_att_req_free>
	chan->req = NULL;
   1504c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
   15050:	e7e6      	b.n	15020 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   15052:	4605      	mov	r5, r0
   15054:	e7e4      	b.n	15020 <att_handle_rsp+0x28>
   15056:	bf00      	nop
   15058:	20001cdc 	.word	0x20001cdc

0001505c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1505c:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   15060:	b143      	cbz	r3, 15074 <att_error_rsp+0x18>
   15062:	4a05      	ldr	r2, [pc, #20]	; (15078 <att_error_rsp+0x1c>)
   15064:	4293      	cmp	r3, r2
   15066:	d005      	beq.n	15074 <att_error_rsp+0x18>
	err = rsp->error;
   15068:	688b      	ldr	r3, [r1, #8]
   1506a:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   1506c:	2200      	movs	r2, #0
   1506e:	4611      	mov	r1, r2
   15070:	f7ff bfc2 	b.w	14ff8 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   15074:	230e      	movs	r3, #14
   15076:	e7f9      	b.n	1506c <att_error_rsp+0x10>
   15078:	20001cdc 	.word	0x20001cdc

0001507c <bt_att_disconnected>:
{
   1507c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1507e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   15082:	b085      	sub	sp, #20
   15084:	4604      	mov	r4, r0
	if (!att_chan->att) {
   15086:	b385      	cbz	r5, 150ea <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   15088:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   1508c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   15090:	f009 f8f8 	bl	1e284 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   15094:	f1a4 0608 	sub.w	r6, r4, #8
   15098:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   1509c:	2200      	movs	r2, #0
   1509e:	2300      	movs	r3, #0
   150a0:	4638      	mov	r0, r7
   150a2:	f001 f829 	bl	160f8 <net_buf_get>
   150a6:	4602      	mov	r2, r0
   150a8:	bb08      	cbnz	r0, 150ee <bt_att_disconnected+0x72>
	if (chan->req) {
   150aa:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   150ae:	b123      	cbz	r3, 150ba <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   150b0:	4601      	mov	r1, r0
   150b2:	230e      	movs	r3, #14
   150b4:	4630      	mov	r0, r6
   150b6:	f7ff ff9f 	bl	14ff8 <att_handle_rsp>
	chan->att = NULL;
   150ba:	2300      	movs	r3, #0
   150bc:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   150c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   150c2:	b993      	cbnz	r3, 150ea <bt_att_disconnected+0x6e>
	att_reset(att);
   150c4:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   150c6:	9803      	ldr	r0, [sp, #12]
   150c8:	2200      	movs	r2, #0
   150ca:	2300      	movs	r3, #0
   150cc:	300c      	adds	r0, #12
   150ce:	f001 f813 	bl	160f8 <net_buf_get>
   150d2:	b978      	cbnz	r0, 150f4 <bt_att_disconnected+0x78>
	att->conn = NULL;
   150d4:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   150d6:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   150d8:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   150da:	b976      	cbnz	r6, 150fa <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   150dc:	4813      	ldr	r0, [pc, #76]	; (1512c <bt_att_disconnected+0xb0>)
   150de:	a903      	add	r1, sp, #12
   150e0:	f004 f880 	bl	191e4 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   150e4:	6820      	ldr	r0, [r4, #0]
   150e6:	f000 fe7f 	bl	15de8 <bt_gatt_disconnected>
}
   150ea:	b005      	add	sp, #20
   150ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   150ee:	f001 f895 	bl	1621c <net_buf_unref>
   150f2:	e7d3      	b.n	1509c <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   150f4:	f001 f892 	bl	1621c <net_buf_unref>
   150f8:	e7e5      	b.n	150c6 <bt_att_disconnected+0x4a>
	return node->next;
   150fa:	6835      	ldr	r5, [r6, #0]
   150fc:	2d00      	cmp	r5, #0
   150fe:	bf38      	it	cc
   15100:	2500      	movcc	r5, #0
		if (req->func) {
   15102:	6877      	ldr	r7, [r6, #4]
   15104:	b137      	cbz	r7, 15114 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   15106:	68f3      	ldr	r3, [r6, #12]
   15108:	9300      	str	r3, [sp, #0]
   1510a:	2300      	movs	r3, #0
   1510c:	461a      	mov	r2, r3
   1510e:	210e      	movs	r1, #14
   15110:	4618      	mov	r0, r3
   15112:	47b8      	blx	r7
		bt_att_req_free(req);
   15114:	4630      	mov	r0, r6
   15116:	f7ff ff5d 	bl	14fd4 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1511a:	2d00      	cmp	r5, #0
   1511c:	d0de      	beq.n	150dc <bt_att_disconnected+0x60>
   1511e:	682b      	ldr	r3, [r5, #0]
   15120:	2b00      	cmp	r3, #0
   15122:	bf38      	it	cc
   15124:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15126:	462e      	mov	r6, r5
   15128:	461d      	mov	r5, r3
   1512a:	e7ea      	b.n	15102 <bt_att_disconnected+0x86>
   1512c:	200005e0 	.word	0x200005e0

00015130 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   15130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15134:	460c      	mov	r4, r1
   15136:	4617      	mov	r7, r2
   15138:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1513a:	4605      	mov	r5, r0
   1513c:	b958      	cbnz	r0, 15156 <bt_att_send+0x26>
   1513e:	492f      	ldr	r1, [pc, #188]	; (151fc <bt_att_send+0xcc>)
   15140:	482f      	ldr	r0, [pc, #188]	; (15200 <bt_att_send+0xd0>)
   15142:	4a30      	ldr	r2, [pc, #192]	; (15204 <bt_att_send+0xd4>)
   15144:	f640 33f2 	movw	r3, #3058	; 0xbf2
   15148:	f007 fe4b 	bl	1cde2 <printk>
   1514c:	482d      	ldr	r0, [pc, #180]	; (15204 <bt_att_send+0xd4>)
   1514e:	f640 31f2 	movw	r1, #3058	; 0xbf2
   15152:	f008 f8a0 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   15156:	b95c      	cbnz	r4, 15170 <bt_att_send+0x40>
   15158:	492b      	ldr	r1, [pc, #172]	; (15208 <bt_att_send+0xd8>)
   1515a:	4829      	ldr	r0, [pc, #164]	; (15200 <bt_att_send+0xd0>)
   1515c:	4a29      	ldr	r2, [pc, #164]	; (15204 <bt_att_send+0xd4>)
   1515e:	f640 33f3 	movw	r3, #3059	; 0xbf3
   15162:	f007 fe3e 	bl	1cde2 <printk>
   15166:	4827      	ldr	r0, [pc, #156]	; (15204 <bt_att_send+0xd4>)
   15168:	f640 31f3 	movw	r1, #3059	; 0xbf3
   1516c:	f008 f893 	bl	1d296 <assert_post_action>

	att = att_get(conn);
   15170:	4628      	mov	r0, r5
   15172:	f009 fb38 	bl	1e7e6 <att_get>
	if (!att) {
   15176:	4606      	mov	r6, r0
   15178:	b938      	cbnz	r0, 1518a <bt_att_send+0x5a>
		net_buf_unref(buf);
   1517a:	4620      	mov	r0, r4
   1517c:	f001 f84e 	bl	1621c <net_buf_unref>
		return -ENOTCONN;
   15180:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   15184:	b002      	add	sp, #8
   15186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1518a:	b147      	cbz	r7, 1519e <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1518c:	f8cd 8000 	str.w	r8, [sp]
   15190:	463b      	mov	r3, r7
   15192:	4622      	mov	r2, r4
   15194:	2104      	movs	r1, #4
   15196:	4628      	mov	r0, r5
   15198:	f008 ff90 	bl	1e0bc <bt_l2cap_send_cb>
   1519c:	e7f2      	b.n	15184 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1519e:	f100 070c 	add.w	r7, r0, #12
   151a2:	4621      	mov	r1, r4
   151a4:	4638      	mov	r0, r7
   151a6:	f001 f805 	bl	161b4 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   151aa:	2200      	movs	r2, #0
   151ac:	2300      	movs	r3, #0
   151ae:	4638      	mov	r0, r7
   151b0:	f000 ffa2 	bl	160f8 <net_buf_get>
	if (!buf) {
   151b4:	4605      	mov	r5, r0
   151b6:	b908      	cbnz	r0, 151bc <bt_att_send+0x8c>
	return 0;
   151b8:	2000      	movs	r0, #0
   151ba:	e7e3      	b.n	15184 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   151bc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   151be:	b1c3      	cbz	r3, 151f2 <bt_att_send+0xc2>
   151c0:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   151c4:	d015      	beq.n	151f2 <bt_att_send+0xc2>
   151c6:	681c      	ldr	r4, [r3, #0]
   151c8:	b10c      	cbz	r4, 151ce <bt_att_send+0x9e>
   151ca:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   151ce:	2200      	movs	r2, #0
   151d0:	4629      	mov	r1, r5
   151d2:	f7ff f9fd 	bl	145d0 <chan_send>
		if (err >= 0) {
   151d6:	2800      	cmp	r0, #0
   151d8:	daee      	bge.n	151b8 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   151da:	b154      	cbz	r4, 151f2 <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   151dc:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   151e0:	d004      	beq.n	151ec <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   151e2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   151e6:	b10b      	cbz	r3, 151ec <bt_att_send+0xbc>
   151e8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   151ec:	4620      	mov	r0, r4
   151ee:	461c      	mov	r4, r3
   151f0:	e7ed      	b.n	151ce <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   151f2:	4629      	mov	r1, r5
   151f4:	4638      	mov	r0, r7
   151f6:	f00a fd9a 	bl	1fd2e <k_queue_prepend>
   151fa:	e7dd      	b.n	151b8 <bt_att_send+0x88>
   151fc:	00021781 	.word	0x00021781
   15200:	00020a75 	.word	0x00020a75
   15204:	00021721 	.word	0x00021721
   15208:	00021484 	.word	0x00021484

0001520c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1520c:	b538      	push	{r3, r4, r5, lr}
   1520e:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   15210:	4605      	mov	r5, r0
   15212:	b958      	cbnz	r0, 1522c <bt_att_req_send+0x20>
   15214:	4916      	ldr	r1, [pc, #88]	; (15270 <bt_att_req_send+0x64>)
   15216:	4817      	ldr	r0, [pc, #92]	; (15274 <bt_att_req_send+0x68>)
   15218:	4a17      	ldr	r2, [pc, #92]	; (15278 <bt_att_req_send+0x6c>)
   1521a:	f640 430f 	movw	r3, #3087	; 0xc0f
   1521e:	f007 fde0 	bl	1cde2 <printk>
   15222:	4815      	ldr	r0, [pc, #84]	; (15278 <bt_att_req_send+0x6c>)
   15224:	f640 410f 	movw	r1, #3087	; 0xc0f
   15228:	f008 f835 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1522c:	b95c      	cbnz	r4, 15246 <bt_att_req_send+0x3a>
   1522e:	4913      	ldr	r1, [pc, #76]	; (1527c <bt_att_req_send+0x70>)
   15230:	4810      	ldr	r0, [pc, #64]	; (15274 <bt_att_req_send+0x68>)
   15232:	4a11      	ldr	r2, [pc, #68]	; (15278 <bt_att_req_send+0x6c>)
   15234:	f44f 6341 	mov.w	r3, #3088	; 0xc10
   15238:	f007 fdd3 	bl	1cde2 <printk>
   1523c:	480e      	ldr	r0, [pc, #56]	; (15278 <bt_att_req_send+0x6c>)
   1523e:	f44f 6141 	mov.w	r1, #3088	; 0xc10
   15242:	f008 f828 	bl	1d296 <assert_post_action>

	att = att_get(conn);
   15246:	4628      	mov	r0, r5
   15248:	f009 facd 	bl	1e7e6 <att_get>
	if (!att) {
   1524c:	b160      	cbz	r0, 15268 <bt_att_req_send+0x5c>
	parent->next = child;
   1524e:	2300      	movs	r3, #0
   15250:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   15252:	6883      	ldr	r3, [r0, #8]
   15254:	b92b      	cbnz	r3, 15262 <bt_att_req_send+0x56>
	list->head = node;
   15256:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1525a:	f009 fafe 	bl	1e85a <att_req_send_process>

	return 0;
   1525e:	2000      	movs	r0, #0
}
   15260:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   15262:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15264:	6084      	str	r4, [r0, #8]
}
   15266:	e7f8      	b.n	1525a <bt_att_req_send+0x4e>
		return -ENOTCONN;
   15268:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1526c:	e7f8      	b.n	15260 <bt_att_req_send+0x54>
   1526e:	bf00      	nop
   15270:	00021781 	.word	0x00021781
   15274:	00020a75 	.word	0x00020a75
   15278:	00021721 	.word	0x00021721
   1527c:	00021766 	.word	0x00021766

00015280 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   15280:	b510      	push	{r4, lr}
   15282:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   15284:	b348      	cbz	r0, 152da <bt_att_req_cancel+0x5a>
   15286:	b341      	cbz	r1, 152da <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   15288:	f009 faad 	bl	1e7e6 <att_get>
	if (!att) {
   1528c:	b328      	cbz	r0, 152da <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1528e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   15290:	b15b      	cbz	r3, 152aa <bt_att_req_cancel+0x2a>
   15292:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   15296:	d008      	beq.n	152aa <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15298:	681b      	ldr	r3, [r3, #0]
   1529a:	b10b      	cbz	r3, 152a0 <bt_att_req_cancel+0x20>
   1529c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   152a0:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   152a4:	4294      	cmp	r4, r2
   152a6:	d005      	beq.n	152b4 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   152a8:	b963      	cbnz	r3, 152c4 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   152aa:	4621      	mov	r1, r4
   152ac:	3004      	adds	r0, #4
   152ae:	f008 ffe9 	bl	1e284 <sys_slist_find_and_remove>
   152b2:	e002      	b.n	152ba <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   152b4:	4b09      	ldr	r3, [pc, #36]	; (152dc <bt_att_req_cancel+0x5c>)
   152b6:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   152ba:	4620      	mov	r0, r4
}
   152bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   152c0:	f7ff be88 	b.w	14fd4 <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   152c4:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   152c8:	d004      	beq.n	152d4 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   152ca:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   152ce:	b10a      	cbz	r2, 152d4 <bt_att_req_cancel+0x54>
   152d0:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   152d4:	4619      	mov	r1, r3
   152d6:	4613      	mov	r3, r2
   152d8:	e7e2      	b.n	152a0 <bt_att_req_cancel+0x20>
}
   152da:	bd10      	pop	{r4, pc}
   152dc:	20001cdc 	.word	0x20001cdc

000152e0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   152e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   152e2:	4d0d      	ldr	r5, [pc, #52]	; (15318 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   152e4:	4604      	mov	r4, r0
   152e6:	b960      	cbnz	r0, 15302 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   152e8:	9000      	str	r0, [sp, #0]
   152ea:	4669      	mov	r1, sp
   152ec:	f8cd 0003 	str.w	r0, [sp, #3]
   152f0:	1c68      	adds	r0, r5, #1
   152f2:	f009 fc88 	bl	1ec06 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   152f6:	2800      	cmp	r0, #0
   152f8:	bf08      	it	eq
   152fa:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   152fc:	4620      	mov	r0, r4
   152fe:	b003      	add	sp, #12
   15300:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15302:	462a      	mov	r2, r5
   15304:	f812 1b01 	ldrb.w	r1, [r2], #1
   15308:	f008 fe12 	bl	1df30 <bt_conn_is_peer_addr_le>
   1530c:	2800      	cmp	r0, #0
	return NULL;
   1530e:	bf14      	ite	ne
   15310:	462c      	movne	r4, r5
   15312:	2400      	moveq	r4, #0
   15314:	e7f2      	b.n	152fc <find_cf_cfg+0x1c>
   15316:	bf00      	nop
   15318:	20001cf4 	.word	0x20001cf4

0001531c <find_sc_cfg>:
{
   1531c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1531e:	4c06      	ldr	r4, [pc, #24]	; (15338 <find_sc_cfg+0x1c>)
   15320:	7823      	ldrb	r3, [r4, #0]
   15322:	4283      	cmp	r3, r0
   15324:	d103      	bne.n	1532e <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   15326:	1c60      	adds	r0, r4, #1
   15328:	f009 fc6d 	bl	1ec06 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1532c:	b108      	cbz	r0, 15332 <find_sc_cfg+0x16>
	return NULL;
   1532e:	2000      	movs	r0, #0
}
   15330:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   15332:	4620      	mov	r0, r4
   15334:	e7fc      	b.n	15330 <find_sc_cfg+0x14>
   15336:	bf00      	nop
   15338:	20001fb4 	.word	0x20001fb4

0001533c <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   1533c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1533e:	4d0d      	ldr	r5, [pc, #52]	; (15374 <gatt_sub_find+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   15340:	4604      	mov	r4, r0
   15342:	b960      	cbnz	r0, 1535e <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   15344:	9000      	str	r0, [sp, #0]
   15346:	4669      	mov	r1, sp
   15348:	f8cd 0003 	str.w	r0, [sp, #3]
   1534c:	1c68      	adds	r0, r5, #1
   1534e:	f009 fc5a 	bl	1ec06 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
   15352:	2800      	cmp	r0, #0
   15354:	bf08      	it	eq
   15356:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
   15358:	4620      	mov	r0, r4
   1535a:	b003      	add	sp, #12
   1535c:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1535e:	462a      	mov	r2, r5
   15360:	f812 1b01 	ldrb.w	r1, [r2], #1
   15364:	f008 fde4 	bl	1df30 <bt_conn_is_peer_addr_le>
   15368:	2800      	cmp	r0, #0
	return NULL;
   1536a:	bf14      	ite	ne
   1536c:	462c      	movne	r4, r5
   1536e:	2400      	moveq	r4, #0
   15370:	e7f2      	b.n	15358 <gatt_sub_find+0x1c>
   15372:	bf00      	nop
   15374:	20001d24 	.word	0x20001d24

00015378 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   15378:	6883      	ldr	r3, [r0, #8]
{
   1537a:	b513      	push	{r0, r1, r4, lr}
   1537c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1537e:	b15b      	cbz	r3, 15398 <gatt_sub_free+0x20>
   15380:	490a      	ldr	r1, [pc, #40]	; (153ac <gatt_sub_free+0x34>)
   15382:	480b      	ldr	r0, [pc, #44]	; (153b0 <gatt_sub_free+0x38>)
   15384:	4a0b      	ldr	r2, [pc, #44]	; (153b4 <gatt_sub_free+0x3c>)
   15386:	f640 239c 	movw	r3, #2716	; 0xa9c
   1538a:	f007 fd2a 	bl	1cde2 <printk>
   1538e:	4809      	ldr	r0, [pc, #36]	; (153b4 <gatt_sub_free+0x3c>)
   15390:	f640 219c 	movw	r1, #2716	; 0xa9c
   15394:	f007 ff7f 	bl	1d296 <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   15398:	2300      	movs	r3, #0
   1539a:	4669      	mov	r1, sp
   1539c:	1c60      	adds	r0, r4, #1
   1539e:	9300      	str	r3, [sp, #0]
   153a0:	f8cd 3003 	str.w	r3, [sp, #3]
   153a4:	f009 fc4a 	bl	1ec3c <bt_addr_le_copy>
}
   153a8:	b002      	add	sp, #8
   153aa:	bd10      	pop	{r4, pc}
   153ac:	000217b6 	.word	0x000217b6
   153b0:	00020a75 	.word	0x00020a75
   153b4:	00021786 	.word	0x00021786

000153b8 <sc_indicate_rsp>:
{
   153b8:	b510      	push	{r4, lr}
   153ba:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   153bc:	4814      	ldr	r0, [pc, #80]	; (15410 <sc_indicate_rsp+0x58>)
   153be:	f3bf 8f5b 	dmb	ish
   153c2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   153c6:	e853 2f00 	ldrex	r2, [r3]
   153ca:	f022 0202 	bic.w	r2, r2, #2
   153ce:	e843 2100 	strex	r1, r2, [r3]
   153d2:	2900      	cmp	r1, #0
   153d4:	d1f7      	bne.n	153c6 <sc_indicate_rsp+0xe>
   153d6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   153da:	f3bf 8f5b 	dmb	ish
   153de:	6d03      	ldr	r3, [r0, #80]	; 0x50
   153e0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   153e4:	07da      	lsls	r2, r3, #31
   153e6:	d504      	bpl.n	153f2 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   153e8:	2200      	movs	r2, #0
   153ea:	2300      	movs	r3, #0
   153ec:	3020      	adds	r0, #32
   153ee:	f005 f919 	bl	1a624 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   153f2:	4620      	mov	r0, r4
   153f4:	f7ff ff74 	bl	152e0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   153f8:	b140      	cbz	r0, 1540c <sc_indicate_rsp+0x54>
   153fa:	7a03      	ldrb	r3, [r0, #8]
   153fc:	07db      	lsls	r3, r3, #31
   153fe:	d505      	bpl.n	1540c <sc_indicate_rsp+0x54>
}
   15400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   15404:	2100      	movs	r1, #0
   15406:	300c      	adds	r0, #12
   15408:	f009 bd7c 	b.w	1ef04 <atomic_set_bit>
}
   1540c:	bd10      	pop	{r4, pc}
   1540e:	bf00      	nop
   15410:	200017f0 	.word	0x200017f0

00015414 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   15414:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   15416:	2312      	movs	r3, #18
{
   15418:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1541a:	2104      	movs	r1, #4
   1541c:	e9cd 3100 	strd	r3, r1, [sp]
   15420:	4b03      	ldr	r3, [pc, #12]	; (15430 <gatt_write_ccc+0x1c>)
   15422:	4904      	ldr	r1, [pc, #16]	; (15434 <gatt_write_ccc+0x20>)
   15424:	f009 fe2b 	bl	1f07e <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   15428:	b003      	add	sp, #12
   1542a:	f85d fb04 	ldr.w	pc, [sp], #4
   1542e:	bf00      	nop
   15430:	0001eecb 	.word	0x0001eecb
   15434:	0001f009 	.word	0x0001f009

00015438 <disconnected_cb>:
{
   15438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1543c:	4b23      	ldr	r3, [pc, #140]	; (154cc <disconnected_cb+0x94>)
{
   1543e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15440:	6882      	ldr	r2, [r0, #8]
   15442:	429a      	cmp	r2, r3
{
   15444:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15446:	d102      	bne.n	1544e <disconnected_cb+0x16>
	ccc = attr->user_data;
   15448:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1544a:	8963      	ldrh	r3, [r4, #10]
   1544c:	bb03      	cbnz	r3, 15490 <disconnected_cb+0x58>
}
   1544e:	2001      	movs	r0, #1
   15450:	b002      	add	sp, #8
   15452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15456:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1545a:	7a28      	ldrb	r0, [r5, #8]
   1545c:	4641      	mov	r1, r8
   1545e:	f008 fc32 	bl	1dcc6 <bt_addr_le_is_bonded>
   15462:	b980      	cbnz	r0, 15486 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   15464:	4b1a      	ldr	r3, [pc, #104]	; (154d0 <disconnected_cb+0x98>)
   15466:	429c      	cmp	r4, r3
   15468:	d102      	bne.n	15470 <disconnected_cb+0x38>
					sc_clear(conn);
   1546a:	4628      	mov	r0, r5
   1546c:	f009 fc72 	bl	1ed54 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   15470:	2200      	movs	r2, #0
   15472:	4669      	mov	r1, sp
   15474:	4630      	mov	r0, r6
   15476:	9200      	str	r2, [sp, #0]
   15478:	f8cd 2003 	str.w	r2, [sp, #3]
   1547c:	f009 fbde 	bl	1ec3c <bt_addr_le_copy>
	cfg->id = 0U;
   15480:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   15482:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   15484:	e019      	b.n	154ba <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15486:	4641      	mov	r1, r8
   15488:	4630      	mov	r0, r6
   1548a:	f009 fbd7 	bl	1ec3c <bt_addr_le_copy>
	if (!value_used) {
   1548e:	e014      	b.n	154ba <disconnected_cb+0x82>
		if (!cfg->value) {
   15490:	8923      	ldrh	r3, [r4, #8]
   15492:	b193      	cbz	r3, 154ba <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15494:	4626      	mov	r6, r4
   15496:	4628      	mov	r0, r5
   15498:	f816 1b01 	ldrb.w	r1, [r6], #1
   1549c:	4632      	mov	r2, r6
   1549e:	f008 fd47 	bl	1df30 <bt_conn_is_peer_addr_le>
   154a2:	2800      	cmp	r0, #0
   154a4:	d1d7      	bne.n	15456 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   154a6:	7820      	ldrb	r0, [r4, #0]
   154a8:	4631      	mov	r1, r6
   154aa:	f7fe fcb9 	bl	13e20 <bt_conn_lookup_addr_le>
			if (tmp) {
   154ae:	b120      	cbz	r0, 154ba <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   154b0:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   154b2:	f7fe fa8b 	bl	139cc <bt_conn_unref>
	if (!value_used) {
   154b6:	2d07      	cmp	r5, #7
   154b8:	d0c9      	beq.n	1544e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   154ba:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   154bc:	2100      	movs	r1, #0
   154be:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   154c0:	2b00      	cmp	r3, #0
   154c2:	d0c4      	beq.n	1544e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   154c4:	4638      	mov	r0, r7
   154c6:	4798      	blx	r3
   154c8:	e7c1      	b.n	1544e <disconnected_cb+0x16>
   154ca:	bf00      	nop
   154cc:	0001ec99 	.word	0x0001ec99
   154d0:	200004c8 	.word	0x200004c8

000154d4 <bt_gatt_init>:
{
   154d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   154d6:	4b28      	ldr	r3, [pc, #160]	; (15578 <bt_gatt_init+0xa4>)
   154d8:	f3bf 8f5b 	dmb	ish
   154dc:	2201      	movs	r2, #1
   154de:	e853 1f00 	ldrex	r1, [r3]
   154e2:	2900      	cmp	r1, #0
   154e4:	d103      	bne.n	154ee <bt_gatt_init+0x1a>
   154e6:	e843 2000 	strex	r0, r2, [r3]
   154ea:	2800      	cmp	r0, #0
   154ec:	d1f7      	bne.n	154de <bt_gatt_init+0xa>
   154ee:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   154f2:	d140      	bne.n	15576 <bt_gatt_init+0xa2>
   154f4:	f3bf 8f5b 	dmb	ish
   154f8:	4b20      	ldr	r3, [pc, #128]	; (1557c <bt_gatt_init+0xa8>)
   154fa:	e853 1f00 	ldrex	r1, [r3]
   154fe:	2900      	cmp	r1, #0
   15500:	d103      	bne.n	1550a <bt_gatt_init+0x36>
   15502:	e843 2000 	strex	r0, r2, [r3]
   15506:	2800      	cmp	r0, #0
   15508:	d1f7      	bne.n	154fa <bt_gatt_init+0x26>
   1550a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1550e:	d02d      	beq.n	1556c <bt_gatt_init+0x98>
	list->head = NULL;
   15510:	4b1b      	ldr	r3, [pc, #108]	; (15580 <bt_gatt_init+0xac>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   15512:	491c      	ldr	r1, [pc, #112]	; (15584 <bt_gatt_init+0xb0>)
   15514:	481c      	ldr	r0, [pc, #112]	; (15588 <bt_gatt_init+0xb4>)
   15516:	2200      	movs	r2, #0
	list->tail = NULL;
   15518:	e9c3 2200 	strd	r2, r2, [r3]
   1551c:	f004 ff5e 	bl	1a3dc <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   15520:	2300      	movs	r3, #0
   15522:	4819      	ldr	r0, [pc, #100]	; (15588 <bt_gatt_init+0xb4>)
   15524:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15528:	f005 f800 	bl	1a52c <k_work_schedule>
}
   1552c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   15530:	4916      	ldr	r1, [pc, #88]	; (1558c <bt_gatt_init+0xb8>)
   15532:	4817      	ldr	r0, [pc, #92]	; (15590 <bt_gatt_init+0xbc>)
   15534:	f004 bf52 	b.w	1a3dc <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   15538:	4a16      	ldr	r2, [pc, #88]	; (15594 <bt_gatt_init+0xc0>)
   1553a:	6863      	ldr	r3, [r4, #4]
   1553c:	8811      	ldrh	r1, [r2, #0]
   1553e:	440b      	add	r3, r1
   15540:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15542:	3408      	adds	r4, #8
   15544:	42ac      	cmp	r4, r5
   15546:	d90e      	bls.n	15566 <bt_gatt_init+0x92>
   15548:	4913      	ldr	r1, [pc, #76]	; (15598 <bt_gatt_init+0xc4>)
   1554a:	4814      	ldr	r0, [pc, #80]	; (1559c <bt_gatt_init+0xc8>)
   1554c:	f240 434e 	movw	r3, #1102	; 0x44e
   15550:	4632      	mov	r2, r6
   15552:	f007 fc46 	bl	1cde2 <printk>
   15556:	4812      	ldr	r0, [pc, #72]	; (155a0 <bt_gatt_init+0xcc>)
   15558:	f007 fc43 	bl	1cde2 <printk>
   1555c:	f240 414e 	movw	r1, #1102	; 0x44e
   15560:	4630      	mov	r0, r6
   15562:	f007 fe98 	bl	1d296 <assert_post_action>
   15566:	42bc      	cmp	r4, r7
   15568:	d3e6      	bcc.n	15538 <bt_gatt_init+0x64>
   1556a:	e7d1      	b.n	15510 <bt_gatt_init+0x3c>
   1556c:	4d0d      	ldr	r5, [pc, #52]	; (155a4 <bt_gatt_init+0xd0>)
   1556e:	4c0e      	ldr	r4, [pc, #56]	; (155a8 <bt_gatt_init+0xd4>)
   15570:	4e0e      	ldr	r6, [pc, #56]	; (155ac <bt_gatt_init+0xd8>)
   15572:	462f      	mov	r7, r5
   15574:	e7e6      	b.n	15544 <bt_gatt_init+0x70>
}
   15576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15578:	20001d04 	.word	0x20001d04
   1557c:	20001d20 	.word	0x20001d20
   15580:	20001cec 	.word	0x20001cec
   15584:	0001f18b 	.word	0x0001f18b
   15588:	20001798 	.word	0x20001798
   1558c:	0001598d 	.word	0x0001598d
   15590:	20001810 	.word	0x20001810
   15594:	20001fb2 	.word	0x20001fb2
   15598:	000217d4 	.word	0x000217d4
   1559c:	00020a75 	.word	0x00020a75
   155a0:	0002152d 	.word	0x0002152d
   155a4:	0002035c 	.word	0x0002035c
   155a8:	0002034c 	.word	0x0002034c
   155ac:	00021786 	.word	0x00021786

000155b0 <bt_gatt_attr_get_handle>:
{
   155b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   155b4:	4604      	mov	r4, r0
   155b6:	b910      	cbnz	r0, 155be <bt_gatt_attr_get_handle+0xe>
		return 0;
   155b8:	2000      	movs	r0, #0
}
   155ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   155be:	8a00      	ldrh	r0, [r0, #16]
   155c0:	2800      	cmp	r0, #0
   155c2:	d1fa      	bne.n	155ba <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   155c4:	4f1a      	ldr	r7, [pc, #104]	; (15630 <bt_gatt_attr_get_handle+0x80>)
   155c6:	4d1b      	ldr	r5, [pc, #108]	; (15634 <bt_gatt_attr_get_handle+0x84>)
   155c8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 15644 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   155cc:	2601      	movs	r6, #1
   155ce:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   155d0:	42bd      	cmp	r5, r7
   155d2:	d90e      	bls.n	155f2 <bt_gatt_attr_get_handle+0x42>
   155d4:	4918      	ldr	r1, [pc, #96]	; (15638 <bt_gatt_attr_get_handle+0x88>)
   155d6:	4819      	ldr	r0, [pc, #100]	; (1563c <bt_gatt_attr_get_handle+0x8c>)
   155d8:	f240 5377 	movw	r3, #1399	; 0x577
   155dc:	464a      	mov	r2, r9
   155de:	f007 fc00 	bl	1cde2 <printk>
   155e2:	4817      	ldr	r0, [pc, #92]	; (15640 <bt_gatt_attr_get_handle+0x90>)
   155e4:	f007 fbfd 	bl	1cde2 <printk>
   155e8:	f240 5177 	movw	r1, #1399	; 0x577
   155ec:	4648      	mov	r0, r9
   155ee:	f007 fe52 	bl	1d296 <assert_post_action>
   155f2:	4545      	cmp	r5, r8
   155f4:	d2e0      	bcs.n	155b8 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   155f6:	e9d5 ec00 	ldrd	lr, ip, [r5]
   155fa:	4574      	cmp	r4, lr
   155fc:	d305      	bcc.n	1560a <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   155fe:	2114      	movs	r1, #20
   15600:	fb01 e30c 	mla	r3, r1, ip, lr
   15604:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   15606:	429c      	cmp	r4, r3
   15608:	d90f      	bls.n	1562a <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1560a:	eb06 030c 	add.w	r3, r6, ip
   1560e:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15610:	3508      	adds	r5, #8
   15612:	4606      	mov	r6, r0
   15614:	e7dc      	b.n	155d0 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   15616:	fb01 e302 	mla	r3, r1, r2, lr
   1561a:	429c      	cmp	r4, r3
   1561c:	d0cd      	beq.n	155ba <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1561e:	3201      	adds	r2, #1
   15620:	18b3      	adds	r3, r6, r2
   15622:	4562      	cmp	r2, ip
   15624:	b298      	uxth	r0, r3
   15626:	d1f6      	bne.n	15616 <bt_gatt_attr_get_handle+0x66>
   15628:	e7f2      	b.n	15610 <bt_gatt_attr_get_handle+0x60>
   1562a:	2200      	movs	r2, #0
   1562c:	e7f8      	b.n	15620 <bt_gatt_attr_get_handle+0x70>
   1562e:	bf00      	nop
   15630:	0002035c 	.word	0x0002035c
   15634:	0002034c 	.word	0x0002034c
   15638:	000217cd 	.word	0x000217cd
   1563c:	00020a75 	.word	0x00020a75
   15640:	0002152d 	.word	0x0002152d
   15644:	00021786 	.word	0x00021786

00015648 <bt_gatt_foreach_attr_type>:
{
   15648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1564c:	b085      	sub	sp, #20
   1564e:	4607      	mov	r7, r0
   15650:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   15654:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   15656:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1565a:	2d00      	cmp	r5, #0
   1565c:	bf08      	it	eq
   1565e:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   15660:	4b2d      	ldr	r3, [pc, #180]	; (15718 <bt_gatt_foreach_attr_type+0xd0>)
{
   15662:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   15664:	881b      	ldrh	r3, [r3, #0]
   15666:	4283      	cmp	r3, r0
{
   15668:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1566a:	d24e      	bcs.n	1570a <bt_gatt_foreach_attr_type+0xc2>
}
   1566c:	b005      	add	sp, #20
   1566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   15672:	6873      	ldr	r3, [r6, #4]
   15674:	4423      	add	r3, r4
   15676:	42bb      	cmp	r3, r7
   15678:	d244      	bcs.n	15704 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   1567a:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1567c:	3608      	adds	r6, #8
   1567e:	4556      	cmp	r6, sl
   15680:	d90e      	bls.n	156a0 <bt_gatt_foreach_attr_type+0x58>
   15682:	4926      	ldr	r1, [pc, #152]	; (1571c <bt_gatt_foreach_attr_type+0xd4>)
   15684:	4826      	ldr	r0, [pc, #152]	; (15720 <bt_gatt_foreach_attr_type+0xd8>)
   15686:	f240 633b 	movw	r3, #1595	; 0x63b
   1568a:	465a      	mov	r2, fp
   1568c:	f007 fba9 	bl	1cde2 <printk>
   15690:	4824      	ldr	r0, [pc, #144]	; (15724 <bt_gatt_foreach_attr_type+0xdc>)
   15692:	f007 fba6 	bl	1cde2 <printk>
   15696:	f240 613b 	movw	r1, #1595	; 0x63b
   1569a:	4658      	mov	r0, fp
   1569c:	f007 fdfb 	bl	1d296 <assert_post_action>
   156a0:	4b21      	ldr	r3, [pc, #132]	; (15728 <bt_gatt_foreach_attr_type+0xe0>)
   156a2:	429e      	cmp	r6, r3
   156a4:	d3e5      	bcc.n	15672 <bt_gatt_foreach_attr_type+0x2a>
   156a6:	e7e1      	b.n	1566c <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   156a8:	5889      	ldr	r1, [r1, r2]
   156aa:	9303      	str	r3, [sp, #12]
   156ac:	4640      	mov	r0, r8
   156ae:	f008 f808 	bl	1d6c2 <bt_uuid_cmp>
   156b2:	9b03      	ldr	r3, [sp, #12]
   156b4:	b198      	cbz	r0, 156de <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   156b6:	3401      	adds	r4, #1
   156b8:	f109 0901 	add.w	r9, r9, #1
   156bc:	b2a4      	uxth	r4, r4
   156be:	6873      	ldr	r3, [r6, #4]
   156c0:	454b      	cmp	r3, r9
   156c2:	d9db      	bls.n	1567c <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   156c4:	9b02      	ldr	r3, [sp, #8]
   156c6:	429c      	cmp	r4, r3
   156c8:	d8d0      	bhi.n	1566c <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   156ca:	42bc      	cmp	r4, r7
   156cc:	d3f3      	bcc.n	156b6 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   156ce:	2314      	movs	r3, #20
   156d0:	6831      	ldr	r1, [r6, #0]
   156d2:	fb03 f209 	mul.w	r2, r3, r9
   156d6:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   156d8:	f1b8 0f00 	cmp.w	r8, #0
   156dc:	d1e4      	bne.n	156a8 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   156de:	9a01      	ldr	r2, [sp, #4]
   156e0:	b95a      	cbnz	r2, 156fa <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   156e2:	3d01      	subs	r5, #1
   156e4:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   156e6:	4618      	mov	r0, r3
   156e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   156ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   156ec:	4621      	mov	r1, r4
   156ee:	4798      	blx	r3
	if (!*num_matches) {
   156f0:	2d00      	cmp	r5, #0
   156f2:	d0bb      	beq.n	1566c <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   156f4:	2800      	cmp	r0, #0
   156f6:	d1de      	bne.n	156b6 <bt_gatt_foreach_attr_type+0x6e>
   156f8:	e7b8      	b.n	1566c <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   156fa:	68da      	ldr	r2, [r3, #12]
   156fc:	9901      	ldr	r1, [sp, #4]
   156fe:	4291      	cmp	r1, r2
   15700:	d1d9      	bne.n	156b6 <bt_gatt_foreach_attr_type+0x6e>
   15702:	e7ee      	b.n	156e2 <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   15704:	f04f 0900 	mov.w	r9, #0
   15708:	e7d9      	b.n	156be <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1570a:	4e08      	ldr	r6, [pc, #32]	; (1572c <bt_gatt_foreach_attr_type+0xe4>)
   1570c:	f8df a018 	ldr.w	sl, [pc, #24]	; 15728 <bt_gatt_foreach_attr_type+0xe0>
   15710:	f8df b01c 	ldr.w	fp, [pc, #28]	; 15730 <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   15714:	2401      	movs	r4, #1
   15716:	e7b2      	b.n	1567e <bt_gatt_foreach_attr_type+0x36>
   15718:	20001fb2 	.word	0x20001fb2
   1571c:	000217cd 	.word	0x000217cd
   15720:	00020a75 	.word	0x00020a75
   15724:	0002152d 	.word	0x0002152d
   15728:	0002035c 	.word	0x0002035c
   1572c:	0002034c 	.word	0x0002034c
   15730:	00021786 	.word	0x00021786

00015734 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   15734:	b510      	push	{r4, lr}
   15736:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   15738:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1573a:	aa1c      	add	r2, sp, #112	; 0x70
   1573c:	4669      	mov	r1, sp
   1573e:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   15740:	e9cd 3300 	strd	r3, r3, [sp]
   15744:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15748:	f007 febd 	bl	1d4c6 <tc_cmac_setup>
   1574c:	b320      	cbz	r0, 15798 <db_hash_gen.isra.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1574e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15752:	2001      	movs	r0, #1
   15754:	4a11      	ldr	r2, [pc, #68]	; (1579c <db_hash_gen.isra.0+0x68>)
   15756:	ab04      	add	r3, sp, #16
   15758:	f009 fd0c 	bl	1f174 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1575c:	4810      	ldr	r0, [pc, #64]	; (157a0 <db_hash_gen.isra.0+0x6c>)
   1575e:	a904      	add	r1, sp, #16
   15760:	f007 ff48 	bl	1d5f4 <tc_cmac_final>
   15764:	b1c0      	cbz	r0, 15798 <db_hash_gen.isra.0+0x64>
   15766:	4b0e      	ldr	r3, [pc, #56]	; (157a0 <db_hash_gen.isra.0+0x6c>)
   15768:	2208      	movs	r2, #8
   1576a:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1576e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   15770:	780c      	ldrb	r4, [r1, #0]
   15772:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   15776:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   15778:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1577c:	d1f7      	bne.n	1576e <db_hash_gen.isra.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1577e:	f3bf 8f5b 	dmb	ish
   15782:	4b08      	ldr	r3, [pc, #32]	; (157a4 <db_hash_gen.isra.0+0x70>)
   15784:	e853 2f00 	ldrex	r2, [r3]
   15788:	f042 0204 	orr.w	r2, r2, #4
   1578c:	e843 2100 	strex	r1, r2, [r3]
   15790:	2900      	cmp	r1, #0
   15792:	d1f7      	bne.n	15784 <db_hash_gen.isra.0+0x50>
   15794:	f3bf 8f5b 	dmb	ish
}
   15798:	b048      	add	sp, #288	; 0x120
   1579a:	bd10      	pop	{r4, pc}
   1579c:	0001eb5b 	.word	0x0001eb5b
   157a0:	20001788 	.word	0x20001788
   157a4:	20001840 	.word	0x20001840

000157a8 <gatt_indicate>:
{
   157a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   157ac:	4615      	mov	r5, r2
   157ae:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   157b0:	2214      	movs	r2, #20
   157b2:	6869      	ldr	r1, [r5, #4]
{
   157b4:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   157b6:	f009 fcea 	bl	1f18e <bt_gatt_check_perm>
   157ba:	2800      	cmp	r0, #0
   157bc:	d139      	bne.n	15832 <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   157be:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   157c2:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   157c4:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   157c6:	f7ff fbef 	bl	14fa8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   157ca:	3602      	adds	r6, #2
	if (!req) {
   157cc:	4604      	mov	r4, r0
   157ce:	b920      	cbnz	r0, 157da <gatt_indicate+0x32>
		return -ENOMEM;
   157d0:	f06f 050b 	mvn.w	r5, #11
}
   157d4:	4628      	mov	r0, r5
   157d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   157da:	4b17      	ldr	r3, [pc, #92]	; (15838 <gatt_indicate+0x90>)
   157dc:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   157de:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   157e0:	4632      	mov	r2, r6
   157e2:	211d      	movs	r1, #29
   157e4:	4640      	mov	r0, r8
   157e6:	f009 f91e 	bl	1ea26 <bt_att_create_pdu>
	if (!buf) {
   157ea:	4606      	mov	r6, r0
   157ec:	b918      	cbnz	r0, 157f6 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   157ee:	4620      	mov	r0, r4
   157f0:	f7ff fbf0 	bl	14fd4 <bt_att_req_free>
   157f4:	e7ec      	b.n	157d0 <gatt_indicate+0x28>
   157f6:	f100 0a08 	add.w	sl, r0, #8
   157fa:	2102      	movs	r1, #2
   157fc:	4650      	mov	r0, sl
   157fe:	f000 fe3d 	bl	1647c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   15802:	4607      	mov	r7, r0
   15804:	8aa9      	ldrh	r1, [r5, #20]
   15806:	f827 9b02 	strh.w	r9, [r7], #2
   1580a:	4650      	mov	r0, sl
   1580c:	f000 fe36 	bl	1647c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15810:	8aaa      	ldrh	r2, [r5, #20]
   15812:	6929      	ldr	r1, [r5, #16]
   15814:	4638      	mov	r0, r7
   15816:	f00a fbd8 	bl	1ffca <memcpy>
	req->buf = buf;
   1581a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1581c:	4621      	mov	r1, r4
   1581e:	4640      	mov	r0, r8
   15820:	f7ff fcf4 	bl	1520c <bt_att_req_send>
	if (err) {
   15824:	4605      	mov	r5, r0
   15826:	2800      	cmp	r0, #0
   15828:	d0d4      	beq.n	157d4 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   1582a:	4620      	mov	r0, r4
   1582c:	f7ff fbd2 	bl	14fd4 <bt_att_req_free>
   15830:	e7d0      	b.n	157d4 <gatt_indicate+0x2c>
		return -EPERM;
   15832:	f04f 35ff 	mov.w	r5, #4294967295
   15836:	e7cd      	b.n	157d4 <gatt_indicate+0x2c>
   15838:	0001eb2d 	.word	0x0001eb2d

0001583c <bt_gatt_indicate>:
{
   1583c:	b530      	push	{r4, r5, lr}
   1583e:	4605      	mov	r5, r0
   15840:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   15842:	460c      	mov	r4, r1
   15844:	b971      	cbnz	r1, 15864 <bt_gatt_indicate+0x28>
   15846:	4949      	ldr	r1, [pc, #292]	; (1596c <bt_gatt_indicate+0x130>)
   15848:	4a49      	ldr	r2, [pc, #292]	; (15970 <bt_gatt_indicate+0x134>)
   1584a:	484a      	ldr	r0, [pc, #296]	; (15974 <bt_gatt_indicate+0x138>)
   1584c:	f640 1338 	movw	r3, #2360	; 0x938
   15850:	f007 fac7 	bl	1cde2 <printk>
   15854:	4848      	ldr	r0, [pc, #288]	; (15978 <bt_gatt_indicate+0x13c>)
   15856:	f007 fac4 	bl	1cde2 <printk>
   1585a:	4845      	ldr	r0, [pc, #276]	; (15970 <bt_gatt_indicate+0x134>)
   1585c:	f640 1138 	movw	r1, #2360	; 0x938
   15860:	f007 fd19 	bl	1d296 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   15864:	6863      	ldr	r3, [r4, #4]
   15866:	b983      	cbnz	r3, 1588a <bt_gatt_indicate+0x4e>
   15868:	6823      	ldr	r3, [r4, #0]
   1586a:	b973      	cbnz	r3, 1588a <bt_gatt_indicate+0x4e>
   1586c:	4943      	ldr	r1, [pc, #268]	; (1597c <bt_gatt_indicate+0x140>)
   1586e:	4a40      	ldr	r2, [pc, #256]	; (15970 <bt_gatt_indicate+0x134>)
   15870:	4840      	ldr	r0, [pc, #256]	; (15974 <bt_gatt_indicate+0x138>)
   15872:	f640 1339 	movw	r3, #2361	; 0x939
   15876:	f007 fab4 	bl	1cde2 <printk>
   1587a:	483f      	ldr	r0, [pc, #252]	; (15978 <bt_gatt_indicate+0x13c>)
   1587c:	f007 fab1 	bl	1cde2 <printk>
   15880:	483b      	ldr	r0, [pc, #236]	; (15970 <bt_gatt_indicate+0x134>)
   15882:	f640 1139 	movw	r1, #2361	; 0x939
   15886:	f007 fd06 	bl	1d296 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1588a:	f3bf 8f5b 	dmb	ish
   1588e:	4b3c      	ldr	r3, [pc, #240]	; (15980 <bt_gatt_indicate+0x144>)
   15890:	681b      	ldr	r3, [r3, #0]
   15892:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15896:	079a      	lsls	r2, r3, #30
   15898:	d561      	bpl.n	1595e <bt_gatt_indicate+0x122>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1589a:	b115      	cbz	r5, 158a2 <bt_gatt_indicate+0x66>
   1589c:	7aab      	ldrb	r3, [r5, #10]
   1589e:	2b07      	cmp	r3, #7
   158a0:	d160      	bne.n	15964 <bt_gatt_indicate+0x128>
	data.attr = params->attr;
   158a2:	6860      	ldr	r0, [r4, #4]
   158a4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   158a6:	f7ff fe83 	bl	155b0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   158aa:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   158ac:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   158b0:	b33a      	cbz	r2, 15902 <bt_gatt_indicate+0xc6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   158b2:	a905      	add	r1, sp, #20
   158b4:	9102      	str	r1, [sp, #8]
   158b6:	4933      	ldr	r1, [pc, #204]	; (15984 <bt_gatt_indicate+0x148>)
   158b8:	9101      	str	r1, [sp, #4]
   158ba:	2101      	movs	r1, #1
	found->attr = NULL;
   158bc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   158be:	9100      	str	r1, [sp, #0]
   158c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   158c4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   158c6:	f7ff febf 	bl	15648 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   158ca:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   158cc:	b91b      	cbnz	r3, 158d6 <bt_gatt_indicate+0x9a>
			return -ENOENT;
   158ce:	f06f 0001 	mvn.w	r0, #1
}
   158d2:	b00b      	add	sp, #44	; 0x2c
   158d4:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   158d6:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   158d8:	9b05      	ldr	r3, [sp, #20]
   158da:	6818      	ldr	r0, [r3, #0]
   158dc:	2300      	movs	r3, #0
   158de:	f88d 3010 	strb.w	r3, [sp, #16]
   158e2:	a904      	add	r1, sp, #16
   158e4:	f642 0303 	movw	r3, #10243	; 0x2803
   158e8:	f8ad 3012 	strh.w	r3, [sp, #18]
   158ec:	f007 fee9 	bl	1d6c2 <bt_uuid_cmp>
   158f0:	b970      	cbnz	r0, 15910 <bt_gatt_indicate+0xd4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   158f2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   158f4:	68c3      	ldr	r3, [r0, #12]
   158f6:	799b      	ldrb	r3, [r3, #6]
   158f8:	069b      	lsls	r3, r3, #26
   158fa:	d405      	bmi.n	15908 <bt_gatt_indicate+0xcc>
			return -EINVAL;
   158fc:	f06f 0015 	mvn.w	r0, #21
   15900:	e7e7      	b.n	158d2 <bt_gatt_indicate+0x96>
		if (!data.handle) {
   15902:	2800      	cmp	r0, #0
   15904:	d1e8      	bne.n	158d8 <bt_gatt_indicate+0x9c>
   15906:	e7e2      	b.n	158ce <bt_gatt_indicate+0x92>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15908:	f009 fbed 	bl	1f0e6 <bt_gatt_attr_value_handle>
   1590c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   15910:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   15914:	b13d      	cbz	r5, 15926 <bt_gatt_indicate+0xea>
		params->_ref = 1;
   15916:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   15918:	4601      	mov	r1, r0
		params->_ref = 1;
   1591a:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1591c:	4622      	mov	r2, r4
   1591e:	4628      	mov	r0, r5
   15920:	f7ff ff42 	bl	157a8 <gatt_indicate>
   15924:	e7d5      	b.n	158d2 <bt_gatt_indicate+0x96>
	data.err = -ENOTCONN;
   15926:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1592a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1592c:	2302      	movs	r3, #2
   1592e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15932:	f642 1302 	movw	r3, #10498	; 0x2902
   15936:	f8ad 3012 	strh.w	r3, [sp, #18]
   1593a:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1593c:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1593e:	9302      	str	r3, [sp, #8]
   15940:	4b11      	ldr	r3, [pc, #68]	; (15988 <bt_gatt_indicate+0x14c>)
   15942:	9301      	str	r3, [sp, #4]
   15944:	2301      	movs	r3, #1
   15946:	9300      	str	r3, [sp, #0]
   15948:	aa04      	add	r2, sp, #16
   1594a:	462b      	mov	r3, r5
   1594c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   15950:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15952:	f88d 5010 	strb.w	r5, [sp, #16]
   15956:	f7ff fe77 	bl	15648 <bt_gatt_foreach_attr_type>
	return data.err;
   1595a:	9807      	ldr	r0, [sp, #28]
   1595c:	e7b9      	b.n	158d2 <bt_gatt_indicate+0x96>
		return -EAGAIN;
   1595e:	f06f 000a 	mvn.w	r0, #10
   15962:	e7b6      	b.n	158d2 <bt_gatt_indicate+0x96>
		return -ENOTCONN;
   15964:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15968:	e7b3      	b.n	158d2 <bt_gatt_indicate+0x96>
   1596a:	bf00      	nop
   1596c:	000217fc 	.word	0x000217fc
   15970:	00021786 	.word	0x00021786
   15974:	00020a75 	.word	0x00020a75
   15978:	00021803 	.word	0x00021803
   1597c:	00021819 	.word	0x00021819
   15980:	2000036c 	.word	0x2000036c
   15984:	0001eb53 	.word	0x0001eb53
   15988:	00015a31 	.word	0x00015a31

0001598c <sc_process>:
{
   1598c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1598e:	f3bf 8f5b 	dmb	ish
   15992:	6b03      	ldr	r3, [r0, #48]	; 0x30
   15994:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   15998:	079b      	lsls	r3, r3, #30
{
   1599a:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1599c:	f100 0530 	add.w	r5, r0, #48	; 0x30
   159a0:	d50e      	bpl.n	159c0 <sc_process+0x34>
   159a2:	491d      	ldr	r1, [pc, #116]	; (15a18 <sc_process+0x8c>)
   159a4:	4a1d      	ldr	r2, [pc, #116]	; (15a1c <sc_process+0x90>)
   159a6:	481e      	ldr	r0, [pc, #120]	; (15a20 <sc_process+0x94>)
   159a8:	f44f 7379 	mov.w	r3, #996	; 0x3e4
   159ac:	f007 fa19 	bl	1cde2 <printk>
   159b0:	481c      	ldr	r0, [pc, #112]	; (15a24 <sc_process+0x98>)
   159b2:	f007 fa16 	bl	1cde2 <printk>
   159b6:	4819      	ldr	r0, [pc, #100]	; (15a1c <sc_process+0x90>)
   159b8:	f44f 7179 	mov.w	r1, #996	; 0x3e4
   159bc:	f007 fc6b 	bl	1d296 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   159c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   159c4:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   159c6:	f3bf 8f5b 	dmb	ish
   159ca:	e855 3f00 	ldrex	r3, [r5]
   159ce:	f023 0301 	bic.w	r3, r3, #1
   159d2:	e845 3200 	strex	r2, r3, [r5]
   159d6:	2a00      	cmp	r2, #0
   159d8:	d1f7      	bne.n	159ca <sc_process+0x3e>
   159da:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   159de:	4b12      	ldr	r3, [pc, #72]	; (15a28 <sc_process+0x9c>)
   159e0:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   159e4:	4b11      	ldr	r3, [pc, #68]	; (15a2c <sc_process+0xa0>)
   159e6:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   159ea:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   159ec:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   159ee:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   159f2:	2304      	movs	r3, #4
	sc->start = 0U;
   159f4:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   159f8:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   159fc:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   15a00:	f1a4 0120 	sub.w	r1, r4, #32
   15a04:	f7ff ff1a 	bl	1583c <bt_gatt_indicate>
   15a08:	b918      	cbnz	r0, 15a12 <sc_process+0x86>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   15a0a:	2101      	movs	r1, #1
   15a0c:	4628      	mov	r0, r5
   15a0e:	f009 fa79 	bl	1ef04 <atomic_set_bit>
}
   15a12:	b003      	add	sp, #12
   15a14:	bd30      	pop	{r4, r5, pc}
   15a16:	bf00      	nop
   15a18:	00021836 	.word	0x00021836
   15a1c:	00021786 	.word	0x00021786
   15a20:	00020a75 	.word	0x00020a75
   15a24:	00021867 	.word	0x00021867
   15a28:	0002066c 	.word	0x0002066c
   15a2c:	000153b9 	.word	0x000153b9

00015a30 <notify_cb>:
{
   15a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a32:	4b32      	ldr	r3, [pc, #200]	; (15afc <notify_cb+0xcc>)
{
   15a34:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a36:	6882      	ldr	r2, [r0, #8]
   15a38:	429a      	cmp	r2, r3
{
   15a3a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15a3c:	d12d      	bne.n	15a9a <notify_cb+0x6a>
	ccc = attr->user_data;
   15a3e:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   15a40:	4b2f      	ldr	r3, [pc, #188]	; (15b00 <notify_cb+0xd0>)
   15a42:	429f      	cmp	r7, r3
   15a44:	d119      	bne.n	15a7a <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15a46:	4d2f      	ldr	r5, [pc, #188]	; (15b04 <notify_cb+0xd4>)
   15a48:	2300      	movs	r3, #0
   15a4a:	4669      	mov	r1, sp
   15a4c:	1c68      	adds	r0, r5, #1
   15a4e:	9300      	str	r3, [sp, #0]
   15a50:	f8cd 3003 	str.w	r3, [sp, #3]
   15a54:	f009 f8d7 	bl	1ec06 <bt_addr_le_cmp>
   15a58:	b178      	cbz	r0, 15a7a <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   15a5a:	4629      	mov	r1, r5
   15a5c:	2207      	movs	r2, #7
   15a5e:	f811 0b01 	ldrb.w	r0, [r1], #1
   15a62:	f7fe f9fb 	bl	13e5c <bt_conn_lookup_state_le>
			if (!conn) {
   15a66:	b9e0      	cbnz	r0, 15aa2 <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
   15a68:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   15a6a:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   15a6c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   15a6e:	f811 0b01 	ldrb.w	r0, [r1], #1
   15a72:	8853      	ldrh	r3, [r2, #2]
   15a74:	8812      	ldrh	r2, [r2, #0]
   15a76:	f009 f8e8 	bl	1ec4a <sc_save>
		if (cfg->value != data->type) {
   15a7a:	893a      	ldrh	r2, [r7, #8]
   15a7c:	89a3      	ldrh	r3, [r4, #12]
   15a7e:	429a      	cmp	r2, r3
   15a80:	d10b      	bne.n	15a9a <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   15a82:	4639      	mov	r1, r7
   15a84:	f811 0b01 	ldrb.w	r0, [r1], #1
   15a88:	f7fe f9ca 	bl	13e20 <bt_conn_lookup_addr_le>
		if (!conn) {
   15a8c:	4605      	mov	r5, r0
   15a8e:	b120      	cbz	r0, 15a9a <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
   15a90:	7a83      	ldrb	r3, [r0, #10]
   15a92:	2b07      	cmp	r3, #7
   15a94:	d008      	beq.n	15aa8 <notify_cb+0x78>
			bt_conn_unref(conn);
   15a96:	f7fd ff99 	bl	139cc <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   15a9a:	2701      	movs	r7, #1
}
   15a9c:	4638      	mov	r0, r7
   15a9e:	b003      	add	sp, #12
   15aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   15aa2:	f7fd ff93 	bl	139cc <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   15aa6:	e7e8      	b.n	15a7a <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   15aa8:	697b      	ldr	r3, [r7, #20]
   15aaa:	b123      	cbz	r3, 15ab6 <notify_cb+0x86>
   15aac:	4631      	mov	r1, r6
   15aae:	4798      	blx	r3
   15ab0:	b908      	cbnz	r0, 15ab6 <notify_cb+0x86>
			bt_conn_unref(conn);
   15ab2:	4628      	mov	r0, r5
   15ab4:	e7ef      	b.n	15a96 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
   15ab6:	2214      	movs	r2, #20
   15ab8:	4631      	mov	r1, r6
   15aba:	4628      	mov	r0, r5
   15abc:	f009 fb67 	bl	1f18e <bt_gatt_check_perm>
   15ac0:	4607      	mov	r7, r0
   15ac2:	2800      	cmp	r0, #0
   15ac4:	d1e9      	bne.n	15a9a <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
   15ac6:	89a3      	ldrh	r3, [r4, #12]
   15ac8:	88a1      	ldrh	r1, [r4, #4]
   15aca:	6922      	ldr	r2, [r4, #16]
   15acc:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   15ace:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   15ad0:	d10f      	bne.n	15af2 <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
   15ad2:	f7ff fe69 	bl	157a8 <gatt_indicate>
			if (err == 0) {
   15ad6:	4606      	mov	r6, r0
   15ad8:	b918      	cbnz	r0, 15ae2 <notify_cb+0xb2>
				data->ind_params->_ref++;
   15ada:	6922      	ldr	r2, [r4, #16]
   15adc:	7d93      	ldrb	r3, [r2, #22]
   15ade:	3301      	adds	r3, #1
   15ae0:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   15ae2:	4628      	mov	r0, r5
   15ae4:	f7fd ff72 	bl	139cc <bt_conn_unref>
		if (err < 0) {
   15ae8:	2e00      	cmp	r6, #0
   15aea:	dbd7      	blt.n	15a9c <notify_cb+0x6c>
		data->err = 0;
   15aec:	2300      	movs	r3, #0
   15aee:	60a3      	str	r3, [r4, #8]
   15af0:	e7d3      	b.n	15a9a <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   15af2:	f009 fb6f 	bl	1f1d4 <gatt_notify>
   15af6:	4606      	mov	r6, r0
   15af8:	e7f3      	b.n	15ae2 <notify_cb+0xb2>
   15afa:	bf00      	nop
   15afc:	0001ec99 	.word	0x0001ec99
   15b00:	200004c8 	.word	0x200004c8
   15b04:	20001fb4 	.word	0x20001fb4

00015b08 <update_ccc>:
{
   15b08:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   15b0a:	4b26      	ldr	r3, [pc, #152]	; (15ba4 <update_ccc+0x9c>)
	struct bt_conn *conn = data->conn;
   15b0c:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   15b0e:	6882      	ldr	r2, [r0, #8]
   15b10:	429a      	cmp	r2, r3
{
   15b12:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15b14:	d142      	bne.n	15b9c <update_ccc+0x94>
	ccc = attr->user_data;
   15b16:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   15b18:	8933      	ldrh	r3, [r6, #8]
   15b1a:	2b00      	cmp	r3, #0
   15b1c:	d03e      	beq.n	15b9c <update_ccc+0x94>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15b1e:	4632      	mov	r2, r6
   15b20:	4628      	mov	r0, r5
   15b22:	f812 1b01 	ldrb.w	r1, [r2], #1
   15b26:	f008 fa03 	bl	1df30 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   15b2a:	2800      	cmp	r0, #0
   15b2c:	d036      	beq.n	15b9c <update_ccc+0x94>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   15b2e:	222a      	movs	r2, #42	; 0x2a
   15b30:	4621      	mov	r1, r4
   15b32:	4628      	mov	r0, r5
   15b34:	f009 fb2b 	bl	1f18e <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   15b38:	2803      	cmp	r0, #3
   15b3a:	d02f      	beq.n	15b9c <update_ccc+0x94>
		gatt_ccc_changed(attr, ccc);
   15b3c:	4631      	mov	r1, r6
   15b3e:	4620      	mov	r0, r4
   15b40:	f008 ffea 	bl	1eb18 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   15b44:	4b18      	ldr	r3, [pc, #96]	; (15ba8 <update_ccc+0xa0>)
   15b46:	429e      	cmp	r6, r3
   15b48:	d128      	bne.n	15b9c <update_ccc+0x94>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   15b4a:	7a28      	ldrb	r0, [r5, #8]
   15b4c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   15b50:	f7ff fbe4 	bl	1531c <find_sc_cfg>
	if (!cfg) {
   15b54:	4604      	mov	r4, r0
   15b56:	b308      	cbz	r0, 15b9c <update_ccc+0x94>
	if (!(cfg->data.start || cfg->data.end)) {
   15b58:	8902      	ldrh	r2, [r0, #8]
   15b5a:	8943      	ldrh	r3, [r0, #10]
   15b5c:	ea53 0102 	orrs.w	r1, r3, r2
   15b60:	d01c      	beq.n	15b9c <update_ccc+0x94>
	index = bt_conn_index(conn);
   15b62:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   15b64:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   15b68:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   15b6c:	f7fe f82e 	bl	13bcc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   15b70:	490e      	ldr	r1, [pc, #56]	; (15bac <update_ccc+0xa4>)
   15b72:	4a0f      	ldr	r2, [pc, #60]	; (15bb0 <update_ccc+0xa8>)
   15b74:	2318      	movs	r3, #24
   15b76:	fb03 1300 	mla	r3, r3, r0, r1
   15b7a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   15b7c:	4a0d      	ldr	r2, [pc, #52]	; (15bb4 <update_ccc+0xac>)
   15b7e:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   15b80:	aa01      	add	r2, sp, #4
   15b82:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   15b84:	2204      	movs	r2, #4
   15b86:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   15b88:	b203      	sxth	r3, r0
   15b8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15b8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15b92:	4628      	mov	r0, r5
   15b94:	f7ff fe52 	bl	1583c <bt_gatt_indicate>
__ssp_bos_icheck3(memset, void *, int)
   15b98:	2300      	movs	r3, #0
   15b9a:	60a3      	str	r3, [r4, #8]
}
   15b9c:	2001      	movs	r0, #1
   15b9e:	b002      	add	sp, #8
   15ba0:	bd70      	pop	{r4, r5, r6, pc}
   15ba2:	bf00      	nop
   15ba4:	0001ec99 	.word	0x0001ec99
   15ba8:	200004c8 	.word	0x200004c8
   15bac:	20001d08 	.word	0x20001d08
   15bb0:	0002066c 	.word	0x0002066c
   15bb4:	0001ef21 	.word	0x0001ef21

00015bb8 <bt_gatt_unsubscribe>:
	return 0;
}

int bt_gatt_unsubscribe(struct bt_conn *conn,
			struct bt_gatt_subscribe_params *params)
{
   15bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bbc:	460d      	mov	r5, r1
	struct gatt_sub *sub;
	struct bt_gatt_subscribe_params *tmp, *next;
	bool has_subscription = false, found = false;
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
   15bbe:	4607      	mov	r7, r0
   15bc0:	b970      	cbnz	r0, 15be0 <bt_gatt_unsubscribe+0x28>
   15bc2:	494b      	ldr	r1, [pc, #300]	; (15cf0 <bt_gatt_unsubscribe+0x138>)
   15bc4:	4a4b      	ldr	r2, [pc, #300]	; (15cf4 <bt_gatt_unsubscribe+0x13c>)
   15bc6:	484c      	ldr	r0, [pc, #304]	; (15cf8 <bt_gatt_unsubscribe+0x140>)
   15bc8:	f241 13e3 	movw	r3, #4579	; 0x11e3
   15bcc:	f007 f909 	bl	1cde2 <printk>
   15bd0:	484a      	ldr	r0, [pc, #296]	; (15cfc <bt_gatt_unsubscribe+0x144>)
   15bd2:	f007 f906 	bl	1cde2 <printk>
   15bd6:	4847      	ldr	r0, [pc, #284]	; (15cf4 <bt_gatt_unsubscribe+0x13c>)
   15bd8:	f241 11e3 	movw	r1, #4579	; 0x11e3
   15bdc:	f007 fb5b 	bl	1d296 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   15be0:	b975      	cbnz	r5, 15c00 <bt_gatt_unsubscribe+0x48>
   15be2:	4947      	ldr	r1, [pc, #284]	; (15d00 <bt_gatt_unsubscribe+0x148>)
   15be4:	4a43      	ldr	r2, [pc, #268]	; (15cf4 <bt_gatt_unsubscribe+0x13c>)
   15be6:	4844      	ldr	r0, [pc, #272]	; (15cf8 <bt_gatt_unsubscribe+0x140>)
   15be8:	f241 13e4 	movw	r3, #4580	; 0x11e4
   15bec:	f007 f8f9 	bl	1cde2 <printk>
   15bf0:	4842      	ldr	r0, [pc, #264]	; (15cfc <bt_gatt_unsubscribe+0x144>)
   15bf2:	f007 f8f6 	bl	1cde2 <printk>
   15bf6:	483f      	ldr	r0, [pc, #252]	; (15cf4 <bt_gatt_unsubscribe+0x13c>)
   15bf8:	f241 11e4 	movw	r1, #4580	; 0x11e4
   15bfc:	f007 fb4b 	bl	1d296 <assert_post_action>

	if (conn->state != BT_CONN_CONNECTED) {
   15c00:	7abb      	ldrb	r3, [r7, #10]
   15c02:	2b07      	cmp	r3, #7
   15c04:	d170      	bne.n	15ce8 <bt_gatt_unsubscribe+0x130>
		return -ENOTCONN;
	}

	sub = gatt_sub_find(conn);
   15c06:	4638      	mov	r0, r7
   15c08:	f7ff fb98 	bl	1533c <gatt_sub_find>
	if (!sub) {
   15c0c:	4606      	mov	r6, r0
   15c0e:	b918      	cbnz	r0, 15c18 <bt_gatt_unsubscribe+0x60>
		return -EINVAL;
   15c10:	f06f 0015 	mvn.w	r0, #21
	}

	params->value = 0x0000;

	return gatt_write_ccc(conn, params);
}
   15c14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15c18:	6884      	ldr	r4, [r0, #8]
   15c1a:	b1f4      	cbz	r4, 15c5a <bt_gatt_unsubscribe+0xa2>
   15c1c:	f1b4 0314 	subs.w	r3, r4, #20
   15c20:	d01d      	beq.n	15c5e <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15c22:	6824      	ldr	r4, [r4, #0]
   15c24:	b104      	cbz	r4, 15c28 <bt_gatt_unsubscribe+0x70>
   15c26:	3c14      	subs	r4, #20
   15c28:	f04f 0800 	mov.w	r8, #0
   15c2c:	46c2      	mov	sl, r8
   15c2e:	46c1      	mov	r9, r8
	parent->next = child;
   15c30:	46c3      	mov	fp, r8
   15c32:	b9b3      	cbnz	r3, 15c62 <bt_gatt_unsubscribe+0xaa>
	if (!found) {
   15c34:	f1ba 0f00 	cmp.w	sl, #0
   15c38:	d0ea      	beq.n	15c10 <bt_gatt_unsubscribe+0x58>
	if (gatt_sub_is_empty(sub)) {
   15c3a:	68b3      	ldr	r3, [r6, #8]
   15c3c:	b913      	cbnz	r3, 15c44 <bt_gatt_unsubscribe+0x8c>
		gatt_sub_free(sub);
   15c3e:	4630      	mov	r0, r6
   15c40:	f7ff fb9a 	bl	15378 <gatt_sub_free>
	if (has_subscription) {
   15c44:	f1b9 0f00 	cmp.w	r9, #0
   15c48:	d046      	beq.n	15cd8 <bt_gatt_unsubscribe+0x120>
		params->notify(conn, params, NULL, 0);
   15c4a:	2300      	movs	r3, #0
   15c4c:	682c      	ldr	r4, [r5, #0]
   15c4e:	461a      	mov	r2, r3
   15c50:	4629      	mov	r1, r5
   15c52:	4638      	mov	r0, r7
   15c54:	47a0      	blx	r4
		return 0;
   15c56:	2000      	movs	r0, #0
   15c58:	e7dc      	b.n	15c14 <bt_gatt_unsubscribe+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15c5a:	4623      	mov	r3, r4
   15c5c:	e7e4      	b.n	15c28 <bt_gatt_unsubscribe+0x70>
   15c5e:	461c      	mov	r4, r3
   15c60:	e7e2      	b.n	15c28 <bt_gatt_unsubscribe+0x70>
		if (params == tmp) {
   15c62:	42ab      	cmp	r3, r5
   15c64:	f103 0114 	add.w	r1, r3, #20
   15c68:	d129      	bne.n	15cbe <bt_gatt_unsubscribe+0x106>
Z_GENLIST_REMOVE(slist, snode)
   15c6a:	6958      	ldr	r0, [r3, #20]
   15c6c:	f1b8 0f00 	cmp.w	r8, #0
   15c70:	d11d      	bne.n	15cae <bt_gatt_unsubscribe+0xf6>
   15c72:	68f2      	ldr	r2, [r6, #12]
	list->head = node;
   15c74:	60b0      	str	r0, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   15c76:	4291      	cmp	r1, r2
   15c78:	d100      	bne.n	15c7c <bt_gatt_unsubscribe+0xc4>
	list->tail = node;
   15c7a:	60f0      	str	r0, [r6, #12]
	parent->next = child;
   15c7c:	f8c3 b014 	str.w	fp, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15c80:	f3bf 8f5b 	dmb	ish
   15c84:	692b      	ldr	r3, [r5, #16]
   15c86:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15c8a:	f3c3 0a80 	ubfx	sl, r3, #2, #1
			if (atomic_test_bit(params->flags,
   15c8e:	075b      	lsls	r3, r3, #29
   15c90:	d51d      	bpl.n	15cce <bt_gatt_unsubscribe+0x116>

void bt_gatt_cancel(struct bt_conn *conn, void *params)
{
	bt_att_req_cancel(conn, params);
   15c92:	4629      	mov	r1, r5
   15c94:	4638      	mov	r0, r7
   15c96:	f7ff faf3 	bl	15280 <bt_att_req_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15c9a:	b1dc      	cbz	r4, 15cd4 <bt_gatt_unsubscribe+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15c9c:	f114 0214 	adds.w	r2, r4, #20
   15ca0:	d002      	beq.n	15ca8 <bt_gatt_unsubscribe+0xf0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15ca2:	6962      	ldr	r2, [r4, #20]
   15ca4:	b102      	cbz	r2, 15ca8 <bt_gatt_unsubscribe+0xf0>
   15ca6:	3a14      	subs	r2, #20
   15ca8:	4623      	mov	r3, r4
   15caa:	4614      	mov	r4, r2
   15cac:	e7c1      	b.n	15c32 <bt_gatt_unsubscribe+0x7a>
	parent->next = child;
   15cae:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   15cb2:	68f2      	ldr	r2, [r6, #12]
   15cb4:	4291      	cmp	r1, r2
	list->tail = node;
   15cb6:	bf08      	it	eq
   15cb8:	f8c6 800c 	streq.w	r8, [r6, #12]
}
   15cbc:	e7de      	b.n	15c7c <bt_gatt_unsubscribe+0xc4>
		if (tmp->value_handle == params->value_handle) {
   15cbe:	891a      	ldrh	r2, [r3, #8]
   15cc0:	892b      	ldrh	r3, [r5, #8]
   15cc2:	4688      	mov	r8, r1
   15cc4:	429a      	cmp	r2, r3
   15cc6:	bf08      	it	eq
   15cc8:	f04f 0901 	moveq.w	r9, #1
   15ccc:	e7e5      	b.n	15c9a <bt_gatt_unsubscribe+0xe2>
			found = true;
   15cce:	f04f 0a01 	mov.w	sl, #1
   15cd2:	e7e2      	b.n	15c9a <bt_gatt_unsubscribe+0xe2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15cd4:	4622      	mov	r2, r4
   15cd6:	e7e7      	b.n	15ca8 <bt_gatt_unsubscribe+0xf0>
	params->value = 0x0000;
   15cd8:	f8a5 900c 	strh.w	r9, [r5, #12]
	return gatt_write_ccc(conn, params);
   15cdc:	4629      	mov	r1, r5
   15cde:	4638      	mov	r0, r7
}
   15ce0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   15ce4:	f7ff bb96 	b.w	15414 <gatt_write_ccc>
		return -ENOTCONN;
   15ce8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15cec:	e792      	b.n	15c14 <bt_gatt_unsubscribe+0x5c>
   15cee:	bf00      	nop
   15cf0:	00021781 	.word	0x00021781
   15cf4:	00021786 	.word	0x00021786
   15cf8:	00020a75 	.word	0x00020a75
   15cfc:	00021803 	.word	0x00021803
   15d00:	000217fc 	.word	0x000217fc

00015d04 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   15d04:	b573      	push	{r0, r1, r4, r5, r6, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15d06:	4a17      	ldr	r2, [pc, #92]	; (15d64 <bt_gatt_connected+0x60>)
	data.conn = conn;
   15d08:	9000      	str	r0, [sp, #0]
{
   15d0a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15d0c:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   15d0e:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15d10:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   15d14:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   15d18:	f009 fa2c 	bl	1f174 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   15d1c:	4628      	mov	r0, r5
   15d1e:	f7ff fb0d 	bl	1533c <gatt_sub_find>
	if (!sub) {
   15d22:	b128      	cbz	r0, 15d30 <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15d24:	6884      	ldr	r4, [r0, #8]
   15d26:	b11c      	cbz	r4, 15d30 <bt_gatt_connected+0x2c>
   15d28:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15d2a:	f105 0690 	add.w	r6, r5, #144	; 0x90
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15d2e:	b90c      	cbnz	r4, 15d34 <bt_gatt_connected+0x30>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   15d30:	b002      	add	sp, #8
   15d32:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15d34:	7a28      	ldrb	r0, [r5, #8]
   15d36:	4631      	mov	r1, r6
   15d38:	f007 ffc5 	bl	1dcc6 <bt_addr_le_is_bonded>
   15d3c:	b150      	cbz	r0, 15d54 <bt_gatt_connected+0x50>
   15d3e:	f3bf 8f5b 	dmb	ish
   15d42:	6923      	ldr	r3, [r4, #16]
   15d44:	f3bf 8f5b 	dmb	ish
   15d48:	079b      	lsls	r3, r3, #30
   15d4a:	d403      	bmi.n	15d54 <bt_gatt_connected+0x50>
			gatt_write_ccc(conn, params);
   15d4c:	4621      	mov	r1, r4
   15d4e:	4628      	mov	r0, r5
   15d50:	f7ff fb60 	bl	15414 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15d54:	f114 0f14 	cmn.w	r4, #20
   15d58:	d0ea      	beq.n	15d30 <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15d5a:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15d5c:	2c00      	cmp	r4, #0
   15d5e:	d0e7      	beq.n	15d30 <bt_gatt_connected+0x2c>
   15d60:	3c14      	subs	r4, #20
   15d62:	e7e4      	b.n	15d2e <bt_gatt_connected+0x2a>
   15d64:	00015b09 	.word	0x00015b09

00015d68 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   15d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15d6a:	4b09      	ldr	r3, [pc, #36]	; (15d90 <bt_gatt_att_max_mtu_changed+0x28>)
   15d6c:	681c      	ldr	r4, [r3, #0]
{
   15d6e:	4605      	mov	r5, r0
   15d70:	460e      	mov	r6, r1
   15d72:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15d74:	b10c      	cbz	r4, 15d7a <bt_gatt_att_max_mtu_changed+0x12>
   15d76:	3c04      	subs	r4, #4
   15d78:	b904      	cbnz	r4, 15d7c <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   15d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   15d7c:	6823      	ldr	r3, [r4, #0]
   15d7e:	b11b      	cbz	r3, 15d88 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   15d80:	463a      	mov	r2, r7
   15d82:	4631      	mov	r1, r6
   15d84:	4628      	mov	r0, r5
   15d86:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15d88:	1d23      	adds	r3, r4, #4
   15d8a:	d0f6      	beq.n	15d7a <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15d8c:	6864      	ldr	r4, [r4, #4]
   15d8e:	e7f1      	b.n	15d74 <bt_gatt_att_max_mtu_changed+0xc>
   15d90:	20001cec 	.word	0x20001cec

00015d94 <db_hash_read>:
{
   15d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   15d98:	4910      	ldr	r1, [pc, #64]	; (15ddc <db_hash_read+0x48>)
{
   15d9a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   15d9e:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   15da0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   15da4:	461d      	mov	r5, r3
   15da6:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   15da8:	f004 fca0 	bl	1a6ec <k_work_cancel_delayable_sync>
   15dac:	f3bf 8f5b 	dmb	ish
   15db0:	4b0b      	ldr	r3, [pc, #44]	; (15de0 <db_hash_read+0x4c>)
   15db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   15db4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   15db8:	075b      	lsls	r3, r3, #29
   15dba:	d401      	bmi.n	15dc0 <db_hash_read+0x2c>
		db_hash_gen(true);
   15dbc:	f7ff fcba 	bl	15734 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   15dc0:	2101      	movs	r1, #1
   15dc2:	4630      	mov	r0, r6
   15dc4:	f009 faae 	bl	1f324 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   15dc8:	2310      	movs	r3, #16
   15dca:	9306      	str	r3, [sp, #24]
   15dcc:	463a      	mov	r2, r7
   15dce:	4629      	mov	r1, r5
   15dd0:	4620      	mov	r0, r4
   15dd2:	4b04      	ldr	r3, [pc, #16]	; (15de4 <db_hash_read+0x50>)
}
   15dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   15dd8:	f008 bfdd 	b.w	1ed96 <bt_gatt_attr_read.constprop.0>
   15ddc:	200017c8 	.word	0x200017c8
   15de0:	200017f0 	.word	0x200017f0
   15de4:	20001788 	.word	0x20001788

00015de8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   15de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15dec:	4a33      	ldr	r2, [pc, #204]	; (15ebc <bt_gatt_disconnected+0xd4>)
   15dee:	4603      	mov	r3, r0
{
   15df0:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15df2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15df6:	2001      	movs	r0, #1
   15df8:	f009 f9bc 	bl	1f174 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   15dfc:	4620      	mov	r0, r4
   15dfe:	f7ff fa9d 	bl	1533c <gatt_sub_find>
	if (!sub) {
   15e02:	4606      	mov	r6, r0
   15e04:	b3a8      	cbz	r0, 15e72 <bt_gatt_disconnected+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15e06:	6883      	ldr	r3, [r0, #8]
   15e08:	b39b      	cbz	r3, 15e72 <bt_gatt_disconnected+0x8a>
   15e0a:	f1b3 0714 	subs.w	r7, r3, #20
   15e0e:	d030      	beq.n	15e72 <bt_gatt_disconnected+0x8a>
   15e10:	681d      	ldr	r5, [r3, #0]
   15e12:	b105      	cbz	r5, 15e16 <bt_gatt_disconnected+0x2e>
   15e14:	3d14      	subs	r5, #20
{
   15e16:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15e1a:	f104 0890 	add.w	r8, r4, #144	; 0x90
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15e1e:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
   15e22:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15e24:	7a20      	ldrb	r0, [r4, #8]
   15e26:	4641      	mov	r1, r8
   15e28:	f007 ff4d 	bl	1dcc6 <bt_addr_le_is_bonded>
   15e2c:	b988      	cbnz	r0, 15e52 <bt_gatt_disconnected+0x6a>
			params->value = 0U;
   15e2e:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
   15e32:	463b      	mov	r3, r7
   15e34:	465a      	mov	r2, fp
   15e36:	4631      	mov	r1, r6
   15e38:	4620      	mov	r0, r4
   15e3a:	f009 f8c5 	bl	1efc8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15e3e:	b1c5      	cbz	r5, 15e72 <bt_gatt_disconnected+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15e40:	f115 0114 	adds.w	r1, r5, #20
   15e44:	d002      	beq.n	15e4c <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15e46:	6969      	ldr	r1, [r5, #20]
   15e48:	b101      	cbz	r1, 15e4c <bt_gatt_disconnected+0x64>
   15e4a:	3914      	subs	r1, #20
{
   15e4c:	462f      	mov	r7, r5
   15e4e:	460d      	mov	r5, r1
   15e50:	e7e8      	b.n	15e24 <bt_gatt_disconnected+0x3c>
   15e52:	f3bf 8f5b 	dmb	ish
   15e56:	693b      	ldr	r3, [r7, #16]
   15e58:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15e5c:	07db      	lsls	r3, r3, #31
   15e5e:	d4e6      	bmi.n	15e2e <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   15e60:	7873      	ldrb	r3, [r6, #1]
   15e62:	b11b      	cbz	r3, 15e6c <bt_gatt_disconnected+0x84>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   15e64:	4641      	mov	r1, r8
   15e66:	4648      	mov	r0, r9
   15e68:	f008 fee8 	bl	1ec3c <bt_addr_le_copy>
			prev = &params->node;
   15e6c:	f107 0b14 	add.w	fp, r7, #20
   15e70:	e7e5      	b.n	15e3e <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
   15e72:	4620      	mov	r0, r4
   15e74:	f7ff fa34 	bl	152e0 <find_cf_cfg>
	if (!cfg) {
   15e78:	4605      	mov	r5, r0
   15e7a:	b1e0      	cbz	r0, 15eb6 <bt_gatt_disconnected+0xce>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15e7c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   15e80:	7a20      	ldrb	r0, [r4, #8]
   15e82:	4631      	mov	r1, r6
   15e84:	f007 ff1f 	bl	1dcc6 <bt_addr_le_is_bonded>
   15e88:	b920      	cbnz	r0, 15e94 <bt_gatt_disconnected+0xac>
		clear_cf_cfg(cfg);
   15e8a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   15e8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15e90:	f009 b803 	b.w	1ee9a <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15e94:	1c68      	adds	r0, r5, #1
   15e96:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15e98:	350c      	adds	r5, #12
   15e9a:	f008 fecf 	bl	1ec3c <bt_addr_le_copy>
   15e9e:	f3bf 8f5b 	dmb	ish
   15ea2:	e855 3f00 	ldrex	r3, [r5]
   15ea6:	f023 0302 	bic.w	r3, r3, #2
   15eaa:	e845 3200 	strex	r2, r3, [r5]
   15eae:	2a00      	cmp	r2, #0
   15eb0:	d1f7      	bne.n	15ea2 <bt_gatt_disconnected+0xba>
   15eb2:	f3bf 8f5b 	dmb	ish
}
   15eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eba:	bf00      	nop
   15ebc:	00015439 	.word	0x00015439

00015ec0 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   15ec0:	4b04      	ldr	r3, [pc, #16]	; (15ed4 <bt_smp_accept+0x14>)
   15ec2:	6818      	ldr	r0, [r3, #0]
   15ec4:	b918      	cbnz	r0, 15ece <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   15ec6:	4a04      	ldr	r2, [pc, #16]	; (15ed8 <bt_smp_accept+0x18>)
   15ec8:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   15eca:	600b      	str	r3, [r1, #0]

		return 0;
   15ecc:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   15ece:	f06f 000b 	mvn.w	r0, #11
}
   15ed2:	4770      	bx	lr
   15ed4:	20001848 	.word	0x20001848
   15ed8:	00020748 	.word	0x00020748

00015edc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   15edc:	4b02      	ldr	r3, [pc, #8]	; (15ee8 <net_buf_pool_get+0xc>)
   15ede:	222c      	movs	r2, #44	; 0x2c
   15ee0:	fb02 3000 	mla	r0, r2, r0, r3
   15ee4:	4770      	bx	lr
   15ee6:	bf00      	nop
   15ee8:	200006b4 	.word	0x200006b4

00015eec <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15eec:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   15eee:	4a05      	ldr	r2, [pc, #20]	; (15f04 <net_buf_id+0x18>)
   15ef0:	212c      	movs	r1, #44	; 0x2c
   15ef2:	fb01 2303 	mla	r3, r1, r3, r2
   15ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ef8:	1ac0      	subs	r0, r0, r3
}
   15efa:	4b03      	ldr	r3, [pc, #12]	; (15f08 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   15efc:	10c0      	asrs	r0, r0, #3
}
   15efe:	4358      	muls	r0, r3
   15f00:	4770      	bx	lr
   15f02:	bf00      	nop
   15f04:	200006b4 	.word	0x200006b4
   15f08:	aaaaaaab 	.word	0xaaaaaaab

00015f0c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   15f0c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15f0e:	4a0a      	ldr	r2, [pc, #40]	; (15f38 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15f10:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15f12:	242c      	movs	r4, #44	; 0x2c
   15f14:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   15f18:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15f1c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   15f1e:	6823      	ldr	r3, [r4, #0]
   15f20:	429a      	cmp	r2, r3
   15f22:	bf94      	ite	ls
   15f24:	600a      	strls	r2, [r1, #0]
   15f26:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15f28:	f7ff ffe0 	bl	15eec <net_buf_id>
   15f2c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   15f30:	fb02 3000 	mla	r0, r2, r0, r3
   15f34:	bd10      	pop	{r4, pc}
   15f36:	bf00      	nop
   15f38:	200006b4 	.word	0x200006b4

00015f3c <net_buf_reset>:
{
   15f3c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   15f3e:	7943      	ldrb	r3, [r0, #5]
{
   15f40:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   15f42:	b14b      	cbz	r3, 15f58 <net_buf_reset+0x1c>
   15f44:	490d      	ldr	r1, [pc, #52]	; (15f7c <net_buf_reset+0x40>)
   15f46:	480e      	ldr	r0, [pc, #56]	; (15f80 <net_buf_reset+0x44>)
   15f48:	4a0e      	ldr	r2, [pc, #56]	; (15f84 <net_buf_reset+0x48>)
   15f4a:	234f      	movs	r3, #79	; 0x4f
   15f4c:	f006 ff49 	bl	1cde2 <printk>
   15f50:	480c      	ldr	r0, [pc, #48]	; (15f84 <net_buf_reset+0x48>)
   15f52:	214f      	movs	r1, #79	; 0x4f
   15f54:	f007 f99f 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   15f58:	6823      	ldr	r3, [r4, #0]
   15f5a:	b14b      	cbz	r3, 15f70 <net_buf_reset+0x34>
   15f5c:	490a      	ldr	r1, [pc, #40]	; (15f88 <net_buf_reset+0x4c>)
   15f5e:	4808      	ldr	r0, [pc, #32]	; (15f80 <net_buf_reset+0x44>)
   15f60:	4a08      	ldr	r2, [pc, #32]	; (15f84 <net_buf_reset+0x48>)
   15f62:	2350      	movs	r3, #80	; 0x50
   15f64:	f006 ff3d 	bl	1cde2 <printk>
   15f68:	4806      	ldr	r0, [pc, #24]	; (15f84 <net_buf_reset+0x48>)
   15f6a:	2150      	movs	r1, #80	; 0x50
   15f6c:	f007 f993 	bl	1d296 <assert_post_action>
	buf->len  = 0U;
   15f70:	2300      	movs	r3, #0
   15f72:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   15f74:	6923      	ldr	r3, [r4, #16]
   15f76:	60a3      	str	r3, [r4, #8]
}
   15f78:	bd10      	pop	{r4, pc}
   15f7a:	bf00      	nop
   15f7c:	000218c0 	.word	0x000218c0
   15f80:	00020a75 	.word	0x00020a75
   15f84:	0002189c 	.word	0x0002189c
   15f88:	000218d1 	.word	0x000218d1

00015f8c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15f8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15f90:	4605      	mov	r5, r0
   15f92:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15f94:	4610      	mov	r0, r2
   15f96:	4619      	mov	r1, r3
{
   15f98:	4616      	mov	r6, r2
   15f9a:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   15f9c:	f009 ff6a 	bl	1fe74 <sys_clock_timeout_end_calc>
   15fa0:	4680      	mov	r8, r0
   15fa2:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   15fa4:	b94d      	cbnz	r5, 15fba <net_buf_alloc_len+0x2e>
   15fa6:	494d      	ldr	r1, [pc, #308]	; (160dc <net_buf_alloc_len+0x150>)
   15fa8:	484d      	ldr	r0, [pc, #308]	; (160e0 <net_buf_alloc_len+0x154>)
   15faa:	4a4e      	ldr	r2, [pc, #312]	; (160e4 <net_buf_alloc_len+0x158>)
   15fac:	23ed      	movs	r3, #237	; 0xed
   15fae:	f006 ff18 	bl	1cde2 <printk>
   15fb2:	484c      	ldr	r0, [pc, #304]	; (160e4 <net_buf_alloc_len+0x158>)
   15fb4:	21ed      	movs	r1, #237	; 0xed
   15fb6:	f007 f96e 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   15fba:	f04f 0340 	mov.w	r3, #64	; 0x40
   15fbe:	f3ef 8a11 	mrs	sl, BASEPRI
   15fc2:	f383 8812 	msr	BASEPRI_MAX, r3
   15fc6:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15fca:	8beb      	ldrh	r3, [r5, #30]
   15fcc:	2b00      	cmp	r3, #0
   15fce:	d055      	beq.n	1607c <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   15fd0:	8baa      	ldrh	r2, [r5, #28]
   15fd2:	429a      	cmp	r2, r3
   15fd4:	d93e      	bls.n	16054 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   15fd6:	2200      	movs	r2, #0
   15fd8:	2300      	movs	r3, #0
   15fda:	4628      	mov	r0, r5
   15fdc:	f003 fdba 	bl	19b54 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   15fe0:	4604      	mov	r4, r0
   15fe2:	2800      	cmp	r0, #0
   15fe4:	d036      	beq.n	16054 <net_buf_alloc_len+0xc8>
	__asm__ volatile(
   15fe6:	f38a 8811 	msr	BASEPRI, sl
   15fea:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   15fee:	f8dd a004 	ldr.w	sl, [sp, #4]
   15ff2:	f1ba 0f00 	cmp.w	sl, #0
   15ff6:	d06d      	beq.n	160d4 <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15ff8:	ea56 0307 	orrs.w	r3, r6, r7
   15ffc:	d010      	beq.n	16020 <net_buf_alloc_len+0x94>
   15ffe:	1c7b      	adds	r3, r7, #1
   16000:	bf08      	it	eq
   16002:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   16006:	d00b      	beq.n	16020 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   16008:	f006 f928 	bl	1c25c <sys_clock_tick_get>
   1600c:	ebb8 0600 	subs.w	r6, r8, r0
   16010:	eb69 0701 	sbc.w	r7, r9, r1
   16014:	2e00      	cmp	r6, #0
   16016:	f177 0300 	sbcs.w	r3, r7, #0
   1601a:	bfbc      	itt	lt
   1601c:	2600      	movlt	r6, #0
   1601e:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16020:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16022:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 160e8 <net_buf_alloc_len+0x15c>
   16026:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1602a:	fb09 8303 	mla	r3, r9, r3, r8
   1602e:	4632      	mov	r2, r6
   16030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16032:	681b      	ldr	r3, [r3, #0]
   16034:	a901      	add	r1, sp, #4
   16036:	681d      	ldr	r5, [r3, #0]
   16038:	4620      	mov	r0, r4
   1603a:	463b      	mov	r3, r7
   1603c:	47a8      	blx	r5
   1603e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16040:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16042:	bb58      	cbnz	r0, 1609c <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
   16044:	79a0      	ldrb	r0, [r4, #6]
   16046:	4621      	mov	r1, r4
   16048:	fb00 8009 	mla	r0, r0, r9, r8
   1604c:	f009 fe6f 	bl	1fd2e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16050:	462c      	mov	r4, r5
}
   16052:	e01f      	b.n	16094 <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
   16054:	8be8      	ldrh	r0, [r5, #30]
   16056:	1e43      	subs	r3, r0, #1
   16058:	83eb      	strh	r3, [r5, #30]
   1605a:	f38a 8811 	msr	BASEPRI, sl
   1605e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   16062:	8bac      	ldrh	r4, [r5, #28]
   16064:	1a24      	subs	r4, r4, r0
   16066:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   16068:	2318      	movs	r3, #24
   1606a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1606e:	481e      	ldr	r0, [pc, #120]	; (160e8 <net_buf_alloc_len+0x15c>)
   16070:	4b1e      	ldr	r3, [pc, #120]	; (160ec <net_buf_alloc_len+0x160>)
   16072:	1a2d      	subs	r5, r5, r0
   16074:	10ad      	asrs	r5, r5, #2
   16076:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   16078:	71a5      	strb	r5, [r4, #6]
		goto success;
   1607a:	e7b8      	b.n	15fee <net_buf_alloc_len+0x62>
   1607c:	f38a 8811 	msr	BASEPRI, sl
   16080:	f3bf 8f6f 	isb	sy
   16084:	4632      	mov	r2, r6
   16086:	463b      	mov	r3, r7
   16088:	4628      	mov	r0, r5
   1608a:	f003 fd63 	bl	19b54 <z_impl_k_queue_get>
	if (!buf) {
   1608e:	4604      	mov	r4, r0
   16090:	2800      	cmp	r0, #0
   16092:	d1ac      	bne.n	15fee <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   16094:	4620      	mov	r0, r4
   16096:	b002      	add	sp, #8
   16098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1609c:	9b01      	ldr	r3, [sp, #4]
   1609e:	459a      	cmp	sl, r3
   160a0:	d90e      	bls.n	160c0 <net_buf_alloc_len+0x134>
   160a2:	4913      	ldr	r1, [pc, #76]	; (160f0 <net_buf_alloc_len+0x164>)
   160a4:	4a0f      	ldr	r2, [pc, #60]	; (160e4 <net_buf_alloc_len+0x158>)
   160a6:	480e      	ldr	r0, [pc, #56]	; (160e0 <net_buf_alloc_len+0x154>)
   160a8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   160ac:	f006 fe99 	bl	1cde2 <printk>
   160b0:	4810      	ldr	r0, [pc, #64]	; (160f4 <net_buf_alloc_len+0x168>)
   160b2:	f006 fe96 	bl	1cde2 <printk>
   160b6:	480b      	ldr	r0, [pc, #44]	; (160e4 <net_buf_alloc_len+0x158>)
   160b8:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   160bc:	f007 f8eb 	bl	1d296 <assert_post_action>
	buf->frags = NULL;
   160c0:	2300      	movs	r3, #0
   160c2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   160c4:	2301      	movs	r3, #1
   160c6:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   160c8:	9b01      	ldr	r3, [sp, #4]
   160ca:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   160cc:	4620      	mov	r0, r4
   160ce:	f7ff ff35 	bl	15f3c <net_buf_reset>
	return buf;
   160d2:	e7df      	b.n	16094 <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
   160d4:	f8c4 a010 	str.w	sl, [r4, #16]
   160d8:	e7f2      	b.n	160c0 <net_buf_alloc_len+0x134>
   160da:	bf00      	nop
   160dc:	000218eb 	.word	0x000218eb
   160e0:	00020a75 	.word	0x00020a75
   160e4:	0002189c 	.word	0x0002189c
   160e8:	200006b4 	.word	0x200006b4
   160ec:	ba2e8ba3 	.word	0xba2e8ba3
   160f0:	000218f0 	.word	0x000218f0
   160f4:	00021901 	.word	0x00021901

000160f8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   160f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   160fc:	4606      	mov	r6, r0
   160fe:	f003 fd29 	bl	19b54 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   16102:	4605      	mov	r5, r0
   16104:	b150      	cbz	r0, 1611c <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   16106:	4f13      	ldr	r7, [pc, #76]	; (16154 <net_buf_get+0x5c>)
   16108:	f8df 804c 	ldr.w	r8, [pc, #76]	; 16158 <net_buf_get+0x60>
   1610c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1615c <net_buf_get+0x64>
   16110:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   16112:	7963      	ldrb	r3, [r4, #5]
   16114:	f013 0301 	ands.w	r3, r3, #1
   16118:	d103      	bne.n	16122 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1611a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1611c:	4628      	mov	r0, r5
   1611e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16122:	2200      	movs	r2, #0
   16124:	2300      	movs	r3, #0
   16126:	4630      	mov	r0, r6
   16128:	f003 fd14 	bl	19b54 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1612c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1612e:	b958      	cbnz	r0, 16148 <net_buf_get+0x50>
   16130:	4641      	mov	r1, r8
   16132:	4648      	mov	r0, r9
   16134:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   16138:	463a      	mov	r2, r7
   1613a:	f006 fe52 	bl	1cde2 <printk>
   1613e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   16142:	4638      	mov	r0, r7
   16144:	f007 f8a7 	bl	1d296 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   16148:	7963      	ldrb	r3, [r4, #5]
   1614a:	f023 0301 	bic.w	r3, r3, #1
   1614e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   16150:	6824      	ldr	r4, [r4, #0]
   16152:	e7de      	b.n	16112 <net_buf_get+0x1a>
   16154:	0002189c 	.word	0x0002189c
   16158:	00021904 	.word	0x00021904
   1615c:	00020a75 	.word	0x00020a75

00016160 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   16160:	b538      	push	{r3, r4, r5, lr}
   16162:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   16164:	4604      	mov	r4, r0
   16166:	b958      	cbnz	r0, 16180 <net_buf_simple_reserve+0x20>
   16168:	490e      	ldr	r1, [pc, #56]	; (161a4 <net_buf_simple_reserve+0x44>)
   1616a:	480f      	ldr	r0, [pc, #60]	; (161a8 <net_buf_simple_reserve+0x48>)
   1616c:	4a0f      	ldr	r2, [pc, #60]	; (161ac <net_buf_simple_reserve+0x4c>)
   1616e:	f240 13bd 	movw	r3, #445	; 0x1bd
   16172:	f006 fe36 	bl	1cde2 <printk>
   16176:	480d      	ldr	r0, [pc, #52]	; (161ac <net_buf_simple_reserve+0x4c>)
   16178:	f240 11bd 	movw	r1, #445	; 0x1bd
   1617c:	f007 f88b 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   16180:	88a3      	ldrh	r3, [r4, #4]
   16182:	b15b      	cbz	r3, 1619c <net_buf_simple_reserve+0x3c>
   16184:	490a      	ldr	r1, [pc, #40]	; (161b0 <net_buf_simple_reserve+0x50>)
   16186:	4808      	ldr	r0, [pc, #32]	; (161a8 <net_buf_simple_reserve+0x48>)
   16188:	4a08      	ldr	r2, [pc, #32]	; (161ac <net_buf_simple_reserve+0x4c>)
   1618a:	f44f 73df 	mov.w	r3, #446	; 0x1be
   1618e:	f006 fe28 	bl	1cde2 <printk>
   16192:	4806      	ldr	r0, [pc, #24]	; (161ac <net_buf_simple_reserve+0x4c>)
   16194:	f44f 71df 	mov.w	r1, #446	; 0x1be
   16198:	f007 f87d 	bl	1d296 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1619c:	68a3      	ldr	r3, [r4, #8]
   1619e:	442b      	add	r3, r5
   161a0:	6023      	str	r3, [r4, #0]
}
   161a2:	bd38      	pop	{r3, r4, r5, pc}
   161a4:	00021484 	.word	0x00021484
   161a8:	00020a75 	.word	0x00020a75
   161ac:	0002189c 	.word	0x0002189c
   161b0:	00021910 	.word	0x00021910

000161b4 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   161b4:	b538      	push	{r3, r4, r5, lr}
   161b6:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   161b8:	4605      	mov	r5, r0
   161ba:	b958      	cbnz	r0, 161d4 <net_buf_put+0x20>
   161bc:	4913      	ldr	r1, [pc, #76]	; (1620c <net_buf_put+0x58>)
   161be:	4814      	ldr	r0, [pc, #80]	; (16210 <net_buf_put+0x5c>)
   161c0:	4a14      	ldr	r2, [pc, #80]	; (16214 <net_buf_put+0x60>)
   161c2:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
   161c6:	f006 fe0c 	bl	1cde2 <printk>
   161ca:	4812      	ldr	r0, [pc, #72]	; (16214 <net_buf_put+0x60>)
   161cc:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
   161d0:	f007 f861 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   161d4:	b95c      	cbnz	r4, 161ee <net_buf_put+0x3a>
   161d6:	4910      	ldr	r1, [pc, #64]	; (16218 <net_buf_put+0x64>)
   161d8:	480d      	ldr	r0, [pc, #52]	; (16210 <net_buf_put+0x5c>)
   161da:	4a0e      	ldr	r2, [pc, #56]	; (16214 <net_buf_put+0x60>)
   161dc:	f240 13fb 	movw	r3, #507	; 0x1fb
   161e0:	f006 fdff 	bl	1cde2 <printk>
   161e4:	480b      	ldr	r0, [pc, #44]	; (16214 <net_buf_put+0x60>)
   161e6:	f240 11fb 	movw	r1, #507	; 0x1fb
   161ea:	f007 f854 	bl	1d296 <assert_post_action>
{
   161ee:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   161f0:	6811      	ldr	r1, [r2, #0]
   161f2:	b929      	cbnz	r1, 16200 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   161f4:	4621      	mov	r1, r4
   161f6:	4628      	mov	r0, r5
}
   161f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   161fc:	f003 bc4c 	b.w	19a98 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   16200:	7953      	ldrb	r3, [r2, #5]
   16202:	f043 0301 	orr.w	r3, r3, #1
   16206:	7153      	strb	r3, [r2, #5]
   16208:	460a      	mov	r2, r1
   1620a:	e7f1      	b.n	161f0 <net_buf_put+0x3c>
   1620c:	0002191f 	.word	0x0002191f
   16210:	00020a75 	.word	0x00020a75
   16214:	0002189c 	.word	0x0002189c
   16218:	00021484 	.word	0x00021484

0001621c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   16220:	4605      	mov	r5, r0
   16222:	b328      	cbz	r0, 16270 <net_buf_unref+0x54>
   16224:	4e1c      	ldr	r6, [pc, #112]	; (16298 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16226:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   16228:	f04f 082c 	mov.w	r8, #44	; 0x2c
		struct net_buf *frags = buf->frags;
   1622c:	462c      	mov	r4, r5
   1622e:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   16230:	7923      	ldrb	r3, [r4, #4]
   16232:	3b01      	subs	r3, #1
   16234:	b2db      	uxtb	r3, r3
   16236:	7123      	strb	r3, [r4, #4]
   16238:	b9c3      	cbnz	r3, 1626c <net_buf_unref+0x50>
		if (buf->__buf) {
   1623a:	6921      	ldr	r1, [r4, #16]
   1623c:	b159      	cbz	r1, 16256 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1623e:	7963      	ldrb	r3, [r4, #5]
   16240:	079b      	lsls	r3, r3, #30
   16242:	d407      	bmi.n	16254 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   16244:	79a3      	ldrb	r3, [r4, #6]
   16246:	fb08 6303 	mla	r3, r8, r3, r6
   1624a:	4620      	mov	r0, r4
   1624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1624e:	681b      	ldr	r3, [r3, #0]
   16250:	689b      	ldr	r3, [r3, #8]
   16252:	4798      	blx	r3
			buf->__buf = NULL;
   16254:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   16256:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16258:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1625a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1625e:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   16260:	6a1b      	ldr	r3, [r3, #32]
   16262:	b19b      	cbz	r3, 1628c <net_buf_unref+0x70>
			pool->destroy(buf);
   16264:	4620      	mov	r0, r4
   16266:	4798      	blx	r3
	while (buf) {
   16268:	2d00      	cmp	r5, #0
   1626a:	d1df      	bne.n	1622c <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   16270:	490a      	ldr	r1, [pc, #40]	; (1629c <net_buf_unref+0x80>)
   16272:	480b      	ldr	r0, [pc, #44]	; (162a0 <net_buf_unref+0x84>)
   16274:	4a0b      	ldr	r2, [pc, #44]	; (162a4 <net_buf_unref+0x88>)
   16276:	f240 230a 	movw	r3, #522	; 0x20a
   1627a:	f006 fdb2 	bl	1cde2 <printk>
}
   1627e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   16282:	4808      	ldr	r0, [pc, #32]	; (162a4 <net_buf_unref+0x88>)
   16284:	f240 210a 	movw	r1, #522	; 0x20a
   16288:	f007 b805 	b.w	1d296 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1628c:	4621      	mov	r1, r4
   1628e:	fb00 6008 	mla	r0, r0, r8, r6
   16292:	f009 fd4c 	bl	1fd2e <k_queue_prepend>
}
   16296:	e7e7      	b.n	16268 <net_buf_unref+0x4c>
   16298:	200006b4 	.word	0x200006b4
   1629c:	00021484 	.word	0x00021484
   162a0:	00020a75 	.word	0x00020a75
   162a4:	0002189c 	.word	0x0002189c

000162a8 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   162a8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   162aa:	4604      	mov	r4, r0
   162ac:	b958      	cbnz	r0, 162c6 <net_buf_ref+0x1e>
   162ae:	4908      	ldr	r1, [pc, #32]	; (162d0 <net_buf_ref+0x28>)
   162b0:	4808      	ldr	r0, [pc, #32]	; (162d4 <net_buf_ref+0x2c>)
   162b2:	4a09      	ldr	r2, [pc, #36]	; (162d8 <net_buf_ref+0x30>)
   162b4:	f240 2339 	movw	r3, #569	; 0x239
   162b8:	f006 fd93 	bl	1cde2 <printk>
   162bc:	4806      	ldr	r0, [pc, #24]	; (162d8 <net_buf_ref+0x30>)
   162be:	f240 2139 	movw	r1, #569	; 0x239
   162c2:	f006 ffe8 	bl	1d296 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   162c6:	7923      	ldrb	r3, [r4, #4]
   162c8:	3301      	adds	r3, #1
   162ca:	7123      	strb	r3, [r4, #4]
	return buf;
}
   162cc:	4620      	mov	r0, r4
   162ce:	bd10      	pop	{r4, pc}
   162d0:	00021484 	.word	0x00021484
   162d4:	00020a75 	.word	0x00020a75
   162d8:	0002189c 	.word	0x0002189c

000162dc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   162dc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   162de:	4604      	mov	r4, r0
   162e0:	b958      	cbnz	r0, 162fa <net_buf_frag_last+0x1e>
   162e2:	4908      	ldr	r1, [pc, #32]	; (16304 <net_buf_frag_last+0x28>)
   162e4:	4808      	ldr	r0, [pc, #32]	; (16308 <net_buf_frag_last+0x2c>)
   162e6:	4a09      	ldr	r2, [pc, #36]	; (1630c <net_buf_frag_last+0x30>)
   162e8:	f240 2376 	movw	r3, #630	; 0x276
   162ec:	f006 fd79 	bl	1cde2 <printk>
   162f0:	4806      	ldr	r0, [pc, #24]	; (1630c <net_buf_frag_last+0x30>)
   162f2:	f240 2176 	movw	r1, #630	; 0x276
   162f6:	f006 ffce 	bl	1d296 <assert_post_action>

	while (buf->frags) {
   162fa:	4620      	mov	r0, r4
   162fc:	6824      	ldr	r4, [r4, #0]
   162fe:	2c00      	cmp	r4, #0
   16300:	d1fb      	bne.n	162fa <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   16302:	bd10      	pop	{r4, pc}
   16304:	00021484 	.word	0x00021484
   16308:	00020a75 	.word	0x00020a75
   1630c:	0002189c 	.word	0x0002189c

00016310 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   16310:	b538      	push	{r3, r4, r5, lr}
   16312:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   16314:	4604      	mov	r4, r0
   16316:	b958      	cbnz	r0, 16330 <net_buf_frag_insert+0x20>
   16318:	4910      	ldr	r1, [pc, #64]	; (1635c <net_buf_frag_insert+0x4c>)
   1631a:	4811      	ldr	r0, [pc, #68]	; (16360 <net_buf_frag_insert+0x50>)
   1631c:	4a11      	ldr	r2, [pc, #68]	; (16364 <net_buf_frag_insert+0x54>)
   1631e:	f240 2381 	movw	r3, #641	; 0x281
   16322:	f006 fd5e 	bl	1cde2 <printk>
   16326:	480f      	ldr	r0, [pc, #60]	; (16364 <net_buf_frag_insert+0x54>)
   16328:	f240 2181 	movw	r1, #641	; 0x281
   1632c:	f006 ffb3 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   16330:	b95d      	cbnz	r5, 1634a <net_buf_frag_insert+0x3a>
   16332:	490d      	ldr	r1, [pc, #52]	; (16368 <net_buf_frag_insert+0x58>)
   16334:	480a      	ldr	r0, [pc, #40]	; (16360 <net_buf_frag_insert+0x50>)
   16336:	4a0b      	ldr	r2, [pc, #44]	; (16364 <net_buf_frag_insert+0x54>)
   16338:	f240 2382 	movw	r3, #642	; 0x282
   1633c:	f006 fd51 	bl	1cde2 <printk>
   16340:	4808      	ldr	r0, [pc, #32]	; (16364 <net_buf_frag_insert+0x54>)
   16342:	f240 2182 	movw	r1, #642	; 0x282
   16346:	f006 ffa6 	bl	1d296 <assert_post_action>

	if (parent->frags) {
   1634a:	6823      	ldr	r3, [r4, #0]
   1634c:	b123      	cbz	r3, 16358 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   1634e:	4628      	mov	r0, r5
   16350:	f7ff ffc4 	bl	162dc <net_buf_frag_last>
   16354:	6823      	ldr	r3, [r4, #0]
   16356:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   16358:	6025      	str	r5, [r4, #0]
}
   1635a:	bd38      	pop	{r3, r4, r5, pc}
   1635c:	00021924 	.word	0x00021924
   16360:	00020a75 	.word	0x00020a75
   16364:	0002189c 	.word	0x0002189c
   16368:	0002192b 	.word	0x0002192b

0001636c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1636c:	b538      	push	{r3, r4, r5, lr}
   1636e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   16370:	460d      	mov	r5, r1
   16372:	b959      	cbnz	r1, 1638c <net_buf_frag_add+0x20>
   16374:	490c      	ldr	r1, [pc, #48]	; (163a8 <net_buf_frag_add+0x3c>)
   16376:	480d      	ldr	r0, [pc, #52]	; (163ac <net_buf_frag_add+0x40>)
   16378:	4a0d      	ldr	r2, [pc, #52]	; (163b0 <net_buf_frag_add+0x44>)
   1637a:	f240 238d 	movw	r3, #653	; 0x28d
   1637e:	f006 fd30 	bl	1cde2 <printk>
   16382:	480b      	ldr	r0, [pc, #44]	; (163b0 <net_buf_frag_add+0x44>)
   16384:	f240 218d 	movw	r1, #653	; 0x28d
   16388:	f006 ff85 	bl	1d296 <assert_post_action>

	if (!head) {
   1638c:	b924      	cbnz	r4, 16398 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   1638e:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   16390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   16394:	f7ff bf88 	b.w	162a8 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   16398:	4620      	mov	r0, r4
   1639a:	f7ff ff9f 	bl	162dc <net_buf_frag_last>
   1639e:	4629      	mov	r1, r5
   163a0:	f7ff ffb6 	bl	16310 <net_buf_frag_insert>
}
   163a4:	4620      	mov	r0, r4
   163a6:	bd38      	pop	{r3, r4, r5, pc}
   163a8:	0002192b 	.word	0x0002192b
   163ac:	00020a75 	.word	0x00020a75
   163b0:	0002189c 	.word	0x0002189c

000163b4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   163b4:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   163b6:	6882      	ldr	r2, [r0, #8]
   163b8:	6803      	ldr	r3, [r0, #0]
   163ba:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   163bc:	4299      	cmp	r1, r3
{
   163be:	4604      	mov	r4, r0
   163c0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   163c2:	d90b      	bls.n	163dc <net_buf_simple_push+0x28>
   163c4:	4909      	ldr	r1, [pc, #36]	; (163ec <net_buf_simple_push+0x38>)
   163c6:	480a      	ldr	r0, [pc, #40]	; (163f0 <net_buf_simple_push+0x3c>)
   163c8:	4a0a      	ldr	r2, [pc, #40]	; (163f4 <net_buf_simple_push+0x40>)
   163ca:	f240 4311 	movw	r3, #1041	; 0x411
   163ce:	f006 fd08 	bl	1cde2 <printk>
   163d2:	4808      	ldr	r0, [pc, #32]	; (163f4 <net_buf_simple_push+0x40>)
   163d4:	f240 4111 	movw	r1, #1041	; 0x411
   163d8:	f006 ff5d 	bl	1d296 <assert_post_action>
	buf->data -= len;
   163dc:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   163de:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   163e0:	1b40      	subs	r0, r0, r5
	buf->len += len;
   163e2:	440d      	add	r5, r1
	buf->data -= len;
   163e4:	6020      	str	r0, [r4, #0]
	buf->len += len;
   163e6:	80a5      	strh	r5, [r4, #4]
}
   163e8:	bd38      	pop	{r3, r4, r5, pc}
   163ea:	bf00      	nop
   163ec:	00021940 	.word	0x00021940
   163f0:	00020a75 	.word	0x00020a75
   163f4:	0002189c 	.word	0x0002189c

000163f8 <net_buf_simple_pull>:
{
   163f8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   163fa:	8883      	ldrh	r3, [r0, #4]
   163fc:	428b      	cmp	r3, r1
{
   163fe:	4604      	mov	r4, r0
   16400:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   16402:	d20b      	bcs.n	1641c <net_buf_simple_pull+0x24>
   16404:	4909      	ldr	r1, [pc, #36]	; (1642c <net_buf_simple_pull+0x34>)
   16406:	480a      	ldr	r0, [pc, #40]	; (16430 <net_buf_simple_pull+0x38>)
   16408:	4a0a      	ldr	r2, [pc, #40]	; (16434 <net_buf_simple_pull+0x3c>)
   1640a:	f240 4371 	movw	r3, #1137	; 0x471
   1640e:	f006 fce8 	bl	1cde2 <printk>
   16412:	4808      	ldr	r0, [pc, #32]	; (16434 <net_buf_simple_pull+0x3c>)
   16414:	f240 4171 	movw	r1, #1137	; 0x471
   16418:	f006 ff3d 	bl	1d296 <assert_post_action>
	buf->len -= len;
   1641c:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1641e:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   16420:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   16422:	4428      	add	r0, r5
	buf->len -= len;
   16424:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   16426:	6020      	str	r0, [r4, #0]
}
   16428:	bd38      	pop	{r3, r4, r5, pc}
   1642a:	bf00      	nop
   1642c:	00021930 	.word	0x00021930
   16430:	00020a75 	.word	0x00020a75
   16434:	0002189c 	.word	0x0002189c

00016438 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   16438:	8883      	ldrh	r3, [r0, #4]
   1643a:	428b      	cmp	r3, r1
{
   1643c:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1643e:	6806      	ldr	r6, [r0, #0]
{
   16440:	4604      	mov	r4, r0
   16442:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   16444:	d20b      	bcs.n	1645e <net_buf_simple_pull_mem+0x26>
   16446:	490a      	ldr	r1, [pc, #40]	; (16470 <net_buf_simple_pull_mem+0x38>)
   16448:	480a      	ldr	r0, [pc, #40]	; (16474 <net_buf_simple_pull_mem+0x3c>)
   1644a:	4a0b      	ldr	r2, [pc, #44]	; (16478 <net_buf_simple_pull_mem+0x40>)
   1644c:	f240 437d 	movw	r3, #1149	; 0x47d
   16450:	f006 fcc7 	bl	1cde2 <printk>
   16454:	4808      	ldr	r0, [pc, #32]	; (16478 <net_buf_simple_pull_mem+0x40>)
   16456:	f240 417d 	movw	r1, #1149	; 0x47d
   1645a:	f006 ff1c 	bl	1d296 <assert_post_action>
	buf->len -= len;
   1645e:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   16460:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   16462:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   16464:	4429      	add	r1, r5
	buf->len -= len;
   16466:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   16468:	6021      	str	r1, [r4, #0]
}
   1646a:	4630      	mov	r0, r6
   1646c:	bd70      	pop	{r4, r5, r6, pc}
   1646e:	bf00      	nop
   16470:	00021930 	.word	0x00021930
   16474:	00020a75 	.word	0x00020a75
   16478:	0002189c 	.word	0x0002189c

0001647c <net_buf_simple_add>:
{
   1647c:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1647e:	6803      	ldr	r3, [r0, #0]
   16480:	8886      	ldrh	r6, [r0, #4]
   16482:	4604      	mov	r4, r0
   16484:	460d      	mov	r5, r1
   16486:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   16488:	f008 ffc9 	bl	1f41e <net_buf_simple_tailroom>
   1648c:	4288      	cmp	r0, r1
   1648e:	d20b      	bcs.n	164a8 <net_buf_simple_add+0x2c>
   16490:	4908      	ldr	r1, [pc, #32]	; (164b4 <net_buf_simple_add+0x38>)
   16492:	4809      	ldr	r0, [pc, #36]	; (164b8 <net_buf_simple_add+0x3c>)
   16494:	4a09      	ldr	r2, [pc, #36]	; (164bc <net_buf_simple_add+0x40>)
   16496:	f240 3322 	movw	r3, #802	; 0x322
   1649a:	f006 fca2 	bl	1cde2 <printk>
   1649e:	4807      	ldr	r0, [pc, #28]	; (164bc <net_buf_simple_add+0x40>)
   164a0:	f240 3122 	movw	r1, #802	; 0x322
   164a4:	f006 fef7 	bl	1d296 <assert_post_action>
	buf->len += len;
   164a8:	88a1      	ldrh	r1, [r4, #4]
   164aa:	440d      	add	r5, r1
   164ac:	80a5      	strh	r5, [r4, #4]
}
   164ae:	4630      	mov	r0, r6
   164b0:	bd70      	pop	{r4, r5, r6, pc}
   164b2:	bf00      	nop
   164b4:	00021964 	.word	0x00021964
   164b8:	00020a75 	.word	0x00020a75
   164bc:	0002189c 	.word	0x0002189c

000164c0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   164c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   164c4:	4c10      	ldr	r4, [pc, #64]	; (16508 <onoff_start+0x48>)
   164c6:	1b07      	subs	r7, r0, r4
   164c8:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   164cc:	f04f 080c 	mov.w	r8, #12
   164d0:	fb08 f807 	mul.w	r8, r8, r7
{
   164d4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   164d6:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
   164da:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   164dc:	4420      	add	r0, r4
   164de:	2140      	movs	r1, #64	; 0x40
   164e0:	f008 ffba 	bl	1f458 <set_starting_state>
	if (err < 0) {
   164e4:	1e01      	subs	r1, r0, #0
   164e6:	db09      	blt.n	164fc <onoff_start+0x3c>
	subdata->cb = cb;
   164e8:	4b08      	ldr	r3, [pc, #32]	; (1650c <onoff_start+0x4c>)
   164ea:	4444      	add	r4, r8
	subdata->user_data = user_data;
   164ec:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   164f0:	4b07      	ldr	r3, [pc, #28]	; (16510 <onoff_start+0x50>)
   164f2:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   164f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   164fa:	4718      	bx	r3
		notify(mgr, err);
   164fc:	4630      	mov	r0, r6
   164fe:	462b      	mov	r3, r5
}
   16500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   16504:	4718      	bx	r3
   16506:	bf00      	nop
   16508:	20001d44 	.word	0x20001d44
   1650c:	0001f4bb 	.word	0x0001f4bb
   16510:	0002078c 	.word	0x0002078c

00016514 <get_status>:
{
   16514:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   16516:	b2cc      	uxtb	r4, r1
   16518:	2c01      	cmp	r4, #1
{
   1651a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1651c:	d909      	bls.n	16532 <get_status+0x1e>
   1651e:	4909      	ldr	r1, [pc, #36]	; (16544 <get_status+0x30>)
   16520:	4809      	ldr	r0, [pc, #36]	; (16548 <get_status+0x34>)
   16522:	4a0a      	ldr	r2, [pc, #40]	; (1654c <get_status+0x38>)
   16524:	237e      	movs	r3, #126	; 0x7e
   16526:	f006 fc5c 	bl	1cde2 <printk>
   1652a:	4808      	ldr	r0, [pc, #32]	; (1654c <get_status+0x38>)
   1652c:	217e      	movs	r1, #126	; 0x7e
   1652e:	f006 feb2 	bl	1d296 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   16532:	692b      	ldr	r3, [r5, #16]
   16534:	210c      	movs	r1, #12
   16536:	fb04 3401 	mla	r4, r4, r1, r3
   1653a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1653c:	f000 0007 	and.w	r0, r0, #7
   16540:	bd38      	pop	{r3, r4, r5, pc}
   16542:	bf00      	nop
   16544:	000219c5 	.word	0x000219c5
   16548:	00020a75 	.word	0x00020a75
   1654c:	00021988 	.word	0x00021988

00016550 <stop>:
{
   16550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16552:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   16554:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   16556:	6907      	ldr	r7, [r0, #16]
{
   16558:	4605      	mov	r5, r0
   1655a:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1655c:	d90b      	bls.n	16576 <stop+0x26>
   1655e:	4918      	ldr	r1, [pc, #96]	; (165c0 <stop+0x70>)
   16560:	4818      	ldr	r0, [pc, #96]	; (165c4 <stop+0x74>)
   16562:	4a19      	ldr	r2, [pc, #100]	; (165c8 <stop+0x78>)
   16564:	f240 1353 	movw	r3, #339	; 0x153
   16568:	f006 fc3b 	bl	1cde2 <printk>
   1656c:	4816      	ldr	r0, [pc, #88]	; (165c8 <stop+0x78>)
   1656e:	f240 1153 	movw	r1, #339	; 0x153
   16572:	f006 fe90 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   16576:	f04f 0340 	mov.w	r3, #64	; 0x40
   1657a:	f3ef 8211 	mrs	r2, BASEPRI
   1657e:	f383 8812 	msr	BASEPRI_MAX, r3
   16582:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   16586:	230c      	movs	r3, #12
   16588:	fb03 7104 	mla	r1, r3, r4, r7
   1658c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1658e:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   16592:	d001      	beq.n	16598 <stop+0x48>
   16594:	428e      	cmp	r6, r1
   16596:	d110      	bne.n	165ba <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   16598:	fb03 7304 	mla	r3, r3, r4, r7
   1659c:	2101      	movs	r1, #1
   1659e:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   165a0:	2000      	movs	r0, #0
	__asm__ volatile(
   165a2:	f382 8811 	msr	BASEPRI, r2
   165a6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   165aa:	b928      	cbnz	r0, 165b8 <stop+0x68>
	get_sub_config(dev, type)->stop();
   165ac:	6869      	ldr	r1, [r5, #4]
   165ae:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   165b2:	6863      	ldr	r3, [r4, #4]
   165b4:	4798      	blx	r3
	return 0;
   165b6:	2000      	movs	r0, #0
}
   165b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   165ba:	f04f 30ff 	mov.w	r0, #4294967295
   165be:	e7f0      	b.n	165a2 <stop+0x52>
   165c0:	000219c5 	.word	0x000219c5
   165c4:	00020a75 	.word	0x00020a75
   165c8:	00021988 	.word	0x00021988

000165cc <onoff_stop>:
{
   165cc:	b570      	push	{r4, r5, r6, lr}
   165ce:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   165d0:	4906      	ldr	r1, [pc, #24]	; (165ec <onoff_stop+0x20>)
   165d2:	1a41      	subs	r1, r0, r1
{
   165d4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   165d6:	1149      	asrs	r1, r1, #5
   165d8:	4805      	ldr	r0, [pc, #20]	; (165f0 <onoff_stop+0x24>)
   165da:	2240      	movs	r2, #64	; 0x40
   165dc:	f7ff ffb8 	bl	16550 <stop>
	notify(mgr, res);
   165e0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   165e2:	4601      	mov	r1, r0
	notify(mgr, res);
   165e4:	4620      	mov	r0, r4
}
   165e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   165ea:	4718      	bx	r3
   165ec:	20001d44 	.word	0x20001d44
   165f0:	00020100 	.word	0x00020100

000165f4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   165f4:	2200      	movs	r2, #0
{
   165f6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   165f8:	2101      	movs	r1, #1
{
   165fa:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   165fc:	4610      	mov	r0, r2
   165fe:	f7fa ff13 	bl	11428 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   16602:	2000      	movs	r0, #0
   16604:	f7fa fede 	bl	113c4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   16608:	480f      	ldr	r0, [pc, #60]	; (16648 <clk_init+0x54>)
   1660a:	f002 f933 	bl	18874 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1660e:	4b0f      	ldr	r3, [pc, #60]	; (1664c <clk_init+0x58>)
   16610:	4298      	cmp	r0, r3
   16612:	d115      	bne.n	16640 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   16614:	f009 fb35 	bl	1fc82 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   16618:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1661a:	490d      	ldr	r1, [pc, #52]	; (16650 <clk_init+0x5c>)
   1661c:	4630      	mov	r0, r6
   1661e:	f006 fc3b 	bl	1ce98 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   16622:	2800      	cmp	r0, #0
   16624:	db0b      	blt.n	1663e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   16626:	2501      	movs	r5, #1
   16628:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   1662a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1662c:	4908      	ldr	r1, [pc, #32]	; (16650 <clk_init+0x5c>)
   1662e:	f104 0020 	add.w	r0, r4, #32
   16632:	f006 fc31 	bl	1ce98 <onoff_manager_init>
		if (err < 0) {
   16636:	2800      	cmp	r0, #0
   16638:	db01      	blt.n	1663e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1663a:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1663c:	2000      	movs	r0, #0
}
   1663e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   16640:	f06f 0004 	mvn.w	r0, #4
   16644:	e7fb      	b.n	1663e <clk_init+0x4a>
   16646:	bf00      	nop
   16648:	00016689 	.word	0x00016689
   1664c:	0bad0000 	.word	0x0bad0000
   16650:	0002079c 	.word	0x0002079c

00016654 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   16654:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   16656:	230c      	movs	r3, #12
   16658:	4809      	ldr	r0, [pc, #36]	; (16680 <clkstarted_handle.constprop.0+0x2c>)
   1665a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1665c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1665e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   16660:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   16664:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   16666:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   16668:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1666a:	4418      	add	r0, r3
   1666c:	f008 ff12 	bl	1f494 <set_on_state>
	if (callback) {
   16670:	b12d      	cbz	r5, 1667e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   16672:	4632      	mov	r2, r6
   16674:	462b      	mov	r3, r5
   16676:	4803      	ldr	r0, [pc, #12]	; (16684 <clkstarted_handle.constprop.0+0x30>)
}
   16678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1667c:	4718      	bx	r3
}
   1667e:	bd70      	pop	{r4, r5, r6, pc}
   16680:	20001d44 	.word	0x20001d44
   16684:	00020100 	.word	0x00020100

00016688 <clock_event_handler>:
	switch (event) {
   16688:	2801      	cmp	r0, #1
{
   1668a:	b508      	push	{r3, lr}
	switch (event) {
   1668c:	d006      	beq.n	1669c <clock_event_handler+0x14>
   1668e:	2803      	cmp	r0, #3
   16690:	d008      	beq.n	166a4 <clock_event_handler+0x1c>
   16692:	b9a8      	cbnz	r0, 166c0 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   16694:	4b10      	ldr	r3, [pc, #64]	; (166d8 <clock_event_handler+0x50>)
   16696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16698:	075b      	lsls	r3, r3, #29
   1669a:	d11b      	bne.n	166d4 <clock_event_handler+0x4c>
}
   1669c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   166a0:	f7ff bfd8 	b.w	16654 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   166a4:	490d      	ldr	r1, [pc, #52]	; (166dc <clock_event_handler+0x54>)
   166a6:	4a0e      	ldr	r2, [pc, #56]	; (166e0 <clock_event_handler+0x58>)
   166a8:	480e      	ldr	r0, [pc, #56]	; (166e4 <clock_event_handler+0x5c>)
   166aa:	f240 2366 	movw	r3, #614	; 0x266
   166ae:	f006 fb98 	bl	1cde2 <printk>
   166b2:	f240 2166 	movw	r1, #614	; 0x266
}
   166b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   166ba:	4809      	ldr	r0, [pc, #36]	; (166e0 <clock_event_handler+0x58>)
   166bc:	f006 bdeb 	b.w	1d296 <assert_post_action>
   166c0:	4906      	ldr	r1, [pc, #24]	; (166dc <clock_event_handler+0x54>)
   166c2:	4a07      	ldr	r2, [pc, #28]	; (166e0 <clock_event_handler+0x58>)
   166c4:	4807      	ldr	r0, [pc, #28]	; (166e4 <clock_event_handler+0x5c>)
   166c6:	f240 236a 	movw	r3, #618	; 0x26a
   166ca:	f006 fb8a 	bl	1cde2 <printk>
   166ce:	f240 216a 	movw	r1, #618	; 0x26a
   166d2:	e7f0      	b.n	166b6 <clock_event_handler+0x2e>
}
   166d4:	bd08      	pop	{r3, pc}
   166d6:	bf00      	nop
   166d8:	20001d44 	.word	0x20001d44
   166dc:	00022787 	.word	0x00022787
   166e0:	00021988 	.word	0x00021988
   166e4:	00020a75 	.word	0x00020a75

000166e8 <generic_hfclk_start>:
{
   166e8:	b508      	push	{r3, lr}
	__asm__ volatile(
   166ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   166ee:	f3ef 8111 	mrs	r1, BASEPRI
   166f2:	f383 8812 	msr	BASEPRI_MAX, r3
   166f6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   166fa:	4a12      	ldr	r2, [pc, #72]	; (16744 <generic_hfclk_start+0x5c>)
   166fc:	6813      	ldr	r3, [r2, #0]
   166fe:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   16702:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   16706:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   16708:	d00c      	beq.n	16724 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1670a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1670e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16712:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   16716:	f013 0301 	ands.w	r3, r3, #1
   1671a:	d003      	beq.n	16724 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1671c:	480a      	ldr	r0, [pc, #40]	; (16748 <generic_hfclk_start+0x60>)
   1671e:	f008 feb9 	bl	1f494 <set_on_state>
			already_started = true;
   16722:	2301      	movs	r3, #1
	__asm__ volatile(
   16724:	f381 8811 	msr	BASEPRI, r1
   16728:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1672c:	b123      	cbz	r3, 16738 <generic_hfclk_start+0x50>
}
   1672e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   16732:	2000      	movs	r0, #0
   16734:	f7ff bf8e 	b.w	16654 <clkstarted_handle.constprop.0>
}
   16738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1673c:	2001      	movs	r0, #1
   1673e:	f002 b84f 	b.w	187e0 <nrfx_clock_start>
   16742:	bf00      	nop
   16744:	20001d9c 	.word	0x20001d9c
   16748:	20001d8c 	.word	0x20001d8c

0001674c <generic_hfclk_stop>:
   1674c:	4b09      	ldr	r3, [pc, #36]	; (16774 <generic_hfclk_stop+0x28>)
   1674e:	f3bf 8f5b 	dmb	ish
   16752:	e853 2f00 	ldrex	r2, [r3]
   16756:	f022 0102 	bic.w	r1, r2, #2
   1675a:	e843 1000 	strex	r0, r1, [r3]
   1675e:	2800      	cmp	r0, #0
   16760:	d1f7      	bne.n	16752 <generic_hfclk_stop+0x6>
   16762:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   16766:	07d3      	lsls	r3, r2, #31
   16768:	d402      	bmi.n	16770 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1676a:	2001      	movs	r0, #1
   1676c:	f002 b862 	b.w	18834 <nrfx_clock_stop>
}
   16770:	4770      	bx	lr
   16772:	bf00      	nop
   16774:	20001d9c 	.word	0x20001d9c

00016778 <api_blocking_start>:
{
   16778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1677a:	2200      	movs	r2, #0
   1677c:	2301      	movs	r3, #1
   1677e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   16782:	ab04      	add	r3, sp, #16
   16784:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16788:	4a09      	ldr	r2, [pc, #36]	; (167b0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1678a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1678e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   16790:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   16794:	f008 fea3 	bl	1f4de <api_start>
	if (err < 0) {
   16798:	2800      	cmp	r0, #0
   1679a:	db05      	blt.n	167a8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1679c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   167a0:	2300      	movs	r3, #0
   167a2:	4668      	mov	r0, sp
   167a4:	f003 fa86 	bl	19cb4 <z_impl_k_sem_take>
}
   167a8:	b007      	add	sp, #28
   167aa:	f85d fb04 	ldr.w	pc, [sp], #4
   167ae:	bf00      	nop
   167b0:	0001f4d9 	.word	0x0001f4d9

000167b4 <z_nrf_clock_control_lf_on>:
{
   167b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   167b8:	4949      	ldr	r1, [pc, #292]	; (168e0 <z_nrf_clock_control_lf_on+0x12c>)
   167ba:	f3bf 8f5b 	dmb	ish
   167be:	4605      	mov	r5, r0
   167c0:	2201      	movs	r2, #1
   167c2:	e851 3f00 	ldrex	r3, [r1]
   167c6:	e841 2000 	strex	r0, r2, [r1]
   167ca:	2800      	cmp	r0, #0
   167cc:	d1f9      	bne.n	167c2 <z_nrf_clock_control_lf_on+0xe>
   167ce:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   167d2:	b9a3      	cbnz	r3, 167fe <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   167d4:	4943      	ldr	r1, [pc, #268]	; (168e4 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   167d6:	4844      	ldr	r0, [pc, #272]	; (168e8 <z_nrf_clock_control_lf_on+0x134>)
   167d8:	604b      	str	r3, [r1, #4]
   167da:	60cb      	str	r3, [r1, #12]
   167dc:	608a      	str	r2, [r1, #8]
   167de:	f7f9 fc47 	bl	10070 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   167e2:	2800      	cmp	r0, #0
   167e4:	da0b      	bge.n	167fe <z_nrf_clock_control_lf_on+0x4a>
   167e6:	4941      	ldr	r1, [pc, #260]	; (168ec <z_nrf_clock_control_lf_on+0x138>)
   167e8:	4841      	ldr	r0, [pc, #260]	; (168f0 <z_nrf_clock_control_lf_on+0x13c>)
   167ea:	4a42      	ldr	r2, [pc, #264]	; (168f4 <z_nrf_clock_control_lf_on+0x140>)
   167ec:	f240 2326 	movw	r3, #550	; 0x226
   167f0:	f006 faf7 	bl	1cde2 <printk>
   167f4:	483f      	ldr	r0, [pc, #252]	; (168f4 <z_nrf_clock_control_lf_on+0x140>)
   167f6:	f240 2126 	movw	r1, #550	; 0x226
   167fa:	f006 fd4c 	bl	1d296 <assert_post_action>
	switch (start_mode) {
   167fe:	b3ad      	cbz	r5, 1686c <z_nrf_clock_control_lf_on+0xb8>
   16800:	1e6b      	subs	r3, r5, #1
   16802:	2b01      	cmp	r3, #1
   16804:	d856      	bhi.n	168b4 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   16806:	2d01      	cmp	r5, #1
   16808:	d107      	bne.n	1681a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1680a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1680e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   16812:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   16816:	2b01      	cmp	r3, #1
   16818:	d028      	beq.n	1686c <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1681a:	f009 fa52 	bl	1fcc2 <k_is_in_isr>
   1681e:	4604      	mov	r4, r0
   16820:	b918      	cbnz	r0, 1682a <z_nrf_clock_control_lf_on+0x76>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   16822:	4b35      	ldr	r3, [pc, #212]	; (168f8 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   16824:	781b      	ldrb	r3, [r3, #0]
   16826:	2b00      	cmp	r3, #0
   16828:	d152      	bne.n	168d0 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   1682a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1682e:	f3ef 8611 	mrs	r6, BASEPRI
   16832:	f383 8812 	msr	BASEPRI_MAX, r3
   16836:	f3bf 8f6f 	isb	sy
   1683a:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1683c:	4f2f      	ldr	r7, [pc, #188]	; (168fc <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1683e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 16904 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16842:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 16908 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1684a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1684e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   16852:	03d2      	lsls	r2, r2, #15
   16854:	d50c      	bpl.n	16870 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   16856:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1685a:	2b01      	cmp	r3, #1
   1685c:	d001      	beq.n	16862 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1685e:	2d01      	cmp	r5, #1
   16860:	d106      	bne.n	16870 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   16862:	b30c      	cbz	r4, 168a8 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   16864:	f386 8811 	msr	BASEPRI, r6
   16868:	f3bf 8f6f 	isb	sy
}
   1686c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   16870:	b1ac      	cbz	r4, 1689e <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   16872:	4630      	mov	r0, r6
   16874:	f7fa fd9c 	bl	113b0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   16878:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1687c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   16880:	2b00      	cmp	r3, #0
   16882:	d1e0      	bne.n	16846 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16884:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   16886:	2900      	cmp	r1, #0
   16888:	d0dd      	beq.n	16846 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1688a:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1688c:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1688e:	2301      	movs	r3, #1
   16890:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   16894:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16898:	f8c9 3000 	str.w	r3, [r9]
}
   1689c:	e7d3      	b.n	16846 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   1689e:	2100      	movs	r1, #0
   168a0:	2021      	movs	r0, #33	; 0x21
   168a2:	f005 f87f 	bl	1b9a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   168a6:	e7e7      	b.n	16878 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   168a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   168ac:	2202      	movs	r2, #2
   168ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   168b2:	e7db      	b.n	1686c <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   168b4:	4912      	ldr	r1, [pc, #72]	; (16900 <z_nrf_clock_control_lf_on+0x14c>)
   168b6:	480e      	ldr	r0, [pc, #56]	; (168f0 <z_nrf_clock_control_lf_on+0x13c>)
   168b8:	4a0e      	ldr	r2, [pc, #56]	; (168f4 <z_nrf_clock_control_lf_on+0x140>)
   168ba:	f44f 730e 	mov.w	r3, #568	; 0x238
   168be:	f006 fa90 	bl	1cde2 <printk>
}
   168c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   168c6:	480b      	ldr	r0, [pc, #44]	; (168f4 <z_nrf_clock_control_lf_on+0x140>)
   168c8:	f44f 710e 	mov.w	r1, #568	; 0x238
   168cc:	f006 bce3 	b.w	1d296 <assert_post_action>
    p_reg->INTENCLR = mask;
   168d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   168d4:	2202      	movs	r2, #2
   168d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   168da:	4606      	mov	r6, r0
}
   168dc:	e7ae      	b.n	1683c <z_nrf_clock_control_lf_on+0x88>
   168de:	bf00      	nop
   168e0:	20001da0 	.word	0x20001da0
   168e4:	20001d34 	.word	0x20001d34
   168e8:	20001d64 	.word	0x20001d64
   168ec:	000219e9 	.word	0x000219e9
   168f0:	00020a75 	.word	0x00020a75
   168f4:	00021988 	.word	0x00021988
   168f8:	20002930 	.word	0x20002930
   168fc:	40000104 	.word	0x40000104
   16900:	00022787 	.word	0x00022787
   16904:	e000e100 	.word	0xe000e100
   16908:	40000008 	.word	0x40000008

0001690c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1690c:	280a      	cmp	r0, #10
{
   1690e:	b538      	push	{r3, r4, r5, lr}
   16910:	4d06      	ldr	r5, [pc, #24]	; (1692c <console_out+0x20>)
   16912:	4604      	mov	r4, r0
	if ('\n' == c) {
   16914:	d103      	bne.n	1691e <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
   16916:	6828      	ldr	r0, [r5, #0]
   16918:	210d      	movs	r1, #13
   1691a:	f008 fdfb 	bl	1f514 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   1691e:	6828      	ldr	r0, [r5, #0]
   16920:	b2e1      	uxtb	r1, r4
   16922:	f008 fdf7 	bl	1f514 <uart_poll_out>

	return c;
}
   16926:	4620      	mov	r0, r4
   16928:	bd38      	pop	{r3, r4, r5, pc}
   1692a:	bf00      	nop
   1692c:	20001da4 	.word	0x20001da4

00016930 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   16930:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   16932:	4b08      	ldr	r3, [pc, #32]	; (16954 <uart_console_init+0x24>)
   16934:	4808      	ldr	r0, [pc, #32]	; (16958 <uart_console_init+0x28>)
   16936:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   16938:	f009 f9b1 	bl	1fc9e <z_device_ready>
   1693c:	b138      	cbz	r0, 1694e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1693e:	4807      	ldr	r0, [pc, #28]	; (1695c <uart_console_init+0x2c>)
   16940:	f7fb f9d0 	bl	11ce4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   16944:	4805      	ldr	r0, [pc, #20]	; (1695c <uart_console_init+0x2c>)
   16946:	f7f9 f93f 	bl	fbc8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1694a:	2000      	movs	r0, #0
}
   1694c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1694e:	f06f 0012 	mvn.w	r0, #18
   16952:	e7fb      	b.n	1694c <uart_console_init+0x1c>
   16954:	20001da4 	.word	0x20001da4
   16958:	00020130 	.word	0x00020130
   1695c:	0001690d 	.word	0x0001690d

00016960 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   16960:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   16962:	6905      	ldr	r5, [r0, #16]
{
   16964:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   16966:	460c      	mov	r4, r1
   16968:	b961      	cbnz	r1, 16984 <gpio_nrfx_manage_callback+0x24>
   1696a:	4922      	ldr	r1, [pc, #136]	; (169f4 <gpio_nrfx_manage_callback+0x94>)
   1696c:	4a22      	ldr	r2, [pc, #136]	; (169f8 <gpio_nrfx_manage_callback+0x98>)
   1696e:	4823      	ldr	r0, [pc, #140]	; (169fc <gpio_nrfx_manage_callback+0x9c>)
   16970:	2324      	movs	r3, #36	; 0x24
   16972:	f006 fa36 	bl	1cde2 <printk>
   16976:	4822      	ldr	r0, [pc, #136]	; (16a00 <gpio_nrfx_manage_callback+0xa0>)
   16978:	f006 fa33 	bl	1cde2 <printk>
   1697c:	481e      	ldr	r0, [pc, #120]	; (169f8 <gpio_nrfx_manage_callback+0x98>)
   1697e:	2124      	movs	r1, #36	; 0x24
   16980:	f006 fc89 	bl	1d296 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   16984:	6863      	ldr	r3, [r4, #4]
   16986:	b963      	cbnz	r3, 169a2 <gpio_nrfx_manage_callback+0x42>
   16988:	491e      	ldr	r1, [pc, #120]	; (16a04 <gpio_nrfx_manage_callback+0xa4>)
   1698a:	4a1b      	ldr	r2, [pc, #108]	; (169f8 <gpio_nrfx_manage_callback+0x98>)
   1698c:	481b      	ldr	r0, [pc, #108]	; (169fc <gpio_nrfx_manage_callback+0x9c>)
   1698e:	2325      	movs	r3, #37	; 0x25
   16990:	f006 fa27 	bl	1cde2 <printk>
   16994:	481c      	ldr	r0, [pc, #112]	; (16a08 <gpio_nrfx_manage_callback+0xa8>)
   16996:	f006 fa24 	bl	1cde2 <printk>
   1699a:	4817      	ldr	r0, [pc, #92]	; (169f8 <gpio_nrfx_manage_callback+0x98>)
   1699c:	2125      	movs	r1, #37	; 0x25
   1699e:	f006 fc7a 	bl	1d296 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   169a2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   169a4:	b15b      	cbz	r3, 169be <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   169a6:	2200      	movs	r2, #0
   169a8:	429c      	cmp	r4, r3
   169aa:	d113      	bne.n	169d4 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   169ac:	6823      	ldr	r3, [r4, #0]
   169ae:	b95a      	cbnz	r2, 169c8 <gpio_nrfx_manage_callback+0x68>
   169b0:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   169b2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   169b4:	4294      	cmp	r4, r2
   169b6:	d100      	bne.n	169ba <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   169b8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   169ba:	2300      	movs	r3, #0
   169bc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   169be:	b976      	cbnz	r6, 169de <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   169c0:	2000      	movs	r0, #0
				     callback, set);
}
   169c2:	bd70      	pop	{r4, r5, r6, pc}
   169c4:	460b      	mov	r3, r1
   169c6:	e7ef      	b.n	169a8 <gpio_nrfx_manage_callback+0x48>
   169c8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   169ca:	68ab      	ldr	r3, [r5, #8]
   169cc:	429c      	cmp	r4, r3
	list->tail = node;
   169ce:	bf08      	it	eq
   169d0:	60aa      	streq	r2, [r5, #8]
}
   169d2:	e7f2      	b.n	169ba <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   169d4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   169d6:	461a      	mov	r2, r3
   169d8:	2900      	cmp	r1, #0
   169da:	d1f3      	bne.n	169c4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   169dc:	b13e      	cbz	r6, 169ee <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   169de:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   169e0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   169e2:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   169e4:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   169e6:	2800      	cmp	r0, #0
   169e8:	d1ea      	bne.n	169c0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   169ea:	60ac      	str	r4, [r5, #8]
}
   169ec:	e7e9      	b.n	169c2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   169ee:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   169f2:	e7e6      	b.n	169c2 <gpio_nrfx_manage_callback+0x62>
   169f4:	00021a25 	.word	0x00021a25
   169f8:	000219f8 	.word	0x000219f8
   169fc:	00020a75 	.word	0x00020a75
   16a00:	00021a2e 	.word	0x00021a2e
   16a04:	00021a3d 	.word	0x00021a3d
   16a08:	00021a4f 	.word	0x00021a4f

00016a0c <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   16a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16a10:	6804      	ldr	r4, [r0, #0]
{
   16a12:	460f      	mov	r7, r1
   16a14:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16a16:	b34c      	cbz	r4, 16a6c <gpio_fire_callbacks+0x60>
	return node->next;
   16a18:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   16a1a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16a74 <gpio_fire_callbacks+0x68>
   16a1e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16a78 <gpio_fire_callbacks+0x6c>
   16a22:	f8df a058 	ldr.w	sl, [pc, #88]	; 16a7c <gpio_fire_callbacks+0x70>
   16a26:	2d00      	cmp	r5, #0
   16a28:	bf38      	it	cc
   16a2a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   16a2c:	68a3      	ldr	r3, [r4, #8]
   16a2e:	421e      	tst	r6, r3
   16a30:	d014      	beq.n	16a5c <gpio_fire_callbacks+0x50>
			__ASSERT(cb->handler, "No callback handler!");
   16a32:	6863      	ldr	r3, [r4, #4]
   16a34:	b963      	cbnz	r3, 16a50 <gpio_fire_callbacks+0x44>
   16a36:	4649      	mov	r1, r9
   16a38:	2345      	movs	r3, #69	; 0x45
   16a3a:	4642      	mov	r2, r8
   16a3c:	4650      	mov	r0, sl
   16a3e:	f006 f9d0 	bl	1cde2 <printk>
   16a42:	480b      	ldr	r0, [pc, #44]	; (16a70 <gpio_fire_callbacks+0x64>)
   16a44:	f006 f9cd 	bl	1cde2 <printk>
   16a48:	2145      	movs	r1, #69	; 0x45
   16a4a:	4640      	mov	r0, r8
   16a4c:	f006 fc23 	bl	1d296 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   16a50:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   16a54:	4621      	mov	r1, r4
   16a56:	4032      	ands	r2, r6
   16a58:	4638      	mov	r0, r7
   16a5a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   16a5c:	b135      	cbz	r5, 16a6c <gpio_fire_callbacks+0x60>
   16a5e:	682b      	ldr	r3, [r5, #0]
   16a60:	2b00      	cmp	r3, #0
   16a62:	bf38      	it	cc
   16a64:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16a66:	462c      	mov	r4, r5
   16a68:	461d      	mov	r5, r3
   16a6a:	e7df      	b.n	16a2c <gpio_fire_callbacks+0x20>
		}
	}
}
   16a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16a70:	00021a4f 	.word	0x00021a4f
   16a74:	000219f8 	.word	0x000219f8
   16a78:	00021a66 	.word	0x00021a66
   16a7c:	00020a75 	.word	0x00020a75

00016a80 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16a80:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   16a82:	0953      	lsrs	r3, r2, #5
{
   16a84:	b510      	push	{r4, lr}
   16a86:	4604      	mov	r4, r0
    switch (port)
   16a88:	d02c      	beq.n	16ae4 <nrf_gpio_pin_port_decode+0x64>
   16a8a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   16a8c:	f240 33ff 	movw	r3, #1023	; 0x3ff
   16a90:	bf18      	it	ne
   16a92:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   16a94:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   16a98:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16a9a:	07db      	lsls	r3, r3, #31
   16a9c:	d40b      	bmi.n	16ab6 <nrf_gpio_pin_port_decode+0x36>
   16a9e:	4914      	ldr	r1, [pc, #80]	; (16af0 <nrf_gpio_pin_port_decode+0x70>)
   16aa0:	4814      	ldr	r0, [pc, #80]	; (16af4 <nrf_gpio_pin_port_decode+0x74>)
   16aa2:	4a15      	ldr	r2, [pc, #84]	; (16af8 <nrf_gpio_pin_port_decode+0x78>)
   16aa4:	f44f 7305 	mov.w	r3, #532	; 0x214
   16aa8:	f006 f99b 	bl	1cde2 <printk>
   16aac:	4812      	ldr	r0, [pc, #72]	; (16af8 <nrf_gpio_pin_port_decode+0x78>)
   16aae:	f44f 7105 	mov.w	r1, #532	; 0x214
   16ab2:	f006 fbf0 	bl	1d296 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   16ab6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16ab8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16abc:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   16abe:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16ac0:	d00d      	beq.n	16ade <nrf_gpio_pin_port_decode+0x5e>
   16ac2:	2b01      	cmp	r3, #1
   16ac4:	d011      	beq.n	16aea <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   16ac6:	490d      	ldr	r1, [pc, #52]	; (16afc <nrf_gpio_pin_port_decode+0x7c>)
   16ac8:	480a      	ldr	r0, [pc, #40]	; (16af4 <nrf_gpio_pin_port_decode+0x74>)
   16aca:	4a0b      	ldr	r2, [pc, #44]	; (16af8 <nrf_gpio_pin_port_decode+0x78>)
   16acc:	f240 2319 	movw	r3, #537	; 0x219
   16ad0:	f006 f987 	bl	1cde2 <printk>
   16ad4:	4808      	ldr	r0, [pc, #32]	; (16af8 <nrf_gpio_pin_port_decode+0x78>)
   16ad6:	f240 2119 	movw	r1, #537	; 0x219
   16ada:	f006 fbdc 	bl	1d296 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16ade:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   16ae2:	bd10      	pop	{r4, pc}
    switch (port)
   16ae4:	f04f 33ff 	mov.w	r3, #4294967295
   16ae8:	e7d4      	b.n	16a94 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   16aea:	4805      	ldr	r0, [pc, #20]	; (16b00 <nrf_gpio_pin_port_decode+0x80>)
   16aec:	e7f9      	b.n	16ae2 <nrf_gpio_pin_port_decode+0x62>
   16aee:	bf00      	nop
   16af0:	00021aa5 	.word	0x00021aa5
   16af4:	00020a75 	.word	0x00020a75
   16af8:	00021a72 	.word	0x00021a72
   16afc:	00022787 	.word	0x00022787
   16b00:	50000300 	.word	0x50000300

00016b04 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   16b04:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   16b06:	4b09      	ldr	r3, [pc, #36]	; (16b2c <gpio_nrfx_init+0x28>)
   16b08:	781a      	ldrb	r2, [r3, #0]
   16b0a:	b96a      	cbnz	r2, 16b28 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   16b0c:	2101      	movs	r1, #1
   16b0e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   16b10:	2006      	movs	r0, #6
   16b12:	2105      	movs	r1, #5
   16b14:	f7fa fc88 	bl	11428 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   16b18:	2006      	movs	r0, #6
   16b1a:	f7fa fc53 	bl	113c4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   16b1e:	4b04      	ldr	r3, [pc, #16]	; (16b30 <gpio_nrfx_init+0x2c>)
   16b20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16b24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   16b28:	2000      	movs	r0, #0
   16b2a:	bd08      	pop	{r3, pc}
   16b2c:	20001fcc 	.word	0x20001fcc
   16b30:	40006000 	.word	0x40006000

00016b34 <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16b34:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   16b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   16b3c:	6904      	ldr	r4, [r0, #16]
{
   16b3e:	4607      	mov	r7, r0
   16b40:	460e      	mov	r6, r1
   16b42:	4690      	mov	r8, r2
   16b44:	4699      	mov	r9, r3
   16b46:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   16b4a:	f040 80ab 	bne.w	16ca4 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   16b4e:	6843      	ldr	r3, [r0, #4]
   16b50:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16b52:	a801      	add	r0, sp, #4
   16b54:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   16b58:	9301      	str	r3, [sp, #4]
   16b5a:	f7ff ff91 	bl	16a80 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   16b5e:	9b01      	ldr	r3, [sp, #4]
   16b60:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16b64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   16b68:	07d8      	lsls	r0, r3, #31
   16b6a:	f100 80bb 	bmi.w	16ce4 <gpio_nrfx_pin_interrupt_configure+0x1b0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16b6e:	68e3      	ldr	r3, [r4, #12]
   16b70:	2101      	movs	r1, #1
   16b72:	40b1      	lsls	r1, r6
   16b74:	4319      	orrs	r1, r3
   16b76:	6963      	ldr	r3, [r4, #20]
   16b78:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   16b7a:	2101      	movs	r1, #1
   16b7c:	40b1      	lsls	r1, r6
   16b7e:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   16b82:	bf0c      	ite	eq
   16b84:	430b      	orreq	r3, r1
   16b86:	438b      	bicne	r3, r1
   16b88:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16b8a:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   16b8c:	4a57      	ldr	r2, [pc, #348]	; (16cec <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	struct gpio_nrfx_data *data = get_port_data(port);
   16b8e:	f8d7 8010 	ldr.w	r8, [r7, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   16b92:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   16b96:	bf0c      	ite	eq
   16b98:	430b      	orreq	r3, r1
   16b9a:	438b      	bicne	r3, r1
   16b9c:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16b9e:	6923      	ldr	r3, [r4, #16]
   16ba0:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   16ba4:	bf0c      	ite	eq
   16ba6:	4319      	orreq	r1, r3
   16ba8:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16bac:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   16bae:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   16bb0:	7a1b      	ldrb	r3, [r3, #8]
   16bb2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   16bb6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16bba:	2000      	movs	r0, #0
   16bbc:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16bbe:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   16bc2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   16bc6:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   16bca:	428d      	cmp	r5, r1
   16bcc:	d175      	bne.n	16cba <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   16bce:	fa23 f100 	lsr.w	r1, r3, r0
   16bd2:	07c9      	lsls	r1, r1, #31
   16bd4:	d571      	bpl.n	16cba <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   16bd6:	0083      	lsls	r3, r0, #2
   16bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16bdc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16be0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   16be4:	f021 0101 	bic.w	r1, r1, #1
   16be8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   16bec:	2301      	movs	r3, #1
   16bee:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   16bf0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   16bf4:	b2c0      	uxtb	r0, r0
   16bf6:	f001 ff13 	bl	18a20 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   16bfa:	4628      	mov	r0, r5
   16bfc:	2100      	movs	r1, #0
   16bfe:	f008 fcb3 	bl	1f568 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   16c02:	f8d8 000c 	ldr.w	r0, [r8, #12]
   16c06:	40f0      	lsrs	r0, r6
   16c08:	f010 0001 	ands.w	r0, r0, #1
   16c0c:	d047      	beq.n	16c9e <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   16c0e:	f8d8 0014 	ldr.w	r0, [r8, #20]
   16c12:	40f0      	lsrs	r0, r6
   16c14:	f010 0401 	ands.w	r4, r0, #1
   16c18:	d057      	beq.n	16cca <gpio_nrfx_pin_interrupt_configure+0x196>
				if (data->double_edge & BIT(pin)) {
   16c1a:	f8d8 3018 	ldr.w	r3, [r8, #24]
   16c1e:	40f3      	lsrs	r3, r6
   16c20:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16c22:	bf5f      	itttt	pl
   16c24:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   16c28:	fa21 f606 	lsrpl.w	r6, r1, r6
   16c2c:	f006 0601 	andpl.w	r6, r6, #1
   16c30:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16c34:	a801      	add	r0, sp, #4
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   16c36:	bf54      	ite	pl
   16c38:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   16c3a:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   16c3c:	f001 ff12 	bl	18a64 <nrfx_gpiote_channel_alloc>
   16c40:	4b2b      	ldr	r3, [pc, #172]	; (16cf0 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   16c42:	4298      	cmp	r0, r3
   16c44:	d13e      	bne.n	16cc4 <gpio_nrfx_pin_interrupt_configure+0x190>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   16c46:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16c4a:	008b      	lsls	r3, r1, #2
   16c4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16c50:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16c54:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   16c56:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16c5a:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   16c5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   16c62:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16c66:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16c6a:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   16c6e:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   16c70:	008a      	lsls	r2, r1, #2
   16c72:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16c76:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16c7a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16c7e:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16c80:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16c84:	6010      	str	r0, [r2, #0]
   16c86:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   16c88:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   16c8c:	f042 0201 	orr.w	r2, r2, #1
   16c90:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   16c94:	4a15      	ldr	r2, [pc, #84]	; (16cec <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   16c96:	2301      	movs	r3, #1
   16c98:	408b      	lsls	r3, r1
   16c9a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16c9e:	b003      	add	sp, #12
   16ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   16ca4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   16ca8:	f47f af61 	bne.w	16b6e <gpio_nrfx_pin_interrupt_configure+0x3a>
   16cac:	2101      	movs	r1, #1
   16cae:	fa01 f306 	lsl.w	r3, r1, r6
   16cb2:	68e1      	ldr	r1, [r4, #12]
   16cb4:	ea21 0103 	bic.w	r1, r1, r3
   16cb8:	e75d      	b.n	16b76 <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16cba:	3001      	adds	r0, #1
   16cbc:	2808      	cmp	r0, #8
   16cbe:	f47f af7e 	bne.w	16bbe <gpio_nrfx_pin_interrupt_configure+0x8a>
   16cc2:	e79a      	b.n	16bfa <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   16cc4:	f06f 0012 	mvn.w	r0, #18
   16cc8:	e7e9      	b.n	16c9e <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   16cca:	f8d8 1010 	ldr.w	r1, [r8, #16]
   16cce:	40f1      	lsrs	r1, r6
   16cd0:	f001 0101 	and.w	r1, r1, #1
   16cd4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   16cd8:	4628      	mov	r0, r5
   16cda:	b2c9      	uxtb	r1, r1
   16cdc:	f008 fc44 	bl	1f568 <nrf_gpio_cfg_sense_set>
	int res = 0;
   16ce0:	4620      	mov	r0, r4
   16ce2:	e7dc      	b.n	16c9e <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   16ce4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16ce8:	e7d9      	b.n	16c9e <gpio_nrfx_pin_interrupt_configure+0x16a>
   16cea:	bf00      	nop
   16cec:	40006000 	.word	0x40006000
   16cf0:	0bad0000 	.word	0x0bad0000

00016cf4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16cf4:	4b2e      	ldr	r3, [pc, #184]	; (16db0 <gpio_nrfx_config+0xbc>)
{
   16cf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16cf8:	4c2e      	ldr	r4, [pc, #184]	; (16db4 <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16cfa:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16cfc:	4013      	ands	r3, r2
   16cfe:	42a3      	cmp	r3, r4
   16d00:	d045      	beq.n	16d8e <gpio_nrfx_config+0x9a>
   16d02:	d80e      	bhi.n	16d22 <gpio_nrfx_config+0x2e>
   16d04:	2b06      	cmp	r3, #6
   16d06:	d044      	beq.n	16d92 <gpio_nrfx_config+0x9e>
   16d08:	d806      	bhi.n	16d18 <gpio_nrfx_config+0x24>
   16d0a:	2b00      	cmp	r3, #0
   16d0c:	d041      	beq.n	16d92 <gpio_nrfx_config+0x9e>
   16d0e:	2b02      	cmp	r3, #2
   16d10:	d041      	beq.n	16d96 <gpio_nrfx_config+0xa2>
   16d12:	f06f 0015 	mvn.w	r0, #21
   16d16:	e038      	b.n	16d8a <gpio_nrfx_config+0x96>
   16d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   16d1c:	d1f9      	bne.n	16d12 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   16d1e:	2401      	movs	r4, #1
   16d20:	e009      	b.n	16d36 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16d22:	4c25      	ldr	r4, [pc, #148]	; (16db8 <gpio_nrfx_config+0xc4>)
   16d24:	42a3      	cmp	r3, r4
   16d26:	d038      	beq.n	16d9a <gpio_nrfx_config+0xa6>
   16d28:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   16d2c:	d037      	beq.n	16d9e <gpio_nrfx_config+0xaa>
   16d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   16d32:	d1ee      	bne.n	16d12 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   16d34:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   16d36:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16d38:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   16d3c:	bf54      	ite	pl
   16d3e:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   16d42:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   16d44:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16d48:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   16d4a:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   16d4e:	d507      	bpl.n	16d60 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16d50:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   16d52:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   16d56:	d524      	bpl.n	16da2 <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   16d58:	2301      	movs	r3, #1
   16d5a:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   16d5c:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   16d60:	7a03      	ldrb	r3, [r0, #8]
   16d62:	f001 011f 	and.w	r1, r1, #31
   16d66:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16d6a:	a801      	add	r0, sp, #4
   16d6c:	9101      	str	r1, [sp, #4]
   16d6e:	f7ff fe87 	bl	16a80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   16d72:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16d74:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   16d78:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   16d7c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   16d80:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   16d84:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   16d88:	2000      	movs	r0, #0
}
   16d8a:	b003      	add	sp, #12
   16d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   16d8e:	2407      	movs	r4, #7
   16d90:	e7d1      	b.n	16d36 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   16d92:	461c      	mov	r4, r3
   16d94:	e7cf      	b.n	16d36 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   16d96:	2404      	movs	r4, #4
   16d98:	e7cd      	b.n	16d36 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   16d9a:	2405      	movs	r4, #5
   16d9c:	e7cb      	b.n	16d36 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   16d9e:	2403      	movs	r4, #3
   16da0:	e7c9      	b.n	16d36 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   16da2:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   16da4:	bf42      	ittt	mi
   16da6:	2301      	movmi	r3, #1
   16da8:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   16daa:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
   16dae:	e7d7      	b.n	16d60 <gpio_nrfx_config+0x6c>
   16db0:	00f00006 	.word	0x00f00006
   16db4:	00100006 	.word	0x00100006
   16db8:	00400002 	.word	0x00400002

00016dbc <gpiote_event_handler>:
{
   16dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16dbe:	2400      	movs	r4, #0
{
   16dc0:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16dc2:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   16dc6:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16dca:	4e26      	ldr	r6, [pc, #152]	; (16e64 <gpiote_event_handler+0xa8>)
   16dcc:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   16dce:	b15d      	cbz	r5, 16de8 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   16dd0:	a902      	add	r1, sp, #8
   16dd2:	4825      	ldr	r0, [pc, #148]	; (16e68 <gpiote_event_handler+0xac>)
   16dd4:	f008 fbdb 	bl	1f58e <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   16dd8:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   16dda:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   16ddc:	4823      	ldr	r0, [pc, #140]	; (16e6c <gpiote_event_handler+0xb0>)
   16dde:	f008 fbd6 	bl	1f58e <check_level_trigger_pins>
		fired_triggers[1] =
   16de2:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16de4:	6034      	str	r4, [r6, #0]
   16de6:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   16de8:	4c21      	ldr	r4, [pc, #132]	; (16e70 <gpiote_event_handler+0xb4>)
{
   16dea:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   16dec:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16dee:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   16df0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   16df4:	fa06 f102 	lsl.w	r1, r6, r2
   16df8:	4219      	tst	r1, r3
   16dfa:	d01b      	beq.n	16e34 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16dfc:	0091      	lsls	r1, r2, #2
   16dfe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   16e02:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   16e06:	680b      	ldr	r3, [r1, #0]
   16e08:	b1a3      	cbz	r3, 16e34 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16e0a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   16e0e:	af04      	add	r7, sp, #16
   16e10:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16e14:	f8c1 c000 	str.w	ip, [r1]
   16e18:	f3c3 3040 	ubfx	r0, r3, #13, #1
   16e1c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   16e20:	f3c3 2304 	ubfx	r3, r3, #8, #5
   16e24:	f850 7c10 	ldr.w	r7, [r0, #-16]
   16e28:	fa06 f303 	lsl.w	r3, r6, r3
   16e2c:	433b      	orrs	r3, r7
   16e2e:	f840 3c10 	str.w	r3, [r0, #-16]
   16e32:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   16e34:	3201      	adds	r2, #1
   16e36:	2a08      	cmp	r2, #8
   16e38:	d1da      	bne.n	16df0 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   16e3a:	9a00      	ldr	r2, [sp, #0]
   16e3c:	b11a      	cbz	r2, 16e46 <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   16e3e:	490a      	ldr	r1, [pc, #40]	; (16e68 <gpiote_event_handler+0xac>)
   16e40:	480c      	ldr	r0, [pc, #48]	; (16e74 <gpiote_event_handler+0xb8>)
   16e42:	f7ff fde3 	bl	16a0c <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   16e46:	9a01      	ldr	r2, [sp, #4]
   16e48:	b11a      	cbz	r2, 16e52 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   16e4a:	4908      	ldr	r1, [pc, #32]	; (16e6c <gpiote_event_handler+0xb0>)
   16e4c:	480a      	ldr	r0, [pc, #40]	; (16e78 <gpiote_event_handler+0xbc>)
   16e4e:	f7ff fddd 	bl	16a0c <gpio_fire_callbacks>
	if (port_event) {
   16e52:	b12d      	cbz	r5, 16e60 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   16e54:	4804      	ldr	r0, [pc, #16]	; (16e68 <gpiote_event_handler+0xac>)
   16e56:	f008 fbde 	bl	1f616 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   16e5a:	4804      	ldr	r0, [pc, #16]	; (16e6c <gpiote_event_handler+0xb0>)
   16e5c:	f008 fbdb 	bl	1f616 <cfg_level_pins>
}
   16e60:	b005      	add	sp, #20
   16e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e64:	4000617c 	.word	0x4000617c
   16e68:	00020178 	.word	0x00020178
   16e6c:	00020190 	.word	0x00020190
   16e70:	40006000 	.word	0x40006000
   16e74:	20001dac 	.word	0x20001dac
   16e78:	20001dc8 	.word	0x20001dc8

00016e7c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   16e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   16e7e:	794b      	ldrb	r3, [r1, #5]
   16e80:	2b01      	cmp	r3, #1
   16e82:	d02c      	beq.n	16ede <uarte_nrfx_configure+0x62>
   16e84:	2b03      	cmp	r3, #3
   16e86:	d127      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   16e88:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16e8a:	798b      	ldrb	r3, [r1, #6]
   16e8c:	2b03      	cmp	r3, #3
   16e8e:	d123      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   16e90:	79cd      	ldrb	r5, [r1, #7]
   16e92:	b12d      	cbz	r5, 16ea0 <uarte_nrfx_configure+0x24>
   16e94:	2d01      	cmp	r5, #1
   16e96:	d11f      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   16e98:	6843      	ldr	r3, [r0, #4]
   16e9a:	685b      	ldr	r3, [r3, #4]
   16e9c:	079b      	lsls	r3, r3, #30
   16e9e:	d01b      	beq.n	16ed8 <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   16ea0:	790a      	ldrb	r2, [r1, #4]
   16ea2:	2a01      	cmp	r2, #1
   16ea4:	d01d      	beq.n	16ee2 <uarte_nrfx_configure+0x66>
   16ea6:	2a02      	cmp	r2, #2
   16ea8:	d01f      	beq.n	16eea <uarte_nrfx_configure+0x6e>
   16eaa:	b9aa      	cbnz	r2, 16ed8 <uarte_nrfx_configure+0x5c>
   16eac:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16eae:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   16eb0:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   16eb2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   16eb6:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   16eb8:	d06e      	beq.n	16f98 <uarte_nrfx_configure+0x11c>
   16eba:	d833      	bhi.n	16f24 <uarte_nrfx_configure+0xa8>
   16ebc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16ec0:	d06d      	beq.n	16f9e <uarte_nrfx_configure+0x122>
   16ec2:	d81c      	bhi.n	16efe <uarte_nrfx_configure+0x82>
   16ec4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   16ec8:	d06b      	beq.n	16fa2 <uarte_nrfx_configure+0x126>
   16eca:	d810      	bhi.n	16eee <uarte_nrfx_configure+0x72>
   16ecc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16ed0:	d06a      	beq.n	16fa8 <uarte_nrfx_configure+0x12c>
   16ed2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16ed6:	d06a      	beq.n	16fae <uarte_nrfx_configure+0x132>
   16ed8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16edc:	e05b      	b.n	16f96 <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
   16ede:	2700      	movs	r7, #0
   16ee0:	e7d3      	b.n	16e8a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   16ee2:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   16ee6:	220e      	movs	r2, #14
   16ee8:	e7e1      	b.n	16eae <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   16eea:	2400      	movs	r4, #0
   16eec:	e7fb      	b.n	16ee6 <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
   16eee:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16ef2:	d05f      	beq.n	16fb4 <uarte_nrfx_configure+0x138>
   16ef4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16ef8:	d1ee      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16efa:	4b39      	ldr	r3, [pc, #228]	; (16fe0 <uarte_nrfx_configure+0x164>)
   16efc:	e03e      	b.n	16f7c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   16efe:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16f02:	d05a      	beq.n	16fba <uarte_nrfx_configure+0x13e>
   16f04:	d807      	bhi.n	16f16 <uarte_nrfx_configure+0x9a>
   16f06:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16f0a:	d058      	beq.n	16fbe <uarte_nrfx_configure+0x142>
   16f0c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   16f10:	d1e2      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   16f12:	4b34      	ldr	r3, [pc, #208]	; (16fe4 <uarte_nrfx_configure+0x168>)
   16f14:	e032      	b.n	16f7c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   16f16:	f647 2c12 	movw	ip, #31250	; 0x7a12
   16f1a:	4563      	cmp	r3, ip
   16f1c:	d1dc      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16f1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16f22:	e02b      	b.n	16f7c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   16f24:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16f28:	d04b      	beq.n	16fc2 <uarte_nrfx_configure+0x146>
   16f2a:	d813      	bhi.n	16f54 <uarte_nrfx_configure+0xd8>
   16f2c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   16f30:	d04a      	beq.n	16fc8 <uarte_nrfx_configure+0x14c>
   16f32:	d809      	bhi.n	16f48 <uarte_nrfx_configure+0xcc>
   16f34:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   16f38:	4563      	cmp	r3, ip
   16f3a:	d047      	beq.n	16fcc <uarte_nrfx_configure+0x150>
   16f3c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   16f40:	d1ca      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16f42:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16f46:	e019      	b.n	16f7c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   16f48:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16f4c:	d1c4      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16f4e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16f52:	e013      	b.n	16f7c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   16f54:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16f58:	d03b      	beq.n	16fd2 <uarte_nrfx_configure+0x156>
   16f5a:	d809      	bhi.n	16f70 <uarte_nrfx_configure+0xf4>
   16f5c:	f8df c098 	ldr.w	ip, [pc, #152]	; 16ff8 <uarte_nrfx_configure+0x17c>
   16f60:	4563      	cmp	r3, ip
   16f62:	d039      	beq.n	16fd8 <uarte_nrfx_configure+0x15c>
   16f64:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16f68:	d1b6      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16f6a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16f6e:	e005      	b.n	16f7c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   16f70:	f8df c088 	ldr.w	ip, [pc, #136]	; 16ffc <uarte_nrfx_configure+0x180>
   16f74:	4563      	cmp	r3, ip
   16f76:	d1af      	bne.n	16ed8 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   16f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16f7c:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   16f80:	6903      	ldr	r3, [r0, #16]
   16f82:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   16f84:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   16f86:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   16f88:	4322      	orrs	r2, r4
   16f8a:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16f8c:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   16f90:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   16f94:	2000      	movs	r0, #0
}
   16f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16f98:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   16f9c:	e7ee      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   16f9e:	4b12      	ldr	r3, [pc, #72]	; (16fe8 <uarte_nrfx_configure+0x16c>)
   16fa0:	e7ec      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   16fa2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16fa6:	e7e9      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
   16fa8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16fac:	e7e6      	b.n	16f7c <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   16fae:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   16fb2:	e7e3      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   16fb4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   16fb8:	e7e0      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   16fba:	4b0c      	ldr	r3, [pc, #48]	; (16fec <uarte_nrfx_configure+0x170>)
   16fbc:	e7de      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   16fbe:	4b0c      	ldr	r3, [pc, #48]	; (16ff0 <uarte_nrfx_configure+0x174>)
   16fc0:	e7dc      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   16fc2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   16fc6:	e7d9      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   16fc8:	4b0a      	ldr	r3, [pc, #40]	; (16ff4 <uarte_nrfx_configure+0x178>)
   16fca:	e7d7      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   16fcc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   16fd0:	e7d4      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   16fd2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16fd6:	e7d1      	b.n	16f7c <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16fd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   16fdc:	e7ce      	b.n	16f7c <uarte_nrfx_configure+0x100>
   16fde:	bf00      	nop
   16fe0:	0013b000 	.word	0x0013b000
   16fe4:	004ea000 	.word	0x004ea000
   16fe8:	00275000 	.word	0x00275000
   16fec:	0075c000 	.word	0x0075c000
   16ff0:	003af000 	.word	0x003af000
   16ff4:	013a9000 	.word	0x013a9000
   16ff8:	0003d090 	.word	0x0003d090
   16ffc:	000f4240 	.word	0x000f4240

00017000 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   17000:	6802      	ldr	r2, [r0, #0]
    switch (port)
   17002:	0953      	lsrs	r3, r2, #5
{
   17004:	b510      	push	{r4, lr}
   17006:	4604      	mov	r4, r0
    switch (port)
   17008:	d02c      	beq.n	17064 <nrf_gpio_pin_port_decode+0x64>
   1700a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1700c:	f240 33ff 	movw	r3, #1023	; 0x3ff
   17010:	bf18      	it	ne
   17012:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   17014:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   17018:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1701a:	07db      	lsls	r3, r3, #31
   1701c:	d40b      	bmi.n	17036 <nrf_gpio_pin_port_decode+0x36>
   1701e:	4914      	ldr	r1, [pc, #80]	; (17070 <nrf_gpio_pin_port_decode+0x70>)
   17020:	4814      	ldr	r0, [pc, #80]	; (17074 <nrf_gpio_pin_port_decode+0x74>)
   17022:	4a15      	ldr	r2, [pc, #84]	; (17078 <nrf_gpio_pin_port_decode+0x78>)
   17024:	f44f 7305 	mov.w	r3, #532	; 0x214
   17028:	f005 fedb 	bl	1cde2 <printk>
   1702c:	4812      	ldr	r0, [pc, #72]	; (17078 <nrf_gpio_pin_port_decode+0x78>)
   1702e:	f44f 7105 	mov.w	r1, #532	; 0x214
   17032:	f006 f930 	bl	1d296 <assert_post_action>
    uint32_t pin_number = *p_pin;
   17036:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   17038:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1703c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1703e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17040:	d00d      	beq.n	1705e <nrf_gpio_pin_port_decode+0x5e>
   17042:	2b01      	cmp	r3, #1
   17044:	d011      	beq.n	1706a <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   17046:	490d      	ldr	r1, [pc, #52]	; (1707c <nrf_gpio_pin_port_decode+0x7c>)
   17048:	480a      	ldr	r0, [pc, #40]	; (17074 <nrf_gpio_pin_port_decode+0x74>)
   1704a:	4a0b      	ldr	r2, [pc, #44]	; (17078 <nrf_gpio_pin_port_decode+0x78>)
   1704c:	f240 2319 	movw	r3, #537	; 0x219
   17050:	f005 fec7 	bl	1cde2 <printk>
   17054:	4808      	ldr	r0, [pc, #32]	; (17078 <nrf_gpio_pin_port_decode+0x78>)
   17056:	f240 2119 	movw	r1, #537	; 0x219
   1705a:	f006 f91c 	bl	1d296 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1705e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   17062:	bd10      	pop	{r4, pc}
    switch (port)
   17064:	f04f 33ff 	mov.w	r3, #4294967295
   17068:	e7d4      	b.n	17014 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1706a:	4805      	ldr	r0, [pc, #20]	; (17080 <nrf_gpio_pin_port_decode+0x80>)
   1706c:	e7f9      	b.n	17062 <nrf_gpio_pin_port_decode+0x62>
   1706e:	bf00      	nop
   17070:	00021aa5 	.word	0x00021aa5
   17074:	00020a75 	.word	0x00020a75
   17078:	00021a72 	.word	0x00021a72
   1707c:	00022787 	.word	0x00022787
   17080:	50000300 	.word	0x50000300

00017084 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   17084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17088:	4615      	mov	r5, r2
	return config->uarte_regs;
   1708a:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1708c:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   17090:	6817      	ldr	r7, [r2, #0]
    return p_reg->PSEL.RXD;
   17092:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   17096:	3201      	adds	r2, #1
{
   17098:	b087      	sub	sp, #28
   1709a:	4604      	mov	r4, r0
   1709c:	4688      	mov	r8, r1
	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   1709e:	d113      	bne.n	170c8 <uarte_nrfx_rx_enable+0x44>
		__ASSERT(false, "TX only UARTE instance");
   170a0:	4a4a      	ldr	r2, [pc, #296]	; (171cc <uarte_nrfx_rx_enable+0x148>)
   170a2:	494b      	ldr	r1, [pc, #300]	; (171d0 <uarte_nrfx_rx_enable+0x14c>)
   170a4:	484b      	ldr	r0, [pc, #300]	; (171d4 <uarte_nrfx_rx_enable+0x150>)
   170a6:	f44f 7349 	mov.w	r3, #804	; 0x324
   170aa:	f005 fe9a 	bl	1cde2 <printk>
   170ae:	484a      	ldr	r0, [pc, #296]	; (171d8 <uarte_nrfx_rx_enable+0x154>)
   170b0:	f005 fe97 	bl	1cde2 <printk>
   170b4:	4845      	ldr	r0, [pc, #276]	; (171cc <uarte_nrfx_rx_enable+0x148>)
   170b6:	f44f 7149 	mov.w	r1, #804	; 0x324
   170ba:	f006 f8ec 	bl	1d296 <assert_post_action>
		return -ENOTSUP;
   170be:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   170c2:	b007      	add	sp, #28
   170c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->async->rx_timeout = timeout;
   170c8:	f8d9 1010 	ldr.w	r1, [r9, #16]
		MAX(timeout / RX_TIMEOUT_DIV,
   170cc:	2b09      	cmp	r3, #9
	data->async->rx_timeout = timeout;
   170ce:	66cb      	str	r3, [r1, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   170d0:	bfd2      	itee	le
   170d2:	2301      	movle	r3, #1
   170d4:	2205      	movgt	r2, #5
   170d6:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   170da:	670b      	str	r3, [r1, #112]	; 0x70
	data->async->rx_offset = 0;
   170dc:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   170de:	e9c1 8514 	strd	r8, r5, [r1, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   170e2:	e9c1 3316 	strd	r3, r3, [r1, #88]	; 0x58
	data->async->rx_next_buf_len = 0;
   170e6:	660b      	str	r3, [r1, #96]	; 0x60
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   170e8:	6843      	ldr	r3, [r0, #4]
   170ea:	685b      	ldr	r3, [r3, #4]
   170ec:	06da      	lsls	r2, r3, #27
   170ee:	d539      	bpl.n	17164 <uarte_nrfx_rx_enable+0xe0>
		if (data->async->rx_flush_cnt) {
   170f0:	f891 60c1 	ldrb.w	r6, [r1, #193]	; 0xc1
   170f4:	b3b6      	cbz	r6, 17164 <uarte_nrfx_rx_enable+0xe0>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   170f6:	42ae      	cmp	r6, r5
   170f8:	bf28      	it	cs
   170fa:	462e      	movcs	r6, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   170fc:	4640      	mov	r0, r8
   170fe:	4632      	mov	r2, r6
   17100:	31bc      	adds	r1, #188	; 0xbc
   17102:	f008 ff62 	bl	1ffca <memcpy>
			if (!len) {
   17106:	1bad      	subs	r5, r5, r6
			buf += cpy_len;
   17108:	44b0      	add	r8, r6
			if (!len) {
   1710a:	d12b      	bne.n	17164 <uarte_nrfx_rx_enable+0xe0>
				data->async->rx_flush_cnt -= cpy_len;
   1710c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   17110:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
   17114:	1b9b      	subs	r3, r3, r6
				notify_uart_rx_rdy(dev, cpy_len);
   17116:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   17118:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   1711c:	4620      	mov	r0, r4
   1711e:	f008 fb24 	bl	1f76a <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   17122:	f8d9 6010 	ldr.w	r6, [r9, #16]
	if (*buf) {
   17126:	6d37      	ldr	r7, [r6, #80]	; 0x50
   17128:	b177      	cbz	r7, 17148 <uarte_nrfx_rx_enable+0xc4>
		struct uart_event evt = {
   1712a:	2214      	movs	r2, #20
   1712c:	4629      	mov	r1, r5
   1712e:	a801      	add	r0, sp, #4
   17130:	f008 ff6c 	bl	2000c <memset>
   17134:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   17136:	eb0d 0103 	add.w	r1, sp, r3
   1713a:	4620      	mov	r0, r4
		struct uart_event evt = {
   1713c:	f88d 3004 	strb.w	r3, [sp, #4]
   17140:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   17142:	f008 fb0b 	bl	1f75c <user_callback>
			*buf = NULL;
   17146:	6535      	str	r5, [r6, #80]	; 0x50
	struct uart_event evt = {
   17148:	2100      	movs	r1, #0
   1714a:	2214      	movs	r2, #20
   1714c:	a801      	add	r0, sp, #4
   1714e:	f008 ff5d 	bl	2000c <memset>
   17152:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   17154:	a901      	add	r1, sp, #4
   17156:	4620      	mov	r0, r4
	struct uart_event evt = {
   17158:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   1715c:	f008 fafe 	bl	1f75c <user_callback>
	return 0;
   17160:	2000      	movs	r0, #0
   17162:	e7ae      	b.n	170c2 <uarte_nrfx_rx_enable+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17164:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17166:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1716a:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1716e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   17172:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   17176:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   1717a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   1717e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   17182:	2201      	movs	r2, #1
   17184:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17188:	6863      	ldr	r3, [r4, #4]
   1718a:	685b      	ldr	r3, [r3, #4]
   1718c:	06db      	lsls	r3, r3, #27
   1718e:	d519      	bpl.n	171c4 <uarte_nrfx_rx_enable+0x140>
	__asm__ volatile(
   17190:	f04f 0340 	mov.w	r3, #64	; 0x40
   17194:	f3ef 8111 	mrs	r1, BASEPRI
   17198:	f383 8812 	msr	BASEPRI_MAX, r3
   1719c:	f3bf 8f6f 	isb	sy
	if (data->async) {
   171a0:	6923      	ldr	r3, [r4, #16]
   171a2:	691b      	ldr	r3, [r3, #16]
   171a4:	b12b      	cbz	r3, 171b2 <uarte_nrfx_rx_enable+0x12e>
		data->async->low_power_mask |= mask;
   171a6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   171aa:	f042 0202 	orr.w	r2, r2, #2
   171ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	return config->uarte_regs;
   171b2:	6863      	ldr	r3, [r4, #4]
   171b4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   171b6:	2208      	movs	r2, #8
   171b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   171bc:	f381 8811 	msr	BASEPRI, r1
   171c0:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   171c4:	2301      	movs	r3, #1
   171c6:	603b      	str	r3, [r7, #0]
   171c8:	e7ca      	b.n	17160 <uarte_nrfx_rx_enable+0xdc>
   171ca:	bf00      	nop
   171cc:	00021ad6 	.word	0x00021ad6
   171d0:	00022787 	.word	0x00022787
   171d4:	00020a75 	.word	0x00020a75
   171d8:	00021b0a 	.word	0x00021b0a

000171dc <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   171dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   171e0:	6845      	ldr	r5, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   171e2:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   171e4:	682c      	ldr	r4, [r5, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   171e6:	2300      	movs	r3, #0
   171e8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   171ec:	4606      	mov	r6, r0
   171ee:	68ab      	ldr	r3, [r5, #8]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   171f0:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   171f2:	a801      	add	r0, sp, #4
   171f4:	9301      	str	r3, [sp, #4]
   171f6:	f7ff ff03 	bl	17000 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   171fa:	9a01      	ldr	r2, [sp, #4]
   171fc:	2301      	movs	r3, #1
   171fe:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   17200:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   17204:	68ab      	ldr	r3, [r5, #8]
   17206:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17208:	a801      	add	r0, sp, #4
   1720a:	f7ff fef9 	bl	17000 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1720e:	9b01      	ldr	r3, [sp, #4]
   17210:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17214:	2203      	movs	r2, #3
   17216:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
	nrf_gpio_cfg_output(cfg->pseltxd);

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1721a:	68eb      	ldr	r3, [r5, #12]
   1721c:	1c59      	adds	r1, r3, #1
   1721e:	d00c      	beq.n	1723a <uarte_instance_init.isra.0+0x5e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17220:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
   17222:	f895 8018 	ldrb.w	r8, [r5, #24]
    nrf_gpio_cfg(
   17226:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17228:	f7ff feea 	bl	17000 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1722c:	9b01      	ldr	r3, [sp, #4]
   1722e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   17232:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   17236:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
   1723a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
   1723e:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   17242:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   17246:	692b      	ldr	r3, [r5, #16]
   17248:	1c5a      	adds	r2, r3, #1
   1724a:	d00c      	beq.n	17266 <uarte_instance_init.isra.0+0x8a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1724c:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
   1724e:	f895 8019 	ldrb.w	r8, [r5, #25]
    nrf_gpio_cfg(
   17252:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17254:	f7ff fed4 	bl	17000 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17258:	9b01      	ldr	r3, [sp, #4]
   1725a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1725e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   17262:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   17266:	696b      	ldr	r3, [r5, #20]
   17268:	1c58      	adds	r0, r3, #1
   1726a:	d013      	beq.n	17294 <uarte_instance_init.isra.0+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1726c:	a801      	add	r0, sp, #4
   1726e:	9301      	str	r3, [sp, #4]
   17270:	f7ff fec6 	bl	17000 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   17274:	9a01      	ldr	r2, [sp, #4]
   17276:	2301      	movs	r3, #1
   17278:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1727a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1727e:	696b      	ldr	r3, [r5, #20]
   17280:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17282:	a801      	add	r0, sp, #4
   17284:	f7ff febc 	bl	17000 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   17288:	9b01      	ldr	r3, [sp, #4]
   1728a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1728e:	2203      	movs	r2, #3
   17290:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
   17294:	e9d5 3204 	ldrd	r3, r2, [r5, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   17298:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.RTS = pselrts;
   1729a:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1729e:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   172a0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   172a4:	4630      	mov	r0, r6
   172a6:	f7ff fde9 	bl	16e7c <uarte_nrfx_configure>
	if (err) {
   172aa:	4681      	mov	r9, r0
   172ac:	2800      	cmp	r0, #0
   172ae:	d174      	bne.n	1739a <uarte_instance_init.isra.0+0x1be>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   172b0:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   172b2:	0719      	lsls	r1, r3, #28
   172b4:	d51a      	bpl.n	172ec <uarte_instance_init.isra.0+0x110>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   172b6:	f107 001a 	add.w	r0, r7, #26
   172ba:	f001 fc0b 	bl	18ad4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   172be:	4b44      	ldr	r3, [pc, #272]	; (173d0 <uarte_instance_init.isra.0+0x1f4>)
   172c0:	4298      	cmp	r0, r3
   172c2:	f040 8081 	bne.w	173c8 <uarte_instance_init.isra.0+0x1ec>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   172c6:	7eb8      	ldrb	r0, [r7, #26]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   172c8:	00c3      	lsls	r3, r0, #3
   172ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   172ce:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   172d2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   172d6:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   172da:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   172de:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   172e2:	4a3c      	ldr	r2, [pc, #240]	; (173d4 <uarte_instance_init.isra.0+0x1f8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   172e4:	2301      	movs	r3, #1
   172e6:	4083      	lsls	r3, r0
   172e8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   172ec:	693b      	ldr	r3, [r7, #16]
   172ee:	2b00      	cmp	r3, #0
   172f0:	d057      	beq.n	173a2 <uarte_instance_init.isra.0+0x1c6>
	return config->uarte_regs;
   172f2:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   172f4:	f8d6 8010 	ldr.w	r8, [r6, #16]
	return config->uarte_regs;
   172f8:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   172fa:	f8d8 0010 	ldr.w	r0, [r8, #16]
    p_reg->INTENSET = mask;
   172fe:	4936      	ldr	r1, [pc, #216]	; (173d8 <uarte_instance_init.isra.0+0x1fc>)
   17300:	2204      	movs	r2, #4
   17302:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   17306:	2201      	movs	r2, #1
   17308:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
   1730c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17310:	2108      	movs	r1, #8
   17312:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17316:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1731a:	b1a1      	cbz	r1, 17346 <uarte_instance_init.isra.0+0x16a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1731c:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1731e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   17322:	b91a      	cbnz	r2, 1732c <uarte_instance_init.isra.0+0x150>
   17324:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   17328:	2a00      	cmp	r2, #0
   1732a:	d0f8      	beq.n	1731e <uarte_instance_init.isra.0+0x142>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1732c:	2200      	movs	r2, #0
   1732e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   17332:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   17336:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1733a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1733e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   17342:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   17346:	4925      	ldr	r1, [pc, #148]	; (173dc <uarte_instance_init.isra.0+0x200>)
   17348:	2200      	movs	r2, #0
   1734a:	3078      	adds	r0, #120	; 0x78
   1734c:	f008 fdbb 	bl	1fec6 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   17350:	f8d8 3010 	ldr.w	r3, [r8, #16]
	timer->user_data = user_data;
   17354:	f8c3 80ac 	str.w	r8, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   17358:	f8d8 0010 	ldr.w	r0, [r8, #16]
   1735c:	4920      	ldr	r1, [pc, #128]	; (173e0 <uarte_instance_init.isra.0+0x204>)
   1735e:	2200      	movs	r2, #0
   17360:	3018      	adds	r0, #24
   17362:	f008 fdb0 	bl	1fec6 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   17366:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1736a:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1736e:	686b      	ldr	r3, [r5, #4]
   17370:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   17372:	bf5c      	itt	pl
   17374:	f44f 7280 	movpl.w	r2, #256	; 0x100
   17378:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1737c:	06db      	lsls	r3, r3, #27
   1737e:	bf44      	itt	mi
   17380:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   17384:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   17388:	3718      	adds	r7, #24
    p_reg->TXD.MAXCNT = length;
   1738a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1738c:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17390:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17394:	2301      	movs	r3, #1
   17396:	60a3      	str	r3, [r4, #8]
   17398:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1739a:	4648      	mov	r0, r9
   1739c:	b003      	add	sp, #12
   1739e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   173a2:	2208      	movs	r2, #8
   173a4:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   173a8:	68ea      	ldr	r2, [r5, #12]
   173aa:	3201      	adds	r2, #1
   173ac:	d0df      	beq.n	1736e <uarte_instance_init.isra.0+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173ae:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   173b2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   173b6:	f107 0319 	add.w	r3, r7, #25
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   173ba:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   173be:	2301      	movs	r3, #1
   173c0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   173c4:	6023      	str	r3, [r4, #0]
}
   173c6:	e7d2      	b.n	1736e <uarte_instance_init.isra.0+0x192>
		return -EIO;
   173c8:	f06f 0904 	mvn.w	r9, #4
   173cc:	e7e5      	b.n	1739a <uarte_instance_init.isra.0+0x1be>
   173ce:	bf00      	nop
   173d0:	0bad0000 	.word	0x0bad0000
   173d4:	4001f000 	.word	0x4001f000
   173d8:	000a0210 	.word	0x000a0210
   173dc:	0001f911 	.word	0x0001f911
   173e0:	0001f9f7 	.word	0x0001f9f7

000173e4 <uarte_nrfx_poll_out>:
{
   173e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   173e6:	6906      	ldr	r6, [r0, #16]
{
   173e8:	4604      	mov	r4, r0
   173ea:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   173ec:	f008 fc69 	bl	1fcc2 <k_is_in_isr>
   173f0:	b910      	cbnz	r0, 173f8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   173f2:	4b28      	ldr	r3, [pc, #160]	; (17494 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
   173f4:	781b      	ldrb	r3, [r3, #0]
   173f6:	bb5b      	cbnz	r3, 17450 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   173f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   173fc:	f3ef 8111 	mrs	r1, BASEPRI
   17400:	f383 8812 	msr	BASEPRI_MAX, r3
   17404:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   17408:	4620      	mov	r0, r4
			key = irq_lock();
   1740a:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   1740c:	f008 f996 	bl	1f73c <is_tx_ready>
   17410:	b1c8      	cbz	r0, 17446 <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
   17412:	6933      	ldr	r3, [r6, #16]
   17414:	b15b      	cbz	r3, 1742e <uarte_nrfx_poll_out+0x4a>
   17416:	68da      	ldr	r2, [r3, #12]
   17418:	b14a      	cbz	r2, 1742e <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   1741a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async && data->async->tx_size &&
   1741e:	2a00      	cmp	r2, #0
   17420:	da05      	bge.n	1742e <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   17422:	6862      	ldr	r2, [r4, #4]
   17424:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   17426:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1742a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	data->char_out = c;
   1742e:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   17430:	2201      	movs	r2, #1
	data->char_out = c;
   17432:	f801 7f18 	strb.w	r7, [r1, #24]!
	tx_start(dev, &data->char_out, 1);
   17436:	4620      	mov	r0, r4
   17438:	f008 fb20 	bl	1fa7c <tx_start>
	__asm__ volatile(
   1743c:	f385 8811 	msr	BASEPRI, r5
   17440:	f3bf 8f6f 	isb	sy
}
   17444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17446:	f381 8811 	msr	BASEPRI, r1
   1744a:	f3bf 8f6f 	isb	sy
}
   1744e:	e7d3      	b.n	173f8 <uarte_nrfx_poll_out+0x14>
{
   17450:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   17452:	4620      	mov	r0, r4
   17454:	f008 f972 	bl	1f73c <is_tx_ready>
   17458:	b948      	cbnz	r0, 1746e <uarte_nrfx_poll_out+0x8a>
   1745a:	2001      	movs	r0, #1
   1745c:	f008 fc15 	bl	1fc8a <nrfx_busy_wait>
   17460:	3d01      	subs	r5, #1
   17462:	d1f6      	bne.n	17452 <uarte_nrfx_poll_out+0x6e>
   17464:	2100      	movs	r1, #0
   17466:	2021      	movs	r0, #33	; 0x21
   17468:	f004 fa9c 	bl	1b9a4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1746c:	e7f0      	b.n	17450 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1746e:	f04f 0340 	mov.w	r3, #64	; 0x40
   17472:	f3ef 8511 	mrs	r5, BASEPRI
   17476:	f383 8812 	msr	BASEPRI_MAX, r3
   1747a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1747e:	4620      	mov	r0, r4
   17480:	f008 f95c 	bl	1f73c <is_tx_ready>
   17484:	2800      	cmp	r0, #0
   17486:	d1d2      	bne.n	1742e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   17488:	f385 8811 	msr	BASEPRI, r5
   1748c:	f3bf 8f6f 	isb	sy
}
   17490:	e7e8      	b.n	17464 <uarte_nrfx_poll_out+0x80>
   17492:	bf00      	nop
   17494:	20002930 	.word	0x20002930

00017498 <random_byte_get>:
	__asm__ volatile(
   17498:	f04f 0340 	mov.w	r3, #64	; 0x40
   1749c:	f3ef 8211 	mrs	r2, BASEPRI
   174a0:	f383 8812 	msr	BASEPRI_MAX, r3
   174a4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   174a8:	4b08      	ldr	r3, [pc, #32]	; (174cc <random_byte_get+0x34>)
   174aa:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   174ac:	b159      	cbz	r1, 174c6 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   174ae:	4908      	ldr	r1, [pc, #32]	; (174d0 <random_byte_get+0x38>)
   174b0:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   174b4:	2100      	movs	r1, #0
   174b6:	6019      	str	r1, [r3, #0]
   174b8:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   174ba:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   174bc:	f382 8811 	msr	BASEPRI, r2
   174c0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   174c4:	4770      	bx	lr
	int retval = -EAGAIN;
   174c6:	f06f 000a 	mvn.w	r0, #10
   174ca:	e7f7      	b.n	174bc <random_byte_get+0x24>
   174cc:	4000d100 	.word	0x4000d100
   174d0:	4000d000 	.word	0x4000d000

000174d4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   174d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   174d6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   174d8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   174da:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   174dc:	f04f 0540 	mov.w	r5, #64	; 0x40
   174e0:	f3ef 8011 	mrs	r0, BASEPRI
   174e4:	f385 8812 	msr	BASEPRI_MAX, r5
   174e8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   174ec:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   174ee:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   174f2:	1ba4      	subs	r4, r4, r6
   174f4:	403c      	ands	r4, r7
	if (available < len) {
   174f6:	42a2      	cmp	r2, r4
		len = available;
   174f8:	bf88      	it	hi
   174fa:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   174fc:	eb06 0c02 	add.w	ip, r6, r2
   17500:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   17504:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   17506:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1750a:	f380 8811 	msr	BASEPRI, r0
   1750e:	f3bf 8f6f 	isb	sy
   17512:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   17514:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   17516:	4282      	cmp	r2, r0
   17518:	d119      	bne.n	1754e <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1751a:	4576      	cmp	r6, lr
   1751c:	d10d      	bne.n	1753a <rng_pool_get+0x66>
	__asm__ volatile(
   1751e:	f04f 0540 	mov.w	r5, #64	; 0x40
   17522:	f3ef 8211 	mrs	r2, BASEPRI
   17526:	f385 8812 	msr	BASEPRI_MAX, r5
   1752a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1752e:	781d      	ldrb	r5, [r3, #0]
   17530:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   17532:	f382 8811 	msr	BASEPRI, r2
   17536:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1753a:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1753c:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1753e:	b288      	uxth	r0, r1
	available = available - len;
   17540:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   17542:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17544:	bf22      	ittt	cs
   17546:	4b06      	ldrcs	r3, [pc, #24]	; (17560 <rng_pool_get+0x8c>)
   17548:	2201      	movcs	r2, #1
   1754a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1754c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1754e:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   17552:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   17554:	f89c c005 	ldrb.w	ip, [ip, #5]
   17558:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1755c:	403d      	ands	r5, r7
   1755e:	e7da      	b.n	17516 <rng_pool_get+0x42>
   17560:	4000d000 	.word	0x4000d000

00017564 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   17564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17568:	4614      	mov	r4, r2
   1756a:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1756c:	6902      	ldr	r2, [r0, #16]
   1756e:	4b2c      	ldr	r3, [pc, #176]	; (17620 <entropy_nrf5_get_entropy_isr+0xbc>)
   17570:	429a      	cmp	r2, r3
{
   17572:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   17574:	d00b      	beq.n	1758e <entropy_nrf5_get_entropy_isr+0x2a>
   17576:	492b      	ldr	r1, [pc, #172]	; (17624 <entropy_nrf5_get_entropy_isr+0xc0>)
   17578:	482b      	ldr	r0, [pc, #172]	; (17628 <entropy_nrf5_get_entropy_isr+0xc4>)
   1757a:	4a2c      	ldr	r2, [pc, #176]	; (1762c <entropy_nrf5_get_entropy_isr+0xc8>)
   1757c:	f44f 7384 	mov.w	r3, #264	; 0x108
   17580:	f005 fc2f 	bl	1cde2 <printk>
   17584:	4829      	ldr	r0, [pc, #164]	; (1762c <entropy_nrf5_get_entropy_isr+0xc8>)
   17586:	f44f 7184 	mov.w	r1, #264	; 0x108
   1758a:	f005 fe84 	bl	1d296 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1758e:	43eb      	mvns	r3, r5
   17590:	f013 0501 	ands.w	r5, r3, #1
   17594:	d006      	beq.n	175a4 <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   17596:	4826      	ldr	r0, [pc, #152]	; (17630 <entropy_nrf5_get_entropy_isr+0xcc>)
   17598:	4622      	mov	r2, r4
   1759a:	4631      	mov	r1, r6
   1759c:	f7ff ff9a 	bl	174d4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   175a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   175a4:	2c00      	cmp	r4, #0
   175a6:	d033      	beq.n	17610 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   175a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   175ac:	f3ef 8811 	mrs	r8, BASEPRI
   175b0:	f383 8812 	msr	BASEPRI_MAX, r3
   175b4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   175b8:	200d      	movs	r0, #13
   175ba:	f7f9 ff27 	bl	1140c <arch_irq_is_enabled>
   175be:	4607      	mov	r7, r0
		irq_disable(IRQN);
   175c0:	200d      	movs	r0, #13
   175c2:	f7f9 ff0f 	bl	113e4 <arch_irq_disable>
	__asm__ volatile(
   175c6:	f388 8811 	msr	BASEPRI, r8
   175ca:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   175ce:	4a19      	ldr	r2, [pc, #100]	; (17634 <entropy_nrf5_get_entropy_isr+0xd0>)
   175d0:	6015      	str	r5, [r2, #0]
   175d2:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   175d4:	4b18      	ldr	r3, [pc, #96]	; (17638 <entropy_nrf5_get_entropy_isr+0xd4>)
   175d6:	2101      	movs	r1, #1
   175d8:	6019      	str	r1, [r3, #0]
   175da:	4918      	ldr	r1, [pc, #96]	; (1763c <entropy_nrf5_get_entropy_isr+0xd8>)
   175dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   175e0:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   175e4:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   175e6:	4691      	mov	r9, r2
   175e8:	468a      	mov	sl, r1
   175ea:	4698      	mov	r8, r3
   175ec:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   175f0:	b183      	cbz	r3, 17614 <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   175f2:	f7ff ff51 	bl	17498 <random_byte_get>
			if (byte < 0) {
   175f6:	1e03      	subs	r3, r0, #0
   175f8:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   175fc:	dbf6      	blt.n	175ec <entropy_nrf5_get_entropy_isr+0x88>
   175fe:	3d01      	subs	r5, #1
   17600:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   17602:	5573      	strb	r3, [r6, r5]
		} while (len);
   17604:	2d00      	cmp	r5, #0
   17606:	d1f1      	bne.n	175ec <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   17608:	b117      	cbz	r7, 17610 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   1760a:	200d      	movs	r0, #13
   1760c:	f7f9 feda 	bl	113c4 <arch_irq_enable>
	return cnt;
   17610:	4620      	mov	r0, r4
   17612:	e7c5      	b.n	175a0 <entropy_nrf5_get_entropy_isr+0x3c>
   17614:	f3bf 8f4f 	dsb	sy
				__WFE();
   17618:	bf20      	wfe
				__SEV();
   1761a:	bf40      	sev
				__WFE();
   1761c:	bf20      	wfe
   1761e:	e7e5      	b.n	175ec <entropy_nrf5_get_entropy_isr+0x88>
   17620:	20001de0 	.word	0x20001de0
   17624:	00021b5c 	.word	0x00021b5c
   17628:	00020a75 	.word	0x00020a75
   1762c:	00021b2a 	.word	0x00021b2a
   17630:	20001e10 	.word	0x20001e10
   17634:	4000d100 	.word	0x4000d100
   17638:	4000d000 	.word	0x4000d000
   1763c:	e000e100 	.word	0xe000e100

00017640 <entropy_nrf5_get_entropy>:
{
   17640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   17644:	4b1a      	ldr	r3, [pc, #104]	; (176b0 <entropy_nrf5_get_entropy+0x70>)
{
   17646:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   17648:	6902      	ldr	r2, [r0, #16]
   1764a:	429a      	cmp	r2, r3
{
   1764c:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1764e:	d009      	beq.n	17664 <entropy_nrf5_get_entropy+0x24>
   17650:	4918      	ldr	r1, [pc, #96]	; (176b4 <entropy_nrf5_get_entropy+0x74>)
   17652:	4819      	ldr	r0, [pc, #100]	; (176b8 <entropy_nrf5_get_entropy+0x78>)
   17654:	4a19      	ldr	r2, [pc, #100]	; (176bc <entropy_nrf5_get_entropy+0x7c>)
   17656:	23ea      	movs	r3, #234	; 0xea
   17658:	f005 fbc3 	bl	1cde2 <printk>
   1765c:	4817      	ldr	r0, [pc, #92]	; (176bc <entropy_nrf5_get_entropy+0x7c>)
   1765e:	21ea      	movs	r1, #234	; 0xea
   17660:	f005 fe19 	bl	1d296 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   17664:	4e12      	ldr	r6, [pc, #72]	; (176b0 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17666:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1766a:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1766e:	b914      	cbnz	r4, 17676 <entropy_nrf5_get_entropy+0x36>
}
   17670:	4620      	mov	r0, r4
   17672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17676:	f04f 33ff 	mov.w	r3, #4294967295
   1767a:	f04f 32ff 	mov.w	r2, #4294967295
   1767e:	4630      	mov	r0, r6
   17680:	f002 fb18 	bl	19cb4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17684:	4622      	mov	r2, r4
   17686:	4649      	mov	r1, r9
   17688:	4638      	mov	r0, r7
   1768a:	f7ff ff23 	bl	174d4 <rng_pool_get>
   1768e:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   17690:	4630      	mov	r0, r6
   17692:	f002 facb 	bl	19c2c <z_impl_k_sem_give>
		if (bytes == 0U) {
   17696:	b93d      	cbnz	r5, 176a8 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   17698:	f04f 32ff 	mov.w	r2, #4294967295
   1769c:	f04f 33ff 	mov.w	r3, #4294967295
   176a0:	4640      	mov	r0, r8
   176a2:	f002 fb07 	bl	19cb4 <z_impl_k_sem_take>
			continue;
   176a6:	e7e2      	b.n	1766e <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   176a8:	1b64      	subs	r4, r4, r5
   176aa:	b2a4      	uxth	r4, r4
		buf += bytes;
   176ac:	44a9      	add	r9, r5
   176ae:	e7de      	b.n	1766e <entropy_nrf5_get_entropy+0x2e>
   176b0:	20001de0 	.word	0x20001de0
   176b4:	00021b5c 	.word	0x00021b5c
   176b8:	00020a75 	.word	0x00020a75
   176bc:	00021b2a 	.word	0x00021b2a

000176c0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   176c0:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   176c2:	4c20      	ldr	r4, [pc, #128]	; (17744 <entropy_nrf5_init+0x84>)
   176c4:	6903      	ldr	r3, [r0, #16]
   176c6:	42a3      	cmp	r3, r4
   176c8:	d00b      	beq.n	176e2 <entropy_nrf5_init+0x22>
   176ca:	491f      	ldr	r1, [pc, #124]	; (17748 <entropy_nrf5_init+0x88>)
   176cc:	481f      	ldr	r0, [pc, #124]	; (1774c <entropy_nrf5_init+0x8c>)
   176ce:	4a20      	ldr	r2, [pc, #128]	; (17750 <entropy_nrf5_init+0x90>)
   176d0:	f240 1357 	movw	r3, #343	; 0x157
   176d4:	f005 fb85 	bl	1cde2 <printk>
   176d8:	481d      	ldr	r0, [pc, #116]	; (17750 <entropy_nrf5_init+0x90>)
   176da:	f240 1157 	movw	r1, #343	; 0x157
   176de:	f005 fdda 	bl	1d296 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   176e2:	2201      	movs	r2, #1
   176e4:	4611      	mov	r1, r2
   176e6:	4817      	ldr	r0, [pc, #92]	; (17744 <entropy_nrf5_init+0x84>)
   176e8:	f008 fb2b 	bl	1fd42 <z_impl_k_sem_init>
   176ec:	2201      	movs	r2, #1
   176ee:	2100      	movs	r1, #0
   176f0:	4818      	ldr	r0, [pc, #96]	; (17754 <entropy_nrf5_init+0x94>)
   176f2:	f008 fb26 	bl	1fd42 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   176f6:	f240 4307 	movw	r3, #1031	; 0x407
   176fa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   176fe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17702:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   17704:	230c      	movs	r3, #12
   17706:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1770a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1770c:	4b12      	ldr	r3, [pc, #72]	; (17758 <entropy_nrf5_init+0x98>)
   1770e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   17712:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   17716:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1771a:	f022 0201 	bic.w	r2, r2, #1
   1771e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17722:	4a0e      	ldr	r2, [pc, #56]	; (1775c <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   17724:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17726:	6015      	str	r5, [r2, #0]
   17728:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1772a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1772e:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17730:	6019      	str	r1, [r3, #0]
   17732:	200d      	movs	r0, #13
   17734:	f7f9 fe78 	bl	11428 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   17738:	200d      	movs	r0, #13
   1773a:	f7f9 fe43 	bl	113c4 <arch_irq_enable>

	return 0;
}
   1773e:	4628      	mov	r0, r5
   17740:	bd38      	pop	{r3, r4, r5, pc}
   17742:	bf00      	nop
   17744:	20001de0 	.word	0x20001de0
   17748:	00021b5c 	.word	0x00021b5c
   1774c:	00020a75 	.word	0x00020a75
   17750:	00021b2a 	.word	0x00021b2a
   17754:	20001df8 	.word	0x20001df8
   17758:	4000d000 	.word	0x4000d000
   1775c:	4000d100 	.word	0x4000d100

00017760 <isr>:
{
   17760:	b510      	push	{r4, lr}
	byte = random_byte_get();
   17762:	f7ff fe99 	bl	17498 <random_byte_get>
	if (byte < 0) {
   17766:	2800      	cmp	r0, #0
   17768:	db20      	blt.n	177ac <isr+0x4c>
	uint8_t last  = rngp->last;
   1776a:	4b17      	ldr	r3, [pc, #92]	; (177c8 <isr+0x68>)
   1776c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   17770:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   17774:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   17778:	1a51      	subs	r1, r2, r1
   1777a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1777e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   17780:	d10d      	bne.n	1779e <isr+0x3e>
	uint8_t last  = rngp->last;
   17782:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   17786:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1778a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1778e:	1a51      	subs	r1, r2, r1
   17790:	ea34 0101 	bics.w	r1, r4, r1
   17794:	d10b      	bne.n	177ae <isr+0x4e>
   17796:	4b0d      	ldr	r3, [pc, #52]	; (177cc <isr+0x6c>)
   17798:	2201      	movs	r2, #1
   1779a:	601a      	str	r2, [r3, #0]
}
   1779c:	e00e      	b.n	177bc <isr+0x5c>
	rngp->buffer[last] = byte;
   1779e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   177a0:	3201      	adds	r2, #1
   177a2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   177a4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   177a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   177ac:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   177ae:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   177b0:	3201      	adds	r2, #1
   177b2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   177b4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   177b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   177bc:	4804      	ldr	r0, [pc, #16]	; (177d0 <isr+0x70>)
}
   177be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   177c2:	f002 ba33 	b.w	19c2c <z_impl_k_sem_give>
   177c6:	bf00      	nop
   177c8:	20001de0 	.word	0x20001de0
   177cc:	4000d004 	.word	0x4000d004
   177d0:	20001df8 	.word	0x20001df8

000177d4 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   177d4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   177d6:	4c06      	ldr	r4, [pc, #24]	; (177f0 <sys_clock_isr+0x1c>)
   177d8:	4906      	ldr	r1, [pc, #24]	; (177f4 <sys_clock_isr+0x20>)
   177da:	4807      	ldr	r0, [pc, #28]	; (177f8 <sys_clock_isr+0x24>)
   177dc:	4622      	mov	r2, r4
   177de:	2317      	movs	r3, #23
   177e0:	f005 faff 	bl	1cde2 <printk>
   177e4:	4620      	mov	r0, r4
   177e6:	2117      	movs	r1, #23
}
   177e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   177ec:	f005 bd53 	b.w	1d296 <assert_post_action>
   177f0:	00021ba4 	.word	0x00021ba4
   177f4:	00022787 	.word	0x00022787
   177f8:	00020a75 	.word	0x00020a75

000177fc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   177fc:	4919      	ldr	r1, [pc, #100]	; (17864 <sys_clock_timeout_handler+0x68>)
{
   177fe:	b570      	push	{r4, r5, r6, lr}
   17800:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   17802:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17806:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   17808:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1780c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   17810:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   17812:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   17816:	f04f 0500 	mov.w	r5, #0
   1781a:	d20a      	bcs.n	17832 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1781c:	4b12      	ldr	r3, [pc, #72]	; (17868 <sys_clock_timeout_handler+0x6c>)
   1781e:	6819      	ldr	r1, [r3, #0]
   17820:	060a      	lsls	r2, r1, #24
   17822:	0a0b      	lsrs	r3, r1, #8
   17824:	1992      	adds	r2, r2, r6
   17826:	4911      	ldr	r1, [pc, #68]	; (1786c <sys_clock_timeout_handler+0x70>)
   17828:	f143 0300 	adc.w	r3, r3, #0
   1782c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   17830:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   17832:	f004 fc47 	bl	1c0c4 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   17836:	00a3      	lsls	r3, r4, #2
   17838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1783c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   17840:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   17844:	42b2      	cmp	r2, r6
   17846:	d10b      	bne.n	17860 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   17848:	b91d      	cbnz	r5, 17852 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   1784a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1784e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   17852:	4b07      	ldr	r3, [pc, #28]	; (17870 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17854:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   17858:	fa00 f404 	lsl.w	r4, r0, r4
   1785c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   17860:	bd70      	pop	{r4, r5, r6, pc}
   17862:	bf00      	nop
   17864:	20001950 	.word	0x20001950
   17868:	20001e3c 	.word	0x20001e3c
   1786c:	20001938 	.word	0x20001938
   17870:	40011000 	.word	0x40011000

00017874 <compare_int_lock>:
{
   17874:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   17876:	2301      	movs	r3, #1
   17878:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1787a:	4a11      	ldr	r2, [pc, #68]	; (178c0 <compare_int_lock+0x4c>)
   1787c:	f3bf 8f5b 	dmb	ish
   17880:	43dc      	mvns	r4, r3
   17882:	e852 1f00 	ldrex	r1, [r2]
   17886:	ea01 0c04 	and.w	ip, r1, r4
   1788a:	e842 ce00 	strex	lr, ip, [r2]
   1788e:	f1be 0f00 	cmp.w	lr, #0
   17892:	d1f6      	bne.n	17882 <compare_int_lock+0xe>
   17894:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   17898:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1789c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   178a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   178a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   178a8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   178ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   178b0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   178b4:	420b      	tst	r3, r1
}
   178b6:	bf14      	ite	ne
   178b8:	2001      	movne	r0, #1
   178ba:	2000      	moveq	r0, #0
   178bc:	bd10      	pop	{r4, pc}
   178be:	bf00      	nop
   178c0:	20001e38 	.word	0x20001e38

000178c4 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   178c4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   178c6:	4a12      	ldr	r2, [pc, #72]	; (17910 <compare_int_unlock.part.0+0x4c>)
   178c8:	f3bf 8f5b 	dmb	ish
   178cc:	4083      	lsls	r3, r0
   178ce:	e852 1f00 	ldrex	r1, [r2]
   178d2:	4319      	orrs	r1, r3
   178d4:	e842 1c00 	strex	ip, r1, [r2]
   178d8:	f1bc 0f00 	cmp.w	ip, #0
   178dc:	d1f7      	bne.n	178ce <compare_int_unlock.part.0+0xa>
   178de:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   178e2:	4a0c      	ldr	r2, [pc, #48]	; (17914 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   178e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   178e8:	4083      	lsls	r3, r0
   178ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   178ee:	4b0a      	ldr	r3, [pc, #40]	; (17918 <compare_int_unlock.part.0+0x54>)
   178f0:	f3bf 8f5b 	dmb	ish
   178f4:	681b      	ldr	r3, [r3, #0]
   178f6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   178fa:	fa23 f000 	lsr.w	r0, r3, r0
   178fe:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17900:	bf42      	ittt	mi
   17902:	4b06      	ldrmi	r3, [pc, #24]	; (1791c <compare_int_unlock.part.0+0x58>)
   17904:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   17908:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1790c:	4770      	bx	lr
   1790e:	bf00      	nop
   17910:	20001e38 	.word	0x20001e38
   17914:	40011000 	.word	0x40011000
   17918:	20001e34 	.word	0x20001e34
   1791c:	e000e100 	.word	0xe000e100

00017920 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   17920:	4b0d      	ldr	r3, [pc, #52]	; (17958 <z_nrf_rtc_timer_read+0x38>)
   17922:	681b      	ldr	r3, [r3, #0]
   17924:	0a19      	lsrs	r1, r3, #8
   17926:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   17928:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1792c:	4b0b      	ldr	r3, [pc, #44]	; (1795c <z_nrf_rtc_timer_read+0x3c>)
   1792e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   17932:	18c0      	adds	r0, r0, r3
   17934:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   17938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1793c:	d20a      	bcs.n	17954 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1793e:	4b08      	ldr	r3, [pc, #32]	; (17960 <z_nrf_rtc_timer_read+0x40>)
   17940:	e9d3 2300 	ldrd	r2, r3, [r3]
   17944:	4299      	cmp	r1, r3
   17946:	bf08      	it	eq
   17948:	4290      	cmpeq	r0, r2
   1794a:	d203      	bcs.n	17954 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1794c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   17950:	f141 0100 	adc.w	r1, r1, #0
}
   17954:	4770      	bx	lr
   17956:	bf00      	nop
   17958:	20001e3c 	.word	0x20001e3c
   1795c:	40011000 	.word	0x40011000
   17960:	20001938 	.word	0x20001938

00017964 <compare_set>:
{
   17964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17968:	b085      	sub	sp, #20
   1796a:	4616      	mov	r6, r2
   1796c:	461f      	mov	r7, r3
   1796e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   17970:	f7ff ff80 	bl	17874 <compare_int_lock>
   17974:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   17976:	f7ff ffd3 	bl	17920 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1797a:	42b9      	cmp	r1, r7
   1797c:	bf08      	it	eq
   1797e:	42b0      	cmpeq	r0, r6
   17980:	d27f      	bcs.n	17a82 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   17982:	ebb6 0800 	subs.w	r8, r6, r0
   17986:	eb67 0901 	sbc.w	r9, r7, r1
   1798a:	2300      	movs	r3, #0
   1798c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17990:	454b      	cmp	r3, r9
   17992:	bf08      	it	eq
   17994:	4542      	cmpeq	r2, r8
   17996:	f0c0 8085 	bcc.w	17aa4 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   1799a:	4b44      	ldr	r3, [pc, #272]	; (17aac <compare_set+0x148>)
   1799c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   179a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   179a4:	429f      	cmp	r7, r3
   179a6:	bf08      	it	eq
   179a8:	4296      	cmpeq	r6, r2
   179aa:	d054      	beq.n	17a56 <compare_set+0xf2>
   179ac:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   179b0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   179b4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   179b8:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   179bc:	fa0b f205 	lsl.w	r2, fp, r5
   179c0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   179c4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   179c8:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   179cc:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   179ce:	4a38      	ldr	r2, [pc, #224]	; (17ab0 <compare_set+0x14c>)
    return p_reg->CC[ch];
   179d0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   179d4:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   179d8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   179dc:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   179e0:	461c      	mov	r4, r3
   179e2:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   179e4:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   179e8:	eba0 000a 	sub.w	r0, r0, sl
   179ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   179f0:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   179f4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   179f6:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   179fa:	d105      	bne.n	17a08 <compare_set+0xa4>
   179fc:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   179fe:	2013      	movs	r0, #19
   17a00:	f008 fa34 	bl	1fe6c <z_impl_k_busy_wait>
   17a04:	4a2a      	ldr	r2, [pc, #168]	; (17ab0 <compare_set+0x14c>)
   17a06:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   17a08:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   17a0a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   17a0e:	eba4 000c 	sub.w	r0, r4, ip
   17a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   17a16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17a1a:	bf88      	it	hi
   17a1c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17a1e:	2000      	movs	r0, #0
   17a20:	f8c8 0000 	str.w	r0, [r8]
   17a24:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   17a28:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   17a2c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   17a30:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   17a34:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   17a38:	4582      	cmp	sl, r0
   17a3a:	d006      	beq.n	17a4a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   17a3c:	1a20      	subs	r0, r4, r0
   17a3e:	3802      	subs	r0, #2
   17a40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   17a44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17a48:	d819      	bhi.n	17a7e <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   17a4a:	1ae4      	subs	r4, r4, r3
   17a4c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   17a50:	1932      	adds	r2, r6, r4
   17a52:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   17a56:	4c15      	ldr	r4, [pc, #84]	; (17aac <compare_set+0x148>)
   17a58:	0129      	lsls	r1, r5, #4
   17a5a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   17a5e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   17a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   17a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   17a66:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   17a68:	6043      	str	r3, [r0, #4]
	return ret;
   17a6a:	2400      	movs	r4, #0
	if (key) {
   17a6c:	9b01      	ldr	r3, [sp, #4]
   17a6e:	b113      	cbz	r3, 17a76 <compare_set+0x112>
   17a70:	4628      	mov	r0, r5
   17a72:	f7ff ff27 	bl	178c4 <compare_int_unlock.part.0>
}
   17a76:	4620      	mov	r0, r4
   17a78:	b005      	add	sp, #20
   17a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a7e:	4620      	mov	r0, r4
   17a80:	e7b0      	b.n	179e4 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   17a82:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17a84:	4a0b      	ldr	r2, [pc, #44]	; (17ab4 <compare_set+0x150>)
   17a86:	f3bf 8f5b 	dmb	ish
   17a8a:	40ab      	lsls	r3, r5
   17a8c:	e852 1f00 	ldrex	r1, [r2]
   17a90:	4319      	orrs	r1, r3
   17a92:	e842 1000 	strex	r0, r1, [r2]
   17a96:	2800      	cmp	r0, #0
   17a98:	d1f8      	bne.n	17a8c <compare_set+0x128>
   17a9a:	f3bf 8f5b 	dmb	ish
   17a9e:	4632      	mov	r2, r6
   17aa0:	463b      	mov	r3, r7
   17aa2:	e7d8      	b.n	17a56 <compare_set+0xf2>
			return -EINVAL;
   17aa4:	f06f 0415 	mvn.w	r4, #21
   17aa8:	e7e0      	b.n	17a6c <compare_set+0x108>
   17aaa:	bf00      	nop
   17aac:	20001940 	.word	0x20001940
   17ab0:	40011000 	.word	0x40011000
   17ab4:	20001e34 	.word	0x20001e34

00017ab8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   17ab8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   17abc:	4c2a      	ldr	r4, [pc, #168]	; (17b68 <rtc_nrf_isr+0xb0>)
   17abe:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   17ac2:	0799      	lsls	r1, r3, #30
   17ac4:	d509      	bpl.n	17ada <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17ac6:	4b29      	ldr	r3, [pc, #164]	; (17b6c <rtc_nrf_isr+0xb4>)
   17ac8:	681a      	ldr	r2, [r3, #0]
   17aca:	b132      	cbz	r2, 17ada <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17acc:	2200      	movs	r2, #0
   17ace:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   17ad0:	4a27      	ldr	r2, [pc, #156]	; (17b70 <rtc_nrf_isr+0xb8>)
   17ad2:	681b      	ldr	r3, [r3, #0]
   17ad4:	6813      	ldr	r3, [r2, #0]
   17ad6:	3301      	adds	r3, #1
   17ad8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17ada:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17ade:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   17ae0:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   17ae4:	03d2      	lsls	r2, r2, #15
   17ae6:	d52c      	bpl.n	17b42 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17ae8:	f3bf 8f5b 	dmb	ish
   17aec:	4a21      	ldr	r2, [pc, #132]	; (17b74 <rtc_nrf_isr+0xbc>)
   17aee:	e852 1f00 	ldrex	r1, [r2]
   17af2:	f021 0001 	bic.w	r0, r1, #1
   17af6:	e842 0500 	strex	r5, r0, [r2]
   17afa:	2d00      	cmp	r5, #0
   17afc:	d1f7      	bne.n	17aee <rtc_nrf_isr+0x36>
   17afe:	f3bf 8f5b 	dmb	ish
   17b02:	4a1d      	ldr	r2, [pc, #116]	; (17b78 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   17b04:	b909      	cbnz	r1, 17b0a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17b06:	6811      	ldr	r1, [r2, #0]
		if (result) {
   17b08:	b1d9      	cbz	r1, 17b42 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17b0a:	2500      	movs	r5, #0
   17b0c:	6015      	str	r5, [r2, #0]
   17b0e:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17b10:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   17b14:	f7ff ff04 	bl	17920 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17b18:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   17b1c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   17b1e:	4b17      	ldr	r3, [pc, #92]	; (17b7c <rtc_nrf_isr+0xc4>)
   17b20:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   17b24:	4549      	cmp	r1, r9
   17b26:	bf08      	it	eq
   17b28:	4540      	cmpeq	r0, r8
   17b2a:	d20f      	bcs.n	17b4c <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   17b2c:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17b2e:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   17b32:	b141      	cbz	r1, 17b46 <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   17b34:	f8cd a000 	str.w	sl, [sp]
   17b38:	4642      	mov	r2, r8
   17b3a:	464b      	mov	r3, r9
   17b3c:	2000      	movs	r0, #0
   17b3e:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   17b40:	e001      	b.n	17b46 <rtc_nrf_isr+0x8e>
   17b42:	f383 8810 	msr	PRIMASK, r3
		process_channel(chan);
	}
}
   17b46:	b002      	add	sp, #8
   17b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   17b4c:	f04f 36ff 	mov.w	r6, #4294967295
   17b50:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   17b54:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   17b58:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   17b5c:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   17b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17b62:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   17b66:	e7e2      	b.n	17b2e <rtc_nrf_isr+0x76>
   17b68:	40011000 	.word	0x40011000
   17b6c:	40011104 	.word	0x40011104
   17b70:	20001e3c 	.word	0x20001e3c
   17b74:	20001e34 	.word	0x20001e34
   17b78:	40011140 	.word	0x40011140
   17b7c:	20001940 	.word	0x20001940

00017b80 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   17b80:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   17b82:	4b1a      	ldr	r3, [pc, #104]	; (17bec <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
   17b84:	4d1a      	ldr	r5, [pc, #104]	; (17bf0 <sys_clock_driver_init+0x70>)
   17b86:	2400      	movs	r4, #0
   17b88:	f04f 30ff 	mov.w	r0, #4294967295
   17b8c:	f04f 31ff 	mov.w	r1, #4294967295
   17b90:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   17b94:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   17b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   17b9c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17ba0:	4b14      	ldr	r3, [pc, #80]	; (17bf4 <sys_clock_driver_init+0x74>)
   17ba2:	2602      	movs	r6, #2
   17ba4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   17ba8:	2101      	movs	r1, #1
   17baa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   17bae:	2011      	movs	r0, #17
   17bb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   17bb4:	4622      	mov	r2, r4
   17bb6:	f7f9 fc37 	bl	11428 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   17bba:	2011      	movs	r0, #17
   17bbc:	f7f9 fc02 	bl	113c4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   17bc0:	4a0d      	ldr	r2, [pc, #52]	; (17bf8 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
   17bc2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   17bc6:	2301      	movs	r3, #1
   17bc8:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   17bca:	4a0c      	ldr	r2, [pc, #48]	; (17bfc <sys_clock_driver_init+0x7c>)
   17bcc:	602b      	str	r3, [r5, #0]
   17bce:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   17bd0:	4b0b      	ldr	r3, [pc, #44]	; (17c00 <sys_clock_driver_init+0x80>)
   17bd2:	4a0c      	ldr	r2, [pc, #48]	; (17c04 <sys_clock_driver_init+0x84>)
   17bd4:	9300      	str	r3, [sp, #0]
   17bd6:	9401      	str	r4, [sp, #4]
   17bd8:	2300      	movs	r3, #0
   17bda:	4620      	mov	r0, r4
   17bdc:	f7ff fec2 	bl	17964 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   17be0:	4630      	mov	r0, r6
   17be2:	f7fe fde7 	bl	167b4 <z_nrf_clock_control_lf_on>

	return 0;
}
   17be6:	4620      	mov	r0, r4
   17be8:	b002      	add	sp, #8
   17bea:	bd70      	pop	{r4, r5, r6, pc}
   17bec:	20001940 	.word	0x20001940
   17bf0:	40011000 	.word	0x40011000
   17bf4:	e000e100 	.word	0xe000e100
   17bf8:	40011008 	.word	0x40011008
   17bfc:	20001e38 	.word	0x20001e38
   17c00:	000177fd 	.word	0x000177fd
   17c04:	007fffff 	.word	0x007fffff

00017c08 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   17c08:	4b14      	ldr	r3, [pc, #80]	; (17c5c <sys_clock_set_timeout+0x54>)
{
   17c0a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   17c0c:	f1b0 3fff 	cmp.w	r0, #4294967295
   17c10:	bf08      	it	eq
   17c12:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   17c14:	1e44      	subs	r4, r0, #1
   17c16:	2c00      	cmp	r4, #0
   17c18:	dd1e      	ble.n	17c58 <sys_clock_set_timeout+0x50>
   17c1a:	429c      	cmp	r4, r3
   17c1c:	bfa8      	it	ge
   17c1e:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   17c20:	f7ff fe7e 	bl	17920 <z_nrf_rtc_timer_read>
   17c24:	4b0e      	ldr	r3, [pc, #56]	; (17c60 <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   17c26:	490f      	ldr	r1, [pc, #60]	; (17c64 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   17c28:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c2c:	1a80      	subs	r0, r0, r2
		ticks = 0;
   17c2e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17c32:	bf28      	it	cs
   17c34:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   17c36:	3001      	adds	r0, #1
   17c38:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   17c3a:	4808      	ldr	r0, [pc, #32]	; (17c5c <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   17c3c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   17c3e:	4284      	cmp	r4, r0
   17c40:	bf28      	it	cs
   17c42:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   17c44:	1912      	adds	r2, r2, r4
   17c46:	f04f 0000 	mov.w	r0, #0
   17c4a:	9001      	str	r0, [sp, #4]
   17c4c:	f143 0300 	adc.w	r3, r3, #0
   17c50:	f7ff fe88 	bl	17964 <compare_set>
}
   17c54:	b002      	add	sp, #8
   17c56:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   17c58:	2400      	movs	r4, #0
   17c5a:	e7e1      	b.n	17c20 <sys_clock_set_timeout+0x18>
   17c5c:	007fffff 	.word	0x007fffff
   17c60:	20001950 	.word	0x20001950
   17c64:	000177fd 	.word	0x000177fd

00017c68 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   17c68:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   17c6a:	f7ff fe59 	bl	17920 <z_nrf_rtc_timer_read>
   17c6e:	4b02      	ldr	r3, [pc, #8]	; (17c78 <sys_clock_elapsed+0x10>)
   17c70:	681b      	ldr	r3, [r3, #0]
}
   17c72:	1ac0      	subs	r0, r0, r3
   17c74:	bd08      	pop	{r3, pc}
   17c76:	bf00      	nop
   17c78:	20001950 	.word	0x20001950

00017c7c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   17c7c:	4602      	mov	r2, r0
   17c7e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   17c80:	4801      	ldr	r0, [pc, #4]	; (17c88 <multithreading_lock_acquire+0xc>)
   17c82:	f001 bca7 	b.w	195d4 <z_impl_k_mutex_lock>
   17c86:	bf00      	nop
   17c88:	20000640 	.word	0x20000640

00017c8c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   17c8c:	4801      	ldr	r0, [pc, #4]	; (17c94 <multithreading_lock_release+0x8>)
   17c8e:	f001 bda1 	b.w	197d4 <z_impl_k_mutex_unlock>
   17c92:	bf00      	nop
   17c94:	20000640 	.word	0x20000640

00017c98 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   17c98:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   17c9a:	4804      	ldr	r0, [pc, #16]	; (17cac <hci_driver_init+0x14>)
   17c9c:	f7fa fff2 	bl	12c84 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   17ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   17ca4:	4802      	ldr	r0, [pc, #8]	; (17cb0 <hci_driver_init+0x18>)
   17ca6:	f7eb bfeb 	b.w	3c80 <sdc_init>
   17caa:	bf00      	nop
   17cac:	00020898 	.word	0x00020898
   17cb0:	0001fc11 	.word	0x0001fc11

00017cb4 <rand_prio_low_vector_get_blocking>:
{
   17cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   17cb6:	4b16      	ldr	r3, [pc, #88]	; (17d10 <rand_prio_low_vector_get_blocking+0x5c>)
{
   17cb8:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   17cba:	681e      	ldr	r6, [r3, #0]
   17cbc:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   17cbe:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   17cc0:	683b      	ldr	r3, [r7, #0]
   17cc2:	b963      	cbnz	r3, 17cde <rand_prio_low_vector_get_blocking+0x2a>
   17cc4:	4913      	ldr	r1, [pc, #76]	; (17d14 <rand_prio_low_vector_get_blocking+0x60>)
   17cc6:	4a14      	ldr	r2, [pc, #80]	; (17d18 <rand_prio_low_vector_get_blocking+0x64>)
   17cc8:	4814      	ldr	r0, [pc, #80]	; (17d1c <rand_prio_low_vector_get_blocking+0x68>)
   17cca:	234b      	movs	r3, #75	; 0x4b
   17ccc:	f005 f889 	bl	1cde2 <printk>
   17cd0:	4813      	ldr	r0, [pc, #76]	; (17d20 <rand_prio_low_vector_get_blocking+0x6c>)
   17cd2:	f005 f886 	bl	1cde2 <printk>
   17cd6:	4810      	ldr	r0, [pc, #64]	; (17d18 <rand_prio_low_vector_get_blocking+0x64>)
   17cd8:	214b      	movs	r1, #75	; 0x4b
   17cda:	f005 fadc 	bl	1d296 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   17cde:	683b      	ldr	r3, [r7, #0]
   17ce0:	462a      	mov	r2, r5
   17ce2:	4621      	mov	r1, r4
   17ce4:	4630      	mov	r0, r6
   17ce6:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   17ce8:	b180      	cbz	r0, 17d0c <rand_prio_low_vector_get_blocking+0x58>
   17cea:	490e      	ldr	r1, [pc, #56]	; (17d24 <rand_prio_low_vector_get_blocking+0x70>)
   17cec:	4a0e      	ldr	r2, [pc, #56]	; (17d28 <rand_prio_low_vector_get_blocking+0x74>)
   17cee:	480b      	ldr	r0, [pc, #44]	; (17d1c <rand_prio_low_vector_get_blocking+0x68>)
   17cf0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   17cf4:	f005 f875 	bl	1cde2 <printk>
   17cf8:	480c      	ldr	r0, [pc, #48]	; (17d2c <rand_prio_low_vector_get_blocking+0x78>)
   17cfa:	f005 f872 	bl	1cde2 <printk>
}
   17cfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   17d02:	4809      	ldr	r0, [pc, #36]	; (17d28 <rand_prio_low_vector_get_blocking+0x74>)
   17d04:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   17d08:	f005 bac5 	b.w	1d296 <assert_post_action>
}
   17d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d0e:	bf00      	nop
   17d10:	20001e40 	.word	0x20001e40
   17d14:	00021c0d 	.word	0x00021c0d
   17d18:	00021be0 	.word	0x00021be0
   17d1c:	00020a75 	.word	0x00020a75
   17d20:	00021c2d 	.word	0x00021c2d
   17d24:	00021488 	.word	0x00021488
   17d28:	00021c53 	.word	0x00021c53
   17d2c:	00021c8c 	.word	0x00021c8c

00017d30 <rand_prio_high_vector_get>:
{
   17d30:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17d32:	4b11      	ldr	r3, [pc, #68]	; (17d78 <rand_prio_high_vector_get+0x48>)
{
   17d34:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   17d36:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   17d38:	6883      	ldr	r3, [r0, #8]
   17d3a:	685d      	ldr	r5, [r3, #4]
   17d3c:	460a      	mov	r2, r1
   17d3e:	b1bd      	cbz	r5, 17d70 <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   17d40:	4621      	mov	r1, r4
   17d42:	2300      	movs	r3, #0
   17d44:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   17d46:	1e04      	subs	r4, r0, #0
   17d48:	da0e      	bge.n	17d68 <rand_prio_high_vector_get+0x38>
   17d4a:	490c      	ldr	r1, [pc, #48]	; (17d7c <rand_prio_high_vector_get+0x4c>)
   17d4c:	4a0c      	ldr	r2, [pc, #48]	; (17d80 <rand_prio_high_vector_get+0x50>)
   17d4e:	480d      	ldr	r0, [pc, #52]	; (17d84 <rand_prio_high_vector_get+0x54>)
   17d50:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   17d54:	f005 f845 	bl	1cde2 <printk>
   17d58:	480b      	ldr	r0, [pc, #44]	; (17d88 <rand_prio_high_vector_get+0x58>)
   17d5a:	f005 f842 	bl	1cde2 <printk>
   17d5e:	4808      	ldr	r0, [pc, #32]	; (17d80 <rand_prio_high_vector_get+0x50>)
   17d60:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   17d64:	f005 fa97 	bl	1d296 <assert_post_action>
	return ret >= 0 ? ret : 0;
   17d68:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   17d6c:	b2c0      	uxtb	r0, r0
   17d6e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   17d70:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17d74:	e7e9      	b.n	17d4a <rand_prio_high_vector_get+0x1a>
   17d76:	bf00      	nop
   17d78:	20001e40 	.word	0x20001e40
   17d7c:	00021cc6 	.word	0x00021cc6
   17d80:	00021c53 	.word	0x00021c53
   17d84:	00020a75 	.word	0x00020a75
   17d88:	00021ccf 	.word	0x00021ccf

00017d8c <hci_driver_open>:
{
   17d8c:	b530      	push	{r4, r5, lr}
   17d8e:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17d90:	2200      	movs	r2, #0
   17d92:	2300      	movs	r3, #0
   17d94:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17d98:	2300      	movs	r3, #0
   17d9a:	f06f 0209 	mvn.w	r2, #9
   17d9e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   17da2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17da6:	9300      	str	r3, [sp, #0]
   17da8:	4946      	ldr	r1, [pc, #280]	; (17ec4 <hci_driver_open+0x138>)
   17daa:	4b47      	ldr	r3, [pc, #284]	; (17ec8 <hci_driver_open+0x13c>)
   17dac:	4847      	ldr	r0, [pc, #284]	; (17ecc <hci_driver_open+0x140>)
   17dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17db2:	f001 fadf 	bl	19374 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17db6:	4946      	ldr	r1, [pc, #280]	; (17ed0 <hci_driver_open+0x144>)
   17db8:	4844      	ldr	r0, [pc, #272]	; (17ecc <hci_driver_open+0x140>)
   17dba:	f007 ff88 	bl	1fcce <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   17dbe:	a80b      	add	r0, sp, #44	; 0x2c
   17dc0:	f7eb fece 	bl	3b60 <sdc_build_revision_get>
			err = sdc_support_scan();
   17dc4:	f7ec f80c 	bl	3de0 <sdc_support_scan>
			if (err) {
   17dc8:	b110      	cbz	r0, 17dd0 <hci_driver_open+0x44>
		return -err;
   17dca:	2086      	movs	r0, #134	; 0x86
}
   17dcc:	b011      	add	sp, #68	; 0x44
   17dce:	bd30      	pop	{r4, r5, pc}
		err = sdc_support_master();
   17dd0:	f7eb fff6 	bl	3dc0 <sdc_support_master>
		if (err) {
   17dd4:	2800      	cmp	r0, #0
   17dd6:	d1f8      	bne.n	17dca <hci_driver_open+0x3e>
		err = sdc_support_dle();
   17dd8:	f7eb ffd2 	bl	3d80 <sdc_support_dle>
		if (err) {
   17ddc:	2800      	cmp	r0, #0
   17dde:	d1f4      	bne.n	17dca <hci_driver_open+0x3e>
		err = sdc_support_le_2m_phy();
   17de0:	f7eb ffde 	bl	3da0 <sdc_support_le_2m_phy>
		if (err) {
   17de4:	4605      	mov	r5, r0
   17de6:	2800      	cmp	r0, #0
   17de8:	d1ef      	bne.n	17dca <hci_driver_open+0x3e>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17dea:	ac08      	add	r4, sp, #32
	cfg.master_count.count = SDC_MASTER_COUNT;
   17dec:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17dee:	4622      	mov	r2, r4
	cfg.master_count.count = SDC_MASTER_COUNT;
   17df0:	f88d 1020 	strb.w	r1, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17df4:	f7eb fec2 	bl	3b7c <sdc_cfg_set>
	if (required_memory < 0) {
   17df8:	2800      	cmp	r0, #0
   17dfa:	dbe7      	blt.n	17dcc <hci_driver_open+0x40>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17dfc:	4622      	mov	r2, r4
   17dfe:	2102      	movs	r1, #2
   17e00:	4628      	mov	r0, r5
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   17e02:	f88d 5020 	strb.w	r5, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17e06:	f7eb feb9 	bl	3b7c <sdc_cfg_set>
	if (required_memory < 0) {
   17e0a:	2800      	cmp	r0, #0
   17e0c:	dbde      	blt.n	17dcc <hci_driver_open+0x40>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   17e0e:	4b31      	ldr	r3, [pc, #196]	; (17ed4 <hci_driver_open+0x148>)
   17e10:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17e12:	4622      	mov	r2, r4
   17e14:	2103      	movs	r1, #3
   17e16:	4628      	mov	r0, r5
   17e18:	f7eb feb0 	bl	3b7c <sdc_cfg_set>
	if (required_memory < 0) {
   17e1c:	2800      	cmp	r0, #0
   17e1e:	dbd5      	blt.n	17dcc <hci_driver_open+0x40>
	cfg.event_length.event_length_us =
   17e20:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17e24:	4622      	mov	r2, r4
   17e26:	2104      	movs	r1, #4
   17e28:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   17e2a:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17e2c:	f7eb fea6 	bl	3b7c <sdc_cfg_set>
	if (required_memory < 0) {
   17e30:	2800      	cmp	r0, #0
   17e32:	dbcb      	blt.n	17dcc <hci_driver_open+0x40>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17e34:	4622      	mov	r2, r4
   17e36:	2105      	movs	r1, #5
   17e38:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   17e3a:	f88d 5020 	strb.w	r5, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17e3e:	f7eb fe9d 	bl	3b7c <sdc_cfg_set>
	if (required_memory < 0) {
   17e42:	2800      	cmp	r0, #0
   17e44:	dbc2      	blt.n	17dcc <hci_driver_open+0x40>
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   17e46:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17e48:	4622      	mov	r2, r4
   17e4a:	2106      	movs	r1, #6
   17e4c:	4628      	mov	r0, r5
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   17e4e:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   17e52:	f7eb fe93 	bl	3b7c <sdc_cfg_set>
		if (required_memory < 0) {
   17e56:	2800      	cmp	r0, #0
   17e58:	dbb8      	blt.n	17dcc <hci_driver_open+0x40>
	if (required_memory > sizeof(sdc_mempool)) {
   17e5a:	f240 4386 	movw	r3, #1158	; 0x486
   17e5e:	4298      	cmp	r0, r3
   17e60:	dd08      	ble.n	17e74 <hci_driver_open+0xe8>
		k_panic();
   17e62:	4040      	eors	r0, r0
   17e64:	f380 8811 	msr	BASEPRI, r0
   17e68:	f04f 0004 	mov.w	r0, #4
   17e6c:	df02      	svc	2
		return -ENOMEM;
   17e6e:	f06f 000b 	mvn.w	r0, #11
   17e72:	e7ab      	b.n	17dcc <hci_driver_open+0x40>
   17e74:	4818      	ldr	r0, [pc, #96]	; (17ed8 <hci_driver_open+0x14c>)
   17e76:	f000 febd 	bl	18bf4 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17e7a:	4b18      	ldr	r3, [pc, #96]	; (17edc <hci_driver_open+0x150>)
   17e7c:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   17e7e:	b1e8      	cbz	r0, 17ebc <hci_driver_open+0x130>
	sdc_rand_source_t rand_functions = {
   17e80:	4b17      	ldr	r3, [pc, #92]	; (17ee0 <hci_driver_open+0x154>)
   17e82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   17e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   17e8a:	4620      	mov	r0, r4
   17e8c:	f7ec f80a 	bl	3ea4 <sdc_rand_source_register>
	if (err) {
   17e90:	b988      	cbnz	r0, 17eb6 <hci_driver_open+0x12a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   17e92:	f04f 30ff 	mov.w	r0, #4294967295
   17e96:	f04f 31ff 	mov.w	r1, #4294967295
   17e9a:	f7ff feef 	bl	17c7c <multithreading_lock_acquire>
	if (!err) {
   17e9e:	4604      	mov	r4, r0
   17ea0:	b930      	cbnz	r0, 17eb0 <hci_driver_open+0x124>
		err = sdc_enable(host_signal, sdc_mempool);
   17ea2:	4910      	ldr	r1, [pc, #64]	; (17ee4 <hci_driver_open+0x158>)
   17ea4:	4810      	ldr	r0, [pc, #64]	; (17ee8 <hci_driver_open+0x15c>)
   17ea6:	f7eb fec3 	bl	3c30 <sdc_enable>
   17eaa:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17eac:	f7ff feee 	bl	17c8c <multithreading_lock_release>
	if (err < 0) {
   17eb0:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   17eb4:	e78a      	b.n	17dcc <hci_driver_open+0x40>
		return -EINVAL;
   17eb6:	f06f 0015 	mvn.w	r0, #21
   17eba:	e787      	b.n	17dcc <hci_driver_open+0x40>
		return -ENODEV;
   17ebc:	f06f 0012 	mvn.w	r0, #18
   17ec0:	e784      	b.n	17dcc <hci_driver_open+0x40>
   17ec2:	bf00      	nop
   17ec4:	20003380 	.word	0x20003380
   17ec8:	00017eed 	.word	0x00017eed
   17ecc:	20001958 	.word	0x20001958
   17ed0:	00021d13 	.word	0x00021d13
   17ed4:	02031b1b 	.word	0x02031b1b
   17ed8:	00021ba0 	.word	0x00021ba0
   17edc:	20001e40 	.word	0x20001e40
   17ee0:	000203e0 	.word	0x000203e0
   17ee4:	20002053 	.word	0x20002053
   17ee8:	00017fcd 	.word	0x00017fcd

00017eec <recv_thread>:
{
   17eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool received_data = false;
   17eee:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   17ef0:	4f34      	ldr	r7, [pc, #208]	; (17fc4 <recv_thread+0xd8>)
		errcode = hci_internal_evt_get(p_hci_buffer);
   17ef2:	4c35      	ldr	r4, [pc, #212]	; (17fc8 <recv_thread+0xdc>)
	bool received_evt = false;
   17ef4:	462e      	mov	r6, r5
		if (!received_evt && !received_data) {
   17ef6:	b93e      	cbnz	r6, 17f08 <recv_thread+0x1c>
   17ef8:	b935      	cbnz	r5, 17f08 <recv_thread+0x1c>
   17efa:	f04f 32ff 	mov.w	r2, #4294967295
   17efe:	f04f 33ff 	mov.w	r3, #4294967295
   17f02:	4638      	mov	r0, r7
   17f04:	f001 fed6 	bl	19cb4 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17f08:	f04f 30ff 	mov.w	r0, #4294967295
   17f0c:	f04f 31ff 	mov.w	r1, #4294967295
   17f10:	f7ff feb4 	bl	17c7c <multithreading_lock_acquire>
	if (!errcode) {
   17f14:	b158      	cbz	r0, 17f2e <recv_thread+0x42>
		return false;
   17f16:	2600      	movs	r6, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17f18:	f04f 30ff 	mov.w	r0, #4294967295
   17f1c:	f04f 31ff 	mov.w	r1, #4294967295
   17f20:	f7ff feac 	bl	17c7c <multithreading_lock_acquire>
	if (!errcode) {
   17f24:	b380      	cbz	r0, 17f88 <recv_thread+0x9c>
		return false;
   17f26:	2500      	movs	r5, #0
	z_impl_k_yield();
   17f28:	f003 fbea 	bl	1b700 <z_impl_k_yield>
}
   17f2c:	e7e3      	b.n	17ef6 <recv_thread+0xa>
		errcode = hci_internal_evt_get(p_hci_buffer);
   17f2e:	4826      	ldr	r0, [pc, #152]	; (17fc8 <recv_thread+0xdc>)
   17f30:	f000 fb86 	bl	18640 <hci_internal_evt_get>
   17f34:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   17f36:	f7ff fea9 	bl	17c8c <multithreading_lock_release>
	if (errcode) {
   17f3a:	2d00      	cmp	r5, #0
   17f3c:	d1eb      	bne.n	17f16 <recv_thread+0x2a>
	switch (hdr->evt) {
   17f3e:	7820      	ldrb	r0, [r4, #0]
   17f40:	283e      	cmp	r0, #62	; 0x3e
   17f42:	d007      	beq.n	17f54 <recv_thread+0x68>
   17f44:	28ff      	cmp	r0, #255	; 0xff
   17f46:	d01c      	beq.n	17f82 <recv_thread+0x96>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17f48:	f04f 32ff 	mov.w	r2, #4294967295
   17f4c:	f04f 33ff 	mov.w	r3, #4294967295
   17f50:	2100      	movs	r1, #0
   17f52:	e007      	b.n	17f64 <recv_thread+0x78>
		switch (me->subevent) {
   17f54:	78a3      	ldrb	r3, [r4, #2]
   17f56:	2b02      	cmp	r3, #2
   17f58:	d001      	beq.n	17f5e <recv_thread+0x72>
   17f5a:	2b0d      	cmp	r3, #13
		switch (subevent) {
   17f5c:	d1f4      	bne.n	17f48 <recv_thread+0x5c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   17f5e:	2200      	movs	r2, #0
   17f60:	2300      	movs	r3, #0
   17f62:	2101      	movs	r1, #1
   17f64:	f7f9 ffb0 	bl	11ec8 <bt_buf_get_evt>
	if (!evt_buf) {
   17f68:	4605      	mov	r5, r0
   17f6a:	b140      	cbz	r0, 17f7e <recv_thread+0x92>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   17f6c:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17f6e:	4621      	mov	r1, r4
   17f70:	3202      	adds	r2, #2
   17f72:	3008      	adds	r0, #8
   17f74:	f007 fa5b 	bl	1f42e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   17f78:	4628      	mov	r0, r5
   17f7a:	f7fa fe61 	bl	12c40 <bt_recv>
	return true;
   17f7e:	2601      	movs	r6, #1
   17f80:	e7ca      	b.n	17f18 <recv_thread+0x2c>
		switch (subevent) {
   17f82:	78a3      	ldrb	r3, [r4, #2]
   17f84:	2b80      	cmp	r3, #128	; 0x80
   17f86:	e7e9      	b.n	17f5c <recv_thread+0x70>
		errcode = sdc_hci_data_get(p_hci_buffer);
   17f88:	480f      	ldr	r0, [pc, #60]	; (17fc8 <recv_thread+0xdc>)
   17f8a:	f7f4 fee3 	bl	cd54 <sdc_hci_data_get>
   17f8e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   17f90:	f7ff fe7c 	bl	17c8c <multithreading_lock_release>
	if (errcode) {
   17f94:	2d00      	cmp	r5, #0
   17f96:	d1c6      	bne.n	17f26 <recv_thread+0x3a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   17f98:	f04f 32ff 	mov.w	r2, #4294967295
   17f9c:	f04f 33ff 	mov.w	r3, #4294967295
   17fa0:	2003      	movs	r0, #3
   17fa2:	f7f9 ff47 	bl	11e34 <bt_buf_get_rx>
	if (!data_buf) {
   17fa6:	4605      	mov	r5, r0
   17fa8:	b908      	cbnz	r0, 17fae <recv_thread+0xc2>
	return true;
   17faa:	2501      	movs	r5, #1
   17fac:	e7bc      	b.n	17f28 <recv_thread+0x3c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   17fae:	8862      	ldrh	r2, [r4, #2]
   17fb0:	4621      	mov	r1, r4
   17fb2:	3204      	adds	r2, #4
   17fb4:	3008      	adds	r0, #8
   17fb6:	f007 fa3a 	bl	1f42e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   17fba:	4628      	mov	r0, r5
   17fbc:	f7fa fe40 	bl	12c40 <bt_recv>
   17fc0:	e7f3      	b.n	17faa <recv_thread+0xbe>
   17fc2:	bf00      	nop
   17fc4:	20000668 	.word	0x20000668
   17fc8:	2000200d 	.word	0x2000200d

00017fcc <host_signal>:
	z_impl_k_sem_give(sem);
   17fcc:	4801      	ldr	r0, [pc, #4]	; (17fd4 <host_signal+0x8>)
   17fce:	f001 be2d 	b.w	19c2c <z_impl_k_sem_give>
   17fd2:	bf00      	nop
   17fd4:	20000668 	.word	0x20000668

00017fd8 <hci_driver_send>:
{
   17fd8:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   17fda:	8983      	ldrh	r3, [r0, #12]
{
   17fdc:	4605      	mov	r5, r0
	if (!buf->len) {
   17fde:	b383      	cbz	r3, 18042 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17fe0:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   17fe2:	b1ab      	cbz	r3, 18010 <hci_driver_send+0x38>
   17fe4:	2b02      	cmp	r3, #2
   17fe6:	d12c      	bne.n	18042 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   17fe8:	f04f 30ff 	mov.w	r0, #4294967295
   17fec:	f04f 31ff 	mov.w	r1, #4294967295
   17ff0:	f7ff fe44 	bl	17c7c <multithreading_lock_acquire>
	if (!errcode) {
   17ff4:	4604      	mov	r4, r0
   17ff6:	b948      	cbnz	r0, 1800c <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   17ff8:	68a8      	ldr	r0, [r5, #8]
   17ffa:	f7f4 feb8 	bl	cd6e <sdc_hci_data_put>
   17ffe:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18000:	f7ff fe44 	bl	17c8c <multithreading_lock_release>
		if (errcode) {
   18004:	b1c4      	cbz	r4, 18038 <hci_driver_send+0x60>
   18006:	4810      	ldr	r0, [pc, #64]	; (18048 <hci_driver_send+0x70>)
   18008:	f001 fe10 	bl	19c2c <z_impl_k_sem_give>
}
   1800c:	4620      	mov	r0, r4
   1800e:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18010:	f04f 30ff 	mov.w	r0, #4294967295
   18014:	f04f 31ff 	mov.w	r1, #4294967295
   18018:	f7ff fe30 	bl	17c7c <multithreading_lock_acquire>
	if (!errcode) {
   1801c:	4604      	mov	r4, r0
   1801e:	2800      	cmp	r0, #0
   18020:	d1f4      	bne.n	1800c <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   18022:	68a8      	ldr	r0, [r5, #8]
   18024:	f000 f840 	bl	180a8 <hci_internal_cmd_put>
   18028:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1802a:	f7ff fe2f 	bl	17c8c <multithreading_lock_release>
	if (errcode) {
   1802e:	2c00      	cmp	r4, #0
   18030:	d1ec      	bne.n	1800c <hci_driver_send+0x34>
   18032:	4805      	ldr	r0, [pc, #20]	; (18048 <hci_driver_send+0x70>)
   18034:	f001 fdfa 	bl	19c2c <z_impl_k_sem_give>
		net_buf_unref(buf);
   18038:	4628      	mov	r0, r5
   1803a:	f7fe f8ef 	bl	1621c <net_buf_unref>
   1803e:	2400      	movs	r4, #0
   18040:	e7e4      	b.n	1800c <hci_driver_send+0x34>
	switch (type) {
   18042:	f06f 0415 	mvn.w	r4, #21
   18046:	e7e1      	b.n	1800c <hci_driver_send+0x34>
   18048:	20000668 	.word	0x20000668

0001804c <rand_prio_low_vector_get>:
{
   1804c:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1804e:	4b11      	ldr	r3, [pc, #68]	; (18094 <rand_prio_low_vector_get+0x48>)
{
   18050:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18052:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   18054:	6883      	ldr	r3, [r0, #8]
   18056:	685d      	ldr	r5, [r3, #4]
   18058:	460a      	mov	r2, r1
   1805a:	b1bd      	cbz	r5, 1808c <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1805c:	4621      	mov	r1, r4
   1805e:	2300      	movs	r3, #0
   18060:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   18062:	1e04      	subs	r4, r0, #0
   18064:	da0e      	bge.n	18084 <rand_prio_low_vector_get+0x38>
   18066:	490c      	ldr	r1, [pc, #48]	; (18098 <rand_prio_low_vector_get+0x4c>)
   18068:	4a0c      	ldr	r2, [pc, #48]	; (1809c <rand_prio_low_vector_get+0x50>)
   1806a:	480d      	ldr	r0, [pc, #52]	; (180a0 <rand_prio_low_vector_get+0x54>)
   1806c:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   18070:	f004 feb7 	bl	1cde2 <printk>
   18074:	480b      	ldr	r0, [pc, #44]	; (180a4 <rand_prio_low_vector_get+0x58>)
   18076:	f004 feb4 	bl	1cde2 <printk>
   1807a:	4808      	ldr	r0, [pc, #32]	; (1809c <rand_prio_low_vector_get+0x50>)
   1807c:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   18080:	f005 f909 	bl	1d296 <assert_post_action>
	return ret >= 0 ? ret : 0;
   18084:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   18088:	b2c0      	uxtb	r0, r0
   1808a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1808c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   18090:	e7e9      	b.n	18066 <rand_prio_low_vector_get+0x1a>
   18092:	bf00      	nop
   18094:	20001e40 	.word	0x20001e40
   18098:	00021cc6 	.word	0x00021cc6
   1809c:	00021c53 	.word	0x00021c53
   180a0:	00020a75 	.word	0x00020a75
   180a4:	00021d1a 	.word	0x00021d1a

000180a8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   180a8:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   180aa:	4cd7      	ldr	r4, [pc, #860]	; (18408 <hci_internal_cmd_put+0x360>)
   180ac:	7823      	ldrb	r3, [r4, #0]
   180ae:	2b00      	cmp	r3, #0
   180b0:	f040 82b0 	bne.w	18614 <hci_internal_cmd_put+0x56c>
	return ((uint16_t)src[1] << 8) | src[0];
   180b4:	7843      	ldrb	r3, [r0, #1]
   180b6:	7805      	ldrb	r5, [r0, #0]
   180b8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   180bc:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   180c0:	b22e      	sxth	r6, r5
   180c2:	ea4f 2395 	mov.w	r3, r5, lsr #10
   180c6:	d209      	bcs.n	180dc <hci_internal_cmd_put+0x34>
   180c8:	b15b      	cbz	r3, 180e2 <hci_internal_cmd_put+0x3a>
   180ca:	3b01      	subs	r3, #1
   180cc:	2b07      	cmp	r3, #7
   180ce:	d808      	bhi.n	180e2 <hci_internal_cmd_put+0x3a>
   180d0:	e8df f003 	tbb	[pc, r3]
   180d4:	5c28070a 	.word	0x5c28070a
   180d8:	d0070707 	.word	0xd0070707
   180dc:	2b3f      	cmp	r3, #63	; 0x3f
   180de:	f000 81fc 	beq.w	184da <hci_internal_cmd_put+0x432>
   180e2:	2104      	movs	r1, #4
   180e4:	2001      	movs	r0, #1
   180e6:	e233      	b.n	18550 <hci_internal_cmd_put+0x4a8>
	switch (opcode)	{
   180e8:	f240 4306 	movw	r3, #1030	; 0x406
   180ec:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   180ee:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   180f2:	d005      	beq.n	18100 <hci_internal_cmd_put+0x58>
   180f4:	f240 431d 	movw	r3, #1053	; 0x41d
   180f8:	429e      	cmp	r6, r3
   180fa:	d010      	beq.n	1811e <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   180fc:	2001      	movs	r0, #1
   180fe:	e001      	b.n	18104 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   18100:	f7f4 ff7b 	bl	cffa <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   18104:	230f      	movs	r3, #15
   18106:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   18108:	2304      	movs	r3, #4
   1810a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1810c:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1810e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   18110:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   18112:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   18116:	2301      	movs	r3, #1
   18118:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1811a:	2000      	movs	r0, #0
}
   1811c:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1811e:	f7f4 ff6e 	bl	cffe <sdc_hci_cmd_lc_read_remote_version_information>
   18122:	e7ef      	b.n	18104 <hci_internal_cmd_put+0x5c>
	switch (opcode)	{
   18124:	f640 4363 	movw	r3, #3171	; 0xc63
   18128:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1812a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1812e:	d025      	beq.n	1817c <hci_internal_cmd_put+0xd4>
   18130:	dc0f      	bgt.n	18152 <hci_internal_cmd_put+0xaa>
   18132:	f640 4303 	movw	r3, #3075	; 0xc03
   18136:	429e      	cmp	r6, r3
   18138:	d018      	beq.n	1816c <hci_internal_cmd_put+0xc4>
   1813a:	f640 432d 	movw	r3, #3117	; 0xc2d
   1813e:	429e      	cmp	r6, r3
   18140:	d017      	beq.n	18172 <hci_internal_cmd_put+0xca>
   18142:	f640 4301 	movw	r3, #3073	; 0xc01
   18146:	429e      	cmp	r6, r3
   18148:	d1d8      	bne.n	180fc <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1814a:	f7f4 fe2c 	bl	cda6 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1814e:	2104      	movs	r1, #4
   18150:	e08d      	b.n	1826e <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   18152:	f640 437b 	movw	r3, #3195	; 0xc7b
   18156:	429e      	cmp	r6, r3
   18158:	d013      	beq.n	18182 <hci_internal_cmd_put+0xda>
   1815a:	f640 437c 	movw	r3, #3196	; 0xc7c
   1815e:	429e      	cmp	r6, r3
   18160:	d1cc      	bne.n	180fc <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   18162:	49aa      	ldr	r1, [pc, #680]	; (1840c <hci_internal_cmd_put+0x364>)
   18164:	f7f4 fe29 	bl	cdba <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   18168:	2106      	movs	r1, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1816a:	e080      	b.n	1826e <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_reset();
   1816c:	f7eb ff78 	bl	4060 <sdc_hci_cmd_cb_reset>
   18170:	e7ed      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   18172:	49a6      	ldr	r1, [pc, #664]	; (1840c <hci_internal_cmd_put+0x364>)
   18174:	f7f4 fe15 	bl	cda2 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   18178:	2107      	movs	r1, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1817a:	e078      	b.n	1826e <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1817c:	f7f4 fe18 	bl	cdb0 <sdc_hci_cmd_cb_set_event_mask_page_2>
   18180:	e7e5      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   18182:	49a2      	ldr	r1, [pc, #648]	; (1840c <hci_internal_cmd_put+0x364>)
   18184:	f7f4 fe0b 	bl	cd9e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   18188:	2108      	movs	r1, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1818a:	e070      	b.n	1826e <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   1818c:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   18190:	3e01      	subs	r6, #1
   18192:	2e08      	cmp	r6, #8
   18194:	d8b2      	bhi.n	180fc <hci_internal_cmd_put+0x54>
   18196:	a301      	add	r3, pc, #4	; (adr r3, 1819c <hci_internal_cmd_put+0xf4>)
   18198:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1819c:	000181c1 	.word	0x000181c1
   181a0:	000181cb 	.word	0x000181cb
   181a4:	0001823f 	.word	0x0001823f
   181a8:	000180fd 	.word	0x000180fd
   181ac:	000180fd 	.word	0x000180fd
   181b0:	000180fd 	.word	0x000180fd
   181b4:	000180fd 	.word	0x000180fd
   181b8:	000180fd 	.word	0x000180fd
   181bc:	00018267 	.word	0x00018267
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   181c0:	4892      	ldr	r0, [pc, #584]	; (1840c <hci_internal_cmd_put+0x364>)
   181c2:	f7f4 fed3 	bl	cf6c <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   181c6:	210c      	movs	r1, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   181c8:	e051      	b.n	1826e <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   181ca:	4890      	ldr	r0, [pc, #576]	; (1840c <hci_internal_cmd_put+0x364>)
   181cc:	222e      	movs	r2, #46	; 0x2e
   181ce:	2100      	movs	r1, #0
   181d0:	f007 ff1c 	bl	2000c <memset>
	cmds->hci_disconnect = 1;
   181d4:	2320      	movs	r3, #32
   181d6:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   181d8:	2380      	movs	r3, #128	; 0x80
   181da:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   181dc:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   181e0:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   181e2:	2304      	movs	r3, #4
   181e4:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   181e6:	2328      	movs	r3, #40	; 0x28
   181e8:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   181ea:	2302      	movs	r3, #2
   181ec:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   181ee:	2304      	movs	r3, #4
   181f0:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   181f2:	2317      	movs	r3, #23
   181f4:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   181f8:	f06f 0303 	mvn.w	r3, #3
   181fc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   18200:	23ff      	movs	r3, #255	; 0xff
   18202:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   18206:	2379      	movs	r3, #121	; 0x79
   18208:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1820c:	2330      	movs	r3, #48	; 0x30
   1820e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   18212:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   18216:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1821a:	2379      	movs	r3, #121	; 0x79
   1821c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   18220:	f06f 0301 	mvn.w	r3, #1
   18224:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   18228:	2301      	movs	r3, #1
   1822a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1822e:	2380      	movs	r3, #128	; 0x80
   18230:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   18234:	2304      	movs	r3, #4
   18236:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->read_supported_vs_commands = 1;
   1823a:	2144      	movs	r1, #68	; 0x44
   1823c:	e118      	b.n	18470 <hci_internal_cmd_put+0x3c8>
	memset(features, 0, sizeof(*features));
   1823e:	4b73      	ldr	r3, [pc, #460]	; (1840c <hci_internal_cmd_put+0x364>)
   18240:	2000      	movs	r0, #0
   18242:	f8c4 0007 	str.w	r0, [r4, #7]
   18246:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   18248:	7ae3      	ldrb	r3, [r4, #11]
   1824a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1824e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   18252:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   18254:	210c      	movs	r1, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   18256:	230e      	movs	r3, #14
   18258:	7063      	strb	r3, [r4, #1]
	evt_data->ncmd = 1;
   1825a:	2301      	movs	r3, #1
	evt_hdr->len = param_length;
   1825c:	70a1      	strb	r1, [r4, #2]
	evt_data->ncmd = 1;
   1825e:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   18260:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   18262:	71a0      	strb	r0, [r4, #6]
}
   18264:	e757      	b.n	18116 <hci_internal_cmd_put+0x6e>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   18266:	4869      	ldr	r0, [pc, #420]	; (1840c <hci_internal_cmd_put+0x364>)
   18268:	f7f4 fe7e 	bl	cf68 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1826c:	210a      	movs	r1, #10
	if (!command_generates_command_complete_event(opcode) ||
   1826e:	2801      	cmp	r0, #1
   18270:	d1f1      	bne.n	18256 <hci_internal_cmd_put+0x1ae>
   18272:	e747      	b.n	18104 <hci_internal_cmd_put+0x5c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18274:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   18278:	3e01      	subs	r6, #1
   1827a:	3003      	adds	r0, #3
	switch (opcode)	{
   1827c:	2e4d      	cmp	r6, #77	; 0x4d
   1827e:	f63f af3d 	bhi.w	180fc <hci_internal_cmd_put+0x54>
   18282:	a301      	add	r3, pc, #4	; (adr r3, 18288 <hci_internal_cmd_put+0x1e0>)
   18284:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18288:	000183c1 	.word	0x000183c1
   1828c:	000183c7 	.word	0x000183c7
   18290:	000183cf 	.word	0x000183cf
   18294:	000180fd 	.word	0x000180fd
   18298:	000183ef 	.word	0x000183ef
   1829c:	000180fd 	.word	0x000180fd
   182a0:	000180fd 	.word	0x000180fd
   182a4:	000180fd 	.word	0x000180fd
   182a8:	000180fd 	.word	0x000180fd
   182ac:	000180fd 	.word	0x000180fd
   182b0:	000183f5 	.word	0x000183f5
   182b4:	000183fb 	.word	0x000183fb
   182b8:	00018401 	.word	0x00018401
   182bc:	00018411 	.word	0x00018411
   182c0:	00018417 	.word	0x00018417
   182c4:	00018421 	.word	0x00018421
   182c8:	00018427 	.word	0x00018427
   182cc:	0001842d 	.word	0x0001842d
   182d0:	00018433 	.word	0x00018433
   182d4:	00018439 	.word	0x00018439
   182d8:	0001843f 	.word	0x0001843f
   182dc:	00018449 	.word	0x00018449
   182e0:	0001844f 	.word	0x0001844f
   182e4:	00018459 	.word	0x00018459
   182e8:	00018461 	.word	0x00018461
   182ec:	000180fd 	.word	0x000180fd
   182f0:	000180fd 	.word	0x000180fd
   182f4:	00018467 	.word	0x00018467
   182f8:	000180fd 	.word	0x000180fd
   182fc:	000180fd 	.word	0x000180fd
   18300:	000180fd 	.word	0x000180fd
   18304:	000180fd 	.word	0x000180fd
   18308:	000180fd 	.word	0x000180fd
   1830c:	00018475 	.word	0x00018475
   18310:	0001847d 	.word	0x0001847d
   18314:	00018485 	.word	0x00018485
   18318:	000180fd 	.word	0x000180fd
   1831c:	000180fd 	.word	0x000180fd
   18320:	0001848b 	.word	0x0001848b
   18324:	00018491 	.word	0x00018491
   18328:	00018497 	.word	0x00018497
   1832c:	0001849d 	.word	0x0001849d
   18330:	000180fd 	.word	0x000180fd
   18334:	000180fd 	.word	0x000180fd
   18338:	000184a5 	.word	0x000184a5
   1833c:	000184ab 	.word	0x000184ab
   18340:	000184b1 	.word	0x000184b1
   18344:	000184b9 	.word	0x000184b9
   18348:	000184c1 	.word	0x000184c1
   1834c:	000184c7 	.word	0x000184c7
   18350:	000180fd 	.word	0x000180fd
   18354:	000180fd 	.word	0x000180fd
   18358:	000180fd 	.word	0x000180fd
   1835c:	000180fd 	.word	0x000180fd
   18360:	000180fd 	.word	0x000180fd
   18364:	000180fd 	.word	0x000180fd
   18368:	000180fd 	.word	0x000180fd
   1836c:	000180fd 	.word	0x000180fd
   18370:	000180fd 	.word	0x000180fd
   18374:	000180fd 	.word	0x000180fd
   18378:	000180fd 	.word	0x000180fd
   1837c:	000180fd 	.word	0x000180fd
   18380:	000180fd 	.word	0x000180fd
   18384:	000180fd 	.word	0x000180fd
   18388:	000180fd 	.word	0x000180fd
   1838c:	000180fd 	.word	0x000180fd
   18390:	000180fd 	.word	0x000180fd
   18394:	000180fd 	.word	0x000180fd
   18398:	000180fd 	.word	0x000180fd
   1839c:	000180fd 	.word	0x000180fd
   183a0:	000180fd 	.word	0x000180fd
   183a4:	000180fd 	.word	0x000180fd
   183a8:	000180fd 	.word	0x000180fd
   183ac:	000180fd 	.word	0x000180fd
   183b0:	000184cd 	.word	0x000184cd
   183b4:	000180fd 	.word	0x000180fd
   183b8:	000180fd 	.word	0x000180fd
   183bc:	000184d5 	.word	0x000184d5
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   183c0:	f7f4 fe06 	bl	cfd0 <sdc_hci_cmd_le_set_event_mask>
   183c4:	e6c3      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   183c6:	4811      	ldr	r0, [pc, #68]	; (1840c <hci_internal_cmd_put+0x364>)
   183c8:	f7f4 fde6 	bl	cf98 <sdc_hci_cmd_le_read_buffer_size>
   183cc:	e6d4      	b.n	18178 <hci_internal_cmd_put+0xd0>
	memset(features, 0, sizeof(*features));
   183ce:	4b0f      	ldr	r3, [pc, #60]	; (1840c <hci_internal_cmd_put+0x364>)
   183d0:	2000      	movs	r0, #0
   183d2:	f8c4 0007 	str.w	r0, [r4, #7]
   183d6:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   183d8:	79e3      	ldrb	r3, [r4, #7]
   183da:	f063 030a 	orn	r3, r3, #10
   183de:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   183e0:	7a23      	ldrb	r3, [r4, #8]
   183e2:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   183e6:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   183ea:	7223      	strb	r3, [r4, #8]
   183ec:	e732      	b.n	18254 <hci_internal_cmd_put+0x1ac>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   183ee:	f7f4 fdfa 	bl	cfe6 <sdc_hci_cmd_le_set_random_address>
   183f2:	e6ac      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   183f4:	f7f4 fdfd 	bl	cff2 <sdc_hci_cmd_le_set_scan_params>
   183f8:	e6a9      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   183fa:	f7f4 fdf8 	bl	cfee <sdc_hci_cmd_le_set_scan_enable>
   183fe:	e6a6      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   18400:	f7f4 fdc0 	bl	cf84 <sdc_hci_cmd_le_create_conn>
   18404:	e67e      	b.n	18104 <hci_internal_cmd_put+0x5c>
   18406:	bf00      	nop
   18408:	200024d9 	.word	0x200024d9
   1840c:	200024e0 	.word	0x200024e0
		return sdc_hci_cmd_le_create_conn_cancel();
   18410:	f7f4 fdba 	bl	cf88 <sdc_hci_cmd_le_create_conn_cancel>
   18414:	e69b      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   18416:	4889      	ldr	r0, [pc, #548]	; (1863c <hci_internal_cmd_put+0x594>)
   18418:	f7f4 fdce 	bl	cfb8 <sdc_hci_cmd_le_read_white_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1841c:	2105      	movs	r1, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1841e:	e726      	b.n	1826e <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_clear_white_list();
   18420:	f7f4 fdac 	bl	cf7c <sdc_hci_cmd_le_clear_white_list>
   18424:	e693      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   18426:	f7f4 fda5 	bl	cf74 <sdc_hci_cmd_le_add_device_to_white_list>
   1842a:	e690      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1842c:	f7f4 fdc8 	bl	cfc0 <sdc_hci_cmd_le_remove_device_from_white_list>
   18430:	e68d      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   18432:	f7f4 fda5 	bl	cf80 <sdc_hci_cmd_le_conn_update>
   18436:	e665      	b.n	18104 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   18438:	f7f4 fdcf 	bl	cfda <sdc_hci_cmd_le_set_host_channel_classification>
   1843c:	e687      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1843e:	497f      	ldr	r1, [pc, #508]	; (1863c <hci_internal_cmd_put+0x594>)
   18440:	f7f4 fdac 	bl	cf9c <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   18444:	210b      	movs	r1, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   18446:	e712      	b.n	1826e <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   18448:	f7f4 fdae 	bl	cfa8 <sdc_hci_cmd_le_read_remote_features>
   1844c:	e65a      	b.n	18104 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1844e:	497b      	ldr	r1, [pc, #492]	; (1863c <hci_internal_cmd_put+0x594>)
   18450:	f7f4 fd9e 	bl	cf90 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   18454:	2114      	movs	r1, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   18456:	e70a      	b.n	1826e <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   18458:	4878      	ldr	r0, [pc, #480]	; (1863c <hci_internal_cmd_put+0x594>)
   1845a:	f7f4 fd9b 	bl	cf94 <sdc_hci_cmd_le_rand>
   1845e:	e6b2      	b.n	181c6 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   18460:	f7f4 fd94 	bl	cf8c <sdc_hci_cmd_le_enable_encryption>
   18464:	e64e      	b.n	18104 <hci_internal_cmd_put+0x5c>
	*buf = states1;
   18466:	2370      	movs	r3, #112	; 0x70
   18468:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1846a:	2340      	movs	r3, #64	; 0x40
   1846c:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1846e:	210c      	movs	r1, #12
	cmds->read_supported_vs_commands = 1;
   18470:	2000      	movs	r0, #0
   18472:	e6f0      	b.n	18256 <hci_internal_cmd_put+0x1ae>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   18474:	4971      	ldr	r1, [pc, #452]	; (1863c <hci_internal_cmd_put+0x594>)
   18476:	f7f4 fda7 	bl	cfc8 <sdc_hci_cmd_le_set_data_length>
   1847a:	e675      	b.n	18168 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1847c:	486f      	ldr	r0, [pc, #444]	; (1863c <hci_internal_cmd_put+0x594>)
   1847e:	f7f4 fd97 	bl	cfb0 <sdc_hci_cmd_le_read_suggested_default_data_length>
   18482:	e681      	b.n	18188 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   18484:	f7f4 fdb7 	bl	cff6 <sdc_hci_cmd_le_write_suggested_default_data_length>
   18488:	e661      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1848a:	f7f4 fd71 	bl	cf70 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1848e:	e65e      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   18490:	f7f4 fd94 	bl	cfbc <sdc_hci_cmd_le_remove_device_from_resolving_list>
   18494:	e65b      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_clear_resolving_list();
   18496:	f7f4 fd6f 	bl	cf78 <sdc_hci_cmd_le_clear_resolving_list>
   1849a:	e658      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1849c:	4867      	ldr	r0, [pc, #412]	; (1863c <hci_internal_cmd_put+0x594>)
   1849e:	f7f4 fd85 	bl	cfac <sdc_hci_cmd_le_read_resolving_list_size>
   184a2:	e7bb      	b.n	1841c <hci_internal_cmd_put+0x374>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   184a4:	f7f4 fd8e 	bl	cfc4 <sdc_hci_cmd_le_set_address_resolution_enable>
   184a8:	e651      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   184aa:	f7f4 fd9e 	bl	cfea <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   184ae:	e64e      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   184b0:	4862      	ldr	r0, [pc, #392]	; (1863c <hci_internal_cmd_put+0x594>)
   184b2:	f7f4 fd75 	bl	cfa0 <sdc_hci_cmd_le_read_max_data_length>
   184b6:	e686      	b.n	181c6 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   184b8:	4960      	ldr	r1, [pc, #384]	; (1863c <hci_internal_cmd_put+0x594>)
   184ba:	f7f4 fd73 	bl	cfa4 <sdc_hci_cmd_le_read_phy>
   184be:	e663      	b.n	18188 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   184c0:	f7f4 fd84 	bl	cfcc <sdc_hci_cmd_le_set_default_phy>
   184c4:	e643      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   184c6:	f7f4 fd8a 	bl	cfde <sdc_hci_cmd_le_set_phy>
   184ca:	e61b      	b.n	18104 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   184cc:	485b      	ldr	r0, [pc, #364]	; (1863c <hci_internal_cmd_put+0x594>)
   184ce:	f7f4 fd71 	bl	cfb4 <sdc_hci_cmd_le_read_transmit_power>
   184d2:	e649      	b.n	18168 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   184d4:	f7f4 fd85 	bl	cfe2 <sdc_hci_cmd_le_set_privacy_mode>
   184d8:	e639      	b.n	1814e <hci_internal_cmd_put+0xa6>
	switch (opcode)	{
   184da:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   184de:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   184e0:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   184e4:	d820      	bhi.n	18528 <hci_internal_cmd_put+0x480>
   184e6:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   184ea:	f43f ae07 	beq.w	180fc <hci_internal_cmd_put+0x54>
   184ee:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   184f2:	3b01      	subs	r3, #1
   184f4:	2b09      	cmp	r3, #9
   184f6:	f63f ae01 	bhi.w	180fc <hci_internal_cmd_put+0x54>
   184fa:	a201      	add	r2, pc, #4	; (adr r2, 18500 <hci_internal_cmd_put+0x458>)
   184fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18500:	00018549 	.word	0x00018549
   18504:	00018577 	.word	0x00018577
   18508:	000180fd 	.word	0x000180fd
   1850c:	000180fd 	.word	0x000180fd
   18510:	000180fd 	.word	0x000180fd
   18514:	000185b7 	.word	0x000185b7
   18518:	000180fd 	.word	0x000180fd
   1851c:	000180fd 	.word	0x000180fd
   18520:	000185a3 	.word	0x000185a3
   18524:	000185ad 	.word	0x000185ad
   18528:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1852c:	b29b      	uxth	r3, r3
   1852e:	2b05      	cmp	r3, #5
   18530:	f63f ade4 	bhi.w	180fc <hci_internal_cmd_put+0x54>
   18534:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   18538:	2b05      	cmp	r3, #5
   1853a:	f63f addf 	bhi.w	180fc <hci_internal_cmd_put+0x54>
   1853e:	e8df f003 	tbb	[pc, r3]
   18542:	413e      	.short	0x413e
   18544:	4d4a4744 	.word	0x4d4a4744
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   18548:	483c      	ldr	r0, [pc, #240]	; (1863c <hci_internal_cmd_put+0x594>)
   1854a:	f7eb fd9d 	bl	4088 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1854e:	2110      	movs	r1, #16
	switch (hci_opcode) {
   18550:	f242 0319 	movw	r3, #8217	; 0x2019
   18554:	429e      	cmp	r6, r3
   18556:	dc51      	bgt.n	185fc <hci_internal_cmd_put+0x554>
   18558:	f242 030c 	movw	r3, #8204	; 0x200c
   1855c:	429e      	cmp	r6, r3
   1855e:	dc40      	bgt.n	185e2 <hci_internal_cmd_put+0x53a>
   18560:	f240 4306 	movw	r3, #1030	; 0x406
   18564:	429e      	cmp	r6, r3
   18566:	f43f adcd 	beq.w	18104 <hci_internal_cmd_put+0x5c>
   1856a:	f240 431d 	movw	r3, #1053	; 0x41d
   1856e:	429e      	cmp	r6, r3
   18570:	f43f adc8 	beq.w	18104 <hci_internal_cmd_put+0x5c>
   18574:	e67b      	b.n	1826e <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   18576:	2000      	movs	r0, #0
   18578:	f8a4 0007 	strh.w	r0, [r4, #7]
	cmds->read_version_info = 1;
   1857c:	79e3      	ldrb	r3, [r4, #7]
   1857e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   18582:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   18586:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   18588:	7a23      	ldrb	r3, [r4, #8]
   1858a:	f023 0307 	bic.w	r3, r3, #7
   1858e:	f043 0307 	orr.w	r3, r3, #7
   18592:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   18594:	f242 0319 	movw	r3, #8217	; 0x2019
   18598:	429e      	cmp	r6, r3
   1859a:	dd3e      	ble.n	1861a <hci_internal_cmd_put+0x572>
   1859c:	f242 0332 	movw	r3, #8242	; 0x2032
   185a0:	e046      	b.n	18630 <hci_internal_cmd_put+0x588>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   185a2:	4826      	ldr	r0, [pc, #152]	; (1863c <hci_internal_cmd_put+0x594>)
   185a4:	f7f4 fc93 	bl	cece <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   185a8:	211b      	movs	r1, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   185aa:	e7d1      	b.n	18550 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   185ac:	4823      	ldr	r0, [pc, #140]	; (1863c <hci_internal_cmd_put+0x594>)
   185ae:	f7f4 fc41 	bl	ce34 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   185b2:	2124      	movs	r1, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   185b4:	e7cc      	b.n	18550 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   185b6:	f7f4 fcd5 	bl	cf64 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   185ba:	2104      	movs	r1, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   185bc:	e7c8      	b.n	18550 <hci_internal_cmd_put+0x4a8>
	cmds->read_supported_vs_commands = 1;
   185be:	233f      	movs	r3, #63	; 0x3f
   185c0:	71e3      	strb	r3, [r4, #7]
   185c2:	e63a      	b.n	1823a <hci_internal_cmd_put+0x192>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   185c4:	f7f4 fc2f 	bl	ce26 <sdc_hci_cmd_vs_llpm_mode_set>
   185c8:	e5c1      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   185ca:	f7f4 fc00 	bl	cdce <sdc_hci_cmd_vs_conn_update>
   185ce:	e5be      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   185d0:	f7f4 fbf5 	bl	cdbe <sdc_hci_cmd_vs_conn_event_extend>
   185d4:	e5bb      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   185d6:	f7f4 fc28 	bl	ce2a <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   185da:	e5b8      	b.n	1814e <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   185dc:	f7f4 fc21 	bl	ce22 <sdc_hci_cmd_vs_event_length_set>
   185e0:	e5b5      	b.n	1814e <hci_internal_cmd_put+0xa6>
   185e2:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   185e6:	3b0d      	subs	r3, #13
   185e8:	2201      	movs	r2, #1
   185ea:	b29b      	uxth	r3, r3
   185ec:	fa02 f303 	lsl.w	r3, r2, r3
   185f0:	f241 2241 	movw	r2, #4673	; 0x1241
   185f4:	4213      	tst	r3, r2
   185f6:	f43f ae3a 	beq.w	1826e <hci_internal_cmd_put+0x1c6>
   185fa:	e583      	b.n	18104 <hci_internal_cmd_put+0x5c>
	switch (hci_opcode) {
   185fc:	f242 0332 	movw	r3, #8242	; 0x2032
   18600:	429e      	cmp	r6, r3
   18602:	f43f ad7f 	beq.w	18104 <hci_internal_cmd_put+0x5c>
   18606:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
   1860a:	3b03      	subs	r3, #3
   1860c:	2b01      	cmp	r3, #1
   1860e:	f67f ad79 	bls.w	18104 <hci_internal_cmd_put+0x5c>
   18612:	e62c      	b.n	1826e <hci_internal_cmd_put+0x1c6>
		return -NRF_EPERM;
   18614:	f04f 30ff 	mov.w	r0, #4294967295
   18618:	e580      	b.n	1811c <hci_internal_cmd_put+0x74>
	switch (hci_opcode) {
   1861a:	f242 030c 	movw	r3, #8204	; 0x200c
   1861e:	429e      	cmp	r6, r3
   18620:	dc09      	bgt.n	18636 <hci_internal_cmd_put+0x58e>
   18622:	f240 4306 	movw	r3, #1030	; 0x406
   18626:	429e      	cmp	r6, r3
   18628:	f43f ad6c 	beq.w	18104 <hci_internal_cmd_put+0x5c>
   1862c:	f240 431d 	movw	r3, #1053	; 0x41d
   18630:	429e      	cmp	r6, r3
   18632:	f43f ad67 	beq.w	18104 <hci_internal_cmd_put+0x5c>
   18636:	2144      	movs	r1, #68	; 0x44
   18638:	e60d      	b.n	18256 <hci_internal_cmd_put+0x1ae>
   1863a:	bf00      	nop
   1863c:	200024e0 	.word	0x200024e0

00018640 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   18640:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   18642:	4c07      	ldr	r4, [pc, #28]	; (18660 <hci_internal_evt_get+0x20>)
   18644:	7823      	ldrb	r3, [r4, #0]
   18646:	b13b      	cbz	r3, 18658 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   18648:	78a2      	ldrb	r2, [r4, #2]
   1864a:	1c61      	adds	r1, r4, #1
   1864c:	3202      	adds	r2, #2
   1864e:	f007 fcbc 	bl	1ffca <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   18652:	2000      	movs	r0, #0
   18654:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   18656:	bd10      	pop	{r4, pc}
   18658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1865c:	f7f4 bb92 	b.w	cd84 <sdc_hci_evt_get>
   18660:	200024d9 	.word	0x200024d9

00018664 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   18664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   18668:	4e14      	ldr	r6, [pc, #80]	; (186bc <bt_rand+0x58>)
   1866a:	6833      	ldr	r3, [r6, #0]
{
   1866c:	4605      	mov	r5, r0
   1866e:	460c      	mov	r4, r1
   18670:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   18672:	b1c3      	cbz	r3, 186a6 <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   18674:	683e      	ldr	r6, [r7, #0]
   18676:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   18678:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   1867a:	683b      	ldr	r3, [r7, #0]
   1867c:	b963      	cbnz	r3, 18698 <bt_rand+0x34>
   1867e:	4910      	ldr	r1, [pc, #64]	; (186c0 <bt_rand+0x5c>)
   18680:	4a10      	ldr	r2, [pc, #64]	; (186c4 <bt_rand+0x60>)
   18682:	4811      	ldr	r0, [pc, #68]	; (186c8 <bt_rand+0x64>)
   18684:	234b      	movs	r3, #75	; 0x4b
   18686:	f004 fbac 	bl	1cde2 <printk>
   1868a:	4810      	ldr	r0, [pc, #64]	; (186cc <bt_rand+0x68>)
   1868c:	f004 fba9 	bl	1cde2 <printk>
   18690:	480c      	ldr	r0, [pc, #48]	; (186c4 <bt_rand+0x60>)
   18692:	214b      	movs	r1, #75	; 0x4b
   18694:	f004 fdff 	bl	1d296 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   18698:	683b      	ldr	r3, [r7, #0]
   1869a:	4622      	mov	r2, r4
   1869c:	4629      	mov	r1, r5
   1869e:	4630      	mov	r0, r6
}
   186a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   186a4:	4718      	bx	r3
   186a6:	480a      	ldr	r0, [pc, #40]	; (186d0 <bt_rand+0x6c>)
   186a8:	f000 faa4 	bl	18bf4 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   186ac:	6030      	str	r0, [r6, #0]
		if (!dev) {
   186ae:	2800      	cmp	r0, #0
   186b0:	d1e0      	bne.n	18674 <bt_rand+0x10>
}
   186b2:	f06f 0012 	mvn.w	r0, #18
   186b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186ba:	bf00      	nop
   186bc:	20001e44 	.word	0x20001e44
   186c0:	00021c0d 	.word	0x00021c0d
   186c4:	00021be0 	.word	0x00021be0
   186c8:	00020a75 	.word	0x00020a75
   186cc:	00021c2d 	.word	0x00021c2d
   186d0:	00021ba0 	.word	0x00021ba0

000186d4 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   186d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   186d6:	2332      	movs	r3, #50	; 0x32
   186d8:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   186dc:	4a10      	ldr	r2, [pc, #64]	; (18720 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   186de:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   186e0:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   186e2:	2119      	movs	r1, #25
   186e4:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   186e6:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   186ea:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   186ee:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   186f2:	f7eb f859 	bl	37a8 <mpsl_init>
	if (err) {
   186f6:	4604      	mov	r4, r0
   186f8:	b970      	cbnz	r0, 18718 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   186fa:	4601      	mov	r1, r0
   186fc:	462a      	mov	r2, r5
   186fe:	2008      	movs	r0, #8
   18700:	f7f8 fe92 	bl	11428 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   18704:	462a      	mov	r2, r5
   18706:	4621      	mov	r1, r4
   18708:	200b      	movs	r0, #11
   1870a:	f7f8 fe8d 	bl	11428 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1870e:	462a      	mov	r2, r5
   18710:	4621      	mov	r1, r4
   18712:	4628      	mov	r0, r5
   18714:	f7f8 fe88 	bl	11428 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   18718:	4620      	mov	r0, r4
   1871a:	b003      	add	sp, #12
   1871c:	bd30      	pop	{r4, r5, pc}
   1871e:	bf00      	nop
   18720:	0001fc1f 	.word	0x0001fc1f

00018724 <mpsl_low_prio_irq_handler>:
   18724:	4801      	ldr	r0, [pc, #4]	; (1872c <mpsl_low_prio_irq_handler+0x8>)
   18726:	f001 ba81 	b.w	19c2c <z_impl_k_sem_give>
   1872a:	bf00      	nop
   1872c:	20000680 	.word	0x20000680

00018730 <signal_thread>:
{
   18730:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   18732:	4d0f      	ldr	r5, [pc, #60]	; (18770 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   18734:	4c0f      	ldr	r4, [pc, #60]	; (18774 <signal_thread+0x44>)
   18736:	f04f 32ff 	mov.w	r2, #4294967295
   1873a:	f04f 33ff 	mov.w	r3, #4294967295
   1873e:	4628      	mov	r0, r5
   18740:	f001 fab8 	bl	19cb4 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   18744:	f04f 30ff 	mov.w	r0, #4294967295
   18748:	f04f 31ff 	mov.w	r1, #4294967295
   1874c:	f7ff fa96 	bl	17c7c <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   18750:	b148      	cbz	r0, 18766 <signal_thread+0x36>
   18752:	4909      	ldr	r1, [pc, #36]	; (18778 <signal_thread+0x48>)
   18754:	4809      	ldr	r0, [pc, #36]	; (1877c <signal_thread+0x4c>)
   18756:	2346      	movs	r3, #70	; 0x46
   18758:	4622      	mov	r2, r4
   1875a:	f004 fb42 	bl	1cde2 <printk>
   1875e:	2146      	movs	r1, #70	; 0x46
   18760:	4620      	mov	r0, r4
   18762:	f004 fd98 	bl	1d296 <assert_post_action>
		mpsl_low_priority_process();
   18766:	f7f3 fe56 	bl	c416 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1876a:	f7ff fa8f 	bl	17c8c <multithreading_lock_release>
	while (true) {
   1876e:	e7e2      	b.n	18736 <signal_thread+0x6>
   18770:	20000680 	.word	0x20000680
   18774:	00021e27 	.word	0x00021e27
   18778:	00021e54 	.word	0x00021e54
   1877c:	00020a75 	.word	0x00020a75

00018780 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   18780:	b530      	push	{r4, r5, lr}
   18782:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18784:	4d0f      	ldr	r5, [pc, #60]	; (187c4 <mpsl_signal_thread_init+0x44>)
   18786:	4910      	ldr	r1, [pc, #64]	; (187c8 <mpsl_signal_thread_init+0x48>)
   18788:	2200      	movs	r2, #0
   1878a:	2300      	movs	r3, #0
   1878c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18790:	2400      	movs	r4, #0
   18792:	f06f 0309 	mvn.w	r3, #9
   18796:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1879a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1879e:	4b0b      	ldr	r3, [pc, #44]	; (187cc <mpsl_signal_thread_init+0x4c>)
   187a0:	9400      	str	r4, [sp, #0]
   187a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   187a6:	4628      	mov	r0, r5
   187a8:	f000 fde4 	bl	19374 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   187ac:	4908      	ldr	r1, [pc, #32]	; (187d0 <mpsl_signal_thread_init+0x50>)
   187ae:	4628      	mov	r0, r5
   187b0:	f007 fa8d 	bl	1fcce <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   187b4:	4622      	mov	r2, r4
   187b6:	2104      	movs	r1, #4
   187b8:	2019      	movs	r0, #25
   187ba:	f7f8 fe35 	bl	11428 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   187be:	4620      	mov	r0, r4
   187c0:	b009      	add	sp, #36	; 0x24
   187c2:	bd30      	pop	{r4, r5, pc}
   187c4:	200019d8 	.word	0x200019d8
   187c8:	200037a0 	.word	0x200037a0
   187cc:	00018731 	.word	0x00018731
   187d0:	00021e61 	.word	0x00021e61

000187d4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   187d4:	4b01      	ldr	r3, [pc, #4]	; (187dc <mpsl_hfclk_callback+0x8>)
   187d6:	2000      	movs	r0, #0
   187d8:	681b      	ldr	r3, [r3, #0]
   187da:	4718      	bx	r3
   187dc:	20001e48 	.word	0x20001e48

000187e0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   187e0:	b510      	push	{r4, lr}
	switch (domain) {
   187e2:	b130      	cbz	r0, 187f2 <nrfx_clock_start+0x12>
   187e4:	2801      	cmp	r0, #1
   187e6:	d10a      	bne.n	187fe <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   187e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   187ec:	480b      	ldr	r0, [pc, #44]	; (1881c <nrfx_clock_start+0x3c>)
   187ee:	f7ea be59 	b.w	34a4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   187f2:	4b0b      	ldr	r3, [pc, #44]	; (18820 <nrfx_clock_start+0x40>)
}
   187f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   187f8:	681b      	ldr	r3, [r3, #0]
   187fa:	2001      	movs	r0, #1
   187fc:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   187fe:	4909      	ldr	r1, [pc, #36]	; (18824 <nrfx_clock_start+0x44>)
   18800:	4a09      	ldr	r2, [pc, #36]	; (18828 <nrfx_clock_start+0x48>)
   18802:	480a      	ldr	r0, [pc, #40]	; (1882c <nrfx_clock_start+0x4c>)
   18804:	231c      	movs	r3, #28
   18806:	f004 faec 	bl	1cde2 <printk>
   1880a:	4809      	ldr	r0, [pc, #36]	; (18830 <nrfx_clock_start+0x50>)
   1880c:	f004 fae9 	bl	1cde2 <printk>
}
   18810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   18814:	4804      	ldr	r0, [pc, #16]	; (18828 <nrfx_clock_start+0x48>)
   18816:	211c      	movs	r1, #28
   18818:	f004 bd3d 	b.w	1d296 <assert_post_action>
   1881c:	000187d5 	.word	0x000187d5
   18820:	20001e48 	.word	0x20001e48
   18824:	00022787 	.word	0x00022787
   18828:	00021e6d 	.word	0x00021e6d
   1882c:	00020a75 	.word	0x00020a75
   18830:	00021eaa 	.word	0x00021eaa

00018834 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   18834:	b508      	push	{r3, lr}
	switch (domain) {
   18836:	b1a0      	cbz	r0, 18862 <nrfx_clock_stop+0x2e>
   18838:	2801      	cmp	r0, #1
   1883a:	d103      	bne.n	18844 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1883c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   18840:	f7ea be22 	b.w	3488 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   18844:	4907      	ldr	r1, [pc, #28]	; (18864 <nrfx_clock_stop+0x30>)
   18846:	4a08      	ldr	r2, [pc, #32]	; (18868 <nrfx_clock_stop+0x34>)
   18848:	4808      	ldr	r0, [pc, #32]	; (1886c <nrfx_clock_stop+0x38>)
   1884a:	232a      	movs	r3, #42	; 0x2a
   1884c:	f004 fac9 	bl	1cde2 <printk>
   18850:	4807      	ldr	r0, [pc, #28]	; (18870 <nrfx_clock_stop+0x3c>)
   18852:	f004 fac6 	bl	1cde2 <printk>
}
   18856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   1885a:	4803      	ldr	r0, [pc, #12]	; (18868 <nrfx_clock_stop+0x34>)
   1885c:	212a      	movs	r1, #42	; 0x2a
   1885e:	f004 bd1a 	b.w	1d296 <assert_post_action>
}
   18862:	bd08      	pop	{r3, pc}
   18864:	00022787 	.word	0x00022787
   18868:	00021e6d 	.word	0x00021e6d
   1886c:	00020a75 	.word	0x00020a75
   18870:	00021eaa 	.word	0x00021eaa

00018874 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   18874:	4b01      	ldr	r3, [pc, #4]	; (1887c <nrfx_clock_init+0x8>)
   18876:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   18878:	4801      	ldr	r0, [pc, #4]	; (18880 <nrfx_clock_init+0xc>)
   1887a:	4770      	bx	lr
   1887c:	20001e48 	.word	0x20001e48
   18880:	0bad0000 	.word	0x0bad0000

00018884 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18884:	4b03      	ldr	r3, [pc, #12]	; (18894 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   18886:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   18888:	f1a0 030d 	sub.w	r3, r0, #13
   1888c:	4258      	negs	r0, r3
   1888e:	4158      	adcs	r0, r3
   18890:	4770      	bx	lr
   18892:	bf00      	nop
   18894:	10000130 	.word	0x10000130

00018898 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   18898:	4a02      	ldr	r2, [pc, #8]	; (188a4 <nvmc_wait+0xc>)
   1889a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1889e:	2b00      	cmp	r3, #0
   188a0:	d0fb      	beq.n	1889a <nvmc_wait+0x2>
}
   188a2:	4770      	bx	lr
   188a4:	4001e000 	.word	0x4001e000

000188a8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   188a8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   188aa:	f7ff ffeb 	bl	18884 <nrf52_errata_136>
   188ae:	b140      	cbz	r0, 188c2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   188b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   188b4:	2200      	movs	r2, #0
   188b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   188ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   188be:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   188c2:	f7ff ffdf 	bl	18884 <nrf52_errata_136>
   188c6:	2800      	cmp	r0, #0
   188c8:	d046      	beq.n	18958 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   188ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   188ce:	4b4b      	ldr	r3, [pc, #300]	; (189fc <SystemInit+0x154>)
   188d0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   188d4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   188d8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   188dc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   188e0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   188e4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   188e8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   188ec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   188f0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   188f4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   188f8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   188fc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   18900:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   18904:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   18908:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1890c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   18910:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   18914:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   18918:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1891c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   18920:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   18924:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   18928:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1892c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   18930:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   18934:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   18938:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1893c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   18940:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   18944:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   18948:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1894c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   18950:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   18954:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   18958:	f7ff ff94 	bl	18884 <nrf52_errata_136>
   1895c:	b148      	cbz	r0, 18972 <SystemInit+0xca>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1895e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18962:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18966:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   18968:	bf44      	itt	mi
   1896a:	f06f 0201 	mvnmi.w	r2, #1
   1896e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   18972:	4b23      	ldr	r3, [pc, #140]	; (18a00 <SystemInit+0x158>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   18974:	681b      	ldr	r3, [r3, #0]
   18976:	2b0d      	cmp	r3, #13
   18978:	d10e      	bne.n	18998 <SystemInit+0xf0>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1897a:	4b22      	ldr	r3, [pc, #136]	; (18a04 <SystemInit+0x15c>)
   1897c:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1897e:	2b02      	cmp	r3, #2
   18980:	d802      	bhi.n	18988 <SystemInit+0xe0>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   18982:	4a21      	ldr	r2, [pc, #132]	; (18a08 <SystemInit+0x160>)
   18984:	5cd3      	ldrb	r3, [r2, r3]
   18986:	b13b      	cbz	r3, 18998 <SystemInit+0xf0>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   18988:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1898c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   18990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18994:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18998:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1899c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   189a0:	2a00      	cmp	r2, #0
   189a2:	db03      	blt.n	189ac <SystemInit+0x104>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   189a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   189a8:	2b00      	cmp	r3, #0
   189aa:	da22      	bge.n	189f2 <SystemInit+0x14a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   189ac:	4917      	ldr	r1, [pc, #92]	; (18a0c <SystemInit+0x164>)
   189ae:	2301      	movs	r3, #1
   189b0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   189b4:	f7ff ff70 	bl	18898 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   189b8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   189bc:	2412      	movs	r4, #18
   189be:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   189c2:	f7ff ff69 	bl	18898 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   189c6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   189ca:	f7ff ff65 	bl	18898 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   189ce:	2300      	movs	r3, #0
   189d0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   189d4:	f7ff ff60 	bl	18898 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   189d8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   189dc:	490c      	ldr	r1, [pc, #48]	; (18a10 <SystemInit+0x168>)
   189de:	4b0d      	ldr	r3, [pc, #52]	; (18a14 <SystemInit+0x16c>)
   189e0:	68ca      	ldr	r2, [r1, #12]
   189e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   189e6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   189e8:	60cb      	str	r3, [r1, #12]
   189ea:	f3bf 8f4f 	dsb	sy
    __NOP();
   189ee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   189f0:	e7fd      	b.n	189ee <SystemInit+0x146>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   189f2:	4b09      	ldr	r3, [pc, #36]	; (18a18 <SystemInit+0x170>)
   189f4:	4a09      	ldr	r2, [pc, #36]	; (18a1c <SystemInit+0x174>)
   189f6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   189f8:	bd10      	pop	{r4, pc}
   189fa:	bf00      	nop
   189fc:	4000c000 	.word	0x4000c000
   18a00:	10000130 	.word	0x10000130
   18a04:	10000134 	.word	0x10000134
   18a08:	00021eba 	.word	0x00021eba
   18a0c:	4001e000 	.word	0x4001e000
   18a10:	e000ed00 	.word	0xe000ed00
   18a14:	05fa0004 	.word	0x05fa0004
   18a18:	20000540 	.word	0x20000540
   18a1c:	03d09000 	.word	0x03d09000

00018a20 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   18a20:	2301      	movs	r3, #1
   18a22:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   18a26:	f010 0fff 	tst.w	r0, #255	; 0xff
   18a2a:	d012      	beq.n	18a52 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   18a2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18a30:	f3ef 8111 	mrs	r1, BASEPRI
   18a34:	f383 8812 	msr	BASEPRI_MAX, r3
   18a38:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   18a3c:	4a06      	ldr	r2, [pc, #24]	; (18a58 <nrfx_gpiote_channel_free+0x38>)
   18a3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
   18a40:	ea23 0000 	bic.w	r0, r3, r0
   18a44:	6590      	str	r0, [r2, #88]	; 0x58
	__asm__ volatile(
   18a46:	f381 8811 	msr	BASEPRI, r1
   18a4a:	f3bf 8f6f 	isb	sy
   18a4e:	4803      	ldr	r0, [pc, #12]	; (18a5c <nrfx_gpiote_channel_free+0x3c>)
   18a50:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   18a52:	4803      	ldr	r0, [pc, #12]	; (18a60 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18a54:	4770      	bx	lr
   18a56:	bf00      	nop
   18a58:	20001e4c 	.word	0x20001e4c
   18a5c:	0bad0000 	.word	0x0bad0000
   18a60:	0bad0004 	.word	0x0bad0004

00018a64 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   18a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a68:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   18a6a:	f8df e060 	ldr.w	lr, [pc, #96]	; 18acc <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   18a6e:	4816      	ldr	r0, [pc, #88]	; (18ac8 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   18a70:	f8df 805c 	ldr.w	r8, [pc, #92]	; 18ad0 <nrfx_gpiote_channel_alloc+0x6c>
{
   18a74:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   18a76:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   18a78:	2601      	movs	r6, #1
   18a7a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   18a7c:	f04f 0140 	mov.w	r1, #64	; 0x40
   18a80:	f3ef 8c11 	mrs	ip, BASEPRI
   18a84:	f381 8812 	msr	BASEPRI_MAX, r1
   18a88:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   18a8c:	fa22 f103 	lsr.w	r1, r2, r3
   18a90:	07c9      	lsls	r1, r1, #31
   18a92:	d50a      	bpl.n	18aaa <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   18a94:	f8de 1058 	ldr.w	r1, [lr, #88]	; 0x58
   18a98:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   18a9c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   18a9e:	bf01      	itttt	eq
   18aa0:	4339      	orreq	r1, r7
   18aa2:	f8ce 1058 	streq.w	r1, [lr, #88]	; 0x58
            err_code = NRFX_SUCCESS;
   18aa6:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   18aa8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   18aaa:	f38c 8811 	msr	BASEPRI, ip
   18aae:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   18ab2:	4540      	cmp	r0, r8
   18ab4:	d005      	beq.n	18ac2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   18ab6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   18aba:	439a      	bics	r2, r3
   18abc:	f104 0401 	add.w	r4, r4, #1
   18ac0:	d1db      	bne.n	18a7a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ac6:	bf00      	nop
   18ac8:	0bad0002 	.word	0x0bad0002
   18acc:	20001e4c 	.word	0x20001e4c
   18ad0:	0bad0000 	.word	0x0bad0000

00018ad4 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18ad4:	4b18      	ldr	r3, [pc, #96]	; (18b38 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   18ad6:	f8df c06c 	ldr.w	ip, [pc, #108]	; 18b44 <nrfx_ppi_channel_alloc+0x70>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18ada:	681b      	ldr	r3, [r3, #0]
{
   18adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18ae0:	43db      	mvns	r3, r3
{
   18ae2:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   18ae4:	4f15      	ldr	r7, [pc, #84]	; (18b3c <nrfx_ppi_channel_alloc+0x68>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   18ae6:	4816      	ldr	r0, [pc, #88]	; (18b40 <nrfx_ppi_channel_alloc+0x6c>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   18ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   18aec:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   18aee:	f04f 0e01 	mov.w	lr, #1
   18af2:	b2e6      	uxtb	r6, r4
   18af4:	b90b      	cbnz	r3, 18afa <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   18af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   18afa:	f04f 0240 	mov.w	r2, #64	; 0x40
   18afe:	f3ef 8811 	mrs	r8, BASEPRI
   18b02:	f382 8812 	msr	BASEPRI_MAX, r2
   18b06:	f3bf 8f6f 	isb	sy
   18b0a:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   18b0e:	421a      	tst	r2, r3
   18b10:	d006      	beq.n	18b20 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   18b12:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   18b14:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   18b16:	bf01      	itttt	eq
   18b18:	4311      	orreq	r1, r2
   18b1a:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   18b1c:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   18b1e:	4660      	moveq	r0, ip
	__asm__ volatile(
   18b20:	f388 8811 	msr	BASEPRI, r8
   18b24:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   18b28:	4560      	cmp	r0, ip
   18b2a:	f104 0401 	add.w	r4, r4, #1
   18b2e:	d0e2      	beq.n	18af6 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   18b30:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   18b34:	e7dd      	b.n	18af2 <nrfx_ppi_channel_alloc+0x1e>
   18b36:	bf00      	nop
   18b38:	000208ac 	.word	0x000208ac
   18b3c:	20001ea8 	.word	0x20001ea8
   18b40:	0bad0002 	.word	0x0bad0002
   18b44:	0bad0000 	.word	0x0bad0000

00018b48 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   18b48:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18b4a:	4c14      	ldr	r4, [pc, #80]	; (18b9c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   18b4c:	4a14      	ldr	r2, [pc, #80]	; (18ba0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   18b4e:	4915      	ldr	r1, [pc, #84]	; (18ba4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   18b50:	2303      	movs	r3, #3
   18b52:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   18b54:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18b56:	4b14      	ldr	r3, [pc, #80]	; (18ba8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   18b58:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   18b5a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   18b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18b60:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   18b62:	2300      	movs	r3, #0
   18b64:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   18b66:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18b68:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   18b6a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   18b6c:	4a0f      	ldr	r2, [pc, #60]	; (18bac <_DoInit+0x64>)
   18b6e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   18b70:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   18b72:	2210      	movs	r2, #16
   18b74:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   18b76:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   18b78:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   18b7a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   18b7c:	f007 fa4e 	bl	2001c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18b80:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   18b84:	490a      	ldr	r1, [pc, #40]	; (18bb0 <_DoInit+0x68>)
   18b86:	4620      	mov	r0, r4
   18b88:	f007 fa48 	bl	2001c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18b8c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   18b90:	2320      	movs	r3, #32
   18b92:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   18b94:	f3bf 8f5f 	dmb	sy
}
   18b98:	bd10      	pop	{r4, pc}
   18b9a:	bf00      	nop
   18b9c:	20001eac 	.word	0x20001eac
   18ba0:	00021ebd 	.word	0x00021ebd
   18ba4:	00021ec6 	.word	0x00021ec6
   18ba8:	20002530 	.word	0x20002530
   18bac:	20002520 	.word	0x20002520
   18bb0:	00021eca 	.word	0x00021eca

00018bb4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18bb4:	4b0e      	ldr	r3, [pc, #56]	; (18bf0 <z_sys_init_run_level+0x3c>)
{
   18bb6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18bb8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18bbc:	3001      	adds	r0, #1
   18bbe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   18bc2:	42a6      	cmp	r6, r4
   18bc4:	d800      	bhi.n	18bc8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   18bc6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   18bc8:	e9d4 3500 	ldrd	r3, r5, [r4]
   18bcc:	4628      	mov	r0, r5
   18bce:	4798      	blx	r3
		if (dev != NULL) {
   18bd0:	b165      	cbz	r5, 18bec <z_sys_init_run_level+0x38>
			if (rc != 0) {
   18bd2:	68eb      	ldr	r3, [r5, #12]
   18bd4:	b130      	cbz	r0, 18be4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   18bd6:	2800      	cmp	r0, #0
   18bd8:	bfb8      	it	lt
   18bda:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   18bdc:	28ff      	cmp	r0, #255	; 0xff
   18bde:	bfa8      	it	ge
   18be0:	20ff      	movge	r0, #255	; 0xff
   18be2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   18be4:	785a      	ldrb	r2, [r3, #1]
   18be6:	f042 0201 	orr.w	r2, r2, #1
   18bea:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18bec:	3408      	adds	r4, #8
   18bee:	e7e8      	b.n	18bc2 <z_sys_init_run_level+0xe>
   18bf0:	000208b0 	.word	0x000208b0

00018bf4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   18bf4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   18bf6:	4605      	mov	r5, r0
   18bf8:	b910      	cbnz	r0, 18c00 <z_impl_device_get_binding+0xc>
		return NULL;
   18bfa:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   18bfc:	4620      	mov	r0, r4
   18bfe:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   18c00:	7803      	ldrb	r3, [r0, #0]
   18c02:	2b00      	cmp	r3, #0
   18c04:	d0f9      	beq.n	18bfa <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   18c06:	4a0f      	ldr	r2, [pc, #60]	; (18c44 <z_impl_device_get_binding+0x50>)
   18c08:	4c0f      	ldr	r4, [pc, #60]	; (18c48 <z_impl_device_get_binding+0x54>)
   18c0a:	4616      	mov	r6, r2
   18c0c:	4294      	cmp	r4, r2
   18c0e:	d108      	bne.n	18c22 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   18c10:	4c0d      	ldr	r4, [pc, #52]	; (18c48 <z_impl_device_get_binding+0x54>)
   18c12:	42b4      	cmp	r4, r6
   18c14:	d0f1      	beq.n	18bfa <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18c16:	4620      	mov	r0, r4
   18c18:	f007 f841 	bl	1fc9e <z_device_ready>
   18c1c:	b950      	cbnz	r0, 18c34 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   18c1e:	3418      	adds	r4, #24
   18c20:	e7f7      	b.n	18c12 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   18c22:	4620      	mov	r0, r4
   18c24:	f007 f83b 	bl	1fc9e <z_device_ready>
   18c28:	b110      	cbz	r0, 18c30 <z_impl_device_get_binding+0x3c>
   18c2a:	6823      	ldr	r3, [r4, #0]
   18c2c:	42ab      	cmp	r3, r5
   18c2e:	d0e5      	beq.n	18bfc <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   18c30:	3418      	adds	r4, #24
   18c32:	e7eb      	b.n	18c0c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18c34:	6821      	ldr	r1, [r4, #0]
   18c36:	4628      	mov	r0, r5
   18c38:	f7f3 fad6 	bl	c1e8 <strcmp>
   18c3c:	2800      	cmp	r0, #0
   18c3e:	d1ee      	bne.n	18c1e <z_impl_device_get_binding+0x2a>
   18c40:	e7dc      	b.n	18bfc <z_impl_device_get_binding+0x8>
   18c42:	bf00      	nop
   18c44:	000201a8 	.word	0x000201a8
   18c48:	00020100 	.word	0x00020100

00018c4c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   18c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c4e:	4604      	mov	r4, r0
   18c50:	460e      	mov	r6, r1
	__asm__ volatile(
   18c52:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c56:	f3ef 8711 	mrs	r7, BASEPRI
   18c5a:	f383 8812 	msr	BASEPRI_MAX, r3
   18c5e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   18c62:	f002 fed7 	bl	1ba14 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   18c66:	4631      	mov	r1, r6
   18c68:	4605      	mov	r5, r0
   18c6a:	4620      	mov	r0, r4
   18c6c:	f006 ffcc 	bl	1fc08 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   18c70:	2c04      	cmp	r4, #4
   18c72:	d10c      	bne.n	18c8e <z_fatal_error+0x42>
   18c74:	490a      	ldr	r1, [pc, #40]	; (18ca0 <z_fatal_error+0x54>)
   18c76:	4a0b      	ldr	r2, [pc, #44]	; (18ca4 <z_fatal_error+0x58>)
   18c78:	480b      	ldr	r0, [pc, #44]	; (18ca8 <z_fatal_error+0x5c>)
   18c7a:	238f      	movs	r3, #143	; 0x8f
   18c7c:	f004 f8b1 	bl	1cde2 <printk>
   18c80:	480a      	ldr	r0, [pc, #40]	; (18cac <z_fatal_error+0x60>)
   18c82:	f004 f8ae 	bl	1cde2 <printk>
   18c86:	4807      	ldr	r0, [pc, #28]	; (18ca4 <z_fatal_error+0x58>)
   18c88:	218f      	movs	r1, #143	; 0x8f
   18c8a:	f004 fb04 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   18c8e:	f387 8811 	msr	BASEPRI, r7
   18c92:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   18c96:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   18c98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18c9c:	f7f8 bec8 	b.w	11a30 <z_impl_k_thread_abort>
   18ca0:	00021ef3 	.word	0x00021ef3
   18ca4:	00021ed1 	.word	0x00021ed1
   18ca8:	00020a75 	.word	0x00020a75
   18cac:	00021f10 	.word	0x00021f10

00018cb0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   18cb0:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   18cb2:	2300      	movs	r3, #0
{
   18cb4:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   18cb6:	2201      	movs	r2, #1
   18cb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   18cbc:	220f      	movs	r2, #15
   18cbe:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   18cc2:	4c0d      	ldr	r4, [pc, #52]	; (18cf8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   18cc4:	4a0d      	ldr	r2, [pc, #52]	; (18cfc <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   18cc6:	9301      	str	r3, [sp, #4]
   18cc8:	490d      	ldr	r1, [pc, #52]	; (18d00 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   18cca:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   18ccc:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   18cd0:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   18cd4:	f44f 75b0 	mov.w	r5, #352	; 0x160
   18cd8:	9300      	str	r3, [sp, #0]
   18cda:	fb05 1100 	mla	r1, r5, r0, r1
   18cde:	4b09      	ldr	r3, [pc, #36]	; (18d04 <init_idle_thread+0x54>)
   18ce0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18ce4:	4620      	mov	r0, r4
   18ce6:	f000 fae1 	bl	192ac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18cea:	7b63      	ldrb	r3, [r4, #13]
   18cec:	f023 0304 	bic.w	r3, r3, #4
   18cf0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   18cf2:	b007      	add	sp, #28
   18cf4:	bd30      	pop	{r4, r5, pc}
   18cf6:	bf00      	nop
   18cf8:	20001a58 	.word	0x20001a58
   18cfc:	20001f54 	.word	0x20001f54
   18d00:	20003fe0 	.word	0x20003fe0
   18d04:	0001957d 	.word	0x0001957d

00018d08 <bg_thread_main>:
{
   18d08:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   18d0a:	4b0a      	ldr	r3, [pc, #40]	; (18d34 <bg_thread_main+0x2c>)
   18d0c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18d0e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   18d10:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18d12:	f7ff ff4f 	bl	18bb4 <z_sys_init_run_level>
	boot_banner();
   18d16:	f004 f82f 	bl	1cd78 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   18d1a:	2003      	movs	r0, #3
   18d1c:	f7ff ff4a 	bl	18bb4 <z_sys_init_run_level>
	z_init_static_threads();
   18d20:	f000 fb76 	bl	19410 <z_init_static_threads>
	main();
   18d24:	f7f6 fece 	bl	fac4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   18d28:	4a03      	ldr	r2, [pc, #12]	; (18d38 <bg_thread_main+0x30>)
   18d2a:	7b13      	ldrb	r3, [r2, #12]
   18d2c:	f023 0301 	bic.w	r3, r3, #1
   18d30:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   18d32:	bd08      	pop	{r3, pc}
   18d34:	20002930 	.word	0x20002930
   18d38:	20001ad8 	.word	0x20001ad8

00018d3c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   18d3c:	4802      	ldr	r0, [pc, #8]	; (18d48 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   18d3e:	4a03      	ldr	r2, [pc, #12]	; (18d4c <z_bss_zero+0x10>)
   18d40:	2100      	movs	r1, #0
   18d42:	1a12      	subs	r2, r2, r0
   18d44:	f007 b962 	b.w	2000c <memset>
   18d48:	200007c0 	.word	0x200007c0
   18d4c:	20002934 	.word	0x20002934

00018d50 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   18d50:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   18d52:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 18e30 <z_cstart+0xe0>
   18d56:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   18d58:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   18d5c:	4d2e      	ldr	r5, [pc, #184]	; (18e18 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   18d5e:	4e2f      	ldr	r6, [pc, #188]	; (18e1c <z_cstart+0xcc>)
   18d60:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18d62:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 18e34 <z_cstart+0xe4>
   18d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   18d6a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18d6c:	23e0      	movs	r3, #224	; 0xe0
   18d6e:	2400      	movs	r4, #0
   18d70:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   18d74:	2320      	movs	r3, #32
   18d76:	77eb      	strb	r3, [r5, #31]
   18d78:	762c      	strb	r4, [r5, #24]
   18d7a:	766c      	strb	r4, [r5, #25]
   18d7c:	76ac      	strb	r4, [r5, #26]
   18d7e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   18d82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18d84:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   18d88:	626b      	str	r3, [r5, #36]	; 0x24
   18d8a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   18d8e:	f7f8 fdc5 	bl	1191c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   18d92:	f7f8 faf9 	bl	11388 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   18d96:	f04f 33ff 	mov.w	r3, #4294967295
   18d9a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   18d9c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   18d9e:	f7f8 ff21 	bl	11be4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   18da2:	f7f8 fe57 	bl	11a54 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   18da6:	f240 1301 	movw	r3, #257	; 0x101
   18daa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   18dae:	ab06      	add	r3, sp, #24
   18db0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   18db2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   18db6:	f006 ff71 	bl	1fc9c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   18dba:	4620      	mov	r0, r4
   18dbc:	f7ff fefa 	bl	18bb4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   18dc0:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   18dc2:	4d17      	ldr	r5, [pc, #92]	; (18e20 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   18dc4:	f7ff fef6 	bl	18bb4 <z_sys_init_run_level>
	z_sched_init();
   18dc8:	f002 fc8e 	bl	1b6e8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18dcc:	4b15      	ldr	r3, [pc, #84]	; (18e24 <z_cstart+0xd4>)
   18dce:	9305      	str	r3, [sp, #20]
   18dd0:	2301      	movs	r3, #1
   18dd2:	4915      	ldr	r1, [pc, #84]	; (18e28 <z_cstart+0xd8>)
   18dd4:	9400      	str	r4, [sp, #0]
   18dd6:	e9cd 4303 	strd	r4, r3, [sp, #12]
   18dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18dde:	464b      	mov	r3, r9
   18de0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18de4:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   18de6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   18de8:	f000 fa60 	bl	192ac <z_setup_new_thread>
   18dec:	7b6a      	ldrb	r2, [r5, #13]
   18dee:	f022 0204 	bic.w	r2, r2, #4
   18df2:	736a      	strb	r2, [r5, #13]
   18df4:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   18df6:	4628      	mov	r0, r5
   18df8:	f002 f876 	bl	1aee8 <z_ready_thread>
		init_idle_thread(i);
   18dfc:	4620      	mov	r0, r4
   18dfe:	f7ff ff57 	bl	18cb0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   18e02:	4b0a      	ldr	r3, [pc, #40]	; (18e2c <z_cstart+0xdc>)
   18e04:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   18e06:	464a      	mov	r2, r9
   18e08:	4639      	mov	r1, r7
   18e0a:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   18e0c:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   18e0e:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   18e12:	f7f8 fbf9 	bl	11608 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18e16:	bf00      	nop
   18e18:	e000ed00 	.word	0xe000ed00
   18e1c:	20001f54 	.word	0x20001f54
   18e20:	20001ad8 	.word	0x20001ad8
   18e24:	00021f45 	.word	0x00021f45
   18e28:	20003bc0 	.word	0x20003bc0
   18e2c:	20001a58 	.word	0x20001a58
   18e30:	20004960 	.word	0x20004960
   18e34:	00018d09 	.word	0x00018d09

00018e38 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   18e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   18e3a:	4d0f      	ldr	r5, [pc, #60]	; (18e78 <statics_init+0x40>)
   18e3c:	4c0f      	ldr	r4, [pc, #60]	; (18e7c <statics_init+0x44>)
   18e3e:	4e10      	ldr	r6, [pc, #64]	; (18e80 <statics_init+0x48>)
   18e40:	462f      	mov	r7, r5
   18e42:	42ac      	cmp	r4, r5
   18e44:	d90c      	bls.n	18e60 <statics_init+0x28>
   18e46:	490f      	ldr	r1, [pc, #60]	; (18e84 <statics_init+0x4c>)
   18e48:	480f      	ldr	r0, [pc, #60]	; (18e88 <statics_init+0x50>)
   18e4a:	2318      	movs	r3, #24
   18e4c:	4632      	mov	r2, r6
   18e4e:	f003 ffc8 	bl	1cde2 <printk>
   18e52:	480e      	ldr	r0, [pc, #56]	; (18e8c <statics_init+0x54>)
   18e54:	f003 ffc5 	bl	1cde2 <printk>
   18e58:	2118      	movs	r1, #24
   18e5a:	4630      	mov	r0, r6
   18e5c:	f004 fa1b 	bl	1d296 <assert_post_action>
   18e60:	42bc      	cmp	r4, r7
   18e62:	d301      	bcc.n	18e68 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   18e64:	2000      	movs	r0, #0
   18e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   18e68:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   18e6c:	4620      	mov	r0, r4
   18e6e:	f006 ff20 	bl	1fcb2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   18e72:	3418      	adds	r4, #24
   18e74:	e7e5      	b.n	18e42 <statics_init+0xa>
   18e76:	bf00      	nop
   18e78:	20000640 	.word	0x20000640
   18e7c:	20000640 	.word	0x20000640
   18e80:	00021f4a 	.word	0x00021f4a
   18e84:	00021f6c 	.word	0x00021f6c
   18e88:	00020a75 	.word	0x00020a75
   18e8c:	0002152d 	.word	0x0002152d

00018e90 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   18e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e94:	b087      	sub	sp, #28
   18e96:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   18e9a:	4606      	mov	r6, r0
   18e9c:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18e9e:	4640      	mov	r0, r8
   18ea0:	4649      	mov	r1, r9
{
   18ea2:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18ea4:	f006 ffe6 	bl	1fe74 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18ea8:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   18eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   18eb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   18eb4:	f3ef 8511 	mrs	r5, BASEPRI
   18eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   18ebc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18ec0:	4620      	mov	r0, r4
   18ec2:	f000 fb35 	bl	19530 <z_spin_lock_valid>
   18ec6:	b968      	cbnz	r0, 18ee4 <k_heap_aligned_alloc+0x54>
   18ec8:	4a3f      	ldr	r2, [pc, #252]	; (18fc8 <k_heap_aligned_alloc+0x138>)
   18eca:	4940      	ldr	r1, [pc, #256]	; (18fcc <k_heap_aligned_alloc+0x13c>)
   18ecc:	4840      	ldr	r0, [pc, #256]	; (18fd0 <k_heap_aligned_alloc+0x140>)
   18ece:	2381      	movs	r3, #129	; 0x81
   18ed0:	f003 ff87 	bl	1cde2 <printk>
   18ed4:	483f      	ldr	r0, [pc, #252]	; (18fd4 <k_heap_aligned_alloc+0x144>)
   18ed6:	4621      	mov	r1, r4
   18ed8:	f003 ff83 	bl	1cde2 <printk>
   18edc:	483a      	ldr	r0, [pc, #232]	; (18fc8 <k_heap_aligned_alloc+0x138>)
   18ede:	2181      	movs	r1, #129	; 0x81
   18ee0:	f004 f9d9 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   18ee4:	4620      	mov	r0, r4
   18ee6:	f000 fb41 	bl	1956c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18eea:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   18eee:	b17b      	cbz	r3, 18f10 <k_heap_aligned_alloc+0x80>
   18ef0:	ea58 0309 	orrs.w	r3, r8, r9
   18ef4:	d00c      	beq.n	18f10 <k_heap_aligned_alloc+0x80>
   18ef6:	4938      	ldr	r1, [pc, #224]	; (18fd8 <k_heap_aligned_alloc+0x148>)
   18ef8:	4a38      	ldr	r2, [pc, #224]	; (18fdc <k_heap_aligned_alloc+0x14c>)
   18efa:	4835      	ldr	r0, [pc, #212]	; (18fd0 <k_heap_aligned_alloc+0x140>)
   18efc:	2349      	movs	r3, #73	; 0x49
   18efe:	f003 ff70 	bl	1cde2 <printk>
   18f02:	4837      	ldr	r0, [pc, #220]	; (18fe0 <k_heap_aligned_alloc+0x150>)
   18f04:	f003 ff6d 	bl	1cde2 <printk>
   18f08:	4834      	ldr	r0, [pc, #208]	; (18fdc <k_heap_aligned_alloc+0x14c>)
   18f0a:	2149      	movs	r1, #73	; 0x49
   18f0c:	f004 f9c3 	bl	1d296 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f10:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 18fc8 <k_heap_aligned_alloc+0x138>
   18f14:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 18fcc <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   18f18:	4652      	mov	r2, sl
   18f1a:	4659      	mov	r1, fp
   18f1c:	4630      	mov	r0, r6
   18f1e:	f7f7 f995 	bl	1024c <sys_heap_aligned_alloc>
   18f22:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   18f24:	f003 f99a 	bl	1c25c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   18f28:	b1cf      	cbz	r7, 18f5e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f2a:	4620      	mov	r0, r4
   18f2c:	f000 fb0e 	bl	1954c <z_spin_unlock_valid>
   18f30:	b968      	cbnz	r0, 18f4e <k_heap_aligned_alloc+0xbe>
   18f32:	4a25      	ldr	r2, [pc, #148]	; (18fc8 <k_heap_aligned_alloc+0x138>)
   18f34:	492b      	ldr	r1, [pc, #172]	; (18fe4 <k_heap_aligned_alloc+0x154>)
   18f36:	4826      	ldr	r0, [pc, #152]	; (18fd0 <k_heap_aligned_alloc+0x140>)
   18f38:	23ac      	movs	r3, #172	; 0xac
   18f3a:	f003 ff52 	bl	1cde2 <printk>
   18f3e:	482a      	ldr	r0, [pc, #168]	; (18fe8 <k_heap_aligned_alloc+0x158>)
   18f40:	4621      	mov	r1, r4
   18f42:	f003 ff4e 	bl	1cde2 <printk>
   18f46:	4820      	ldr	r0, [pc, #128]	; (18fc8 <k_heap_aligned_alloc+0x138>)
   18f48:	21ac      	movs	r1, #172	; 0xac
   18f4a:	f004 f9a4 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   18f4e:	f385 8811 	msr	BASEPRI, r5
   18f52:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   18f56:	4638      	mov	r0, r7
   18f58:	b007      	add	sp, #28
   18f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   18f5e:	9b04      	ldr	r3, [sp, #16]
   18f60:	1a1b      	subs	r3, r3, r0
   18f62:	9302      	str	r3, [sp, #8]
   18f64:	9b05      	ldr	r3, [sp, #20]
   18f66:	eb63 0301 	sbc.w	r3, r3, r1
   18f6a:	9303      	str	r3, [sp, #12]
   18f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18f70:	2a01      	cmp	r2, #1
   18f72:	f173 0300 	sbcs.w	r3, r3, #0
   18f76:	dbd8      	blt.n	18f2a <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   18f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   18f7c:	4629      	mov	r1, r5
   18f7e:	e9cd 2300 	strd	r2, r3, [sp]
   18f82:	4620      	mov	r0, r4
   18f84:	f106 020c 	add.w	r2, r6, #12
   18f88:	f002 f960 	bl	1b24c <z_pend_curr>
	__asm__ volatile(
   18f8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18f90:	f3ef 8511 	mrs	r5, BASEPRI
   18f94:	f383 8812 	msr	BASEPRI_MAX, r3
   18f98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f9c:	4620      	mov	r0, r4
   18f9e:	f000 fac7 	bl	19530 <z_spin_lock_valid>
   18fa2:	b968      	cbnz	r0, 18fc0 <k_heap_aligned_alloc+0x130>
   18fa4:	480a      	ldr	r0, [pc, #40]	; (18fd0 <k_heap_aligned_alloc+0x140>)
   18fa6:	2381      	movs	r3, #129	; 0x81
   18fa8:	4642      	mov	r2, r8
   18faa:	4649      	mov	r1, r9
   18fac:	f003 ff19 	bl	1cde2 <printk>
   18fb0:	4808      	ldr	r0, [pc, #32]	; (18fd4 <k_heap_aligned_alloc+0x144>)
   18fb2:	4621      	mov	r1, r4
   18fb4:	f003 ff15 	bl	1cde2 <printk>
   18fb8:	2181      	movs	r1, #129	; 0x81
   18fba:	4640      	mov	r0, r8
   18fbc:	f004 f96b 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   18fc0:	4620      	mov	r0, r4
   18fc2:	f000 fad3 	bl	1956c <z_spin_lock_set_owner>
	return k;
   18fc6:	e7a7      	b.n	18f18 <k_heap_aligned_alloc+0x88>
   18fc8:	00020b35 	.word	0x00020b35
   18fcc:	00020b87 	.word	0x00020b87
   18fd0:	00020a75 	.word	0x00020a75
   18fd4:	00020b9c 	.word	0x00020b9c
   18fd8:	00021f82 	.word	0x00021f82
   18fdc:	00021f4a 	.word	0x00021f4a
   18fe0:	00021901 	.word	0x00021901
   18fe4:	00020b5b 	.word	0x00020b5b
   18fe8:	00020b72 	.word	0x00020b72

00018fec <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   18fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18fee:	4605      	mov	r5, r0
   18ff0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   18ff2:	f100 0414 	add.w	r4, r0, #20
   18ff6:	f04f 0340 	mov.w	r3, #64	; 0x40
   18ffa:	f3ef 8711 	mrs	r7, BASEPRI
   18ffe:	f383 8812 	msr	BASEPRI_MAX, r3
   19002:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19006:	4620      	mov	r0, r4
   19008:	f000 fa92 	bl	19530 <z_spin_lock_valid>
   1900c:	b968      	cbnz	r0, 1902a <k_heap_free+0x3e>
   1900e:	4a1b      	ldr	r2, [pc, #108]	; (1907c <k_heap_free+0x90>)
   19010:	491b      	ldr	r1, [pc, #108]	; (19080 <k_heap_free+0x94>)
   19012:	481c      	ldr	r0, [pc, #112]	; (19084 <k_heap_free+0x98>)
   19014:	2381      	movs	r3, #129	; 0x81
   19016:	f003 fee4 	bl	1cde2 <printk>
   1901a:	481b      	ldr	r0, [pc, #108]	; (19088 <k_heap_free+0x9c>)
   1901c:	4621      	mov	r1, r4
   1901e:	f003 fee0 	bl	1cde2 <printk>
   19022:	4816      	ldr	r0, [pc, #88]	; (1907c <k_heap_free+0x90>)
   19024:	2181      	movs	r1, #129	; 0x81
   19026:	f004 f936 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1902a:	4620      	mov	r0, r4
   1902c:	f000 fa9e 	bl	1956c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   19030:	4628      	mov	r0, r5
   19032:	4631      	mov	r1, r6
   19034:	f7f7 f8b4 	bl	101a0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   19038:	f105 000c 	add.w	r0, r5, #12
   1903c:	f006 ff02 	bl	1fe44 <z_unpend_all>
   19040:	b128      	cbz	r0, 1904e <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   19042:	4639      	mov	r1, r7
   19044:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   19046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1904a:	f001 bcad 	b.w	1a9a8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1904e:	4620      	mov	r0, r4
   19050:	f000 fa7c 	bl	1954c <z_spin_unlock_valid>
   19054:	b968      	cbnz	r0, 19072 <k_heap_free+0x86>
   19056:	4a09      	ldr	r2, [pc, #36]	; (1907c <k_heap_free+0x90>)
   19058:	490c      	ldr	r1, [pc, #48]	; (1908c <k_heap_free+0xa0>)
   1905a:	480a      	ldr	r0, [pc, #40]	; (19084 <k_heap_free+0x98>)
   1905c:	23ac      	movs	r3, #172	; 0xac
   1905e:	f003 fec0 	bl	1cde2 <printk>
   19062:	480b      	ldr	r0, [pc, #44]	; (19090 <k_heap_free+0xa4>)
   19064:	4621      	mov	r1, r4
   19066:	f003 febc 	bl	1cde2 <printk>
   1906a:	4804      	ldr	r0, [pc, #16]	; (1907c <k_heap_free+0x90>)
   1906c:	21ac      	movs	r1, #172	; 0xac
   1906e:	f004 f912 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19072:	f387 8811 	msr	BASEPRI, r7
   19076:	f3bf 8f6f 	isb	sy
}
   1907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1907c:	00020b35 	.word	0x00020b35
   19080:	00020b87 	.word	0x00020b87
   19084:	00020a75 	.word	0x00020a75
   19088:	00020b9c 	.word	0x00020b9c
   1908c:	00020b5b 	.word	0x00020b5b
   19090:	00020b72 	.word	0x00020b72

00019094 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   19094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   19098:	4d16      	ldr	r5, [pc, #88]	; (190f4 <init_mem_slab_module+0x60>)
   1909a:	4c17      	ldr	r4, [pc, #92]	; (190f8 <init_mem_slab_module+0x64>)
   1909c:	4e17      	ldr	r6, [pc, #92]	; (190fc <init_mem_slab_module+0x68>)
   1909e:	46a8      	mov	r8, r5
   190a0:	42ac      	cmp	r4, r5
   190a2:	d90c      	bls.n	190be <init_mem_slab_module+0x2a>
   190a4:	4916      	ldr	r1, [pc, #88]	; (19100 <init_mem_slab_module+0x6c>)
   190a6:	4817      	ldr	r0, [pc, #92]	; (19104 <init_mem_slab_module+0x70>)
   190a8:	233c      	movs	r3, #60	; 0x3c
   190aa:	4632      	mov	r2, r6
   190ac:	f003 fe99 	bl	1cde2 <printk>
   190b0:	4815      	ldr	r0, [pc, #84]	; (19108 <init_mem_slab_module+0x74>)
   190b2:	f003 fe96 	bl	1cde2 <printk>
   190b6:	213c      	movs	r1, #60	; 0x3c
   190b8:	4630      	mov	r0, r6
   190ba:	f004 f8ec 	bl	1d296 <assert_post_action>
   190be:	4544      	cmp	r4, r8
   190c0:	d302      	bcc.n	190c8 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   190c2:	2000      	movs	r0, #0
	return rc;
}
   190c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   190c8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   190cc:	ea41 0302 	orr.w	r3, r1, r2
   190d0:	f013 0303 	ands.w	r3, r3, #3
   190d4:	d10b      	bne.n	190ee <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   190d6:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   190d8:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   190da:	4283      	cmp	r3, r0
   190dc:	d101      	bne.n	190e2 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   190de:	3420      	adds	r4, #32
   190e0:	e7de      	b.n	190a0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   190e2:	69a7      	ldr	r7, [r4, #24]
   190e4:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   190e6:	3301      	adds	r3, #1
		slab->free_list = p;
   190e8:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   190ea:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   190ec:	e7f5      	b.n	190da <init_mem_slab_module+0x46>
		return -EINVAL;
   190ee:	f06f 0015 	mvn.w	r0, #21
	return rc;
   190f2:	e7e7      	b.n	190c4 <init_mem_slab_module+0x30>
   190f4:	20000640 	.word	0x20000640
   190f8:	200005e0 	.word	0x200005e0
   190fc:	00021fc7 	.word	0x00021fc7
   19100:	00021fec 	.word	0x00021fec
   19104:	00020a75 	.word	0x00020a75
   19108:	0002152d 	.word	0x0002152d

0001910c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1910c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19110:	4604      	mov	r4, r0
   19112:	460e      	mov	r6, r1
   19114:	4690      	mov	r8, r2
   19116:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   19118:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1911c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19120:	f3ef 8711 	mrs	r7, BASEPRI
   19124:	f383 8812 	msr	BASEPRI_MAX, r3
   19128:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1912c:	4628      	mov	r0, r5
   1912e:	f000 f9ff 	bl	19530 <z_spin_lock_valid>
   19132:	b968      	cbnz	r0, 19150 <k_mem_slab_alloc+0x44>
   19134:	4a24      	ldr	r2, [pc, #144]	; (191c8 <k_mem_slab_alloc+0xbc>)
   19136:	4925      	ldr	r1, [pc, #148]	; (191cc <k_mem_slab_alloc+0xc0>)
   19138:	4825      	ldr	r0, [pc, #148]	; (191d0 <k_mem_slab_alloc+0xc4>)
   1913a:	2381      	movs	r3, #129	; 0x81
   1913c:	f003 fe51 	bl	1cde2 <printk>
   19140:	4824      	ldr	r0, [pc, #144]	; (191d4 <k_mem_slab_alloc+0xc8>)
   19142:	4629      	mov	r1, r5
   19144:	f003 fe4d 	bl	1cde2 <printk>
   19148:	481f      	ldr	r0, [pc, #124]	; (191c8 <k_mem_slab_alloc+0xbc>)
   1914a:	2181      	movs	r1, #129	; 0x81
   1914c:	f004 f8a3 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19150:	4628      	mov	r0, r5
   19152:	f000 fa0b 	bl	1956c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   19156:	69a3      	ldr	r3, [r4, #24]
   19158:	b1eb      	cbz	r3, 19196 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   1915a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1915c:	681b      	ldr	r3, [r3, #0]
   1915e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   19160:	69e3      	ldr	r3, [r4, #28]
   19162:	3301      	adds	r3, #1
   19164:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   19166:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19168:	4628      	mov	r0, r5
   1916a:	f000 f9ef 	bl	1954c <z_spin_unlock_valid>
   1916e:	b968      	cbnz	r0, 1918c <k_mem_slab_alloc+0x80>
   19170:	4a15      	ldr	r2, [pc, #84]	; (191c8 <k_mem_slab_alloc+0xbc>)
   19172:	4919      	ldr	r1, [pc, #100]	; (191d8 <k_mem_slab_alloc+0xcc>)
   19174:	4816      	ldr	r0, [pc, #88]	; (191d0 <k_mem_slab_alloc+0xc4>)
   19176:	23ac      	movs	r3, #172	; 0xac
   19178:	f003 fe33 	bl	1cde2 <printk>
   1917c:	4817      	ldr	r0, [pc, #92]	; (191dc <k_mem_slab_alloc+0xd0>)
   1917e:	4629      	mov	r1, r5
   19180:	f003 fe2f 	bl	1cde2 <printk>
   19184:	4810      	ldr	r0, [pc, #64]	; (191c8 <k_mem_slab_alloc+0xbc>)
   19186:	21ac      	movs	r1, #172	; 0xac
   19188:	f004 f885 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1918c:	f387 8811 	msr	BASEPRI, r7
   19190:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   19194:	e013      	b.n	191be <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   19196:	ea58 0209 	orrs.w	r2, r8, r9
   1919a:	d103      	bne.n	191a4 <k_mem_slab_alloc+0x98>
		*mem = NULL;
   1919c:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1919e:	f06f 040b 	mvn.w	r4, #11
   191a2:	e7e1      	b.n	19168 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   191a4:	4622      	mov	r2, r4
   191a6:	e9cd 8900 	strd	r8, r9, [sp]
   191aa:	4639      	mov	r1, r7
   191ac:	4628      	mov	r0, r5
   191ae:	f002 f84d 	bl	1b24c <z_pend_curr>
		if (result == 0) {
   191b2:	4604      	mov	r4, r0
   191b4:	b918      	cbnz	r0, 191be <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   191b6:	4b0a      	ldr	r3, [pc, #40]	; (191e0 <k_mem_slab_alloc+0xd4>)
   191b8:	689b      	ldr	r3, [r3, #8]
   191ba:	695b      	ldr	r3, [r3, #20]
   191bc:	6033      	str	r3, [r6, #0]
}
   191be:	4620      	mov	r0, r4
   191c0:	b003      	add	sp, #12
   191c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   191c6:	bf00      	nop
   191c8:	00020b35 	.word	0x00020b35
   191cc:	00020b87 	.word	0x00020b87
   191d0:	00020a75 	.word	0x00020a75
   191d4:	00020b9c 	.word	0x00020b9c
   191d8:	00020b5b 	.word	0x00020b5b
   191dc:	00020b72 	.word	0x00020b72
   191e0:	20001f54 	.word	0x20001f54

000191e4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   191e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191e8:	4604      	mov	r4, r0
   191ea:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   191ec:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   191f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   191f4:	f3ef 8711 	mrs	r7, BASEPRI
   191f8:	f383 8812 	msr	BASEPRI_MAX, r3
   191fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19200:	4628      	mov	r0, r5
   19202:	f000 f995 	bl	19530 <z_spin_lock_valid>
   19206:	b968      	cbnz	r0, 19224 <k_mem_slab_free+0x40>
   19208:	4a22      	ldr	r2, [pc, #136]	; (19294 <k_mem_slab_free+0xb0>)
   1920a:	4923      	ldr	r1, [pc, #140]	; (19298 <k_mem_slab_free+0xb4>)
   1920c:	4823      	ldr	r0, [pc, #140]	; (1929c <k_mem_slab_free+0xb8>)
   1920e:	2381      	movs	r3, #129	; 0x81
   19210:	f003 fde7 	bl	1cde2 <printk>
   19214:	4822      	ldr	r0, [pc, #136]	; (192a0 <k_mem_slab_free+0xbc>)
   19216:	4629      	mov	r1, r5
   19218:	f003 fde3 	bl	1cde2 <printk>
   1921c:	481d      	ldr	r0, [pc, #116]	; (19294 <k_mem_slab_free+0xb0>)
   1921e:	2181      	movs	r1, #129	; 0x81
   19220:	f004 f839 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19224:	4628      	mov	r0, r5
   19226:	f000 f9a1 	bl	1956c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1922a:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1922e:	f1b8 0f00 	cmp.w	r8, #0
   19232:	d10f      	bne.n	19254 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   19234:	4620      	mov	r0, r4
   19236:	f002 fa07 	bl	1b648 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1923a:	b158      	cbz	r0, 19254 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1923c:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1923e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   19240:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   19244:	f001 fe50 	bl	1aee8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   19248:	4639      	mov	r1, r7
   1924a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1924c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   19250:	f001 bbaa 	b.w	1a9a8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   19254:	6833      	ldr	r3, [r6, #0]
   19256:	69a2      	ldr	r2, [r4, #24]
   19258:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1925a:	6833      	ldr	r3, [r6, #0]
   1925c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1925e:	69e3      	ldr	r3, [r4, #28]
   19260:	3b01      	subs	r3, #1
   19262:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19264:	4628      	mov	r0, r5
   19266:	f000 f971 	bl	1954c <z_spin_unlock_valid>
   1926a:	b968      	cbnz	r0, 19288 <k_mem_slab_free+0xa4>
   1926c:	4a09      	ldr	r2, [pc, #36]	; (19294 <k_mem_slab_free+0xb0>)
   1926e:	490d      	ldr	r1, [pc, #52]	; (192a4 <k_mem_slab_free+0xc0>)
   19270:	480a      	ldr	r0, [pc, #40]	; (1929c <k_mem_slab_free+0xb8>)
   19272:	23ac      	movs	r3, #172	; 0xac
   19274:	f003 fdb5 	bl	1cde2 <printk>
   19278:	480b      	ldr	r0, [pc, #44]	; (192a8 <k_mem_slab_free+0xc4>)
   1927a:	4629      	mov	r1, r5
   1927c:	f003 fdb1 	bl	1cde2 <printk>
   19280:	4804      	ldr	r0, [pc, #16]	; (19294 <k_mem_slab_free+0xb0>)
   19282:	21ac      	movs	r1, #172	; 0xac
   19284:	f004 f807 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19288:	f387 8811 	msr	BASEPRI, r7
   1928c:	f3bf 8f6f 	isb	sy
}
   19290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19294:	00020b35 	.word	0x00020b35
   19298:	00020b87 	.word	0x00020b87
   1929c:	00020a75 	.word	0x00020a75
   192a0:	00020b9c 	.word	0x00020b9c
   192a4:	00020b5b 	.word	0x00020b5b
   192a8:	00020b72 	.word	0x00020b72

000192ac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   192ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192b0:	b085      	sub	sp, #20
   192b2:	4604      	mov	r4, r0
   192b4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   192b8:	f1b8 0f0f 	cmp.w	r8, #15
{
   192bc:	460f      	mov	r7, r1
   192be:	4615      	mov	r5, r2
   192c0:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   192c2:	d132      	bne.n	1932a <z_setup_new_thread+0x7e>
   192c4:	4b25      	ldr	r3, [pc, #148]	; (1935c <z_setup_new_thread+0xb0>)
   192c6:	4599      	cmp	r9, r3
   192c8:	d133      	bne.n	19332 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   192ca:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   192ce:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   192d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   192d4:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   192d6:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   192d8:	2304      	movs	r3, #4
   192da:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   192dc:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   192e0:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   192e4:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   192e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   192ea:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   192ee:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   192f0:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   192f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   192f6:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   192f8:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   192fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   192fc:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   192fe:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19300:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   19302:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   19306:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   19308:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   1930a:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1930c:	4642      	mov	r2, r8
   1930e:	4639      	mov	r1, r7
   19310:	4620      	mov	r0, r4
   19312:	f7f8 f943 	bl	1159c <arch_new_thread>
	if (!_current) {
   19316:	4b12      	ldr	r3, [pc, #72]	; (19360 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   19318:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   1931a:	689b      	ldr	r3, [r3, #8]
   1931c:	b103      	cbz	r3, 19320 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   1931e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   19320:	6763      	str	r3, [r4, #116]	; 0x74
}
   19322:	4640      	mov	r0, r8
   19324:	b005      	add	sp, #20
   19326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1932a:	f108 0310 	add.w	r3, r8, #16
   1932e:	2b1e      	cmp	r3, #30
   19330:	d9cb      	bls.n	192ca <z_setup_new_thread+0x1e>
   19332:	4a0c      	ldr	r2, [pc, #48]	; (19364 <z_setup_new_thread+0xb8>)
   19334:	490c      	ldr	r1, [pc, #48]	; (19368 <z_setup_new_thread+0xbc>)
   19336:	480d      	ldr	r0, [pc, #52]	; (1936c <z_setup_new_thread+0xc0>)
   19338:	f240 2305 	movw	r3, #517	; 0x205
   1933c:	f003 fd51 	bl	1cde2 <printk>
   19340:	4641      	mov	r1, r8
   19342:	480b      	ldr	r0, [pc, #44]	; (19370 <z_setup_new_thread+0xc4>)
   19344:	f06f 030f 	mvn.w	r3, #15
   19348:	220e      	movs	r2, #14
   1934a:	f003 fd4a 	bl	1cde2 <printk>
   1934e:	4805      	ldr	r0, [pc, #20]	; (19364 <z_setup_new_thread+0xb8>)
   19350:	f240 2105 	movw	r1, #517	; 0x205
   19354:	f003 ff9f 	bl	1d296 <assert_post_action>
   19358:	e7b7      	b.n	192ca <z_setup_new_thread+0x1e>
   1935a:	bf00      	nop
   1935c:	0001957d 	.word	0x0001957d
   19360:	20001f54 	.word	0x20001f54
   19364:	00022009 	.word	0x00022009
   19368:	0002202c 	.word	0x0002202c
   1936c:	00020a75 	.word	0x00020a75
   19370:	000220ac 	.word	0x000220ac

00019374 <z_impl_k_thread_create>:
{
   19374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19378:	b087      	sub	sp, #28
   1937a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   1937e:	4604      	mov	r4, r0
   19380:	460d      	mov	r5, r1
   19382:	4690      	mov	r8, r2
   19384:	4699      	mov	r9, r3
   19386:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1938a:	b173      	cbz	r3, 193aa <z_impl_k_thread_create+0x36>
   1938c:	491b      	ldr	r1, [pc, #108]	; (193fc <z_impl_k_thread_create+0x88>)
   1938e:	4a1c      	ldr	r2, [pc, #112]	; (19400 <z_impl_k_thread_create+0x8c>)
   19390:	481c      	ldr	r0, [pc, #112]	; (19404 <z_impl_k_thread_create+0x90>)
   19392:	f240 236e 	movw	r3, #622	; 0x26e
   19396:	f003 fd24 	bl	1cde2 <printk>
   1939a:	481b      	ldr	r0, [pc, #108]	; (19408 <z_impl_k_thread_create+0x94>)
   1939c:	f003 fd21 	bl	1cde2 <printk>
   193a0:	4817      	ldr	r0, [pc, #92]	; (19400 <z_impl_k_thread_create+0x8c>)
   193a2:	f240 216e 	movw	r1, #622	; 0x26e
   193a6:	f003 ff76 	bl	1d296 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   193aa:	2300      	movs	r3, #0
   193ac:	9305      	str	r3, [sp, #20]
   193ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   193b0:	9304      	str	r3, [sp, #16]
   193b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   193b4:	9303      	str	r3, [sp, #12]
   193b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   193b8:	9302      	str	r3, [sp, #8]
   193ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   193bc:	9301      	str	r3, [sp, #4]
   193be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   193c0:	9300      	str	r3, [sp, #0]
   193c2:	4642      	mov	r2, r8
   193c4:	464b      	mov	r3, r9
   193c6:	4629      	mov	r1, r5
   193c8:	4620      	mov	r0, r4
   193ca:	f7ff ff6f 	bl	192ac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   193ce:	1c7b      	adds	r3, r7, #1
   193d0:	bf08      	it	eq
   193d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   193d6:	d005      	beq.n	193e4 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   193d8:	ea56 0307 	orrs.w	r3, r6, r7
   193dc:	d106      	bne.n	193ec <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   193de:	4620      	mov	r0, r4
   193e0:	f001 fdca 	bl	1af78 <z_sched_start>
}
   193e4:	4620      	mov	r0, r4
   193e6:	b007      	add	sp, #28
   193e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   193ec:	4907      	ldr	r1, [pc, #28]	; (1940c <z_impl_k_thread_create+0x98>)
   193ee:	4632      	mov	r2, r6
   193f0:	463b      	mov	r3, r7
   193f2:	f104 0018 	add.w	r0, r4, #24
   193f6:	f002 fcab 	bl	1bd50 <z_add_timeout>
   193fa:	e7f3      	b.n	193e4 <z_impl_k_thread_create+0x70>
   193fc:	000220dd 	.word	0x000220dd
   19400:	00022009 	.word	0x00022009
   19404:	00020a75 	.word	0x00020a75
   19408:	000220ef 	.word	0x000220ef
   1940c:	0001b021 	.word	0x0001b021

00019410 <z_init_static_threads>:
{
   19410:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   19414:	4f3f      	ldr	r7, [pc, #252]	; (19514 <z_init_static_threads+0x104>)
   19416:	4d40      	ldr	r5, [pc, #256]	; (19518 <z_init_static_threads+0x108>)
   19418:	f8df 810c 	ldr.w	r8, [pc, #268]	; 19528 <z_init_static_threads+0x118>
{
   1941c:	b086      	sub	sp, #24
   1941e:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   19420:	42bd      	cmp	r5, r7
   19422:	d90e      	bls.n	19442 <z_init_static_threads+0x32>
   19424:	493d      	ldr	r1, [pc, #244]	; (1951c <z_init_static_threads+0x10c>)
   19426:	483e      	ldr	r0, [pc, #248]	; (19520 <z_init_static_threads+0x110>)
   19428:	f240 23d5 	movw	r3, #725	; 0x2d5
   1942c:	4642      	mov	r2, r8
   1942e:	f003 fcd8 	bl	1cde2 <printk>
   19432:	483c      	ldr	r0, [pc, #240]	; (19524 <z_init_static_threads+0x114>)
   19434:	f003 fcd5 	bl	1cde2 <printk>
   19438:	f240 21d5 	movw	r1, #725	; 0x2d5
   1943c:	4640      	mov	r0, r8
   1943e:	f003 ff2a 	bl	1d296 <assert_post_action>
   19442:	42b5      	cmp	r5, r6
   19444:	f105 0430 	add.w	r4, r5, #48	; 0x30
   19448:	d31f      	bcc.n	1948a <z_init_static_threads+0x7a>
	k_sched_lock();
   1944a:	f001 faf1 	bl	1aa30 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1944e:	4c32      	ldr	r4, [pc, #200]	; (19518 <z_init_static_threads+0x108>)
   19450:	4d35      	ldr	r5, [pc, #212]	; (19528 <z_init_static_threads+0x118>)
   19452:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1951c <z_init_static_threads+0x10c>
   19456:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 19520 <z_init_static_threads+0x110>
   1945a:	42b4      	cmp	r4, r6
   1945c:	d90e      	bls.n	1947c <z_init_static_threads+0x6c>
   1945e:	4641      	mov	r1, r8
   19460:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   19464:	462a      	mov	r2, r5
   19466:	4648      	mov	r0, r9
   19468:	f003 fcbb 	bl	1cde2 <printk>
   1946c:	482d      	ldr	r0, [pc, #180]	; (19524 <z_init_static_threads+0x114>)
   1946e:	f003 fcb8 	bl	1cde2 <printk>
   19472:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   19476:	4628      	mov	r0, r5
   19478:	f003 ff0d 	bl	1d296 <assert_post_action>
   1947c:	42b4      	cmp	r4, r6
   1947e:	d321      	bcc.n	194c4 <z_init_static_threads+0xb4>
}
   19480:	b006      	add	sp, #24
   19482:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   19486:	f002 b817 	b.w	1b4b8 <k_sched_unlock>
		z_setup_new_thread(
   1948a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1948e:	9305      	str	r3, [sp, #20]
   19490:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19494:	9304      	str	r3, [sp, #16]
   19496:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1949a:	9303      	str	r3, [sp, #12]
   1949c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   194a0:	9302      	str	r3, [sp, #8]
   194a2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   194a6:	9301      	str	r3, [sp, #4]
   194a8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   194ac:	9300      	str	r3, [sp, #0]
   194ae:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   194b2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   194b6:	f7ff fef9 	bl	192ac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   194ba:	f854 3c30 	ldr.w	r3, [r4, #-48]
   194be:	655d      	str	r5, [r3, #84]	; 0x54
   194c0:	4625      	mov	r5, r4
   194c2:	e7ad      	b.n	19420 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   194c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   194c6:	1c4b      	adds	r3, r1, #1
   194c8:	d014      	beq.n	194f4 <z_init_static_threads+0xe4>
   194ca:	f240 32e7 	movw	r2, #999	; 0x3e7
   194ce:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   194d0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   194d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   194d8:	4693      	mov	fp, r2
   194da:	469c      	mov	ip, r3
   194dc:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   194e0:	459c      	cmp	ip, r3
   194e2:	bf08      	it	eq
   194e4:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   194e6:	6827      	ldr	r7, [r4, #0]
   194e8:	4658      	mov	r0, fp
   194ea:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   194ec:	d104      	bne.n	194f8 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   194ee:	4638      	mov	r0, r7
   194f0:	f001 fd42 	bl	1af78 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   194f4:	3430      	adds	r4, #48	; 0x30
   194f6:	e7b0      	b.n	1945a <z_init_static_threads+0x4a>
   194f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   194fc:	2300      	movs	r3, #0
   194fe:	f7e6 fdff 	bl	100 <__aeabi_uldivmod>
   19502:	4602      	mov	r2, r0
   19504:	460b      	mov	r3, r1
   19506:	f107 0018 	add.w	r0, r7, #24
   1950a:	4908      	ldr	r1, [pc, #32]	; (1952c <z_init_static_threads+0x11c>)
   1950c:	f002 fc20 	bl	1bd50 <z_add_timeout>
   19510:	e7f0      	b.n	194f4 <z_init_static_threads+0xe4>
   19512:	bf00      	nop
   19514:	200005e0 	.word	0x200005e0
   19518:	200005e0 	.word	0x200005e0
   1951c:	00022114 	.word	0x00022114
   19520:	00020a75 	.word	0x00020a75
   19524:	0002152d 	.word	0x0002152d
   19528:	00022009 	.word	0x00022009
   1952c:	0001b021 	.word	0x0001b021

00019530 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   19530:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   19532:	b138      	cbz	r0, 19544 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   19534:	4b04      	ldr	r3, [pc, #16]	; (19548 <z_spin_lock_valid+0x18>)
   19536:	7d1b      	ldrb	r3, [r3, #20]
   19538:	f000 0003 	and.w	r0, r0, #3
   1953c:	1ac0      	subs	r0, r0, r3
   1953e:	bf18      	it	ne
   19540:	2001      	movne	r0, #1
   19542:	4770      	bx	lr
			return false;
		}
	}
	return true;
   19544:	2001      	movs	r0, #1
}
   19546:	4770      	bx	lr
   19548:	20001f54 	.word	0x20001f54

0001954c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1954c:	4906      	ldr	r1, [pc, #24]	; (19568 <z_spin_unlock_valid+0x1c>)
{
   1954e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19550:	688a      	ldr	r2, [r1, #8]
   19552:	7d08      	ldrb	r0, [r1, #20]
   19554:	6819      	ldr	r1, [r3, #0]
   19556:	4302      	orrs	r2, r0
   19558:	4291      	cmp	r1, r2
   1955a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   1955e:	bf04      	itt	eq
   19560:	6018      	streq	r0, [r3, #0]
	return true;
   19562:	2001      	moveq	r0, #1
}
   19564:	4770      	bx	lr
   19566:	bf00      	nop
   19568:	20001f54 	.word	0x20001f54

0001956c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1956c:	4a02      	ldr	r2, [pc, #8]	; (19578 <z_spin_lock_set_owner+0xc>)
   1956e:	7d11      	ldrb	r1, [r2, #20]
   19570:	6893      	ldr	r3, [r2, #8]
   19572:	430b      	orrs	r3, r1
   19574:	6003      	str	r3, [r0, #0]
}
   19576:	4770      	bx	lr
   19578:	20001f54 	.word	0x20001f54

0001957c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1957c:	4c11      	ldr	r4, [pc, #68]	; (195c4 <idle+0x48>)
   1957e:	68a2      	ldr	r2, [r4, #8]
   19580:	f992 200e 	ldrsb.w	r2, [r2, #14]
   19584:	2a00      	cmp	r2, #0
{
   19586:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   19588:	da09      	bge.n	1959e <idle+0x22>
   1958a:	490f      	ldr	r1, [pc, #60]	; (195c8 <idle+0x4c>)
   1958c:	480f      	ldr	r0, [pc, #60]	; (195cc <idle+0x50>)
   1958e:	4a10      	ldr	r2, [pc, #64]	; (195d0 <idle+0x54>)
   19590:	2346      	movs	r3, #70	; 0x46
   19592:	f003 fc26 	bl	1cde2 <printk>
   19596:	480e      	ldr	r0, [pc, #56]	; (195d0 <idle+0x54>)
   19598:	2146      	movs	r1, #70	; 0x46
   1959a:	f003 fe7c 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1959e:	f04f 0240 	mov.w	r2, #64	; 0x40
   195a2:	f3ef 8311 	mrs	r3, BASEPRI
   195a6:	f382 8812 	msr	BASEPRI_MAX, r2
   195aa:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   195ae:	f002 fcf1 	bl	1bf94 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   195b2:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   195b4:	f7f7 fbf6 	bl	10da4 <pm_system_suspend>
   195b8:	2800      	cmp	r0, #0
   195ba:	d1f0      	bne.n	1959e <idle+0x22>
	arch_cpu_idle();
   195bc:	f7f7 feea 	bl	11394 <arch_cpu_idle>
}
   195c0:	e7ed      	b.n	1959e <idle+0x22>
   195c2:	bf00      	nop
   195c4:	20001f54 	.word	0x20001f54
   195c8:	00022162 	.word	0x00022162
   195cc:	00020a75 	.word	0x00020a75
   195d0:	00022141 	.word	0x00022141

000195d4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   195d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   195d8:	4604      	mov	r4, r0
   195da:	4616      	mov	r6, r2
   195dc:	461f      	mov	r7, r3
   195de:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   195e2:	b163      	cbz	r3, 195fe <z_impl_k_mutex_lock+0x2a>
   195e4:	4970      	ldr	r1, [pc, #448]	; (197a8 <z_impl_k_mutex_lock+0x1d4>)
   195e6:	4a71      	ldr	r2, [pc, #452]	; (197ac <z_impl_k_mutex_lock+0x1d8>)
   195e8:	4871      	ldr	r0, [pc, #452]	; (197b0 <z_impl_k_mutex_lock+0x1dc>)
   195ea:	2365      	movs	r3, #101	; 0x65
   195ec:	f003 fbf9 	bl	1cde2 <printk>
   195f0:	4870      	ldr	r0, [pc, #448]	; (197b4 <z_impl_k_mutex_lock+0x1e0>)
   195f2:	f003 fbf6 	bl	1cde2 <printk>
   195f6:	486d      	ldr	r0, [pc, #436]	; (197ac <z_impl_k_mutex_lock+0x1d8>)
   195f8:	2165      	movs	r1, #101	; 0x65
   195fa:	f003 fe4c 	bl	1d296 <assert_post_action>
   195fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   19602:	f3ef 8811 	mrs	r8, BASEPRI
   19606:	f383 8812 	msr	BASEPRI_MAX, r3
   1960a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1960e:	486a      	ldr	r0, [pc, #424]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   19610:	f7ff ff8e 	bl	19530 <z_spin_lock_valid>
   19614:	b968      	cbnz	r0, 19632 <z_impl_k_mutex_lock+0x5e>
   19616:	4a69      	ldr	r2, [pc, #420]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   19618:	4969      	ldr	r1, [pc, #420]	; (197c0 <z_impl_k_mutex_lock+0x1ec>)
   1961a:	4865      	ldr	r0, [pc, #404]	; (197b0 <z_impl_k_mutex_lock+0x1dc>)
   1961c:	2381      	movs	r3, #129	; 0x81
   1961e:	f003 fbe0 	bl	1cde2 <printk>
   19622:	4965      	ldr	r1, [pc, #404]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   19624:	4867      	ldr	r0, [pc, #412]	; (197c4 <z_impl_k_mutex_lock+0x1f0>)
   19626:	f003 fbdc 	bl	1cde2 <printk>
   1962a:	4864      	ldr	r0, [pc, #400]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   1962c:	2181      	movs	r1, #129	; 0x81
   1962e:	f003 fe32 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19632:	4861      	ldr	r0, [pc, #388]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   19634:	f7ff ff9a 	bl	1956c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   19638:	68e3      	ldr	r3, [r4, #12]
   1963a:	4a63      	ldr	r2, [pc, #396]	; (197c8 <z_impl_k_mutex_lock+0x1f4>)
   1963c:	b1fb      	cbz	r3, 1967e <z_impl_k_mutex_lock+0xaa>
   1963e:	68a0      	ldr	r0, [r4, #8]
   19640:	6891      	ldr	r1, [r2, #8]
   19642:	4288      	cmp	r0, r1
   19644:	d03d      	beq.n	196c2 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   19646:	ea56 0307 	orrs.w	r3, r6, r7
   1964a:	d13c      	bne.n	196c6 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1964c:	485a      	ldr	r0, [pc, #360]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   1964e:	f7ff ff7d 	bl	1954c <z_spin_unlock_valid>
   19652:	b968      	cbnz	r0, 19670 <z_impl_k_mutex_lock+0x9c>
   19654:	4a59      	ldr	r2, [pc, #356]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   19656:	495d      	ldr	r1, [pc, #372]	; (197cc <z_impl_k_mutex_lock+0x1f8>)
   19658:	4855      	ldr	r0, [pc, #340]	; (197b0 <z_impl_k_mutex_lock+0x1dc>)
   1965a:	23ac      	movs	r3, #172	; 0xac
   1965c:	f003 fbc1 	bl	1cde2 <printk>
   19660:	4955      	ldr	r1, [pc, #340]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   19662:	485b      	ldr	r0, [pc, #364]	; (197d0 <z_impl_k_mutex_lock+0x1fc>)
   19664:	f003 fbbd 	bl	1cde2 <printk>
   19668:	4854      	ldr	r0, [pc, #336]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   1966a:	21ac      	movs	r1, #172	; 0xac
   1966c:	f003 fe13 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19670:	f388 8811 	msr	BASEPRI, r8
   19674:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   19678:	f06f 000f 	mvn.w	r0, #15
   1967c:	e01e      	b.n	196bc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1967e:	6891      	ldr	r1, [r2, #8]
   19680:	f991 100e 	ldrsb.w	r1, [r1, #14]
   19684:	484c      	ldr	r0, [pc, #304]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   19686:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   19688:	3301      	adds	r3, #1
   1968a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1968c:	6893      	ldr	r3, [r2, #8]
   1968e:	60a3      	str	r3, [r4, #8]
   19690:	f7ff ff5c 	bl	1954c <z_spin_unlock_valid>
   19694:	b968      	cbnz	r0, 196b2 <z_impl_k_mutex_lock+0xde>
   19696:	4a49      	ldr	r2, [pc, #292]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   19698:	494c      	ldr	r1, [pc, #304]	; (197cc <z_impl_k_mutex_lock+0x1f8>)
   1969a:	4845      	ldr	r0, [pc, #276]	; (197b0 <z_impl_k_mutex_lock+0x1dc>)
   1969c:	23ac      	movs	r3, #172	; 0xac
   1969e:	f003 fba0 	bl	1cde2 <printk>
   196a2:	4945      	ldr	r1, [pc, #276]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   196a4:	484a      	ldr	r0, [pc, #296]	; (197d0 <z_impl_k_mutex_lock+0x1fc>)
   196a6:	f003 fb9c 	bl	1cde2 <printk>
   196aa:	4844      	ldr	r0, [pc, #272]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   196ac:	21ac      	movs	r1, #172	; 0xac
   196ae:	f003 fdf2 	bl	1d296 <assert_post_action>
   196b2:	f388 8811 	msr	BASEPRI, r8
   196b6:	f3bf 8f6f 	isb	sy
		return 0;
   196ba:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   196bc:	b002      	add	sp, #8
   196be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   196c2:	6921      	ldr	r1, [r4, #16]
   196c4:	e7de      	b.n	19684 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   196c6:	f991 100e 	ldrsb.w	r1, [r1, #14]
   196ca:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   196ce:	4299      	cmp	r1, r3
   196d0:	bfa8      	it	ge
   196d2:	4619      	movge	r1, r3
   196d4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   196d8:	4291      	cmp	r1, r2
   196da:	bfb8      	it	lt
   196dc:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   196de:	428b      	cmp	r3, r1
   196e0:	dd44      	ble.n	1976c <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   196e2:	f001 fde3 	bl	1b2ac <z_set_prio>
   196e6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   196e8:	e9cd 6700 	strd	r6, r7, [sp]
   196ec:	4832      	ldr	r0, [pc, #200]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   196ee:	4622      	mov	r2, r4
   196f0:	4641      	mov	r1, r8
   196f2:	f001 fdab 	bl	1b24c <z_pend_curr>
	if (got_mutex == 0) {
   196f6:	2800      	cmp	r0, #0
   196f8:	d0e0      	beq.n	196bc <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   196fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   196fe:	f3ef 8611 	mrs	r6, BASEPRI
   19702:	f383 8812 	msr	BASEPRI_MAX, r3
   19706:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1970a:	482b      	ldr	r0, [pc, #172]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   1970c:	f7ff ff10 	bl	19530 <z_spin_lock_valid>
   19710:	b968      	cbnz	r0, 1972e <z_impl_k_mutex_lock+0x15a>
   19712:	4a2a      	ldr	r2, [pc, #168]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   19714:	492a      	ldr	r1, [pc, #168]	; (197c0 <z_impl_k_mutex_lock+0x1ec>)
   19716:	4826      	ldr	r0, [pc, #152]	; (197b0 <z_impl_k_mutex_lock+0x1dc>)
   19718:	2381      	movs	r3, #129	; 0x81
   1971a:	f003 fb62 	bl	1cde2 <printk>
   1971e:	4926      	ldr	r1, [pc, #152]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   19720:	4828      	ldr	r0, [pc, #160]	; (197c4 <z_impl_k_mutex_lock+0x1f0>)
   19722:	f003 fb5e 	bl	1cde2 <printk>
   19726:	4825      	ldr	r0, [pc, #148]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   19728:	2181      	movs	r1, #129	; 0x81
   1972a:	f003 fdb4 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1972e:	4822      	ldr	r0, [pc, #136]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   19730:	f7ff ff1c 	bl	1956c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   19734:	6823      	ldr	r3, [r4, #0]
   19736:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19738:	429c      	cmp	r4, r3
   1973a:	d00a      	beq.n	19752 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1973c:	b14b      	cbz	r3, 19752 <z_impl_k_mutex_lock+0x17e>
   1973e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   19742:	4299      	cmp	r1, r3
   19744:	bfa8      	it	ge
   19746:	4619      	movge	r1, r3
   19748:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1974c:	4299      	cmp	r1, r3
   1974e:	bfb8      	it	lt
   19750:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19752:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   19754:	f990 300e 	ldrsb.w	r3, [r0, #14]
   19758:	4299      	cmp	r1, r3
   1975a:	d109      	bne.n	19770 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   1975c:	b16d      	cbz	r5, 1977a <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   1975e:	4816      	ldr	r0, [pc, #88]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   19760:	4631      	mov	r1, r6
   19762:	f001 f921 	bl	1a9a8 <z_reschedule>
	return -EAGAIN;
   19766:	f06f 000a 	mvn.w	r0, #10
   1976a:	e7a7      	b.n	196bc <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   1976c:	2500      	movs	r5, #0
   1976e:	e7bb      	b.n	196e8 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   19770:	f001 fd9c 	bl	1b2ac <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   19774:	2800      	cmp	r0, #0
   19776:	d1f2      	bne.n	1975e <z_impl_k_mutex_lock+0x18a>
   19778:	e7f0      	b.n	1975c <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1977a:	480f      	ldr	r0, [pc, #60]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   1977c:	f7ff fee6 	bl	1954c <z_spin_unlock_valid>
   19780:	b968      	cbnz	r0, 1979e <z_impl_k_mutex_lock+0x1ca>
   19782:	4a0e      	ldr	r2, [pc, #56]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   19784:	4911      	ldr	r1, [pc, #68]	; (197cc <z_impl_k_mutex_lock+0x1f8>)
   19786:	480a      	ldr	r0, [pc, #40]	; (197b0 <z_impl_k_mutex_lock+0x1dc>)
   19788:	23ac      	movs	r3, #172	; 0xac
   1978a:	f003 fb2a 	bl	1cde2 <printk>
   1978e:	490a      	ldr	r1, [pc, #40]	; (197b8 <z_impl_k_mutex_lock+0x1e4>)
   19790:	480f      	ldr	r0, [pc, #60]	; (197d0 <z_impl_k_mutex_lock+0x1fc>)
   19792:	f003 fb26 	bl	1cde2 <printk>
   19796:	4809      	ldr	r0, [pc, #36]	; (197bc <z_impl_k_mutex_lock+0x1e8>)
   19798:	21ac      	movs	r1, #172	; 0xac
   1979a:	f003 fd7c 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1979e:	f386 8811 	msr	BASEPRI, r6
   197a2:	f3bf 8f6f 	isb	sy
   197a6:	e7de      	b.n	19766 <z_impl_k_mutex_lock+0x192>
   197a8:	000220dd 	.word	0x000220dd
   197ac:	0002218a 	.word	0x0002218a
   197b0:	00020a75 	.word	0x00020a75
   197b4:	000221ac 	.word	0x000221ac
   197b8:	20001f7c 	.word	0x20001f7c
   197bc:	00020b35 	.word	0x00020b35
   197c0:	00020b87 	.word	0x00020b87
   197c4:	00020b9c 	.word	0x00020b9c
   197c8:	20001f54 	.word	0x20001f54
   197cc:	00020b5b 	.word	0x00020b5b
   197d0:	00020b72 	.word	0x00020b72

000197d4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   197d4:	b538      	push	{r3, r4, r5, lr}
   197d6:	4604      	mov	r4, r0
   197d8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   197dc:	b163      	cbz	r3, 197f8 <z_impl_k_mutex_unlock+0x24>
   197de:	4952      	ldr	r1, [pc, #328]	; (19928 <z_impl_k_mutex_unlock+0x154>)
   197e0:	4a52      	ldr	r2, [pc, #328]	; (1992c <z_impl_k_mutex_unlock+0x158>)
   197e2:	4853      	ldr	r0, [pc, #332]	; (19930 <z_impl_k_mutex_unlock+0x15c>)
   197e4:	23c7      	movs	r3, #199	; 0xc7
   197e6:	f003 fafc 	bl	1cde2 <printk>
   197ea:	4852      	ldr	r0, [pc, #328]	; (19934 <z_impl_k_mutex_unlock+0x160>)
   197ec:	f003 faf9 	bl	1cde2 <printk>
   197f0:	484e      	ldr	r0, [pc, #312]	; (1992c <z_impl_k_mutex_unlock+0x158>)
   197f2:	21c7      	movs	r1, #199	; 0xc7
   197f4:	f003 fd4f 	bl	1d296 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   197f8:	68a3      	ldr	r3, [r4, #8]
   197fa:	2b00      	cmp	r3, #0
   197fc:	f000 808d 	beq.w	1991a <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   19800:	4d4d      	ldr	r5, [pc, #308]	; (19938 <z_impl_k_mutex_unlock+0x164>)
   19802:	68aa      	ldr	r2, [r5, #8]
   19804:	4293      	cmp	r3, r2
   19806:	f040 808b 	bne.w	19920 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1980a:	68e3      	ldr	r3, [r4, #12]
   1980c:	b94b      	cbnz	r3, 19822 <z_impl_k_mutex_unlock+0x4e>
   1980e:	494b      	ldr	r1, [pc, #300]	; (1993c <z_impl_k_mutex_unlock+0x168>)
   19810:	4847      	ldr	r0, [pc, #284]	; (19930 <z_impl_k_mutex_unlock+0x15c>)
   19812:	4a46      	ldr	r2, [pc, #280]	; (1992c <z_impl_k_mutex_unlock+0x158>)
   19814:	23df      	movs	r3, #223	; 0xdf
   19816:	f003 fae4 	bl	1cde2 <printk>
   1981a:	4844      	ldr	r0, [pc, #272]	; (1992c <z_impl_k_mutex_unlock+0x158>)
   1981c:	21df      	movs	r1, #223	; 0xdf
   1981e:	f003 fd3a 	bl	1d296 <assert_post_action>
   19822:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   19826:	b163      	cbz	r3, 19842 <z_impl_k_mutex_unlock+0x6e>
   19828:	493f      	ldr	r1, [pc, #252]	; (19928 <z_impl_k_mutex_unlock+0x154>)
   1982a:	4a45      	ldr	r2, [pc, #276]	; (19940 <z_impl_k_mutex_unlock+0x16c>)
   1982c:	4840      	ldr	r0, [pc, #256]	; (19930 <z_impl_k_mutex_unlock+0x15c>)
   1982e:	23fd      	movs	r3, #253	; 0xfd
   19830:	f003 fad7 	bl	1cde2 <printk>
   19834:	4843      	ldr	r0, [pc, #268]	; (19944 <z_impl_k_mutex_unlock+0x170>)
   19836:	f003 fad4 	bl	1cde2 <printk>
   1983a:	4841      	ldr	r0, [pc, #260]	; (19940 <z_impl_k_mutex_unlock+0x16c>)
   1983c:	21fd      	movs	r1, #253	; 0xfd
   1983e:	f003 fd2a 	bl	1d296 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   19842:	68ab      	ldr	r3, [r5, #8]
   19844:	7bdb      	ldrb	r3, [r3, #15]
   19846:	2b01      	cmp	r3, #1
   19848:	d10c      	bne.n	19864 <z_impl_k_mutex_unlock+0x90>
   1984a:	493f      	ldr	r1, [pc, #252]	; (19948 <z_impl_k_mutex_unlock+0x174>)
   1984c:	4a3c      	ldr	r2, [pc, #240]	; (19940 <z_impl_k_mutex_unlock+0x16c>)
   1984e:	4838      	ldr	r0, [pc, #224]	; (19930 <z_impl_k_mutex_unlock+0x15c>)
   19850:	23fe      	movs	r3, #254	; 0xfe
   19852:	f003 fac6 	bl	1cde2 <printk>
   19856:	483b      	ldr	r0, [pc, #236]	; (19944 <z_impl_k_mutex_unlock+0x170>)
   19858:	f003 fac3 	bl	1cde2 <printk>
   1985c:	4838      	ldr	r0, [pc, #224]	; (19940 <z_impl_k_mutex_unlock+0x16c>)
   1985e:	21fe      	movs	r1, #254	; 0xfe
   19860:	f003 fd19 	bl	1d296 <assert_post_action>

	--_current->base.sched_locked;
   19864:	68aa      	ldr	r2, [r5, #8]
   19866:	7bd3      	ldrb	r3, [r2, #15]
   19868:	3b01      	subs	r3, #1
   1986a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1986c:	68e3      	ldr	r3, [r4, #12]
   1986e:	2b01      	cmp	r3, #1
   19870:	d905      	bls.n	1987e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   19872:	3b01      	subs	r3, #1
   19874:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   19876:	f001 fe1f 	bl	1b4b8 <k_sched_unlock>

	return 0;
   1987a:	2000      	movs	r0, #0
}
   1987c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1987e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19882:	f3ef 8511 	mrs	r5, BASEPRI
   19886:	f383 8812 	msr	BASEPRI_MAX, r3
   1988a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1988e:	482f      	ldr	r0, [pc, #188]	; (1994c <z_impl_k_mutex_unlock+0x178>)
   19890:	f7ff fe4e 	bl	19530 <z_spin_lock_valid>
   19894:	b968      	cbnz	r0, 198b2 <z_impl_k_mutex_unlock+0xde>
   19896:	4a2e      	ldr	r2, [pc, #184]	; (19950 <z_impl_k_mutex_unlock+0x17c>)
   19898:	492e      	ldr	r1, [pc, #184]	; (19954 <z_impl_k_mutex_unlock+0x180>)
   1989a:	4825      	ldr	r0, [pc, #148]	; (19930 <z_impl_k_mutex_unlock+0x15c>)
   1989c:	2381      	movs	r3, #129	; 0x81
   1989e:	f003 faa0 	bl	1cde2 <printk>
   198a2:	492a      	ldr	r1, [pc, #168]	; (1994c <z_impl_k_mutex_unlock+0x178>)
   198a4:	482c      	ldr	r0, [pc, #176]	; (19958 <z_impl_k_mutex_unlock+0x184>)
   198a6:	f003 fa9c 	bl	1cde2 <printk>
   198aa:	4829      	ldr	r0, [pc, #164]	; (19950 <z_impl_k_mutex_unlock+0x17c>)
   198ac:	2181      	movs	r1, #129	; 0x81
   198ae:	f003 fcf2 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   198b2:	4826      	ldr	r0, [pc, #152]	; (1994c <z_impl_k_mutex_unlock+0x178>)
   198b4:	f7ff fe5a 	bl	1956c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   198b8:	68a0      	ldr	r0, [r4, #8]
   198ba:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   198bc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   198c0:	4299      	cmp	r1, r3
   198c2:	d001      	beq.n	198c8 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   198c4:	f001 fcf2 	bl	1b2ac <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   198c8:	4620      	mov	r0, r4
   198ca:	f001 febd 	bl	1b648 <z_unpend_first_thread>
	mutex->owner = new_owner;
   198ce:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   198d0:	b158      	cbz	r0, 198ea <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   198d2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   198d6:	6122      	str	r2, [r4, #16]
   198d8:	2200      	movs	r2, #0
   198da:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   198dc:	f001 fb04 	bl	1aee8 <z_ready_thread>
		z_reschedule(&lock, key);
   198e0:	481a      	ldr	r0, [pc, #104]	; (1994c <z_impl_k_mutex_unlock+0x178>)
   198e2:	4629      	mov	r1, r5
   198e4:	f001 f860 	bl	1a9a8 <z_reschedule>
   198e8:	e7c5      	b.n	19876 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   198ea:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   198ec:	4817      	ldr	r0, [pc, #92]	; (1994c <z_impl_k_mutex_unlock+0x178>)
   198ee:	f7ff fe2d 	bl	1954c <z_spin_unlock_valid>
   198f2:	b968      	cbnz	r0, 19910 <z_impl_k_mutex_unlock+0x13c>
   198f4:	4a16      	ldr	r2, [pc, #88]	; (19950 <z_impl_k_mutex_unlock+0x17c>)
   198f6:	4919      	ldr	r1, [pc, #100]	; (1995c <z_impl_k_mutex_unlock+0x188>)
   198f8:	480d      	ldr	r0, [pc, #52]	; (19930 <z_impl_k_mutex_unlock+0x15c>)
   198fa:	23ac      	movs	r3, #172	; 0xac
   198fc:	f003 fa71 	bl	1cde2 <printk>
   19900:	4912      	ldr	r1, [pc, #72]	; (1994c <z_impl_k_mutex_unlock+0x178>)
   19902:	4817      	ldr	r0, [pc, #92]	; (19960 <z_impl_k_mutex_unlock+0x18c>)
   19904:	f003 fa6d 	bl	1cde2 <printk>
   19908:	4811      	ldr	r0, [pc, #68]	; (19950 <z_impl_k_mutex_unlock+0x17c>)
   1990a:	21ac      	movs	r1, #172	; 0xac
   1990c:	f003 fcc3 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19910:	f385 8811 	msr	BASEPRI, r5
   19914:	f3bf 8f6f 	isb	sy
   19918:	e7ad      	b.n	19876 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   1991a:	f06f 0015 	mvn.w	r0, #21
   1991e:	e7ad      	b.n	1987c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   19920:	f04f 30ff 	mov.w	r0, #4294967295
   19924:	e7aa      	b.n	1987c <z_impl_k_mutex_unlock+0xa8>
   19926:	bf00      	nop
   19928:	000220dd 	.word	0x000220dd
   1992c:	0002218a 	.word	0x0002218a
   19930:	00020a75 	.word	0x00020a75
   19934:	000221ac 	.word	0x000221ac
   19938:	20001f54 	.word	0x20001f54
   1993c:	000221d1 	.word	0x000221d1
   19940:	000221e8 	.word	0x000221e8
   19944:	00021901 	.word	0x00021901
   19948:	00022213 	.word	0x00022213
   1994c:	20001f7c 	.word	0x20001f7c
   19950:	00020b35 	.word	0x00020b35
   19954:	00020b87 	.word	0x00020b87
   19958:	00020b9c 	.word	0x00020b9c
   1995c:	00020b5b 	.word	0x00020b5b
   19960:	00020b72 	.word	0x00020b72

00019964 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   19964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19968:	4604      	mov	r4, r0
   1996a:	f89d a020 	ldrb.w	sl, [sp, #32]
   1996e:	460e      	mov	r6, r1
   19970:	4690      	mov	r8, r2
   19972:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19974:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   19978:	f04f 0340 	mov.w	r3, #64	; 0x40
   1997c:	f3ef 8711 	mrs	r7, BASEPRI
   19980:	f383 8812 	msr	BASEPRI_MAX, r3
   19984:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19988:	4628      	mov	r0, r5
   1998a:	f7ff fdd1 	bl	19530 <z_spin_lock_valid>
   1998e:	b968      	cbnz	r0, 199ac <queue_insert+0x48>
   19990:	4a3b      	ldr	r2, [pc, #236]	; (19a80 <queue_insert+0x11c>)
   19992:	493c      	ldr	r1, [pc, #240]	; (19a84 <queue_insert+0x120>)
   19994:	483c      	ldr	r0, [pc, #240]	; (19a88 <queue_insert+0x124>)
   19996:	2381      	movs	r3, #129	; 0x81
   19998:	f003 fa23 	bl	1cde2 <printk>
   1999c:	483b      	ldr	r0, [pc, #236]	; (19a8c <queue_insert+0x128>)
   1999e:	4629      	mov	r1, r5
   199a0:	f003 fa1f 	bl	1cde2 <printk>
   199a4:	4836      	ldr	r0, [pc, #216]	; (19a80 <queue_insert+0x11c>)
   199a6:	2181      	movs	r1, #129	; 0x81
   199a8:	f003 fc75 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   199ac:	4628      	mov	r0, r5
   199ae:	f7ff fddd 	bl	1956c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   199b2:	f1ba 0f00 	cmp.w	sl, #0
   199b6:	d000      	beq.n	199ba <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   199b8:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   199ba:	f104 000c 	add.w	r0, r4, #12
   199be:	f001 fe43 	bl	1b648 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   199c2:	b158      	cbz	r0, 199dc <queue_insert+0x78>
   199c4:	2400      	movs	r4, #0
   199c6:	67c4      	str	r4, [r0, #124]	; 0x7c
   199c8:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   199cc:	f001 fa8c 	bl	1aee8 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   199d0:	4628      	mov	r0, r5
   199d2:	4639      	mov	r1, r7
   199d4:	f000 ffe8 	bl	1a9a8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   199d8:	2000      	movs	r0, #0
   199da:	e01e      	b.n	19a1a <queue_insert+0xb6>
	if (alloc) {
   199dc:	f1b9 0f00 	cmp.w	r9, #0
   199e0:	d02d      	beq.n	19a3e <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   199e2:	2108      	movs	r1, #8
   199e4:	f003 f98c 	bl	1cd00 <z_thread_aligned_alloc>
		if (anode == NULL) {
   199e8:	b9c8      	cbnz	r0, 19a1e <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   199ea:	4628      	mov	r0, r5
   199ec:	f7ff fdae 	bl	1954c <z_spin_unlock_valid>
   199f0:	b968      	cbnz	r0, 19a0e <queue_insert+0xaa>
   199f2:	4a23      	ldr	r2, [pc, #140]	; (19a80 <queue_insert+0x11c>)
   199f4:	4926      	ldr	r1, [pc, #152]	; (19a90 <queue_insert+0x12c>)
   199f6:	4824      	ldr	r0, [pc, #144]	; (19a88 <queue_insert+0x124>)
   199f8:	23ac      	movs	r3, #172	; 0xac
   199fa:	f003 f9f2 	bl	1cde2 <printk>
   199fe:	4825      	ldr	r0, [pc, #148]	; (19a94 <queue_insert+0x130>)
   19a00:	4629      	mov	r1, r5
   19a02:	f003 f9ee 	bl	1cde2 <printk>
   19a06:	481e      	ldr	r0, [pc, #120]	; (19a80 <queue_insert+0x11c>)
   19a08:	21ac      	movs	r1, #172	; 0xac
   19a0a:	f003 fc44 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19a0e:	f387 8811 	msr	BASEPRI, r7
   19a12:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   19a16:	f06f 000b 	mvn.w	r0, #11
}
   19a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   19a1e:	2301      	movs	r3, #1
		anode->data = data;
   19a20:	f8c0 8004 	str.w	r8, [r0, #4]
   19a24:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   19a26:	6803      	ldr	r3, [r0, #0]
   19a28:	f003 0303 	and.w	r3, r3, #3
   19a2c:	b95e      	cbnz	r6, 19a46 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   19a2e:	6822      	ldr	r2, [r4, #0]
   19a30:	4313      	orrs	r3, r2
   19a32:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19a34:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   19a36:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   19a38:	b973      	cbnz	r3, 19a58 <queue_insert+0xf4>
	list->tail = node;
   19a3a:	6060      	str	r0, [r4, #4]
}
   19a3c:	e00c      	b.n	19a58 <queue_insert+0xf4>
	node->next_and_flags = flags;
   19a3e:	f8c8 9000 	str.w	r9, [r8]
}
   19a42:	4640      	mov	r0, r8
   19a44:	e7ef      	b.n	19a26 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19a46:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   19a48:	f032 0203 	bics.w	r2, r2, #3
   19a4c:	d110      	bne.n	19a70 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   19a4e:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19a50:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   19a52:	b93a      	cbnz	r2, 19a64 <queue_insert+0x100>
	list->head = node;
   19a54:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   19a58:	2104      	movs	r1, #4
   19a5a:	f104 0014 	add.w	r0, r4, #20
   19a5e:	f006 fa90 	bl	1ff82 <z_handle_obj_poll_events>
   19a62:	e7b5      	b.n	199d0 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19a64:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19a66:	f003 0303 	and.w	r3, r3, #3
   19a6a:	4303      	orrs	r3, r0
   19a6c:	6013      	str	r3, [r2, #0]
   19a6e:	e7e4      	b.n	19a3a <queue_insert+0xd6>
   19a70:	4313      	orrs	r3, r2
   19a72:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19a74:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19a76:	f003 0303 	and.w	r3, r3, #3
   19a7a:	4303      	orrs	r3, r0
   19a7c:	6033      	str	r3, [r6, #0]
}
   19a7e:	e7eb      	b.n	19a58 <queue_insert+0xf4>
   19a80:	00020b35 	.word	0x00020b35
   19a84:	00020b87 	.word	0x00020b87
   19a88:	00020a75 	.word	0x00020a75
   19a8c:	00020b9c 	.word	0x00020b9c
   19a90:	00020b5b 	.word	0x00020b5b
   19a94:	00020b72 	.word	0x00020b72

00019a98 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   19a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a9c:	4605      	mov	r5, r0
   19a9e:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   19aa0:	460c      	mov	r4, r1
   19aa2:	2900      	cmp	r1, #0
   19aa4:	d04a      	beq.n	19b3c <k_queue_append_list+0xa4>
   19aa6:	2a00      	cmp	r2, #0
   19aa8:	d048      	beq.n	19b3c <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19aaa:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   19aae:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ab2:	f3ef 8911 	mrs	r9, BASEPRI
   19ab6:	f383 8812 	msr	BASEPRI_MAX, r3
   19aba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19abe:	4630      	mov	r0, r6
   19ac0:	f7ff fd36 	bl	19530 <z_spin_lock_valid>
   19ac4:	b968      	cbnz	r0, 19ae2 <k_queue_append_list+0x4a>
   19ac6:	4a1f      	ldr	r2, [pc, #124]	; (19b44 <k_queue_append_list+0xac>)
   19ac8:	491f      	ldr	r1, [pc, #124]	; (19b48 <k_queue_append_list+0xb0>)
   19aca:	4820      	ldr	r0, [pc, #128]	; (19b4c <k_queue_append_list+0xb4>)
   19acc:	2381      	movs	r3, #129	; 0x81
   19ace:	f003 f988 	bl	1cde2 <printk>
   19ad2:	481f      	ldr	r0, [pc, #124]	; (19b50 <k_queue_append_list+0xb8>)
   19ad4:	4631      	mov	r1, r6
   19ad6:	f003 f984 	bl	1cde2 <printk>
   19ada:	481a      	ldr	r0, [pc, #104]	; (19b44 <k_queue_append_list+0xac>)
   19adc:	2181      	movs	r1, #129	; 0x81
   19ade:	f003 fbda 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19ae2:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   19ae4:	f105 080c 	add.w	r8, r5, #12
   19ae8:	f7ff fd40 	bl	1956c <z_spin_lock_set_owner>
   19aec:	4640      	mov	r0, r8
   19aee:	f001 fdab 	bl	1b648 <z_unpend_first_thread>
   19af2:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   19af6:	b920      	cbnz	r0, 19b02 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   19af8:	686b      	ldr	r3, [r5, #4]
   19afa:	b9cb      	cbnz	r3, 19b30 <k_queue_append_list+0x98>
	list->head = node;
   19afc:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19afe:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   19b00:	e00a      	b.n	19b18 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   19b02:	6144      	str	r4, [r0, #20]
   19b04:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   19b08:	f001 f9ee 	bl	1aee8 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   19b0c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   19b0e:	4640      	mov	r0, r8
   19b10:	f001 fd9a 	bl	1b648 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   19b14:	2c00      	cmp	r4, #0
   19b16:	d1ee      	bne.n	19af6 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   19b18:	2104      	movs	r1, #4
   19b1a:	f105 0014 	add.w	r0, r5, #20
   19b1e:	f006 fa30 	bl	1ff82 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   19b22:	4630      	mov	r0, r6
   19b24:	4649      	mov	r1, r9
   19b26:	f000 ff3f 	bl	1a9a8 <z_reschedule>
	return 0;
   19b2a:	2000      	movs	r0, #0
}
   19b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   19b30:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   19b32:	f001 0103 	and.w	r1, r1, #3
   19b36:	430c      	orrs	r4, r1
   19b38:	601c      	str	r4, [r3, #0]
}
   19b3a:	e7e0      	b.n	19afe <k_queue_append_list+0x66>
		return -EINVAL;
   19b3c:	f06f 0015 	mvn.w	r0, #21
   19b40:	e7f4      	b.n	19b2c <k_queue_append_list+0x94>
   19b42:	bf00      	nop
   19b44:	00020b35 	.word	0x00020b35
   19b48:	00020b87 	.word	0x00020b87
   19b4c:	00020a75 	.word	0x00020a75
   19b50:	00020b9c 	.word	0x00020b9c

00019b54 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   19b54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19b58:	4606      	mov	r6, r0
   19b5a:	4690      	mov	r8, r2
   19b5c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   19b5e:	f100 0508 	add.w	r5, r0, #8
   19b62:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b66:	f3ef 8711 	mrs	r7, BASEPRI
   19b6a:	f383 8812 	msr	BASEPRI_MAX, r3
   19b6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b72:	4628      	mov	r0, r5
   19b74:	f7ff fcdc 	bl	19530 <z_spin_lock_valid>
   19b78:	b968      	cbnz	r0, 19b96 <z_impl_k_queue_get+0x42>
   19b7a:	4a25      	ldr	r2, [pc, #148]	; (19c10 <z_impl_k_queue_get+0xbc>)
   19b7c:	4925      	ldr	r1, [pc, #148]	; (19c14 <z_impl_k_queue_get+0xc0>)
   19b7e:	4826      	ldr	r0, [pc, #152]	; (19c18 <z_impl_k_queue_get+0xc4>)
   19b80:	2381      	movs	r3, #129	; 0x81
   19b82:	f003 f92e 	bl	1cde2 <printk>
   19b86:	4825      	ldr	r0, [pc, #148]	; (19c1c <z_impl_k_queue_get+0xc8>)
   19b88:	4629      	mov	r1, r5
   19b8a:	f003 f92a 	bl	1cde2 <printk>
   19b8e:	4820      	ldr	r0, [pc, #128]	; (19c10 <z_impl_k_queue_get+0xbc>)
   19b90:	2181      	movs	r1, #129	; 0x81
   19b92:	f003 fb80 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19b96:	4628      	mov	r0, r5
   19b98:	f7ff fce8 	bl	1956c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   19b9c:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   19b9e:	b334      	cbz	r4, 19bee <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19ba0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19ba2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   19ba4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   19ba8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   19baa:	4620      	mov	r0, r4
	list->head = node;
   19bac:	6033      	str	r3, [r6, #0]
	list->tail = node;
   19bae:	bf08      	it	eq
   19bb0:	6073      	streq	r3, [r6, #4]
   19bb2:	2101      	movs	r1, #1
   19bb4:	f006 f897 	bl	1fce6 <z_queue_node_peek>
   19bb8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19bba:	4628      	mov	r0, r5
   19bbc:	f7ff fcc6 	bl	1954c <z_spin_unlock_valid>
   19bc0:	b968      	cbnz	r0, 19bde <z_impl_k_queue_get+0x8a>
   19bc2:	4a13      	ldr	r2, [pc, #76]	; (19c10 <z_impl_k_queue_get+0xbc>)
   19bc4:	4916      	ldr	r1, [pc, #88]	; (19c20 <z_impl_k_queue_get+0xcc>)
   19bc6:	4814      	ldr	r0, [pc, #80]	; (19c18 <z_impl_k_queue_get+0xc4>)
   19bc8:	23ac      	movs	r3, #172	; 0xac
   19bca:	f003 f90a 	bl	1cde2 <printk>
   19bce:	4815      	ldr	r0, [pc, #84]	; (19c24 <z_impl_k_queue_get+0xd0>)
   19bd0:	4629      	mov	r1, r5
   19bd2:	f003 f906 	bl	1cde2 <printk>
   19bd6:	480e      	ldr	r0, [pc, #56]	; (19c10 <z_impl_k_queue_get+0xbc>)
   19bd8:	21ac      	movs	r1, #172	; 0xac
   19bda:	f003 fb5c 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19bde:	f387 8811 	msr	BASEPRI, r7
   19be2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   19be6:	4620      	mov	r0, r4
   19be8:	b003      	add	sp, #12
   19bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19bee:	ea58 0309 	orrs.w	r3, r8, r9
   19bf2:	d0e2      	beq.n	19bba <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   19bf4:	e9cd 8900 	strd	r8, r9, [sp]
   19bf8:	f106 020c 	add.w	r2, r6, #12
   19bfc:	4639      	mov	r1, r7
   19bfe:	4628      	mov	r0, r5
   19c00:	f001 fb24 	bl	1b24c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   19c04:	2800      	cmp	r0, #0
   19c06:	d1ee      	bne.n	19be6 <z_impl_k_queue_get+0x92>
   19c08:	4b07      	ldr	r3, [pc, #28]	; (19c28 <z_impl_k_queue_get+0xd4>)
   19c0a:	689b      	ldr	r3, [r3, #8]
   19c0c:	695c      	ldr	r4, [r3, #20]
   19c0e:	e7ea      	b.n	19be6 <z_impl_k_queue_get+0x92>
   19c10:	00020b35 	.word	0x00020b35
   19c14:	00020b87 	.word	0x00020b87
   19c18:	00020a75 	.word	0x00020a75
   19c1c:	00020b9c 	.word	0x00020b9c
   19c20:	00020b5b 	.word	0x00020b5b
   19c24:	00020b72 	.word	0x00020b72
   19c28:	20001f54 	.word	0x20001f54

00019c2c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19c2c:	b538      	push	{r3, r4, r5, lr}
   19c2e:	4604      	mov	r4, r0
	__asm__ volatile(
   19c30:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c34:	f3ef 8511 	mrs	r5, BASEPRI
   19c38:	f383 8812 	msr	BASEPRI_MAX, r3
   19c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c40:	4817      	ldr	r0, [pc, #92]	; (19ca0 <z_impl_k_sem_give+0x74>)
   19c42:	f7ff fc75 	bl	19530 <z_spin_lock_valid>
   19c46:	b968      	cbnz	r0, 19c64 <z_impl_k_sem_give+0x38>
   19c48:	4a16      	ldr	r2, [pc, #88]	; (19ca4 <z_impl_k_sem_give+0x78>)
   19c4a:	4917      	ldr	r1, [pc, #92]	; (19ca8 <z_impl_k_sem_give+0x7c>)
   19c4c:	4817      	ldr	r0, [pc, #92]	; (19cac <z_impl_k_sem_give+0x80>)
   19c4e:	2381      	movs	r3, #129	; 0x81
   19c50:	f003 f8c7 	bl	1cde2 <printk>
   19c54:	4912      	ldr	r1, [pc, #72]	; (19ca0 <z_impl_k_sem_give+0x74>)
   19c56:	4816      	ldr	r0, [pc, #88]	; (19cb0 <z_impl_k_sem_give+0x84>)
   19c58:	f003 f8c3 	bl	1cde2 <printk>
   19c5c:	4811      	ldr	r0, [pc, #68]	; (19ca4 <z_impl_k_sem_give+0x78>)
   19c5e:	2181      	movs	r1, #129	; 0x81
   19c60:	f003 fb19 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19c64:	480e      	ldr	r0, [pc, #56]	; (19ca0 <z_impl_k_sem_give+0x74>)
   19c66:	f7ff fc81 	bl	1956c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   19c6a:	4620      	mov	r0, r4
   19c6c:	f001 fcec 	bl	1b648 <z_unpend_first_thread>

	if (thread != NULL) {
   19c70:	b148      	cbz	r0, 19c86 <z_impl_k_sem_give+0x5a>
   19c72:	2200      	movs	r2, #0
   19c74:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   19c76:	f001 f937 	bl	1aee8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19c7a:	4629      	mov	r1, r5
   19c7c:	4808      	ldr	r0, [pc, #32]	; (19ca0 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   19c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   19c82:	f000 be91 	b.w	1a9a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19c86:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   19c8a:	429a      	cmp	r2, r3
   19c8c:	bf18      	it	ne
   19c8e:	3301      	addne	r3, #1
   19c90:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19c92:	2102      	movs	r1, #2
   19c94:	f104 0010 	add.w	r0, r4, #16
   19c98:	f006 f973 	bl	1ff82 <z_handle_obj_poll_events>
}
   19c9c:	e7ed      	b.n	19c7a <z_impl_k_sem_give+0x4e>
   19c9e:	bf00      	nop
   19ca0:	20001f80 	.word	0x20001f80
   19ca4:	00020b35 	.word	0x00020b35
   19ca8:	00020b87 	.word	0x00020b87
   19cac:	00020a75 	.word	0x00020a75
   19cb0:	00020b9c 	.word	0x00020b9c

00019cb4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   19cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19cb6:	4604      	mov	r4, r0
   19cb8:	4616      	mov	r6, r2
   19cba:	461f      	mov	r7, r3
   19cbc:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   19cc0:	b17b      	cbz	r3, 19ce2 <z_impl_k_sem_take+0x2e>
   19cc2:	ea56 0307 	orrs.w	r3, r6, r7
   19cc6:	d00c      	beq.n	19ce2 <z_impl_k_sem_take+0x2e>
   19cc8:	4935      	ldr	r1, [pc, #212]	; (19da0 <z_impl_k_sem_take+0xec>)
   19cca:	4a36      	ldr	r2, [pc, #216]	; (19da4 <z_impl_k_sem_take+0xf0>)
   19ccc:	4836      	ldr	r0, [pc, #216]	; (19da8 <z_impl_k_sem_take+0xf4>)
   19cce:	2379      	movs	r3, #121	; 0x79
   19cd0:	f003 f887 	bl	1cde2 <printk>
   19cd4:	4835      	ldr	r0, [pc, #212]	; (19dac <z_impl_k_sem_take+0xf8>)
   19cd6:	f003 f884 	bl	1cde2 <printk>
   19cda:	4832      	ldr	r0, [pc, #200]	; (19da4 <z_impl_k_sem_take+0xf0>)
   19cdc:	2179      	movs	r1, #121	; 0x79
   19cde:	f003 fada 	bl	1d296 <assert_post_action>
   19ce2:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ce6:	f3ef 8511 	mrs	r5, BASEPRI
   19cea:	f383 8812 	msr	BASEPRI_MAX, r3
   19cee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19cf2:	482f      	ldr	r0, [pc, #188]	; (19db0 <z_impl_k_sem_take+0xfc>)
   19cf4:	f7ff fc1c 	bl	19530 <z_spin_lock_valid>
   19cf8:	b968      	cbnz	r0, 19d16 <z_impl_k_sem_take+0x62>
   19cfa:	4a2e      	ldr	r2, [pc, #184]	; (19db4 <z_impl_k_sem_take+0x100>)
   19cfc:	492e      	ldr	r1, [pc, #184]	; (19db8 <z_impl_k_sem_take+0x104>)
   19cfe:	482a      	ldr	r0, [pc, #168]	; (19da8 <z_impl_k_sem_take+0xf4>)
   19d00:	2381      	movs	r3, #129	; 0x81
   19d02:	f003 f86e 	bl	1cde2 <printk>
   19d06:	492a      	ldr	r1, [pc, #168]	; (19db0 <z_impl_k_sem_take+0xfc>)
   19d08:	482c      	ldr	r0, [pc, #176]	; (19dbc <z_impl_k_sem_take+0x108>)
   19d0a:	f003 f86a 	bl	1cde2 <printk>
   19d0e:	4829      	ldr	r0, [pc, #164]	; (19db4 <z_impl_k_sem_take+0x100>)
   19d10:	2181      	movs	r1, #129	; 0x81
   19d12:	f003 fac0 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19d16:	4826      	ldr	r0, [pc, #152]	; (19db0 <z_impl_k_sem_take+0xfc>)
   19d18:	f7ff fc28 	bl	1956c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   19d1c:	68a3      	ldr	r3, [r4, #8]
   19d1e:	b1d3      	cbz	r3, 19d56 <z_impl_k_sem_take+0xa2>
		sem->count--;
   19d20:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d22:	4823      	ldr	r0, [pc, #140]	; (19db0 <z_impl_k_sem_take+0xfc>)
   19d24:	60a3      	str	r3, [r4, #8]
   19d26:	f7ff fc11 	bl	1954c <z_spin_unlock_valid>
   19d2a:	b968      	cbnz	r0, 19d48 <z_impl_k_sem_take+0x94>
   19d2c:	4a21      	ldr	r2, [pc, #132]	; (19db4 <z_impl_k_sem_take+0x100>)
   19d2e:	4924      	ldr	r1, [pc, #144]	; (19dc0 <z_impl_k_sem_take+0x10c>)
   19d30:	481d      	ldr	r0, [pc, #116]	; (19da8 <z_impl_k_sem_take+0xf4>)
   19d32:	23ac      	movs	r3, #172	; 0xac
   19d34:	f003 f855 	bl	1cde2 <printk>
   19d38:	491d      	ldr	r1, [pc, #116]	; (19db0 <z_impl_k_sem_take+0xfc>)
   19d3a:	4822      	ldr	r0, [pc, #136]	; (19dc4 <z_impl_k_sem_take+0x110>)
   19d3c:	f003 f851 	bl	1cde2 <printk>
   19d40:	481c      	ldr	r0, [pc, #112]	; (19db4 <z_impl_k_sem_take+0x100>)
   19d42:	21ac      	movs	r1, #172	; 0xac
   19d44:	f003 faa7 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19d48:	f385 8811 	msr	BASEPRI, r5
   19d4c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   19d50:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   19d52:	b003      	add	sp, #12
   19d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19d56:	ea56 0307 	orrs.w	r3, r6, r7
   19d5a:	d118      	bne.n	19d8e <z_impl_k_sem_take+0xda>
   19d5c:	4814      	ldr	r0, [pc, #80]	; (19db0 <z_impl_k_sem_take+0xfc>)
   19d5e:	f7ff fbf5 	bl	1954c <z_spin_unlock_valid>
   19d62:	b968      	cbnz	r0, 19d80 <z_impl_k_sem_take+0xcc>
   19d64:	4a13      	ldr	r2, [pc, #76]	; (19db4 <z_impl_k_sem_take+0x100>)
   19d66:	4916      	ldr	r1, [pc, #88]	; (19dc0 <z_impl_k_sem_take+0x10c>)
   19d68:	480f      	ldr	r0, [pc, #60]	; (19da8 <z_impl_k_sem_take+0xf4>)
   19d6a:	23ac      	movs	r3, #172	; 0xac
   19d6c:	f003 f839 	bl	1cde2 <printk>
   19d70:	490f      	ldr	r1, [pc, #60]	; (19db0 <z_impl_k_sem_take+0xfc>)
   19d72:	4814      	ldr	r0, [pc, #80]	; (19dc4 <z_impl_k_sem_take+0x110>)
   19d74:	f003 f835 	bl	1cde2 <printk>
   19d78:	480e      	ldr	r0, [pc, #56]	; (19db4 <z_impl_k_sem_take+0x100>)
   19d7a:	21ac      	movs	r1, #172	; 0xac
   19d7c:	f003 fa8b 	bl	1d296 <assert_post_action>
   19d80:	f385 8811 	msr	BASEPRI, r5
   19d84:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   19d88:	f06f 000f 	mvn.w	r0, #15
   19d8c:	e7e1      	b.n	19d52 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   19d8e:	e9cd 6700 	strd	r6, r7, [sp]
   19d92:	4622      	mov	r2, r4
   19d94:	4629      	mov	r1, r5
   19d96:	4806      	ldr	r0, [pc, #24]	; (19db0 <z_impl_k_sem_take+0xfc>)
   19d98:	f001 fa58 	bl	1b24c <z_pend_curr>
	return ret;
   19d9c:	e7d9      	b.n	19d52 <z_impl_k_sem_take+0x9e>
   19d9e:	bf00      	nop
   19da0:	00022264 	.word	0x00022264
   19da4:	00022244 	.word	0x00022244
   19da8:	00020a75 	.word	0x00020a75
   19dac:	00021901 	.word	0x00021901
   19db0:	20001f80 	.word	0x20001f80
   19db4:	00020b35 	.word	0x00020b35
   19db8:	00020b87 	.word	0x00020b87
   19dbc:	00020b9c 	.word	0x00020b9c
   19dc0:	00020b5b 	.word	0x00020b5b
   19dc4:	00020b72 	.word	0x00020b72

00019dc8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   19dca:	4b09      	ldr	r3, [pc, #36]	; (19df0 <k_sys_work_q_init+0x28>)
   19dcc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   19dce:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   19dd0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   19dd2:	9300      	str	r3, [sp, #0]
   19dd4:	4907      	ldr	r1, [pc, #28]	; (19df4 <k_sys_work_q_init+0x2c>)
   19dd6:	4808      	ldr	r0, [pc, #32]	; (19df8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   19dd8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   19ddc:	f04f 33ff 	mov.w	r3, #4294967295
   19de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19de4:	f000 fa88 	bl	1a2f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   19de8:	4620      	mov	r0, r4
   19dea:	b004      	add	sp, #16
   19dec:	bd10      	pop	{r4, pc}
   19dee:	bf00      	nop
   19df0:	000222b1 	.word	0x000222b1
   19df4:	20004960 	.word	0x20004960
   19df8:	20001b58 	.word	0x20001b58

00019dfc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   19dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e00:	4e7e      	ldr	r6, [pc, #504]	; (19ffc <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19e02:	4f7f      	ldr	r7, [pc, #508]	; (1a000 <work_queue_main+0x204>)
{
   19e04:	b085      	sub	sp, #20
   19e06:	4604      	mov	r4, r0
	__asm__ volatile(
   19e08:	f04f 0340 	mov.w	r3, #64	; 0x40
   19e0c:	f3ef 8811 	mrs	r8, BASEPRI
   19e10:	f383 8812 	msr	BASEPRI_MAX, r3
   19e14:	f3bf 8f6f 	isb	sy
   19e18:	4630      	mov	r0, r6
   19e1a:	f7ff fb89 	bl	19530 <z_spin_lock_valid>
   19e1e:	b968      	cbnz	r0, 19e3c <work_queue_main+0x40>
   19e20:	4a78      	ldr	r2, [pc, #480]	; (1a004 <work_queue_main+0x208>)
   19e22:	4979      	ldr	r1, [pc, #484]	; (1a008 <work_queue_main+0x20c>)
   19e24:	4879      	ldr	r0, [pc, #484]	; (1a00c <work_queue_main+0x210>)
   19e26:	2381      	movs	r3, #129	; 0x81
   19e28:	f002 ffdb 	bl	1cde2 <printk>
   19e2c:	4878      	ldr	r0, [pc, #480]	; (1a010 <work_queue_main+0x214>)
   19e2e:	4631      	mov	r1, r6
   19e30:	f002 ffd7 	bl	1cde2 <printk>
   19e34:	4873      	ldr	r0, [pc, #460]	; (1a004 <work_queue_main+0x208>)
   19e36:	2181      	movs	r1, #129	; 0x81
   19e38:	f003 fa2d 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19e3c:	4630      	mov	r0, r6
   19e3e:	f7ff fb95 	bl	1956c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   19e42:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   19e46:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   19e4a:	b9ad      	cbnz	r5, 19e78 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   19e4c:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   19e50:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   19e52:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   19e56:	f100 8092 	bmi.w	19f7e <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   19e5a:	2300      	movs	r3, #0
   19e5c:	9302      	str	r3, [sp, #8]
   19e5e:	f04f 32ff 	mov.w	r2, #4294967295
   19e62:	f04f 33ff 	mov.w	r3, #4294967295
   19e66:	e9cd 2300 	strd	r2, r3, [sp]
   19e6a:	4641      	mov	r1, r8
   19e6c:	f104 0288 	add.w	r2, r4, #136	; 0x88
   19e70:	4630      	mov	r0, r6
   19e72:	f001 fef1 	bl	1bc58 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   19e76:	e7c7      	b.n	19e08 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19e78:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   19e7c:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   19e7e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19e82:	428d      	cmp	r5, r1
   19e84:	d101      	bne.n	19e8a <work_queue_main+0x8e>
	list->tail = node;
   19e86:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   19e8a:	f043 0302 	orr.w	r3, r3, #2
   19e8e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   19e92:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   19e94:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   19e98:	f023 0304 	bic.w	r3, r3, #4
   19e9c:	f043 0301 	orr.w	r3, r3, #1
   19ea0:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ea2:	4630      	mov	r0, r6
   19ea4:	f7ff fb52 	bl	1954c <z_spin_unlock_valid>
   19ea8:	b968      	cbnz	r0, 19ec6 <work_queue_main+0xca>
   19eaa:	4a56      	ldr	r2, [pc, #344]	; (1a004 <work_queue_main+0x208>)
   19eac:	4959      	ldr	r1, [pc, #356]	; (1a014 <work_queue_main+0x218>)
   19eae:	4857      	ldr	r0, [pc, #348]	; (1a00c <work_queue_main+0x210>)
   19eb0:	23ac      	movs	r3, #172	; 0xac
   19eb2:	f002 ff96 	bl	1cde2 <printk>
   19eb6:	4858      	ldr	r0, [pc, #352]	; (1a018 <work_queue_main+0x21c>)
   19eb8:	4631      	mov	r1, r6
   19eba:	f002 ff92 	bl	1cde2 <printk>
   19ebe:	4851      	ldr	r0, [pc, #324]	; (1a004 <work_queue_main+0x208>)
   19ec0:	21ac      	movs	r1, #172	; 0xac
   19ec2:	f003 f9e8 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19ec6:	f388 8811 	msr	BASEPRI, r8
   19eca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   19ece:	f1b9 0f00 	cmp.w	r9, #0
   19ed2:	d10b      	bne.n	19eec <work_queue_main+0xf0>
   19ed4:	4951      	ldr	r1, [pc, #324]	; (1a01c <work_queue_main+0x220>)
   19ed6:	484d      	ldr	r0, [pc, #308]	; (1a00c <work_queue_main+0x210>)
   19ed8:	4a51      	ldr	r2, [pc, #324]	; (1a020 <work_queue_main+0x224>)
   19eda:	f240 238a 	movw	r3, #650	; 0x28a
   19ede:	f002 ff80 	bl	1cde2 <printk>
   19ee2:	484f      	ldr	r0, [pc, #316]	; (1a020 <work_queue_main+0x224>)
   19ee4:	f240 218a 	movw	r1, #650	; 0x28a
   19ee8:	f003 f9d5 	bl	1d296 <assert_post_action>
			handler(work);
   19eec:	4628      	mov	r0, r5
   19eee:	47c8      	blx	r9
	__asm__ volatile(
   19ef0:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ef4:	f3ef 8a11 	mrs	sl, BASEPRI
   19ef8:	f383 8812 	msr	BASEPRI_MAX, r3
   19efc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f00:	4630      	mov	r0, r6
   19f02:	f7ff fb15 	bl	19530 <z_spin_lock_valid>
   19f06:	b968      	cbnz	r0, 19f24 <work_queue_main+0x128>
   19f08:	4a3e      	ldr	r2, [pc, #248]	; (1a004 <work_queue_main+0x208>)
   19f0a:	493f      	ldr	r1, [pc, #252]	; (1a008 <work_queue_main+0x20c>)
   19f0c:	483f      	ldr	r0, [pc, #252]	; (1a00c <work_queue_main+0x210>)
   19f0e:	2381      	movs	r3, #129	; 0x81
   19f10:	f002 ff67 	bl	1cde2 <printk>
   19f14:	483e      	ldr	r0, [pc, #248]	; (1a010 <work_queue_main+0x214>)
   19f16:	4631      	mov	r1, r6
   19f18:	f002 ff63 	bl	1cde2 <printk>
   19f1c:	4839      	ldr	r0, [pc, #228]	; (1a004 <work_queue_main+0x208>)
   19f1e:	2181      	movs	r1, #129	; 0x81
   19f20:	f003 f9b9 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   19f24:	4630      	mov	r0, r6
   19f26:	f7ff fb21 	bl	1956c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   19f2a:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19f2c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   19f2e:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   19f32:	d42e      	bmi.n	19f92 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   19f34:	60ea      	str	r2, [r5, #12]
   19f36:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   19f3a:	f023 0302 	bic.w	r3, r3, #2
   19f3e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f42:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   19f44:	f3c3 2500 	ubfx	r5, r3, #8, #1
   19f48:	f7ff fb00 	bl	1954c <z_spin_unlock_valid>
   19f4c:	b968      	cbnz	r0, 19f6a <work_queue_main+0x16e>
   19f4e:	4a2d      	ldr	r2, [pc, #180]	; (1a004 <work_queue_main+0x208>)
   19f50:	4930      	ldr	r1, [pc, #192]	; (1a014 <work_queue_main+0x218>)
   19f52:	482e      	ldr	r0, [pc, #184]	; (1a00c <work_queue_main+0x210>)
   19f54:	23ac      	movs	r3, #172	; 0xac
   19f56:	f002 ff44 	bl	1cde2 <printk>
   19f5a:	482f      	ldr	r0, [pc, #188]	; (1a018 <work_queue_main+0x21c>)
   19f5c:	4631      	mov	r1, r6
   19f5e:	f002 ff40 	bl	1cde2 <printk>
   19f62:	4828      	ldr	r0, [pc, #160]	; (1a004 <work_queue_main+0x208>)
   19f64:	21ac      	movs	r1, #172	; 0xac
   19f66:	f003 f996 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   19f6a:	f38a 8811 	msr	BASEPRI, sl
   19f6e:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   19f72:	2d00      	cmp	r5, #0
   19f74:	f47f af48 	bne.w	19e08 <work_queue_main+0xc>
	z_impl_k_yield();
   19f78:	f001 fbc2 	bl	1b700 <z_impl_k_yield>
}
   19f7c:	e744      	b.n	19e08 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   19f7e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   19f82:	2200      	movs	r2, #0
   19f84:	2101      	movs	r1, #1
   19f86:	4628      	mov	r0, r5
   19f88:	f001 fe0e 	bl	1bba8 <z_sched_wake>
   19f8c:	2800      	cmp	r0, #0
   19f8e:	d1f8      	bne.n	19f82 <work_queue_main+0x186>
   19f90:	e763      	b.n	19e5a <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19f92:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   19f94:	f023 0303 	bic.w	r3, r3, #3
   19f98:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19f9a:	2800      	cmp	r0, #0
   19f9c:	d0cb      	beq.n	19f36 <work_queue_main+0x13a>
	return node->next;
   19f9e:	6803      	ldr	r3, [r0, #0]
   19fa0:	2b00      	cmp	r3, #0
   19fa2:	bf38      	it	cc
   19fa4:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19fa6:	f04f 0900 	mov.w	r9, #0
   19faa:	4698      	mov	r8, r3
	parent->next = child;
   19fac:	46cb      	mov	fp, r9
		if (wc->work == work) {
   19fae:	6843      	ldr	r3, [r0, #4]
   19fb0:	429d      	cmp	r5, r3
   19fb2:	4602      	mov	r2, r0
   19fb4:	d10d      	bne.n	19fd2 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   19fb6:	6802      	ldr	r2, [r0, #0]
   19fb8:	f1b9 0f00 	cmp.w	r9, #0
   19fbc:	d115      	bne.n	19fea <work_queue_main+0x1ee>
   19fbe:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   19fc0:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   19fc2:	4283      	cmp	r3, r0
   19fc4:	d100      	bne.n	19fc8 <work_queue_main+0x1cc>
	list->tail = node;
   19fc6:	607a      	str	r2, [r7, #4]
	parent->next = child;
   19fc8:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   19fcc:	f7ff fe2e 	bl	19c2c <z_impl_k_sem_give>
}
   19fd0:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   19fd2:	f1b8 0f00 	cmp.w	r8, #0
   19fd6:	d0ae      	beq.n	19f36 <work_queue_main+0x13a>
	return node->next;
   19fd8:	f8d8 3000 	ldr.w	r3, [r8]
   19fdc:	2b00      	cmp	r3, #0
   19fde:	bf38      	it	cc
   19fe0:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19fe2:	4640      	mov	r0, r8
   19fe4:	4691      	mov	r9, r2
   19fe6:	4698      	mov	r8, r3
   19fe8:	e7e1      	b.n	19fae <work_queue_main+0x1b2>
	parent->next = child;
   19fea:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   19fee:	687b      	ldr	r3, [r7, #4]
   19ff0:	4283      	cmp	r3, r0
	list->tail = node;
   19ff2:	bf08      	it	eq
   19ff4:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   19ff8:	e7e6      	b.n	19fc8 <work_queue_main+0x1cc>
   19ffa:	bf00      	nop
   19ffc:	20001f84 	.word	0x20001f84
   1a000:	20001f88 	.word	0x20001f88
   1a004:	00020b35 	.word	0x00020b35
   1a008:	00020b87 	.word	0x00020b87
   1a00c:	00020a75 	.word	0x00020a75
   1a010:	00020b9c 	.word	0x00020b9c
   1a014:	00020b5b 	.word	0x00020b5b
   1a018:	00020b72 	.word	0x00020b72
   1a01c:	000222db 	.word	0x000222db
   1a020:	000222ba 	.word	0x000222ba

0001a024 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1a024:	68c3      	ldr	r3, [r0, #12]
{
   1a026:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a028:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1a02c:	079b      	lsls	r3, r3, #30
{
   1a02e:	4605      	mov	r5, r0
   1a030:	460c      	mov	r4, r1
	if (ret) {
   1a032:	d50d      	bpl.n	1a050 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a034:	2201      	movs	r2, #1
   1a036:	2100      	movs	r1, #0
   1a038:	f104 0008 	add.w	r0, r4, #8
   1a03c:	f005 fe81 	bl	1fd42 <z_impl_k_sem_init>
	parent->next = child;
   1a040:	2300      	movs	r3, #0
   1a042:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1a044:	4b05      	ldr	r3, [pc, #20]	; (1a05c <cancel_sync_locked+0x38>)
	canceler->work = work;
   1a046:	6065      	str	r5, [r4, #4]
   1a048:	685a      	ldr	r2, [r3, #4]
   1a04a:	b91a      	cbnz	r2, 1a054 <cancel_sync_locked+0x30>
	list->head = node;
   1a04c:	e9c3 4400 	strd	r4, r4, [r3]
}
   1a050:	4630      	mov	r0, r6
   1a052:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1a054:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1a056:	605c      	str	r4, [r3, #4]
}
   1a058:	e7fa      	b.n	1a050 <cancel_sync_locked+0x2c>
   1a05a:	bf00      	nop
   1a05c:	20001f88 	.word	0x20001f88

0001a060 <submit_to_queue_locked>:
{
   1a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a062:	68c3      	ldr	r3, [r0, #12]
   1a064:	079a      	lsls	r2, r3, #30
{
   1a066:	4604      	mov	r4, r0
   1a068:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a06a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1a06e:	d42b      	bmi.n	1a0c8 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1a070:	075f      	lsls	r7, r3, #29
   1a072:	d42b      	bmi.n	1a0cc <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   1a074:	680a      	ldr	r2, [r1, #0]
   1a076:	b90a      	cbnz	r2, 1a07c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1a078:	6882      	ldr	r2, [r0, #8]
   1a07a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1a07c:	07d8      	lsls	r0, r3, #31
   1a07e:	d528      	bpl.n	1a0d2 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   1a080:	68a3      	ldr	r3, [r4, #8]
   1a082:	b95b      	cbnz	r3, 1a09c <submit_to_queue_locked+0x3c>
   1a084:	4924      	ldr	r1, [pc, #144]	; (1a118 <submit_to_queue_locked+0xb8>)
   1a086:	4825      	ldr	r0, [pc, #148]	; (1a11c <submit_to_queue_locked+0xbc>)
   1a088:	4a25      	ldr	r2, [pc, #148]	; (1a120 <submit_to_queue_locked+0xc0>)
   1a08a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1a08e:	f002 fea8 	bl	1cde2 <printk>
   1a092:	4823      	ldr	r0, [pc, #140]	; (1a120 <submit_to_queue_locked+0xc0>)
   1a094:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1a098:	f003 f8fd 	bl	1d296 <assert_post_action>
			*queuep = work->queue;
   1a09c:	68a3      	ldr	r3, [r4, #8]
   1a09e:	6033      	str	r3, [r6, #0]
			ret = 2;
   1a0a0:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   1a0a2:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   1a0a4:	b38f      	cbz	r7, 1a10a <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a0a6:	4b1f      	ldr	r3, [pc, #124]	; (1a124 <submit_to_queue_locked+0xc4>)
   1a0a8:	689b      	ldr	r3, [r3, #8]
   1a0aa:	42bb      	cmp	r3, r7
   1a0ac:	d113      	bne.n	1a0d6 <submit_to_queue_locked+0x76>
   1a0ae:	f005 fe08 	bl	1fcc2 <k_is_in_isr>
   1a0b2:	f080 0001 	eor.w	r0, r0, #1
   1a0b6:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1a0b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a0bc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1a0be:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a0c2:	d525      	bpl.n	1a110 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   1a0c4:	b14a      	cbz	r2, 1a0da <submit_to_queue_locked+0x7a>
   1a0c6:	b950      	cbnz	r0, 1a0de <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   1a0c8:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1a0cc:	2300      	movs	r3, #0
   1a0ce:	6033      	str	r3, [r6, #0]
	return ret;
   1a0d0:	e015      	b.n	1a0fe <submit_to_queue_locked+0x9e>
		ret = 1;
   1a0d2:	2501      	movs	r5, #1
   1a0d4:	e7e5      	b.n	1a0a2 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a0d6:	2000      	movs	r0, #0
   1a0d8:	e7ee      	b.n	1a0b8 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   1a0da:	071b      	lsls	r3, r3, #28
   1a0dc:	d4f4      	bmi.n	1a0c8 <submit_to_queue_locked+0x68>
	parent->next = child;
   1a0de:	2300      	movs	r3, #0
   1a0e0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1a0e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1a0e6:	b963      	cbnz	r3, 1a102 <submit_to_queue_locked+0xa2>
	list->head = node;
   1a0e8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1a0ec:	4638      	mov	r0, r7
   1a0ee:	f005 fe38 	bl	1fd62 <notify_queue_locked>
	*flagp |= BIT(bit);
   1a0f2:	68e3      	ldr	r3, [r4, #12]
   1a0f4:	f043 0304 	orr.w	r3, r3, #4
   1a0f8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1a0fa:	6833      	ldr	r3, [r6, #0]
   1a0fc:	60a3      	str	r3, [r4, #8]
}
   1a0fe:	4628      	mov	r0, r5
   1a100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1a102:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a104:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1a108:	e7f0      	b.n	1a0ec <submit_to_queue_locked+0x8c>
		return -EINVAL;
   1a10a:	f06f 0515 	mvn.w	r5, #21
   1a10e:	e7dd      	b.n	1a0cc <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   1a110:	f06f 0512 	mvn.w	r5, #18
   1a114:	e7da      	b.n	1a0cc <submit_to_queue_locked+0x6c>
   1a116:	bf00      	nop
   1a118:	000222f2 	.word	0x000222f2
   1a11c:	00020a75 	.word	0x00020a75
   1a120:	000222ba 	.word	0x000222ba
   1a124:	20001f54 	.word	0x20001f54

0001a128 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   1a128:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a12a:	4604      	mov	r4, r0
	__asm__ volatile(
   1a12c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a130:	f3ef 8511 	mrs	r5, BASEPRI
   1a134:	f383 8812 	msr	BASEPRI_MAX, r3
   1a138:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a13c:	481e      	ldr	r0, [pc, #120]	; (1a1b8 <work_timeout+0x90>)
   1a13e:	f7ff f9f7 	bl	19530 <z_spin_lock_valid>
   1a142:	b968      	cbnz	r0, 1a160 <work_timeout+0x38>
   1a144:	4a1d      	ldr	r2, [pc, #116]	; (1a1bc <work_timeout+0x94>)
   1a146:	491e      	ldr	r1, [pc, #120]	; (1a1c0 <work_timeout+0x98>)
   1a148:	481e      	ldr	r0, [pc, #120]	; (1a1c4 <work_timeout+0x9c>)
   1a14a:	2381      	movs	r3, #129	; 0x81
   1a14c:	f002 fe49 	bl	1cde2 <printk>
   1a150:	4919      	ldr	r1, [pc, #100]	; (1a1b8 <work_timeout+0x90>)
   1a152:	481d      	ldr	r0, [pc, #116]	; (1a1c8 <work_timeout+0xa0>)
   1a154:	f002 fe45 	bl	1cde2 <printk>
   1a158:	4818      	ldr	r0, [pc, #96]	; (1a1bc <work_timeout+0x94>)
   1a15a:	2181      	movs	r1, #129	; 0x81
   1a15c:	f003 f89b 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a160:	4815      	ldr	r0, [pc, #84]	; (1a1b8 <work_timeout+0x90>)
   1a162:	f7ff fa03 	bl	1956c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   1a166:	2300      	movs	r3, #0
   1a168:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   1a16a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   1a16e:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a172:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1a174:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a178:	d506      	bpl.n	1a188 <work_timeout+0x60>
		queue = dw->queue;
   1a17a:	69a3      	ldr	r3, [r4, #24]
   1a17c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1a17e:	a901      	add	r1, sp, #4
   1a180:	f1a4 0010 	sub.w	r0, r4, #16
   1a184:	f7ff ff6c 	bl	1a060 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a188:	480b      	ldr	r0, [pc, #44]	; (1a1b8 <work_timeout+0x90>)
   1a18a:	f7ff f9df 	bl	1954c <z_spin_unlock_valid>
   1a18e:	b968      	cbnz	r0, 1a1ac <work_timeout+0x84>
   1a190:	4a0a      	ldr	r2, [pc, #40]	; (1a1bc <work_timeout+0x94>)
   1a192:	490e      	ldr	r1, [pc, #56]	; (1a1cc <work_timeout+0xa4>)
   1a194:	480b      	ldr	r0, [pc, #44]	; (1a1c4 <work_timeout+0x9c>)
   1a196:	23ac      	movs	r3, #172	; 0xac
   1a198:	f002 fe23 	bl	1cde2 <printk>
   1a19c:	4906      	ldr	r1, [pc, #24]	; (1a1b8 <work_timeout+0x90>)
   1a19e:	480c      	ldr	r0, [pc, #48]	; (1a1d0 <work_timeout+0xa8>)
   1a1a0:	f002 fe1f 	bl	1cde2 <printk>
   1a1a4:	4805      	ldr	r0, [pc, #20]	; (1a1bc <work_timeout+0x94>)
   1a1a6:	21ac      	movs	r1, #172	; 0xac
   1a1a8:	f003 f875 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a1ac:	f385 8811 	msr	BASEPRI, r5
   1a1b0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   1a1b4:	b003      	add	sp, #12
   1a1b6:	bd30      	pop	{r4, r5, pc}
   1a1b8:	20001f84 	.word	0x20001f84
   1a1bc:	00020b35 	.word	0x00020b35
   1a1c0:	00020b87 	.word	0x00020b87
   1a1c4:	00020a75 	.word	0x00020a75
   1a1c8:	00020b9c 	.word	0x00020b9c
   1a1cc:	00020b5b 	.word	0x00020b5b
   1a1d0:	00020b72 	.word	0x00020b72

0001a1d4 <k_work_init>:
{
   1a1d4:	b538      	push	{r3, r4, r5, lr}
   1a1d6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   1a1d8:	4604      	mov	r4, r0
   1a1da:	b948      	cbnz	r0, 1a1f0 <k_work_init+0x1c>
   1a1dc:	490d      	ldr	r1, [pc, #52]	; (1a214 <k_work_init+0x40>)
   1a1de:	480e      	ldr	r0, [pc, #56]	; (1a218 <k_work_init+0x44>)
   1a1e0:	4a0e      	ldr	r2, [pc, #56]	; (1a21c <k_work_init+0x48>)
   1a1e2:	2389      	movs	r3, #137	; 0x89
   1a1e4:	f002 fdfd 	bl	1cde2 <printk>
   1a1e8:	480c      	ldr	r0, [pc, #48]	; (1a21c <k_work_init+0x48>)
   1a1ea:	2189      	movs	r1, #137	; 0x89
   1a1ec:	f003 f853 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   1a1f0:	b94d      	cbnz	r5, 1a206 <k_work_init+0x32>
   1a1f2:	490b      	ldr	r1, [pc, #44]	; (1a220 <k_work_init+0x4c>)
   1a1f4:	4808      	ldr	r0, [pc, #32]	; (1a218 <k_work_init+0x44>)
   1a1f6:	4a09      	ldr	r2, [pc, #36]	; (1a21c <k_work_init+0x48>)
   1a1f8:	238a      	movs	r3, #138	; 0x8a
   1a1fa:	f002 fdf2 	bl	1cde2 <printk>
   1a1fe:	4807      	ldr	r0, [pc, #28]	; (1a21c <k_work_init+0x48>)
   1a200:	218a      	movs	r1, #138	; 0x8a
   1a202:	f003 f848 	bl	1d296 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1a206:	2210      	movs	r2, #16
   1a208:	2100      	movs	r1, #0
   1a20a:	4620      	mov	r0, r4
   1a20c:	f005 fefe 	bl	2000c <memset>
   1a210:	6065      	str	r5, [r4, #4]
}
   1a212:	bd38      	pop	{r3, r4, r5, pc}
   1a214:	00022391 	.word	0x00022391
   1a218:	00020a75 	.word	0x00020a75
   1a21c:	000222ba 	.word	0x000222ba
   1a220:	000222db 	.word	0x000222db

0001a224 <k_work_submit_to_queue>:
{
   1a224:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   1a226:	460c      	mov	r4, r1
{
   1a228:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   1a22a:	b959      	cbnz	r1, 1a244 <k_work_submit_to_queue+0x20>
   1a22c:	4926      	ldr	r1, [pc, #152]	; (1a2c8 <k_work_submit_to_queue+0xa4>)
   1a22e:	4827      	ldr	r0, [pc, #156]	; (1a2cc <k_work_submit_to_queue+0xa8>)
   1a230:	4a27      	ldr	r2, [pc, #156]	; (1a2d0 <k_work_submit_to_queue+0xac>)
   1a232:	f240 1369 	movw	r3, #361	; 0x169
   1a236:	f002 fdd4 	bl	1cde2 <printk>
   1a23a:	4825      	ldr	r0, [pc, #148]	; (1a2d0 <k_work_submit_to_queue+0xac>)
   1a23c:	f240 1169 	movw	r1, #361	; 0x169
   1a240:	f003 f829 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a244:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a248:	f3ef 8511 	mrs	r5, BASEPRI
   1a24c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a250:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a254:	481f      	ldr	r0, [pc, #124]	; (1a2d4 <k_work_submit_to_queue+0xb0>)
   1a256:	f7ff f96b 	bl	19530 <z_spin_lock_valid>
   1a25a:	b968      	cbnz	r0, 1a278 <k_work_submit_to_queue+0x54>
   1a25c:	4a1e      	ldr	r2, [pc, #120]	; (1a2d8 <k_work_submit_to_queue+0xb4>)
   1a25e:	491f      	ldr	r1, [pc, #124]	; (1a2dc <k_work_submit_to_queue+0xb8>)
   1a260:	481a      	ldr	r0, [pc, #104]	; (1a2cc <k_work_submit_to_queue+0xa8>)
   1a262:	2381      	movs	r3, #129	; 0x81
   1a264:	f002 fdbd 	bl	1cde2 <printk>
   1a268:	491a      	ldr	r1, [pc, #104]	; (1a2d4 <k_work_submit_to_queue+0xb0>)
   1a26a:	481d      	ldr	r0, [pc, #116]	; (1a2e0 <k_work_submit_to_queue+0xbc>)
   1a26c:	f002 fdb9 	bl	1cde2 <printk>
   1a270:	4819      	ldr	r0, [pc, #100]	; (1a2d8 <k_work_submit_to_queue+0xb4>)
   1a272:	2181      	movs	r1, #129	; 0x81
   1a274:	f003 f80f 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a278:	4816      	ldr	r0, [pc, #88]	; (1a2d4 <k_work_submit_to_queue+0xb0>)
   1a27a:	f7ff f977 	bl	1956c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   1a27e:	4620      	mov	r0, r4
   1a280:	a901      	add	r1, sp, #4
   1a282:	f7ff feed 	bl	1a060 <submit_to_queue_locked>
   1a286:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a288:	4812      	ldr	r0, [pc, #72]	; (1a2d4 <k_work_submit_to_queue+0xb0>)
   1a28a:	f7ff f95f 	bl	1954c <z_spin_unlock_valid>
   1a28e:	b968      	cbnz	r0, 1a2ac <k_work_submit_to_queue+0x88>
   1a290:	4a11      	ldr	r2, [pc, #68]	; (1a2d8 <k_work_submit_to_queue+0xb4>)
   1a292:	4914      	ldr	r1, [pc, #80]	; (1a2e4 <k_work_submit_to_queue+0xc0>)
   1a294:	480d      	ldr	r0, [pc, #52]	; (1a2cc <k_work_submit_to_queue+0xa8>)
   1a296:	23ac      	movs	r3, #172	; 0xac
   1a298:	f002 fda3 	bl	1cde2 <printk>
   1a29c:	490d      	ldr	r1, [pc, #52]	; (1a2d4 <k_work_submit_to_queue+0xb0>)
   1a29e:	4812      	ldr	r0, [pc, #72]	; (1a2e8 <k_work_submit_to_queue+0xc4>)
   1a2a0:	f002 fd9f 	bl	1cde2 <printk>
   1a2a4:	480c      	ldr	r0, [pc, #48]	; (1a2d8 <k_work_submit_to_queue+0xb4>)
   1a2a6:	21ac      	movs	r1, #172	; 0xac
   1a2a8:	f002 fff5 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a2ac:	f385 8811 	msr	BASEPRI, r5
   1a2b0:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1a2b4:	2c00      	cmp	r4, #0
   1a2b6:	dd04      	ble.n	1a2c2 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   1a2b8:	f001 fbb2 	bl	1ba20 <z_impl_k_is_preempt_thread>
   1a2bc:	b108      	cbz	r0, 1a2c2 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   1a2be:	f001 fa1f 	bl	1b700 <z_impl_k_yield>
}
   1a2c2:	4620      	mov	r0, r4
   1a2c4:	b003      	add	sp, #12
   1a2c6:	bd30      	pop	{r4, r5, pc}
   1a2c8:	00022391 	.word	0x00022391
   1a2cc:	00020a75 	.word	0x00020a75
   1a2d0:	000222ba 	.word	0x000222ba
   1a2d4:	20001f84 	.word	0x20001f84
   1a2d8:	00020b35 	.word	0x00020b35
   1a2dc:	00020b87 	.word	0x00020b87
   1a2e0:	00020b9c 	.word	0x00020b9c
   1a2e4:	00020b5b 	.word	0x00020b5b
   1a2e8:	00020b72 	.word	0x00020b72

0001a2ec <k_work_submit>:
{
   1a2ec:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1a2ee:	4801      	ldr	r0, [pc, #4]	; (1a2f4 <k_work_submit+0x8>)
   1a2f0:	f7ff bf98 	b.w	1a224 <k_work_submit_to_queue>
   1a2f4:	20001b58 	.word	0x20001b58

0001a2f8 <k_work_queue_start>:
{
   1a2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2fc:	b088      	sub	sp, #32
   1a2fe:	460e      	mov	r6, r1
   1a300:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a302:	4617      	mov	r7, r2
   1a304:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   1a306:	4604      	mov	r4, r0
   1a308:	b958      	cbnz	r0, 1a322 <k_work_queue_start+0x2a>
   1a30a:	492e      	ldr	r1, [pc, #184]	; (1a3c4 <k_work_queue_start+0xcc>)
   1a30c:	482e      	ldr	r0, [pc, #184]	; (1a3c8 <k_work_queue_start+0xd0>)
   1a30e:	4a2f      	ldr	r2, [pc, #188]	; (1a3cc <k_work_queue_start+0xd4>)
   1a310:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   1a314:	f002 fd65 	bl	1cde2 <printk>
   1a318:	482c      	ldr	r0, [pc, #176]	; (1a3cc <k_work_queue_start+0xd4>)
   1a31a:	f44f 712e 	mov.w	r1, #696	; 0x2b8
   1a31e:	f002 ffba 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   1a322:	b95e      	cbnz	r6, 1a33c <k_work_queue_start+0x44>
   1a324:	492a      	ldr	r1, [pc, #168]	; (1a3d0 <k_work_queue_start+0xd8>)
   1a326:	4828      	ldr	r0, [pc, #160]	; (1a3c8 <k_work_queue_start+0xd0>)
   1a328:	4a28      	ldr	r2, [pc, #160]	; (1a3cc <k_work_queue_start+0xd4>)
   1a32a:	f240 23b9 	movw	r3, #697	; 0x2b9
   1a32e:	f002 fd58 	bl	1cde2 <printk>
   1a332:	4826      	ldr	r0, [pc, #152]	; (1a3cc <k_work_queue_start+0xd4>)
   1a334:	f240 21b9 	movw	r1, #697	; 0x2b9
   1a338:	f002 ffad 	bl	1d296 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   1a33c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   1a340:	07db      	lsls	r3, r3, #31
   1a342:	d50b      	bpl.n	1a35c <k_work_queue_start+0x64>
   1a344:	4923      	ldr	r1, [pc, #140]	; (1a3d4 <k_work_queue_start+0xdc>)
   1a346:	4820      	ldr	r0, [pc, #128]	; (1a3c8 <k_work_queue_start+0xd0>)
   1a348:	4a20      	ldr	r2, [pc, #128]	; (1a3cc <k_work_queue_start+0xd4>)
   1a34a:	f240 23ba 	movw	r3, #698	; 0x2ba
   1a34e:	f002 fd48 	bl	1cde2 <printk>
   1a352:	481e      	ldr	r0, [pc, #120]	; (1a3cc <k_work_queue_start+0xd4>)
   1a354:	f240 21ba 	movw	r1, #698	; 0x2ba
   1a358:	f002 ff9d 	bl	1d296 <assert_post_action>
	list->head = NULL;
   1a35c:	2300      	movs	r3, #0
	list->tail = NULL;
   1a35e:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   1a362:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1a366:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   1a36a:	f104 0390 	add.w	r3, r4, #144	; 0x90
   1a36e:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   1a372:	b32d      	cbz	r5, 1a3c0 <k_work_queue_start+0xc8>
   1a374:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1a376:	2b00      	cmp	r3, #0
   1a378:	f240 1101 	movw	r1, #257	; 0x101
   1a37c:	bf08      	it	eq
   1a37e:	2101      	moveq	r1, #1
	*flagp = flags;
   1a380:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a384:	f04f 32ff 	mov.w	r2, #4294967295
   1a388:	f04f 33ff 	mov.w	r3, #4294967295
   1a38c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a390:	2200      	movs	r2, #0
   1a392:	e9cd 8203 	strd	r8, r2, [sp, #12]
   1a396:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1a39a:	4b0f      	ldr	r3, [pc, #60]	; (1a3d8 <k_work_queue_start+0xe0>)
   1a39c:	9400      	str	r4, [sp, #0]
   1a39e:	463a      	mov	r2, r7
   1a3a0:	4631      	mov	r1, r6
   1a3a2:	4620      	mov	r0, r4
   1a3a4:	f7fe ffe6 	bl	19374 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1a3a8:	b125      	cbz	r5, 1a3b4 <k_work_queue_start+0xbc>
   1a3aa:	6829      	ldr	r1, [r5, #0]
   1a3ac:	b111      	cbz	r1, 1a3b4 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   1a3ae:	4620      	mov	r0, r4
   1a3b0:	f005 fc8d 	bl	1fcce <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1a3b4:	4620      	mov	r0, r4
}
   1a3b6:	b008      	add	sp, #32
   1a3b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a3bc:	f005 bc8a 	b.w	1fcd4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1a3c0:	2101      	movs	r1, #1
   1a3c2:	e7dd      	b.n	1a380 <k_work_queue_start+0x88>
   1a3c4:	00022350 	.word	0x00022350
   1a3c8:	00020a75 	.word	0x00020a75
   1a3cc:	000222ba 	.word	0x000222ba
   1a3d0:	00022356 	.word	0x00022356
   1a3d4:	0002235c 	.word	0x0002235c
   1a3d8:	00019dfd 	.word	0x00019dfd

0001a3dc <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   1a3dc:	b538      	push	{r3, r4, r5, lr}
   1a3de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1a3e0:	4604      	mov	r4, r0
   1a3e2:	b958      	cbnz	r0, 1a3fc <k_work_init_delayable+0x20>
   1a3e4:	4911      	ldr	r1, [pc, #68]	; (1a42c <k_work_init_delayable+0x50>)
   1a3e6:	4812      	ldr	r0, [pc, #72]	; (1a430 <k_work_init_delayable+0x54>)
   1a3e8:	4a12      	ldr	r2, [pc, #72]	; (1a434 <k_work_init_delayable+0x58>)
   1a3ea:	f44f 734c 	mov.w	r3, #816	; 0x330
   1a3ee:	f002 fcf8 	bl	1cde2 <printk>
   1a3f2:	4810      	ldr	r0, [pc, #64]	; (1a434 <k_work_init_delayable+0x58>)
   1a3f4:	f44f 714c 	mov.w	r1, #816	; 0x330
   1a3f8:	f002 ff4d 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   1a3fc:	b95d      	cbnz	r5, 1a416 <k_work_init_delayable+0x3a>
   1a3fe:	490e      	ldr	r1, [pc, #56]	; (1a438 <k_work_init_delayable+0x5c>)
   1a400:	480b      	ldr	r0, [pc, #44]	; (1a430 <k_work_init_delayable+0x54>)
   1a402:	4a0c      	ldr	r2, [pc, #48]	; (1a434 <k_work_init_delayable+0x58>)
   1a404:	f240 3331 	movw	r3, #817	; 0x331
   1a408:	f002 fceb 	bl	1cde2 <printk>
   1a40c:	4809      	ldr	r0, [pc, #36]	; (1a434 <k_work_init_delayable+0x58>)
   1a40e:	f240 3131 	movw	r1, #817	; 0x331
   1a412:	f002 ff40 	bl	1d296 <assert_post_action>

	*dwork = (struct k_work_delayable){
   1a416:	2230      	movs	r2, #48	; 0x30
   1a418:	2100      	movs	r1, #0
   1a41a:	4620      	mov	r0, r4
   1a41c:	f005 fdf6 	bl	2000c <memset>
   1a420:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a424:	6065      	str	r5, [r4, #4]
   1a426:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   1a428:	bd38      	pop	{r3, r4, r5, pc}
   1a42a:	bf00      	nop
   1a42c:	00022390 	.word	0x00022390
   1a430:	00020a75 	.word	0x00020a75
   1a434:	000222ba 	.word	0x000222ba
   1a438:	000222db 	.word	0x000222db

0001a43c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1a43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a43e:	4616      	mov	r6, r2
   1a440:	9001      	str	r0, [sp, #4]
   1a442:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1a444:	460c      	mov	r4, r1
   1a446:	b959      	cbnz	r1, 1a460 <k_work_schedule_for_queue+0x24>
   1a448:	492e      	ldr	r1, [pc, #184]	; (1a504 <k_work_schedule_for_queue+0xc8>)
   1a44a:	482f      	ldr	r0, [pc, #188]	; (1a508 <k_work_schedule_for_queue+0xcc>)
   1a44c:	4a2f      	ldr	r2, [pc, #188]	; (1a50c <k_work_schedule_for_queue+0xd0>)
   1a44e:	f240 33a7 	movw	r3, #935	; 0x3a7
   1a452:	f002 fcc6 	bl	1cde2 <printk>
   1a456:	482d      	ldr	r0, [pc, #180]	; (1a50c <k_work_schedule_for_queue+0xd0>)
   1a458:	f240 31a7 	movw	r1, #935	; 0x3a7
   1a45c:	f002 ff1b 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a460:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a464:	f3ef 8511 	mrs	r5, BASEPRI
   1a468:	f383 8812 	msr	BASEPRI_MAX, r3
   1a46c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a470:	4827      	ldr	r0, [pc, #156]	; (1a510 <k_work_schedule_for_queue+0xd4>)
   1a472:	f7ff f85d 	bl	19530 <z_spin_lock_valid>
   1a476:	b968      	cbnz	r0, 1a494 <k_work_schedule_for_queue+0x58>
   1a478:	4a26      	ldr	r2, [pc, #152]	; (1a514 <k_work_schedule_for_queue+0xd8>)
   1a47a:	4927      	ldr	r1, [pc, #156]	; (1a518 <k_work_schedule_for_queue+0xdc>)
   1a47c:	4822      	ldr	r0, [pc, #136]	; (1a508 <k_work_schedule_for_queue+0xcc>)
   1a47e:	2381      	movs	r3, #129	; 0x81
   1a480:	f002 fcaf 	bl	1cde2 <printk>
   1a484:	4922      	ldr	r1, [pc, #136]	; (1a510 <k_work_schedule_for_queue+0xd4>)
   1a486:	4825      	ldr	r0, [pc, #148]	; (1a51c <k_work_schedule_for_queue+0xe0>)
   1a488:	f002 fcab 	bl	1cde2 <printk>
   1a48c:	4821      	ldr	r0, [pc, #132]	; (1a514 <k_work_schedule_for_queue+0xd8>)
   1a48e:	2181      	movs	r1, #129	; 0x81
   1a490:	f002 ff01 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a494:	481e      	ldr	r0, [pc, #120]	; (1a510 <k_work_schedule_for_queue+0xd4>)
   1a496:	f7ff f869 	bl	1956c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   1a49a:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1a49c:	f013 0f0e 	tst.w	r3, #14
   1a4a0:	d12e      	bne.n	1a500 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a4a2:	ea56 0207 	orrs.w	r2, r6, r7
   1a4a6:	d11d      	bne.n	1a4e4 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   1a4a8:	4620      	mov	r0, r4
   1a4aa:	a901      	add	r1, sp, #4
   1a4ac:	f7ff fdd8 	bl	1a060 <submit_to_queue_locked>
   1a4b0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a4b2:	4817      	ldr	r0, [pc, #92]	; (1a510 <k_work_schedule_for_queue+0xd4>)
   1a4b4:	f7ff f84a 	bl	1954c <z_spin_unlock_valid>
   1a4b8:	b968      	cbnz	r0, 1a4d6 <k_work_schedule_for_queue+0x9a>
   1a4ba:	4a16      	ldr	r2, [pc, #88]	; (1a514 <k_work_schedule_for_queue+0xd8>)
   1a4bc:	4918      	ldr	r1, [pc, #96]	; (1a520 <k_work_schedule_for_queue+0xe4>)
   1a4be:	4812      	ldr	r0, [pc, #72]	; (1a508 <k_work_schedule_for_queue+0xcc>)
   1a4c0:	23ac      	movs	r3, #172	; 0xac
   1a4c2:	f002 fc8e 	bl	1cde2 <printk>
   1a4c6:	4912      	ldr	r1, [pc, #72]	; (1a510 <k_work_schedule_for_queue+0xd4>)
   1a4c8:	4816      	ldr	r0, [pc, #88]	; (1a524 <k_work_schedule_for_queue+0xe8>)
   1a4ca:	f002 fc8a 	bl	1cde2 <printk>
   1a4ce:	4811      	ldr	r0, [pc, #68]	; (1a514 <k_work_schedule_for_queue+0xd8>)
   1a4d0:	21ac      	movs	r1, #172	; 0xac
   1a4d2:	f002 fee0 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a4d6:	f385 8811 	msr	BASEPRI, r5
   1a4da:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a4de:	4620      	mov	r0, r4
   1a4e0:	b003      	add	sp, #12
   1a4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1a4e4:	f043 0308 	orr.w	r3, r3, #8
   1a4e8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1a4ea:	9b01      	ldr	r3, [sp, #4]
   1a4ec:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a4ee:	f104 0010 	add.w	r0, r4, #16
   1a4f2:	490d      	ldr	r1, [pc, #52]	; (1a528 <k_work_schedule_for_queue+0xec>)
   1a4f4:	4632      	mov	r2, r6
   1a4f6:	463b      	mov	r3, r7
   1a4f8:	f001 fc2a 	bl	1bd50 <z_add_timeout>
	return ret;
   1a4fc:	2401      	movs	r4, #1
   1a4fe:	e7d8      	b.n	1a4b2 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   1a500:	2400      	movs	r4, #0
   1a502:	e7d6      	b.n	1a4b2 <k_work_schedule_for_queue+0x76>
   1a504:	00022390 	.word	0x00022390
   1a508:	00020a75 	.word	0x00020a75
   1a50c:	000222ba 	.word	0x000222ba
   1a510:	20001f84 	.word	0x20001f84
   1a514:	00020b35 	.word	0x00020b35
   1a518:	00020b87 	.word	0x00020b87
   1a51c:	00020b9c 	.word	0x00020b9c
   1a520:	00020b5b 	.word	0x00020b5b
   1a524:	00020b72 	.word	0x00020b72
   1a528:	0001a129 	.word	0x0001a129

0001a52c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1a52c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1a52e:	4801      	ldr	r0, [pc, #4]	; (1a534 <k_work_schedule+0x8>)
   1a530:	f7ff bf84 	b.w	1a43c <k_work_schedule_for_queue>
   1a534:	20001b58 	.word	0x20001b58

0001a538 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1a538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a53a:	4616      	mov	r6, r2
   1a53c:	9001      	str	r0, [sp, #4]
   1a53e:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   1a540:	460c      	mov	r4, r1
   1a542:	b959      	cbnz	r1, 1a55c <k_work_reschedule_for_queue+0x24>
   1a544:	492d      	ldr	r1, [pc, #180]	; (1a5fc <k_work_reschedule_for_queue+0xc4>)
   1a546:	482e      	ldr	r0, [pc, #184]	; (1a600 <k_work_reschedule_for_queue+0xc8>)
   1a548:	4a2e      	ldr	r2, [pc, #184]	; (1a604 <k_work_reschedule_for_queue+0xcc>)
   1a54a:	f240 33cb 	movw	r3, #971	; 0x3cb
   1a54e:	f002 fc48 	bl	1cde2 <printk>
   1a552:	482c      	ldr	r0, [pc, #176]	; (1a604 <k_work_reschedule_for_queue+0xcc>)
   1a554:	f240 31cb 	movw	r1, #971	; 0x3cb
   1a558:	f002 fe9d 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a55c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a560:	f3ef 8511 	mrs	r5, BASEPRI
   1a564:	f383 8812 	msr	BASEPRI_MAX, r3
   1a568:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a56c:	4826      	ldr	r0, [pc, #152]	; (1a608 <k_work_reschedule_for_queue+0xd0>)
   1a56e:	f7fe ffdf 	bl	19530 <z_spin_lock_valid>
   1a572:	b968      	cbnz	r0, 1a590 <k_work_reschedule_for_queue+0x58>
   1a574:	4a25      	ldr	r2, [pc, #148]	; (1a60c <k_work_reschedule_for_queue+0xd4>)
   1a576:	4926      	ldr	r1, [pc, #152]	; (1a610 <k_work_reschedule_for_queue+0xd8>)
   1a578:	4821      	ldr	r0, [pc, #132]	; (1a600 <k_work_reschedule_for_queue+0xc8>)
   1a57a:	2381      	movs	r3, #129	; 0x81
   1a57c:	f002 fc31 	bl	1cde2 <printk>
   1a580:	4921      	ldr	r1, [pc, #132]	; (1a608 <k_work_reschedule_for_queue+0xd0>)
   1a582:	4824      	ldr	r0, [pc, #144]	; (1a614 <k_work_reschedule_for_queue+0xdc>)
   1a584:	f002 fc2d 	bl	1cde2 <printk>
   1a588:	4820      	ldr	r0, [pc, #128]	; (1a60c <k_work_reschedule_for_queue+0xd4>)
   1a58a:	2181      	movs	r1, #129	; 0x81
   1a58c:	f002 fe83 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a590:	481d      	ldr	r0, [pc, #116]	; (1a608 <k_work_reschedule_for_queue+0xd0>)
   1a592:	f7fe ffeb 	bl	1956c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1a596:	4620      	mov	r0, r4
   1a598:	f005 fbea 	bl	1fd70 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a59c:	ea56 0307 	orrs.w	r3, r6, r7
   1a5a0:	d11d      	bne.n	1a5de <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   1a5a2:	4620      	mov	r0, r4
   1a5a4:	a901      	add	r1, sp, #4
   1a5a6:	f7ff fd5b 	bl	1a060 <submit_to_queue_locked>
   1a5aa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a5ac:	4816      	ldr	r0, [pc, #88]	; (1a608 <k_work_reschedule_for_queue+0xd0>)
   1a5ae:	f7fe ffcd 	bl	1954c <z_spin_unlock_valid>
   1a5b2:	b968      	cbnz	r0, 1a5d0 <k_work_reschedule_for_queue+0x98>
   1a5b4:	4a15      	ldr	r2, [pc, #84]	; (1a60c <k_work_reschedule_for_queue+0xd4>)
   1a5b6:	4918      	ldr	r1, [pc, #96]	; (1a618 <k_work_reschedule_for_queue+0xe0>)
   1a5b8:	4811      	ldr	r0, [pc, #68]	; (1a600 <k_work_reschedule_for_queue+0xc8>)
   1a5ba:	23ac      	movs	r3, #172	; 0xac
   1a5bc:	f002 fc11 	bl	1cde2 <printk>
   1a5c0:	4911      	ldr	r1, [pc, #68]	; (1a608 <k_work_reschedule_for_queue+0xd0>)
   1a5c2:	4816      	ldr	r0, [pc, #88]	; (1a61c <k_work_reschedule_for_queue+0xe4>)
   1a5c4:	f002 fc0d 	bl	1cde2 <printk>
   1a5c8:	4810      	ldr	r0, [pc, #64]	; (1a60c <k_work_reschedule_for_queue+0xd4>)
   1a5ca:	21ac      	movs	r1, #172	; 0xac
   1a5cc:	f002 fe63 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a5d0:	f385 8811 	msr	BASEPRI, r5
   1a5d4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1a5d8:	4620      	mov	r0, r4
   1a5da:	b003      	add	sp, #12
   1a5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1a5de:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a5e0:	490f      	ldr	r1, [pc, #60]	; (1a620 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   1a5e2:	f043 0308 	orr.w	r3, r3, #8
   1a5e6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1a5e8:	9b01      	ldr	r3, [sp, #4]
   1a5ea:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1a5ec:	f104 0010 	add.w	r0, r4, #16
   1a5f0:	4632      	mov	r2, r6
   1a5f2:	463b      	mov	r3, r7
   1a5f4:	f001 fbac 	bl	1bd50 <z_add_timeout>
	return ret;
   1a5f8:	2401      	movs	r4, #1
   1a5fa:	e7d7      	b.n	1a5ac <k_work_reschedule_for_queue+0x74>
   1a5fc:	00022390 	.word	0x00022390
   1a600:	00020a75 	.word	0x00020a75
   1a604:	000222ba 	.word	0x000222ba
   1a608:	20001f84 	.word	0x20001f84
   1a60c:	00020b35 	.word	0x00020b35
   1a610:	00020b87 	.word	0x00020b87
   1a614:	00020b9c 	.word	0x00020b9c
   1a618:	00020b5b 	.word	0x00020b5b
   1a61c:	00020b72 	.word	0x00020b72
   1a620:	0001a129 	.word	0x0001a129

0001a624 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1a624:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1a626:	4801      	ldr	r0, [pc, #4]	; (1a62c <k_work_reschedule+0x8>)
   1a628:	f7ff bf86 	b.w	1a538 <k_work_reschedule_for_queue>
   1a62c:	20001b58 	.word	0x20001b58

0001a630 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1a630:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   1a632:	4604      	mov	r4, r0
   1a634:	b958      	cbnz	r0, 1a64e <k_work_cancel_delayable+0x1e>
   1a636:	4924      	ldr	r1, [pc, #144]	; (1a6c8 <k_work_cancel_delayable+0x98>)
   1a638:	4824      	ldr	r0, [pc, #144]	; (1a6cc <k_work_cancel_delayable+0x9c>)
   1a63a:	4a25      	ldr	r2, [pc, #148]	; (1a6d0 <k_work_cancel_delayable+0xa0>)
   1a63c:	f240 33ed 	movw	r3, #1005	; 0x3ed
   1a640:	f002 fbcf 	bl	1cde2 <printk>
   1a644:	4822      	ldr	r0, [pc, #136]	; (1a6d0 <k_work_cancel_delayable+0xa0>)
   1a646:	f240 31ed 	movw	r1, #1005	; 0x3ed
   1a64a:	f002 fe24 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a64e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a652:	f3ef 8511 	mrs	r5, BASEPRI
   1a656:	f383 8812 	msr	BASEPRI_MAX, r3
   1a65a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a65e:	481d      	ldr	r0, [pc, #116]	; (1a6d4 <k_work_cancel_delayable+0xa4>)
   1a660:	f7fe ff66 	bl	19530 <z_spin_lock_valid>
   1a664:	b968      	cbnz	r0, 1a682 <k_work_cancel_delayable+0x52>
   1a666:	4a1c      	ldr	r2, [pc, #112]	; (1a6d8 <k_work_cancel_delayable+0xa8>)
   1a668:	491c      	ldr	r1, [pc, #112]	; (1a6dc <k_work_cancel_delayable+0xac>)
   1a66a:	4818      	ldr	r0, [pc, #96]	; (1a6cc <k_work_cancel_delayable+0x9c>)
   1a66c:	2381      	movs	r3, #129	; 0x81
   1a66e:	f002 fbb8 	bl	1cde2 <printk>
   1a672:	4918      	ldr	r1, [pc, #96]	; (1a6d4 <k_work_cancel_delayable+0xa4>)
   1a674:	481a      	ldr	r0, [pc, #104]	; (1a6e0 <k_work_cancel_delayable+0xb0>)
   1a676:	f002 fbb4 	bl	1cde2 <printk>
   1a67a:	4817      	ldr	r0, [pc, #92]	; (1a6d8 <k_work_cancel_delayable+0xa8>)
   1a67c:	2181      	movs	r1, #129	; 0x81
   1a67e:	f002 fe0a 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a682:	4814      	ldr	r0, [pc, #80]	; (1a6d4 <k_work_cancel_delayable+0xa4>)
   1a684:	f7fe ff72 	bl	1956c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   1a688:	4620      	mov	r0, r4
   1a68a:	f005 fb71 	bl	1fd70 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a68e:	4620      	mov	r0, r4
   1a690:	f005 fb7c 	bl	1fd8c <cancel_async_locked>
   1a694:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a696:	480f      	ldr	r0, [pc, #60]	; (1a6d4 <k_work_cancel_delayable+0xa4>)
   1a698:	f7fe ff58 	bl	1954c <z_spin_unlock_valid>
   1a69c:	b968      	cbnz	r0, 1a6ba <k_work_cancel_delayable+0x8a>
   1a69e:	4a0e      	ldr	r2, [pc, #56]	; (1a6d8 <k_work_cancel_delayable+0xa8>)
   1a6a0:	4910      	ldr	r1, [pc, #64]	; (1a6e4 <k_work_cancel_delayable+0xb4>)
   1a6a2:	480a      	ldr	r0, [pc, #40]	; (1a6cc <k_work_cancel_delayable+0x9c>)
   1a6a4:	23ac      	movs	r3, #172	; 0xac
   1a6a6:	f002 fb9c 	bl	1cde2 <printk>
   1a6aa:	490a      	ldr	r1, [pc, #40]	; (1a6d4 <k_work_cancel_delayable+0xa4>)
   1a6ac:	480e      	ldr	r0, [pc, #56]	; (1a6e8 <k_work_cancel_delayable+0xb8>)
   1a6ae:	f002 fb98 	bl	1cde2 <printk>
   1a6b2:	4809      	ldr	r0, [pc, #36]	; (1a6d8 <k_work_cancel_delayable+0xa8>)
   1a6b4:	21ac      	movs	r1, #172	; 0xac
   1a6b6:	f002 fdee 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a6ba:	f385 8811 	msr	BASEPRI, r5
   1a6be:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1a6c2:	4620      	mov	r0, r4
   1a6c4:	bd38      	pop	{r3, r4, r5, pc}
   1a6c6:	bf00      	nop
   1a6c8:	00022390 	.word	0x00022390
   1a6cc:	00020a75 	.word	0x00020a75
   1a6d0:	000222ba 	.word	0x000222ba
   1a6d4:	20001f84 	.word	0x20001f84
   1a6d8:	00020b35 	.word	0x00020b35
   1a6dc:	00020b87 	.word	0x00020b87
   1a6e0:	00020b9c 	.word	0x00020b9c
   1a6e4:	00020b5b 	.word	0x00020b5b
   1a6e8:	00020b72 	.word	0x00020b72

0001a6ec <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6f0:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   1a6f2:	4605      	mov	r5, r0
   1a6f4:	b958      	cbnz	r0, 1a70e <k_work_cancel_delayable_sync+0x22>
   1a6f6:	493f      	ldr	r1, [pc, #252]	; (1a7f4 <k_work_cancel_delayable_sync+0x108>)
   1a6f8:	483f      	ldr	r0, [pc, #252]	; (1a7f8 <k_work_cancel_delayable_sync+0x10c>)
   1a6fa:	4a40      	ldr	r2, [pc, #256]	; (1a7fc <k_work_cancel_delayable_sync+0x110>)
   1a6fc:	f240 33fe 	movw	r3, #1022	; 0x3fe
   1a700:	f002 fb6f 	bl	1cde2 <printk>
   1a704:	483d      	ldr	r0, [pc, #244]	; (1a7fc <k_work_cancel_delayable_sync+0x110>)
   1a706:	f240 31fe 	movw	r1, #1022	; 0x3fe
   1a70a:	f002 fdc4 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   1a70e:	b95e      	cbnz	r6, 1a728 <k_work_cancel_delayable_sync+0x3c>
   1a710:	493b      	ldr	r1, [pc, #236]	; (1a800 <k_work_cancel_delayable_sync+0x114>)
   1a712:	4839      	ldr	r0, [pc, #228]	; (1a7f8 <k_work_cancel_delayable_sync+0x10c>)
   1a714:	4a39      	ldr	r2, [pc, #228]	; (1a7fc <k_work_cancel_delayable_sync+0x110>)
   1a716:	f240 33ff 	movw	r3, #1023	; 0x3ff
   1a71a:	f002 fb62 	bl	1cde2 <printk>
   1a71e:	4837      	ldr	r0, [pc, #220]	; (1a7fc <k_work_cancel_delayable_sync+0x110>)
   1a720:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1a724:	f002 fdb7 	bl	1d296 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   1a728:	f005 facb 	bl	1fcc2 <k_is_in_isr>
   1a72c:	b158      	cbz	r0, 1a746 <k_work_cancel_delayable_sync+0x5a>
   1a72e:	4935      	ldr	r1, [pc, #212]	; (1a804 <k_work_cancel_delayable_sync+0x118>)
   1a730:	4831      	ldr	r0, [pc, #196]	; (1a7f8 <k_work_cancel_delayable_sync+0x10c>)
   1a732:	4a32      	ldr	r2, [pc, #200]	; (1a7fc <k_work_cancel_delayable_sync+0x110>)
   1a734:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a738:	f002 fb53 	bl	1cde2 <printk>
   1a73c:	482f      	ldr	r0, [pc, #188]	; (1a7fc <k_work_cancel_delayable_sync+0x110>)
   1a73e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a742:	f002 fda8 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a746:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a74a:	f3ef 8811 	mrs	r8, BASEPRI
   1a74e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a752:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a756:	482c      	ldr	r0, [pc, #176]	; (1a808 <k_work_cancel_delayable_sync+0x11c>)
   1a758:	f7fe feea 	bl	19530 <z_spin_lock_valid>
   1a75c:	b968      	cbnz	r0, 1a77a <k_work_cancel_delayable_sync+0x8e>
   1a75e:	4a2b      	ldr	r2, [pc, #172]	; (1a80c <k_work_cancel_delayable_sync+0x120>)
   1a760:	492b      	ldr	r1, [pc, #172]	; (1a810 <k_work_cancel_delayable_sync+0x124>)
   1a762:	4825      	ldr	r0, [pc, #148]	; (1a7f8 <k_work_cancel_delayable_sync+0x10c>)
   1a764:	2381      	movs	r3, #129	; 0x81
   1a766:	f002 fb3c 	bl	1cde2 <printk>
   1a76a:	4927      	ldr	r1, [pc, #156]	; (1a808 <k_work_cancel_delayable_sync+0x11c>)
   1a76c:	4829      	ldr	r0, [pc, #164]	; (1a814 <k_work_cancel_delayable_sync+0x128>)
   1a76e:	f002 fb38 	bl	1cde2 <printk>
   1a772:	4826      	ldr	r0, [pc, #152]	; (1a80c <k_work_cancel_delayable_sync+0x120>)
   1a774:	2181      	movs	r1, #129	; 0x81
   1a776:	f002 fd8e 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a77a:	4823      	ldr	r0, [pc, #140]	; (1a808 <k_work_cancel_delayable_sync+0x11c>)
   1a77c:	f7fe fef6 	bl	1956c <z_spin_lock_set_owner>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a780:	f3bf 8f5b 	dmb	ish
   1a784:	68ec      	ldr	r4, [r5, #12]
   1a786:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   1a78a:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1a78e:	2c00      	cmp	r4, #0
   1a790:	bf14      	ite	ne
   1a792:	2701      	movne	r7, #1
   1a794:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   1a796:	d00a      	beq.n	1a7ae <k_work_cancel_delayable_sync+0xc2>
	(void)unschedule_locked(dwork);
   1a798:	4628      	mov	r0, r5
   1a79a:	f005 fae9 	bl	1fd70 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1a79e:	4628      	mov	r0, r5
   1a7a0:	f005 faf4 	bl	1fd8c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1a7a4:	4631      	mov	r1, r6
   1a7a6:	4628      	mov	r0, r5
   1a7a8:	f7ff fc3c 	bl	1a024 <cancel_sync_locked>
   1a7ac:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a7ae:	4816      	ldr	r0, [pc, #88]	; (1a808 <k_work_cancel_delayable_sync+0x11c>)
   1a7b0:	f7fe fecc 	bl	1954c <z_spin_unlock_valid>
   1a7b4:	b968      	cbnz	r0, 1a7d2 <k_work_cancel_delayable_sync+0xe6>
   1a7b6:	4a15      	ldr	r2, [pc, #84]	; (1a80c <k_work_cancel_delayable_sync+0x120>)
   1a7b8:	4917      	ldr	r1, [pc, #92]	; (1a818 <k_work_cancel_delayable_sync+0x12c>)
   1a7ba:	480f      	ldr	r0, [pc, #60]	; (1a7f8 <k_work_cancel_delayable_sync+0x10c>)
   1a7bc:	23ac      	movs	r3, #172	; 0xac
   1a7be:	f002 fb10 	bl	1cde2 <printk>
   1a7c2:	4911      	ldr	r1, [pc, #68]	; (1a808 <k_work_cancel_delayable_sync+0x11c>)
   1a7c4:	4815      	ldr	r0, [pc, #84]	; (1a81c <k_work_cancel_delayable_sync+0x130>)
   1a7c6:	f002 fb0c 	bl	1cde2 <printk>
   1a7ca:	4810      	ldr	r0, [pc, #64]	; (1a80c <k_work_cancel_delayable_sync+0x120>)
   1a7cc:	21ac      	movs	r1, #172	; 0xac
   1a7ce:	f002 fd62 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a7d2:	f388 8811 	msr	BASEPRI, r8
   1a7d6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1a7da:	b13c      	cbz	r4, 1a7ec <k_work_cancel_delayable_sync+0x100>
	return z_impl_k_sem_take(sem, timeout);
   1a7dc:	f04f 32ff 	mov.w	r2, #4294967295
   1a7e0:	f04f 33ff 	mov.w	r3, #4294967295
   1a7e4:	f106 0008 	add.w	r0, r6, #8
   1a7e8:	f7ff fa64 	bl	19cb4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1a7ec:	4638      	mov	r0, r7
   1a7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a7f2:	bf00      	nop
   1a7f4:	00022390 	.word	0x00022390
   1a7f8:	00020a75 	.word	0x00020a75
   1a7fc:	000222ba 	.word	0x000222ba
   1a800:	0002233c 	.word	0x0002233c
   1a804:	000216ba 	.word	0x000216ba
   1a808:	20001f84 	.word	0x20001f84
   1a80c:	00020b35 	.word	0x00020b35
   1a810:	00020b87 	.word	0x00020b87
   1a814:	00020b9c 	.word	0x00020b9c
   1a818:	00020b5b 	.word	0x00020b5b
   1a81c:	00020b72 	.word	0x00020b72

0001a820 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1a820:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1a822:	4c08      	ldr	r4, [pc, #32]	; (1a844 <z_reset_time_slice+0x24>)
   1a824:	6823      	ldr	r3, [r4, #0]
   1a826:	b15b      	cbz	r3, 1a840 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1a828:	f7fd fa1e 	bl	17c68 <sys_clock_elapsed>
   1a82c:	4603      	mov	r3, r0
   1a82e:	6820      	ldr	r0, [r4, #0]
   1a830:	4a05      	ldr	r2, [pc, #20]	; (1a848 <z_reset_time_slice+0x28>)
   1a832:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1a834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1a838:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1a83a:	2100      	movs	r1, #0
   1a83c:	f001 bbf2 	b.w	1c024 <z_set_timeout_expiry>
}
   1a840:	bd10      	pop	{r4, pc}
   1a842:	bf00      	nop
   1a844:	20001f9c 	.word	0x20001f9c
   1a848:	20001f54 	.word	0x20001f54

0001a84c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a84e:	4604      	mov	r4, r0
   1a850:	460d      	mov	r5, r1
	__asm__ volatile(
   1a852:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a856:	f3ef 8611 	mrs	r6, BASEPRI
   1a85a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a85e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a862:	4823      	ldr	r0, [pc, #140]	; (1a8f0 <k_sched_time_slice_set+0xa4>)
   1a864:	f7fe fe64 	bl	19530 <z_spin_lock_valid>
   1a868:	b968      	cbnz	r0, 1a886 <k_sched_time_slice_set+0x3a>
   1a86a:	4a22      	ldr	r2, [pc, #136]	; (1a8f4 <k_sched_time_slice_set+0xa8>)
   1a86c:	4922      	ldr	r1, [pc, #136]	; (1a8f8 <k_sched_time_slice_set+0xac>)
   1a86e:	4823      	ldr	r0, [pc, #140]	; (1a8fc <k_sched_time_slice_set+0xb0>)
   1a870:	2381      	movs	r3, #129	; 0x81
   1a872:	f002 fab6 	bl	1cde2 <printk>
   1a876:	491e      	ldr	r1, [pc, #120]	; (1a8f0 <k_sched_time_slice_set+0xa4>)
   1a878:	4821      	ldr	r0, [pc, #132]	; (1a900 <k_sched_time_slice_set+0xb4>)
   1a87a:	f002 fab2 	bl	1cde2 <printk>
   1a87e:	481d      	ldr	r0, [pc, #116]	; (1a8f4 <k_sched_time_slice_set+0xa8>)
   1a880:	2181      	movs	r1, #129	; 0x81
   1a882:	f002 fd08 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a886:	481a      	ldr	r0, [pc, #104]	; (1a8f0 <k_sched_time_slice_set+0xa4>)
   1a888:	f7fe fe70 	bl	1956c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1a88c:	4b1d      	ldr	r3, [pc, #116]	; (1a904 <k_sched_time_slice_set+0xb8>)
   1a88e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1a890:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1a894:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a898:	2100      	movs	r1, #0
   1a89a:	611a      	str	r2, [r3, #16]
   1a89c:	fbe7 0104 	umlal	r0, r1, r7, r4
   1a8a0:	2300      	movs	r3, #0
   1a8a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a8a6:	f7e5 fc2b 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1a8aa:	2c00      	cmp	r4, #0
   1a8ac:	4b16      	ldr	r3, [pc, #88]	; (1a908 <k_sched_time_slice_set+0xbc>)
   1a8ae:	dc1b      	bgt.n	1a8e8 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1a8b0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1a8b2:	4b16      	ldr	r3, [pc, #88]	; (1a90c <k_sched_time_slice_set+0xc0>)
   1a8b4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1a8b6:	f7ff ffb3 	bl	1a820 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a8ba:	480d      	ldr	r0, [pc, #52]	; (1a8f0 <k_sched_time_slice_set+0xa4>)
   1a8bc:	f7fe fe46 	bl	1954c <z_spin_unlock_valid>
   1a8c0:	b968      	cbnz	r0, 1a8de <k_sched_time_slice_set+0x92>
   1a8c2:	4a0c      	ldr	r2, [pc, #48]	; (1a8f4 <k_sched_time_slice_set+0xa8>)
   1a8c4:	4912      	ldr	r1, [pc, #72]	; (1a910 <k_sched_time_slice_set+0xc4>)
   1a8c6:	480d      	ldr	r0, [pc, #52]	; (1a8fc <k_sched_time_slice_set+0xb0>)
   1a8c8:	23ac      	movs	r3, #172	; 0xac
   1a8ca:	f002 fa8a 	bl	1cde2 <printk>
   1a8ce:	4908      	ldr	r1, [pc, #32]	; (1a8f0 <k_sched_time_slice_set+0xa4>)
   1a8d0:	4810      	ldr	r0, [pc, #64]	; (1a914 <k_sched_time_slice_set+0xc8>)
   1a8d2:	f002 fa86 	bl	1cde2 <printk>
   1a8d6:	4807      	ldr	r0, [pc, #28]	; (1a8f4 <k_sched_time_slice_set+0xa8>)
   1a8d8:	21ac      	movs	r1, #172	; 0xac
   1a8da:	f002 fcdc 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a8de:	f386 8811 	msr	BASEPRI, r6
   1a8e2:	f3bf 8f6f 	isb	sy
	}
}
   1a8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1a8e8:	2802      	cmp	r0, #2
   1a8ea:	bfb8      	it	lt
   1a8ec:	2002      	movlt	r0, #2
   1a8ee:	e7df      	b.n	1a8b0 <k_sched_time_slice_set+0x64>
   1a8f0:	20001f94 	.word	0x20001f94
   1a8f4:	00020b35 	.word	0x00020b35
   1a8f8:	00020b87 	.word	0x00020b87
   1a8fc:	00020a75 	.word	0x00020a75
   1a900:	00020b9c 	.word	0x00020b9c
   1a904:	20001f54 	.word	0x20001f54
   1a908:	20001f9c 	.word	0x20001f9c
   1a90c:	20001f98 	.word	0x20001f98
   1a910:	00020b5b 	.word	0x00020b5b
   1a914:	00020b72 	.word	0x00020b72

0001a918 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   1a918:	b538      	push	{r3, r4, r5, lr}
   1a91a:	4604      	mov	r4, r0
	__asm__ volatile(
   1a91c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a920:	f3ef 8511 	mrs	r5, BASEPRI
   1a924:	f383 8812 	msr	BASEPRI_MAX, r3
   1a928:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a92c:	4817      	ldr	r0, [pc, #92]	; (1a98c <z_unpend_thread_no_timeout+0x74>)
   1a92e:	f7fe fdff 	bl	19530 <z_spin_lock_valid>
   1a932:	b968      	cbnz	r0, 1a950 <z_unpend_thread_no_timeout+0x38>
   1a934:	4a16      	ldr	r2, [pc, #88]	; (1a990 <z_unpend_thread_no_timeout+0x78>)
   1a936:	4917      	ldr	r1, [pc, #92]	; (1a994 <z_unpend_thread_no_timeout+0x7c>)
   1a938:	4817      	ldr	r0, [pc, #92]	; (1a998 <z_unpend_thread_no_timeout+0x80>)
   1a93a:	2381      	movs	r3, #129	; 0x81
   1a93c:	f002 fa51 	bl	1cde2 <printk>
   1a940:	4912      	ldr	r1, [pc, #72]	; (1a98c <z_unpend_thread_no_timeout+0x74>)
   1a942:	4816      	ldr	r0, [pc, #88]	; (1a99c <z_unpend_thread_no_timeout+0x84>)
   1a944:	f002 fa4d 	bl	1cde2 <printk>
   1a948:	4811      	ldr	r0, [pc, #68]	; (1a990 <z_unpend_thread_no_timeout+0x78>)
   1a94a:	2181      	movs	r1, #129	; 0x81
   1a94c:	f002 fca3 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a950:	480e      	ldr	r0, [pc, #56]	; (1a98c <z_unpend_thread_no_timeout+0x74>)
   1a952:	f7fe fe0b 	bl	1956c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   1a956:	4620      	mov	r0, r4
   1a958:	f000 f900 	bl	1ab5c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a95c:	480b      	ldr	r0, [pc, #44]	; (1a98c <z_unpend_thread_no_timeout+0x74>)
   1a95e:	f7fe fdf5 	bl	1954c <z_spin_unlock_valid>
   1a962:	b968      	cbnz	r0, 1a980 <z_unpend_thread_no_timeout+0x68>
   1a964:	4a0a      	ldr	r2, [pc, #40]	; (1a990 <z_unpend_thread_no_timeout+0x78>)
   1a966:	490e      	ldr	r1, [pc, #56]	; (1a9a0 <z_unpend_thread_no_timeout+0x88>)
   1a968:	480b      	ldr	r0, [pc, #44]	; (1a998 <z_unpend_thread_no_timeout+0x80>)
   1a96a:	23ac      	movs	r3, #172	; 0xac
   1a96c:	f002 fa39 	bl	1cde2 <printk>
   1a970:	4906      	ldr	r1, [pc, #24]	; (1a98c <z_unpend_thread_no_timeout+0x74>)
   1a972:	480c      	ldr	r0, [pc, #48]	; (1a9a4 <z_unpend_thread_no_timeout+0x8c>)
   1a974:	f002 fa35 	bl	1cde2 <printk>
   1a978:	4805      	ldr	r0, [pc, #20]	; (1a990 <z_unpend_thread_no_timeout+0x78>)
   1a97a:	21ac      	movs	r1, #172	; 0xac
   1a97c:	f002 fc8b 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1a980:	f385 8811 	msr	BASEPRI, r5
   1a984:	f3bf 8f6f 	isb	sy
	}
}
   1a988:	bd38      	pop	{r3, r4, r5, pc}
   1a98a:	bf00      	nop
   1a98c:	20001f94 	.word	0x20001f94
   1a990:	00020b35 	.word	0x00020b35
   1a994:	00020b87 	.word	0x00020b87
   1a998:	00020a75 	.word	0x00020a75
   1a99c:	00020b9c 	.word	0x00020b9c
   1a9a0:	00020b5b 	.word	0x00020b5b
   1a9a4:	00020b72 	.word	0x00020b72

0001a9a8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1a9a8:	b538      	push	{r3, r4, r5, lr}
   1a9aa:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1a9ac:	460d      	mov	r5, r1
   1a9ae:	b9e9      	cbnz	r1, 1a9ec <z_reschedule+0x44>
   1a9b0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   1a9b4:	b9d3      	cbnz	r3, 1a9ec <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   1a9b6:	4b19      	ldr	r3, [pc, #100]	; (1aa1c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   1a9b8:	69da      	ldr	r2, [r3, #28]
   1a9ba:	689b      	ldr	r3, [r3, #8]
   1a9bc:	429a      	cmp	r2, r3
   1a9be:	d015      	beq.n	1a9ec <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a9c0:	f7fe fdc4 	bl	1954c <z_spin_unlock_valid>
   1a9c4:	b968      	cbnz	r0, 1a9e2 <z_reschedule+0x3a>
   1a9c6:	4a16      	ldr	r2, [pc, #88]	; (1aa20 <z_reschedule+0x78>)
   1a9c8:	4916      	ldr	r1, [pc, #88]	; (1aa24 <z_reschedule+0x7c>)
   1a9ca:	4817      	ldr	r0, [pc, #92]	; (1aa28 <z_reschedule+0x80>)
   1a9cc:	23c3      	movs	r3, #195	; 0xc3
   1a9ce:	f002 fa08 	bl	1cde2 <printk>
   1a9d2:	4816      	ldr	r0, [pc, #88]	; (1aa2c <z_reschedule+0x84>)
   1a9d4:	4621      	mov	r1, r4
   1a9d6:	f002 fa04 	bl	1cde2 <printk>
   1a9da:	4811      	ldr	r0, [pc, #68]	; (1aa20 <z_reschedule+0x78>)
   1a9dc:	21c3      	movs	r1, #195	; 0xc3
   1a9de:	f002 fc5a 	bl	1d296 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1a9e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   1a9e6:	2000      	movs	r0, #0
   1a9e8:	f7f6 bd84 	b.w	114f4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a9ec:	4620      	mov	r0, r4
   1a9ee:	f7fe fdad 	bl	1954c <z_spin_unlock_valid>
   1a9f2:	b968      	cbnz	r0, 1aa10 <z_reschedule+0x68>
   1a9f4:	4a0a      	ldr	r2, [pc, #40]	; (1aa20 <z_reschedule+0x78>)
   1a9f6:	490b      	ldr	r1, [pc, #44]	; (1aa24 <z_reschedule+0x7c>)
   1a9f8:	480b      	ldr	r0, [pc, #44]	; (1aa28 <z_reschedule+0x80>)
   1a9fa:	23ac      	movs	r3, #172	; 0xac
   1a9fc:	f002 f9f1 	bl	1cde2 <printk>
   1aa00:	480a      	ldr	r0, [pc, #40]	; (1aa2c <z_reschedule+0x84>)
   1aa02:	4621      	mov	r1, r4
   1aa04:	f002 f9ed 	bl	1cde2 <printk>
   1aa08:	4805      	ldr	r0, [pc, #20]	; (1aa20 <z_reschedule+0x78>)
   1aa0a:	21ac      	movs	r1, #172	; 0xac
   1aa0c:	f002 fc43 	bl	1d296 <assert_post_action>
   1aa10:	f385 8811 	msr	BASEPRI, r5
   1aa14:	f3bf 8f6f 	isb	sy
   1aa18:	bd38      	pop	{r3, r4, r5, pc}
   1aa1a:	bf00      	nop
   1aa1c:	20001f54 	.word	0x20001f54
   1aa20:	00020b35 	.word	0x00020b35
   1aa24:	00020b5b 	.word	0x00020b5b
   1aa28:	00020a75 	.word	0x00020a75
   1aa2c:	00020b72 	.word	0x00020b72

0001aa30 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   1aa30:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1aa32:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aa36:	f3ef 8511 	mrs	r5, BASEPRI
   1aa3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aa42:	4829      	ldr	r0, [pc, #164]	; (1aae8 <k_sched_lock+0xb8>)
   1aa44:	f7fe fd74 	bl	19530 <z_spin_lock_valid>
   1aa48:	b968      	cbnz	r0, 1aa66 <k_sched_lock+0x36>
   1aa4a:	4a28      	ldr	r2, [pc, #160]	; (1aaec <k_sched_lock+0xbc>)
   1aa4c:	4928      	ldr	r1, [pc, #160]	; (1aaf0 <k_sched_lock+0xc0>)
   1aa4e:	4829      	ldr	r0, [pc, #164]	; (1aaf4 <k_sched_lock+0xc4>)
   1aa50:	2381      	movs	r3, #129	; 0x81
   1aa52:	f002 f9c6 	bl	1cde2 <printk>
   1aa56:	4924      	ldr	r1, [pc, #144]	; (1aae8 <k_sched_lock+0xb8>)
   1aa58:	4827      	ldr	r0, [pc, #156]	; (1aaf8 <k_sched_lock+0xc8>)
   1aa5a:	f002 f9c2 	bl	1cde2 <printk>
   1aa5e:	4823      	ldr	r0, [pc, #140]	; (1aaec <k_sched_lock+0xbc>)
   1aa60:	2181      	movs	r1, #129	; 0x81
   1aa62:	f002 fc18 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1aa66:	4820      	ldr	r0, [pc, #128]	; (1aae8 <k_sched_lock+0xb8>)
   1aa68:	f7fe fd80 	bl	1956c <z_spin_lock_set_owner>
   1aa6c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1aa70:	b163      	cbz	r3, 1aa8c <k_sched_lock+0x5c>
   1aa72:	4922      	ldr	r1, [pc, #136]	; (1aafc <k_sched_lock+0xcc>)
   1aa74:	4a22      	ldr	r2, [pc, #136]	; (1ab00 <k_sched_lock+0xd0>)
   1aa76:	481f      	ldr	r0, [pc, #124]	; (1aaf4 <k_sched_lock+0xc4>)
   1aa78:	23fd      	movs	r3, #253	; 0xfd
   1aa7a:	f002 f9b2 	bl	1cde2 <printk>
   1aa7e:	4821      	ldr	r0, [pc, #132]	; (1ab04 <k_sched_lock+0xd4>)
   1aa80:	f002 f9af 	bl	1cde2 <printk>
   1aa84:	481e      	ldr	r0, [pc, #120]	; (1ab00 <k_sched_lock+0xd0>)
   1aa86:	21fd      	movs	r1, #253	; 0xfd
   1aa88:	f002 fc05 	bl	1d296 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1aa8c:	4c1e      	ldr	r4, [pc, #120]	; (1ab08 <k_sched_lock+0xd8>)
   1aa8e:	68a2      	ldr	r2, [r4, #8]
   1aa90:	7bd2      	ldrb	r2, [r2, #15]
   1aa92:	2a01      	cmp	r2, #1
   1aa94:	d10c      	bne.n	1aab0 <k_sched_lock+0x80>
   1aa96:	491d      	ldr	r1, [pc, #116]	; (1ab0c <k_sched_lock+0xdc>)
   1aa98:	4a19      	ldr	r2, [pc, #100]	; (1ab00 <k_sched_lock+0xd0>)
   1aa9a:	4816      	ldr	r0, [pc, #88]	; (1aaf4 <k_sched_lock+0xc4>)
   1aa9c:	23fe      	movs	r3, #254	; 0xfe
   1aa9e:	f002 f9a0 	bl	1cde2 <printk>
   1aaa2:	4818      	ldr	r0, [pc, #96]	; (1ab04 <k_sched_lock+0xd4>)
   1aaa4:	f002 f99d 	bl	1cde2 <printk>
   1aaa8:	4815      	ldr	r0, [pc, #84]	; (1ab00 <k_sched_lock+0xd0>)
   1aaaa:	21fe      	movs	r1, #254	; 0xfe
   1aaac:	f002 fbf3 	bl	1d296 <assert_post_action>
	--_current->base.sched_locked;
   1aab0:	68a2      	ldr	r2, [r4, #8]
   1aab2:	7bd3      	ldrb	r3, [r2, #15]
   1aab4:	3b01      	subs	r3, #1
   1aab6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aab8:	480b      	ldr	r0, [pc, #44]	; (1aae8 <k_sched_lock+0xb8>)
   1aaba:	f7fe fd47 	bl	1954c <z_spin_unlock_valid>
   1aabe:	b968      	cbnz	r0, 1aadc <k_sched_lock+0xac>
   1aac0:	4a0a      	ldr	r2, [pc, #40]	; (1aaec <k_sched_lock+0xbc>)
   1aac2:	4913      	ldr	r1, [pc, #76]	; (1ab10 <k_sched_lock+0xe0>)
   1aac4:	480b      	ldr	r0, [pc, #44]	; (1aaf4 <k_sched_lock+0xc4>)
   1aac6:	23ac      	movs	r3, #172	; 0xac
   1aac8:	f002 f98b 	bl	1cde2 <printk>
   1aacc:	4906      	ldr	r1, [pc, #24]	; (1aae8 <k_sched_lock+0xb8>)
   1aace:	4811      	ldr	r0, [pc, #68]	; (1ab14 <k_sched_lock+0xe4>)
   1aad0:	f002 f987 	bl	1cde2 <printk>
   1aad4:	4805      	ldr	r0, [pc, #20]	; (1aaec <k_sched_lock+0xbc>)
   1aad6:	21ac      	movs	r1, #172	; 0xac
   1aad8:	f002 fbdd 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1aadc:	f385 8811 	msr	BASEPRI, r5
   1aae0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1aae4:	bd38      	pop	{r3, r4, r5, pc}
   1aae6:	bf00      	nop
   1aae8:	20001f94 	.word	0x20001f94
   1aaec:	00020b35 	.word	0x00020b35
   1aaf0:	00020b87 	.word	0x00020b87
   1aaf4:	00020a75 	.word	0x00020a75
   1aaf8:	00020b9c 	.word	0x00020b9c
   1aafc:	000220dd 	.word	0x000220dd
   1ab00:	000221e8 	.word	0x000221e8
   1ab04:	00021901 	.word	0x00021901
   1ab08:	20001f54 	.word	0x20001f54
   1ab0c:	00022213 	.word	0x00022213
   1ab10:	00020b5b 	.word	0x00020b5b
   1ab14:	00020b72 	.word	0x00020b72

0001ab18 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ab18:	4b0c      	ldr	r3, [pc, #48]	; (1ab4c <z_priq_dumb_remove+0x34>)
   1ab1a:	4299      	cmp	r1, r3
{
   1ab1c:	b510      	push	{r4, lr}
   1ab1e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ab20:	d10b      	bne.n	1ab3a <z_priq_dumb_remove+0x22>
   1ab22:	490b      	ldr	r1, [pc, #44]	; (1ab50 <z_priq_dumb_remove+0x38>)
   1ab24:	480b      	ldr	r0, [pc, #44]	; (1ab54 <z_priq_dumb_remove+0x3c>)
   1ab26:	4a0c      	ldr	r2, [pc, #48]	; (1ab58 <z_priq_dumb_remove+0x40>)
   1ab28:	f240 33b5 	movw	r3, #949	; 0x3b5
   1ab2c:	f002 f959 	bl	1cde2 <printk>
   1ab30:	4809      	ldr	r0, [pc, #36]	; (1ab58 <z_priq_dumb_remove+0x40>)
   1ab32:	f240 31b5 	movw	r1, #949	; 0x3b5
   1ab36:	f002 fbae 	bl	1d296 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1ab3a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   1ab3e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ab40:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ab42:	2300      	movs	r3, #0
	node->prev = NULL;
   1ab44:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1ab48:	bd10      	pop	{r4, pc}
   1ab4a:	bf00      	nop
   1ab4c:	20001a58 	.word	0x20001a58
   1ab50:	000223c7 	.word	0x000223c7
   1ab54:	00020a75 	.word	0x00020a75
   1ab58:	000223a5 	.word	0x000223a5

0001ab5c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ab5c:	6883      	ldr	r3, [r0, #8]
{
   1ab5e:	b510      	push	{r4, lr}
   1ab60:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ab62:	b95b      	cbnz	r3, 1ab7c <unpend_thread_no_timeout+0x20>
   1ab64:	490b      	ldr	r1, [pc, #44]	; (1ab94 <unpend_thread_no_timeout+0x38>)
   1ab66:	480c      	ldr	r0, [pc, #48]	; (1ab98 <unpend_thread_no_timeout+0x3c>)
   1ab68:	4a0c      	ldr	r2, [pc, #48]	; (1ab9c <unpend_thread_no_timeout+0x40>)
   1ab6a:	f240 2353 	movw	r3, #595	; 0x253
   1ab6e:	f002 f938 	bl	1cde2 <printk>
   1ab72:	480a      	ldr	r0, [pc, #40]	; (1ab9c <unpend_thread_no_timeout+0x40>)
   1ab74:	f240 2153 	movw	r1, #595	; 0x253
   1ab78:	f002 fb8d 	bl	1d296 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1ab7c:	68a0      	ldr	r0, [r4, #8]
   1ab7e:	4621      	mov	r1, r4
   1ab80:	f7ff ffca 	bl	1ab18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ab84:	7b63      	ldrb	r3, [r4, #13]
   1ab86:	f023 0302 	bic.w	r3, r3, #2
   1ab8a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1ab8c:	2300      	movs	r3, #0
   1ab8e:	60a3      	str	r3, [r4, #8]
}
   1ab90:	bd10      	pop	{r4, pc}
   1ab92:	bf00      	nop
   1ab94:	000223e8 	.word	0x000223e8
   1ab98:	00020a75 	.word	0x00020a75
   1ab9c:	000223a5 	.word	0x000223a5

0001aba0 <z_unpend_thread>:
{
   1aba0:	b538      	push	{r3, r4, r5, lr}
   1aba2:	4604      	mov	r4, r0
	__asm__ volatile(
   1aba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aba8:	f3ef 8511 	mrs	r5, BASEPRI
   1abac:	f383 8812 	msr	BASEPRI_MAX, r3
   1abb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1abb4:	4819      	ldr	r0, [pc, #100]	; (1ac1c <z_unpend_thread+0x7c>)
   1abb6:	f7fe fcbb 	bl	19530 <z_spin_lock_valid>
   1abba:	b968      	cbnz	r0, 1abd8 <z_unpend_thread+0x38>
   1abbc:	4a18      	ldr	r2, [pc, #96]	; (1ac20 <z_unpend_thread+0x80>)
   1abbe:	4919      	ldr	r1, [pc, #100]	; (1ac24 <z_unpend_thread+0x84>)
   1abc0:	4819      	ldr	r0, [pc, #100]	; (1ac28 <z_unpend_thread+0x88>)
   1abc2:	2381      	movs	r3, #129	; 0x81
   1abc4:	f002 f90d 	bl	1cde2 <printk>
   1abc8:	4914      	ldr	r1, [pc, #80]	; (1ac1c <z_unpend_thread+0x7c>)
   1abca:	4818      	ldr	r0, [pc, #96]	; (1ac2c <z_unpend_thread+0x8c>)
   1abcc:	f002 f909 	bl	1cde2 <printk>
   1abd0:	4813      	ldr	r0, [pc, #76]	; (1ac20 <z_unpend_thread+0x80>)
   1abd2:	2181      	movs	r1, #129	; 0x81
   1abd4:	f002 fb5f 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1abd8:	4810      	ldr	r0, [pc, #64]	; (1ac1c <z_unpend_thread+0x7c>)
   1abda:	f7fe fcc7 	bl	1956c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1abde:	4620      	mov	r0, r4
   1abe0:	f7ff ffbc 	bl	1ab5c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1abe4:	480d      	ldr	r0, [pc, #52]	; (1ac1c <z_unpend_thread+0x7c>)
   1abe6:	f7fe fcb1 	bl	1954c <z_spin_unlock_valid>
   1abea:	b968      	cbnz	r0, 1ac08 <z_unpend_thread+0x68>
   1abec:	4a0c      	ldr	r2, [pc, #48]	; (1ac20 <z_unpend_thread+0x80>)
   1abee:	4910      	ldr	r1, [pc, #64]	; (1ac30 <z_unpend_thread+0x90>)
   1abf0:	480d      	ldr	r0, [pc, #52]	; (1ac28 <z_unpend_thread+0x88>)
   1abf2:	23ac      	movs	r3, #172	; 0xac
   1abf4:	f002 f8f5 	bl	1cde2 <printk>
   1abf8:	4908      	ldr	r1, [pc, #32]	; (1ac1c <z_unpend_thread+0x7c>)
   1abfa:	480e      	ldr	r0, [pc, #56]	; (1ac34 <z_unpend_thread+0x94>)
   1abfc:	f002 f8f1 	bl	1cde2 <printk>
   1ac00:	4807      	ldr	r0, [pc, #28]	; (1ac20 <z_unpend_thread+0x80>)
   1ac02:	21ac      	movs	r1, #172	; 0xac
   1ac04:	f002 fb47 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1ac08:	f385 8811 	msr	BASEPRI, r5
   1ac0c:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ac10:	f104 0018 	add.w	r0, r4, #24
}
   1ac14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ac18:	f001 b96e 	b.w	1bef8 <z_abort_timeout>
   1ac1c:	20001f94 	.word	0x20001f94
   1ac20:	00020b35 	.word	0x00020b35
   1ac24:	00020b87 	.word	0x00020b87
   1ac28:	00020a75 	.word	0x00020a75
   1ac2c:	00020b9c 	.word	0x00020b9c
   1ac30:	00020b5b 	.word	0x00020b5b
   1ac34:	00020b72 	.word	0x00020b72

0001ac38 <update_cache>:
{
   1ac38:	b538      	push	{r3, r4, r5, lr}
   1ac3a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1ac3c:	4814      	ldr	r0, [pc, #80]	; (1ac90 <update_cache+0x58>)
   1ac3e:	4d15      	ldr	r5, [pc, #84]	; (1ac94 <update_cache+0x5c>)
   1ac40:	f005 f8f6 	bl	1fe30 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1ac44:	4604      	mov	r4, r0
   1ac46:	b900      	cbnz	r0, 1ac4a <update_cache+0x12>
   1ac48:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1ac4a:	b9ca      	cbnz	r2, 1ac80 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   1ac4c:	68ab      	ldr	r3, [r5, #8]
   1ac4e:	b963      	cbnz	r3, 1ac6a <update_cache+0x32>
   1ac50:	4911      	ldr	r1, [pc, #68]	; (1ac98 <update_cache+0x60>)
   1ac52:	4a12      	ldr	r2, [pc, #72]	; (1ac9c <update_cache+0x64>)
   1ac54:	4812      	ldr	r0, [pc, #72]	; (1aca0 <update_cache+0x68>)
   1ac56:	2381      	movs	r3, #129	; 0x81
   1ac58:	f002 f8c3 	bl	1cde2 <printk>
   1ac5c:	4811      	ldr	r0, [pc, #68]	; (1aca4 <update_cache+0x6c>)
   1ac5e:	f002 f8c0 	bl	1cde2 <printk>
   1ac62:	480e      	ldr	r0, [pc, #56]	; (1ac9c <update_cache+0x64>)
   1ac64:	2181      	movs	r1, #129	; 0x81
   1ac66:	f002 fb16 	bl	1d296 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1ac6a:	68ab      	ldr	r3, [r5, #8]
   1ac6c:	7b5a      	ldrb	r2, [r3, #13]
   1ac6e:	06d2      	lsls	r2, r2, #27
   1ac70:	d106      	bne.n	1ac80 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1ac72:	69a2      	ldr	r2, [r4, #24]
   1ac74:	b922      	cbnz	r2, 1ac80 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   1ac76:	89da      	ldrh	r2, [r3, #14]
   1ac78:	2a7f      	cmp	r2, #127	; 0x7f
   1ac7a:	d901      	bls.n	1ac80 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   1ac7c:	61eb      	str	r3, [r5, #28]
}
   1ac7e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1ac80:	68ab      	ldr	r3, [r5, #8]
   1ac82:	42a3      	cmp	r3, r4
   1ac84:	d001      	beq.n	1ac8a <update_cache+0x52>
			z_reset_time_slice();
   1ac86:	f7ff fdcb 	bl	1a820 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1ac8a:	61ec      	str	r4, [r5, #28]
}
   1ac8c:	e7f7      	b.n	1ac7e <update_cache+0x46>
   1ac8e:	bf00      	nop
   1ac90:	20001f74 	.word	0x20001f74
   1ac94:	20001f54 	.word	0x20001f54
   1ac98:	000223ff 	.word	0x000223ff
   1ac9c:	000223a5 	.word	0x000223a5
   1aca0:	00020a75 	.word	0x00020a75
   1aca4:	00021901 	.word	0x00021901

0001aca8 <move_thread_to_end_of_prio_q>:
{
   1aca8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1acaa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1acae:	7b43      	ldrb	r3, [r0, #13]
   1acb0:	2a00      	cmp	r2, #0
{
   1acb2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1acb4:	da06      	bge.n	1acc4 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1acb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1acba:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1acbc:	4601      	mov	r1, r0
   1acbe:	481f      	ldr	r0, [pc, #124]	; (1ad3c <move_thread_to_end_of_prio_q+0x94>)
   1acc0:	f7ff ff2a 	bl	1ab18 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1acc4:	7b63      	ldrb	r3, [r4, #13]
   1acc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1acca:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1accc:	4b1c      	ldr	r3, [pc, #112]	; (1ad40 <move_thread_to_end_of_prio_q+0x98>)
   1acce:	429c      	cmp	r4, r3
   1acd0:	d109      	bne.n	1ace6 <move_thread_to_end_of_prio_q+0x3e>
   1acd2:	491c      	ldr	r1, [pc, #112]	; (1ad44 <move_thread_to_end_of_prio_q+0x9c>)
   1acd4:	481c      	ldr	r0, [pc, #112]	; (1ad48 <move_thread_to_end_of_prio_q+0xa0>)
   1acd6:	4a1d      	ldr	r2, [pc, #116]	; (1ad4c <move_thread_to_end_of_prio_q+0xa4>)
   1acd8:	23b1      	movs	r3, #177	; 0xb1
   1acda:	f002 f882 	bl	1cde2 <printk>
   1acde:	481b      	ldr	r0, [pc, #108]	; (1ad4c <move_thread_to_end_of_prio_q+0xa4>)
   1ace0:	21b1      	movs	r1, #177	; 0xb1
   1ace2:	f002 fad8 	bl	1d296 <assert_post_action>
	return list->head == list;
   1ace6:	4a1a      	ldr	r2, [pc, #104]	; (1ad50 <move_thread_to_end_of_prio_q+0xa8>)
   1ace8:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1acea:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
   1acec:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1acf0:	428b      	cmp	r3, r1
   1acf2:	bf08      	it	eq
   1acf4:	2300      	moveq	r3, #0
   1acf6:	2b00      	cmp	r3, #0
   1acf8:	bf38      	it	cc
   1acfa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1acfc:	b1cb      	cbz	r3, 1ad32 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   1acfe:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1ad02:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1ad06:	4286      	cmp	r6, r0
   1ad08:	d00f      	beq.n	1ad2a <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   1ad0a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ad0c:	2800      	cmp	r0, #0
   1ad0e:	dd0c      	ble.n	1ad2a <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   1ad10:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1ad12:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1ad16:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1ad18:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   1ad1a:	6890      	ldr	r0, [r2, #8]
   1ad1c:	1b03      	subs	r3, r0, r4
   1ad1e:	4258      	negs	r0, r3
}
   1ad20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ad24:	4158      	adcs	r0, r3
   1ad26:	f7ff bf87 	b.w	1ac38 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ad2a:	42ab      	cmp	r3, r5
   1ad2c:	d001      	beq.n	1ad32 <move_thread_to_end_of_prio_q+0x8a>
   1ad2e:	681b      	ldr	r3, [r3, #0]
   1ad30:	e7e4      	b.n	1acfc <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   1ad32:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   1ad36:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1ad38:	6254      	str	r4, [r2, #36]	; 0x24
}
   1ad3a:	e7ee      	b.n	1ad1a <move_thread_to_end_of_prio_q+0x72>
   1ad3c:	20001f74 	.word	0x20001f74
   1ad40:	20001a58 	.word	0x20001a58
   1ad44:	000223c7 	.word	0x000223c7
   1ad48:	00020a75 	.word	0x00020a75
   1ad4c:	000223a5 	.word	0x000223a5
   1ad50:	20001f54 	.word	0x20001f54

0001ad54 <z_time_slice>:
{
   1ad54:	b570      	push	{r4, r5, r6, lr}
   1ad56:	4604      	mov	r4, r0
	__asm__ volatile(
   1ad58:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad5c:	f3ef 8511 	mrs	r5, BASEPRI
   1ad60:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ad68:	482a      	ldr	r0, [pc, #168]	; (1ae14 <z_time_slice+0xc0>)
   1ad6a:	f7fe fbe1 	bl	19530 <z_spin_lock_valid>
   1ad6e:	b968      	cbnz	r0, 1ad8c <z_time_slice+0x38>
   1ad70:	4a29      	ldr	r2, [pc, #164]	; (1ae18 <z_time_slice+0xc4>)
   1ad72:	492a      	ldr	r1, [pc, #168]	; (1ae1c <z_time_slice+0xc8>)
   1ad74:	482a      	ldr	r0, [pc, #168]	; (1ae20 <z_time_slice+0xcc>)
   1ad76:	2381      	movs	r3, #129	; 0x81
   1ad78:	f002 f833 	bl	1cde2 <printk>
   1ad7c:	4925      	ldr	r1, [pc, #148]	; (1ae14 <z_time_slice+0xc0>)
   1ad7e:	4829      	ldr	r0, [pc, #164]	; (1ae24 <z_time_slice+0xd0>)
   1ad80:	f002 f82f 	bl	1cde2 <printk>
   1ad84:	4824      	ldr	r0, [pc, #144]	; (1ae18 <z_time_slice+0xc4>)
   1ad86:	2181      	movs	r1, #129	; 0x81
   1ad88:	f002 fa85 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ad8c:	4821      	ldr	r0, [pc, #132]	; (1ae14 <z_time_slice+0xc0>)
   1ad8e:	f7fe fbed 	bl	1956c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1ad92:	4b25      	ldr	r3, [pc, #148]	; (1ae28 <z_time_slice+0xd4>)
   1ad94:	4a25      	ldr	r2, [pc, #148]	; (1ae2c <z_time_slice+0xd8>)
   1ad96:	6898      	ldr	r0, [r3, #8]
   1ad98:	6811      	ldr	r1, [r2, #0]
   1ad9a:	4288      	cmp	r0, r1
   1ad9c:	4619      	mov	r1, r3
   1ad9e:	d118      	bne.n	1add2 <z_time_slice+0x7e>
			z_reset_time_slice();
   1ada0:	f7ff fd3e 	bl	1a820 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ada4:	481b      	ldr	r0, [pc, #108]	; (1ae14 <z_time_slice+0xc0>)
   1ada6:	f7fe fbd1 	bl	1954c <z_spin_unlock_valid>
   1adaa:	b968      	cbnz	r0, 1adc8 <z_time_slice+0x74>
   1adac:	4a1a      	ldr	r2, [pc, #104]	; (1ae18 <z_time_slice+0xc4>)
   1adae:	4920      	ldr	r1, [pc, #128]	; (1ae30 <z_time_slice+0xdc>)
   1adb0:	481b      	ldr	r0, [pc, #108]	; (1ae20 <z_time_slice+0xcc>)
   1adb2:	23ac      	movs	r3, #172	; 0xac
   1adb4:	f002 f815 	bl	1cde2 <printk>
   1adb8:	4916      	ldr	r1, [pc, #88]	; (1ae14 <z_time_slice+0xc0>)
   1adba:	481e      	ldr	r0, [pc, #120]	; (1ae34 <z_time_slice+0xe0>)
   1adbc:	f002 f811 	bl	1cde2 <printk>
   1adc0:	4815      	ldr	r0, [pc, #84]	; (1ae18 <z_time_slice+0xc4>)
   1adc2:	21ac      	movs	r1, #172	; 0xac
   1adc4:	f002 fa67 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1adc8:	f385 8811 	msr	BASEPRI, r5
   1adcc:	f3bf 8f6f 	isb	sy
}
   1add0:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1add2:	2600      	movs	r6, #0
   1add4:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1add6:	4a18      	ldr	r2, [pc, #96]	; (1ae38 <z_time_slice+0xe4>)
   1add8:	6812      	ldr	r2, [r2, #0]
   1adda:	b1ba      	cbz	r2, 1ae0c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   1addc:	89c2      	ldrh	r2, [r0, #14]
   1adde:	2a7f      	cmp	r2, #127	; 0x7f
   1ade0:	d814      	bhi.n	1ae0c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   1ade2:	7b42      	ldrb	r2, [r0, #13]
   1ade4:	06d2      	lsls	r2, r2, #27
   1ade6:	d111      	bne.n	1ae0c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1ade8:	4a14      	ldr	r2, [pc, #80]	; (1ae3c <z_time_slice+0xe8>)
   1adea:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1adee:	6812      	ldr	r2, [r2, #0]
   1adf0:	4296      	cmp	r6, r2
   1adf2:	db0b      	blt.n	1ae0c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   1adf4:	4a12      	ldr	r2, [pc, #72]	; (1ae40 <z_time_slice+0xec>)
   1adf6:	4290      	cmp	r0, r2
   1adf8:	d008      	beq.n	1ae0c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   1adfa:	691a      	ldr	r2, [r3, #16]
   1adfc:	42a2      	cmp	r2, r4
   1adfe:	dc02      	bgt.n	1ae06 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   1ae00:	f7ff ff52 	bl	1aca8 <move_thread_to_end_of_prio_q>
   1ae04:	e7cc      	b.n	1ada0 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   1ae06:	1b12      	subs	r2, r2, r4
   1ae08:	611a      	str	r2, [r3, #16]
   1ae0a:	e7cb      	b.n	1ada4 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   1ae0c:	2300      	movs	r3, #0
   1ae0e:	610b      	str	r3, [r1, #16]
   1ae10:	e7c8      	b.n	1ada4 <z_time_slice+0x50>
   1ae12:	bf00      	nop
   1ae14:	20001f94 	.word	0x20001f94
   1ae18:	00020b35 	.word	0x00020b35
   1ae1c:	00020b87 	.word	0x00020b87
   1ae20:	00020a75 	.word	0x00020a75
   1ae24:	00020b9c 	.word	0x00020b9c
   1ae28:	20001f54 	.word	0x20001f54
   1ae2c:	20001f90 	.word	0x20001f90
   1ae30:	00020b5b 	.word	0x00020b5b
   1ae34:	00020b72 	.word	0x00020b72
   1ae38:	20001f9c 	.word	0x20001f9c
   1ae3c:	20001f98 	.word	0x20001f98
   1ae40:	20001a58 	.word	0x20001a58

0001ae44 <ready_thread>:
{
   1ae44:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ae46:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1ae4a:	7b43      	ldrb	r3, [r0, #13]
   1ae4c:	2a00      	cmp	r2, #0
{
   1ae4e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ae50:	db3e      	blt.n	1aed0 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ae52:	06da      	lsls	r2, r3, #27
   1ae54:	d13c      	bne.n	1aed0 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   1ae56:	6985      	ldr	r5, [r0, #24]
   1ae58:	2d00      	cmp	r5, #0
   1ae5a:	d139      	bne.n	1aed0 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ae5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ae60:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1ae62:	4b1c      	ldr	r3, [pc, #112]	; (1aed4 <ready_thread+0x90>)
   1ae64:	4298      	cmp	r0, r3
   1ae66:	d109      	bne.n	1ae7c <ready_thread+0x38>
   1ae68:	491b      	ldr	r1, [pc, #108]	; (1aed8 <ready_thread+0x94>)
   1ae6a:	481c      	ldr	r0, [pc, #112]	; (1aedc <ready_thread+0x98>)
   1ae6c:	4a1c      	ldr	r2, [pc, #112]	; (1aee0 <ready_thread+0x9c>)
   1ae6e:	23b1      	movs	r3, #177	; 0xb1
   1ae70:	f001 ffb7 	bl	1cde2 <printk>
   1ae74:	481a      	ldr	r0, [pc, #104]	; (1aee0 <ready_thread+0x9c>)
   1ae76:	21b1      	movs	r1, #177	; 0xb1
   1ae78:	f002 fa0d 	bl	1d296 <assert_post_action>
	return list->head == list;
   1ae7c:	4919      	ldr	r1, [pc, #100]	; (1aee4 <ready_thread+0xa0>)
   1ae7e:	460b      	mov	r3, r1
   1ae80:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ae84:	4298      	cmp	r0, r3
   1ae86:	bf18      	it	ne
   1ae88:	4605      	movne	r5, r0
   1ae8a:	2d00      	cmp	r5, #0
   1ae8c:	461a      	mov	r2, r3
   1ae8e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ae90:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1ae92:	bf38      	it	cc
   1ae94:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ae96:	b1b3      	cbz	r3, 1aec6 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   1ae98:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1ae9c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1aea0:	4286      	cmp	r6, r0
   1aea2:	d00c      	beq.n	1aebe <ready_thread+0x7a>
		return b2 - b1;
   1aea4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1aea6:	2800      	cmp	r0, #0
   1aea8:	dd09      	ble.n	1aebe <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   1aeaa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1aeac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1aeb0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1aeb2:	605c      	str	r4, [r3, #4]
}
   1aeb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1aeb8:	2000      	movs	r0, #0
   1aeba:	f7ff bebd 	b.w	1ac38 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1aebe:	42ab      	cmp	r3, r5
   1aec0:	d001      	beq.n	1aec6 <ready_thread+0x82>
   1aec2:	681b      	ldr	r3, [r3, #0]
   1aec4:	e7e7      	b.n	1ae96 <ready_thread+0x52>
	node->prev = tail;
   1aec6:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1aeca:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1aecc:	624c      	str	r4, [r1, #36]	; 0x24
}
   1aece:	e7f1      	b.n	1aeb4 <ready_thread+0x70>
}
   1aed0:	bd70      	pop	{r4, r5, r6, pc}
   1aed2:	bf00      	nop
   1aed4:	20001a58 	.word	0x20001a58
   1aed8:	000223c7 	.word	0x000223c7
   1aedc:	00020a75 	.word	0x00020a75
   1aee0:	000223a5 	.word	0x000223a5
   1aee4:	20001f54 	.word	0x20001f54

0001aee8 <z_ready_thread>:
{
   1aee8:	b538      	push	{r3, r4, r5, lr}
   1aeea:	4604      	mov	r4, r0
	__asm__ volatile(
   1aeec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aef0:	f3ef 8511 	mrs	r5, BASEPRI
   1aef4:	f383 8812 	msr	BASEPRI_MAX, r3
   1aef8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1aefc:	4817      	ldr	r0, [pc, #92]	; (1af5c <z_ready_thread+0x74>)
   1aefe:	f7fe fb17 	bl	19530 <z_spin_lock_valid>
   1af02:	b968      	cbnz	r0, 1af20 <z_ready_thread+0x38>
   1af04:	4a16      	ldr	r2, [pc, #88]	; (1af60 <z_ready_thread+0x78>)
   1af06:	4917      	ldr	r1, [pc, #92]	; (1af64 <z_ready_thread+0x7c>)
   1af08:	4817      	ldr	r0, [pc, #92]	; (1af68 <z_ready_thread+0x80>)
   1af0a:	2381      	movs	r3, #129	; 0x81
   1af0c:	f001 ff69 	bl	1cde2 <printk>
   1af10:	4912      	ldr	r1, [pc, #72]	; (1af5c <z_ready_thread+0x74>)
   1af12:	4816      	ldr	r0, [pc, #88]	; (1af6c <z_ready_thread+0x84>)
   1af14:	f001 ff65 	bl	1cde2 <printk>
   1af18:	4811      	ldr	r0, [pc, #68]	; (1af60 <z_ready_thread+0x78>)
   1af1a:	2181      	movs	r1, #129	; 0x81
   1af1c:	f002 f9bb 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1af20:	480e      	ldr	r0, [pc, #56]	; (1af5c <z_ready_thread+0x74>)
   1af22:	f7fe fb23 	bl	1956c <z_spin_lock_set_owner>
			ready_thread(thread);
   1af26:	4620      	mov	r0, r4
   1af28:	f7ff ff8c 	bl	1ae44 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1af2c:	480b      	ldr	r0, [pc, #44]	; (1af5c <z_ready_thread+0x74>)
   1af2e:	f7fe fb0d 	bl	1954c <z_spin_unlock_valid>
   1af32:	b968      	cbnz	r0, 1af50 <z_ready_thread+0x68>
   1af34:	4a0a      	ldr	r2, [pc, #40]	; (1af60 <z_ready_thread+0x78>)
   1af36:	490e      	ldr	r1, [pc, #56]	; (1af70 <z_ready_thread+0x88>)
   1af38:	480b      	ldr	r0, [pc, #44]	; (1af68 <z_ready_thread+0x80>)
   1af3a:	23ac      	movs	r3, #172	; 0xac
   1af3c:	f001 ff51 	bl	1cde2 <printk>
   1af40:	4906      	ldr	r1, [pc, #24]	; (1af5c <z_ready_thread+0x74>)
   1af42:	480c      	ldr	r0, [pc, #48]	; (1af74 <z_ready_thread+0x8c>)
   1af44:	f001 ff4d 	bl	1cde2 <printk>
   1af48:	4805      	ldr	r0, [pc, #20]	; (1af60 <z_ready_thread+0x78>)
   1af4a:	21ac      	movs	r1, #172	; 0xac
   1af4c:	f002 f9a3 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1af50:	f385 8811 	msr	BASEPRI, r5
   1af54:	f3bf 8f6f 	isb	sy
}
   1af58:	bd38      	pop	{r3, r4, r5, pc}
   1af5a:	bf00      	nop
   1af5c:	20001f94 	.word	0x20001f94
   1af60:	00020b35 	.word	0x00020b35
   1af64:	00020b87 	.word	0x00020b87
   1af68:	00020a75 	.word	0x00020a75
   1af6c:	00020b9c 	.word	0x00020b9c
   1af70:	00020b5b 	.word	0x00020b5b
   1af74:	00020b72 	.word	0x00020b72

0001af78 <z_sched_start>:
{
   1af78:	b538      	push	{r3, r4, r5, lr}
   1af7a:	4604      	mov	r4, r0
	__asm__ volatile(
   1af7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af80:	f3ef 8511 	mrs	r5, BASEPRI
   1af84:	f383 8812 	msr	BASEPRI_MAX, r3
   1af88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1af8c:	481d      	ldr	r0, [pc, #116]	; (1b004 <z_sched_start+0x8c>)
   1af8e:	f7fe facf 	bl	19530 <z_spin_lock_valid>
   1af92:	b968      	cbnz	r0, 1afb0 <z_sched_start+0x38>
   1af94:	4a1c      	ldr	r2, [pc, #112]	; (1b008 <z_sched_start+0x90>)
   1af96:	491d      	ldr	r1, [pc, #116]	; (1b00c <z_sched_start+0x94>)
   1af98:	481d      	ldr	r0, [pc, #116]	; (1b010 <z_sched_start+0x98>)
   1af9a:	2381      	movs	r3, #129	; 0x81
   1af9c:	f001 ff21 	bl	1cde2 <printk>
   1afa0:	4918      	ldr	r1, [pc, #96]	; (1b004 <z_sched_start+0x8c>)
   1afa2:	481c      	ldr	r0, [pc, #112]	; (1b014 <z_sched_start+0x9c>)
   1afa4:	f001 ff1d 	bl	1cde2 <printk>
   1afa8:	4817      	ldr	r0, [pc, #92]	; (1b008 <z_sched_start+0x90>)
   1afaa:	2181      	movs	r1, #129	; 0x81
   1afac:	f002 f973 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1afb0:	4814      	ldr	r0, [pc, #80]	; (1b004 <z_sched_start+0x8c>)
   1afb2:	f7fe fadb 	bl	1956c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   1afb6:	7b63      	ldrb	r3, [r4, #13]
   1afb8:	075a      	lsls	r2, r3, #29
   1afba:	d416      	bmi.n	1afea <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1afbc:	4811      	ldr	r0, [pc, #68]	; (1b004 <z_sched_start+0x8c>)
   1afbe:	f7fe fac5 	bl	1954c <z_spin_unlock_valid>
   1afc2:	b968      	cbnz	r0, 1afe0 <z_sched_start+0x68>
   1afc4:	4a10      	ldr	r2, [pc, #64]	; (1b008 <z_sched_start+0x90>)
   1afc6:	4914      	ldr	r1, [pc, #80]	; (1b018 <z_sched_start+0xa0>)
   1afc8:	4811      	ldr	r0, [pc, #68]	; (1b010 <z_sched_start+0x98>)
   1afca:	23ac      	movs	r3, #172	; 0xac
   1afcc:	f001 ff09 	bl	1cde2 <printk>
   1afd0:	490c      	ldr	r1, [pc, #48]	; (1b004 <z_sched_start+0x8c>)
   1afd2:	4812      	ldr	r0, [pc, #72]	; (1b01c <z_sched_start+0xa4>)
   1afd4:	f001 ff05 	bl	1cde2 <printk>
   1afd8:	480b      	ldr	r0, [pc, #44]	; (1b008 <z_sched_start+0x90>)
   1afda:	21ac      	movs	r1, #172	; 0xac
   1afdc:	f002 f95b 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1afe0:	f385 8811 	msr	BASEPRI, r5
   1afe4:	f3bf 8f6f 	isb	sy
}
   1afe8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1afea:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   1afee:	4620      	mov	r0, r4
   1aff0:	7363      	strb	r3, [r4, #13]
   1aff2:	f7ff ff27 	bl	1ae44 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1aff6:	4629      	mov	r1, r5
   1aff8:	4802      	ldr	r0, [pc, #8]	; (1b004 <z_sched_start+0x8c>)
}
   1affa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   1affe:	f7ff bcd3 	b.w	1a9a8 <z_reschedule>
   1b002:	bf00      	nop
   1b004:	20001f94 	.word	0x20001f94
   1b008:	00020b35 	.word	0x00020b35
   1b00c:	00020b87 	.word	0x00020b87
   1b010:	00020a75 	.word	0x00020a75
   1b014:	00020b9c 	.word	0x00020b9c
   1b018:	00020b5b 	.word	0x00020b5b
   1b01c:	00020b72 	.word	0x00020b72

0001b020 <z_thread_timeout>:
{
   1b020:	b570      	push	{r4, r5, r6, lr}
   1b022:	4604      	mov	r4, r0
	__asm__ volatile(
   1b024:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b028:	f3ef 8611 	mrs	r6, BASEPRI
   1b02c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b034:	4820      	ldr	r0, [pc, #128]	; (1b0b8 <z_thread_timeout+0x98>)
   1b036:	f7fe fa7b 	bl	19530 <z_spin_lock_valid>
   1b03a:	b968      	cbnz	r0, 1b058 <z_thread_timeout+0x38>
   1b03c:	4a1f      	ldr	r2, [pc, #124]	; (1b0bc <z_thread_timeout+0x9c>)
   1b03e:	4920      	ldr	r1, [pc, #128]	; (1b0c0 <z_thread_timeout+0xa0>)
   1b040:	4820      	ldr	r0, [pc, #128]	; (1b0c4 <z_thread_timeout+0xa4>)
   1b042:	2381      	movs	r3, #129	; 0x81
   1b044:	f001 fecd 	bl	1cde2 <printk>
   1b048:	491b      	ldr	r1, [pc, #108]	; (1b0b8 <z_thread_timeout+0x98>)
   1b04a:	481f      	ldr	r0, [pc, #124]	; (1b0c8 <z_thread_timeout+0xa8>)
   1b04c:	f001 fec9 	bl	1cde2 <printk>
   1b050:	481a      	ldr	r0, [pc, #104]	; (1b0bc <z_thread_timeout+0x9c>)
   1b052:	2181      	movs	r1, #129	; 0x81
   1b054:	f002 f91f 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b058:	4817      	ldr	r0, [pc, #92]	; (1b0b8 <z_thread_timeout+0x98>)
   1b05a:	f7fe fa87 	bl	1956c <z_spin_lock_set_owner>
		if (!killed) {
   1b05e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1b062:	f013 0f28 	tst.w	r3, #40	; 0x28
   1b066:	d110      	bne.n	1b08a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   1b068:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1b06c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1b070:	b113      	cbz	r3, 1b078 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   1b072:	4628      	mov	r0, r5
   1b074:	f7ff fd72 	bl	1ab5c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1b078:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1b07c:	f023 0314 	bic.w	r3, r3, #20
   1b080:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1b084:	4628      	mov	r0, r5
   1b086:	f7ff fedd 	bl	1ae44 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b08a:	480b      	ldr	r0, [pc, #44]	; (1b0b8 <z_thread_timeout+0x98>)
   1b08c:	f7fe fa5e 	bl	1954c <z_spin_unlock_valid>
   1b090:	b968      	cbnz	r0, 1b0ae <z_thread_timeout+0x8e>
   1b092:	4a0a      	ldr	r2, [pc, #40]	; (1b0bc <z_thread_timeout+0x9c>)
   1b094:	490d      	ldr	r1, [pc, #52]	; (1b0cc <z_thread_timeout+0xac>)
   1b096:	480b      	ldr	r0, [pc, #44]	; (1b0c4 <z_thread_timeout+0xa4>)
   1b098:	23ac      	movs	r3, #172	; 0xac
   1b09a:	f001 fea2 	bl	1cde2 <printk>
   1b09e:	4906      	ldr	r1, [pc, #24]	; (1b0b8 <z_thread_timeout+0x98>)
   1b0a0:	480b      	ldr	r0, [pc, #44]	; (1b0d0 <z_thread_timeout+0xb0>)
   1b0a2:	f001 fe9e 	bl	1cde2 <printk>
   1b0a6:	4805      	ldr	r0, [pc, #20]	; (1b0bc <z_thread_timeout+0x9c>)
   1b0a8:	21ac      	movs	r1, #172	; 0xac
   1b0aa:	f002 f8f4 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1b0ae:	f386 8811 	msr	BASEPRI, r6
   1b0b2:	f3bf 8f6f 	isb	sy
}
   1b0b6:	bd70      	pop	{r4, r5, r6, pc}
   1b0b8:	20001f94 	.word	0x20001f94
   1b0bc:	00020b35 	.word	0x00020b35
   1b0c0:	00020b87 	.word	0x00020b87
   1b0c4:	00020a75 	.word	0x00020a75
   1b0c8:	00020b9c 	.word	0x00020b9c
   1b0cc:	00020b5b 	.word	0x00020b5b
   1b0d0:	00020b72 	.word	0x00020b72

0001b0d4 <unready_thread>:
{
   1b0d4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1b0d6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b0da:	7b43      	ldrb	r3, [r0, #13]
   1b0dc:	2a00      	cmp	r2, #0
{
   1b0de:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   1b0e0:	da06      	bge.n	1b0f0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b0e6:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1b0e8:	4601      	mov	r1, r0
   1b0ea:	4806      	ldr	r0, [pc, #24]	; (1b104 <unready_thread+0x30>)
   1b0ec:	f7ff fd14 	bl	1ab18 <z_priq_dumb_remove>
	update_cache(thread == _current);
   1b0f0:	4b05      	ldr	r3, [pc, #20]	; (1b108 <unready_thread+0x34>)
   1b0f2:	6898      	ldr	r0, [r3, #8]
   1b0f4:	1b03      	subs	r3, r0, r4
   1b0f6:	4258      	negs	r0, r3
}
   1b0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   1b0fc:	4158      	adcs	r0, r3
   1b0fe:	f7ff bd9b 	b.w	1ac38 <update_cache>
   1b102:	bf00      	nop
   1b104:	20001f74 	.word	0x20001f74
   1b108:	20001f54 	.word	0x20001f54

0001b10c <add_to_waitq_locked>:
{
   1b10c:	b538      	push	{r3, r4, r5, lr}
   1b10e:	4604      	mov	r4, r0
   1b110:	460d      	mov	r5, r1
	unready_thread(thread);
   1b112:	f7ff ffdf 	bl	1b0d4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1b116:	7b63      	ldrb	r3, [r4, #13]
   1b118:	f043 0302 	orr.w	r3, r3, #2
   1b11c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b11e:	b31d      	cbz	r5, 1b168 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b120:	4b17      	ldr	r3, [pc, #92]	; (1b180 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   1b122:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b124:	429c      	cmp	r4, r3
   1b126:	d109      	bne.n	1b13c <add_to_waitq_locked+0x30>
   1b128:	4916      	ldr	r1, [pc, #88]	; (1b184 <add_to_waitq_locked+0x78>)
   1b12a:	4817      	ldr	r0, [pc, #92]	; (1b188 <add_to_waitq_locked+0x7c>)
   1b12c:	4a17      	ldr	r2, [pc, #92]	; (1b18c <add_to_waitq_locked+0x80>)
   1b12e:	23b1      	movs	r3, #177	; 0xb1
   1b130:	f001 fe57 	bl	1cde2 <printk>
   1b134:	4815      	ldr	r0, [pc, #84]	; (1b18c <add_to_waitq_locked+0x80>)
   1b136:	21b1      	movs	r1, #177	; 0xb1
   1b138:	f002 f8ad 	bl	1d296 <assert_post_action>
	return list->head == list;
   1b13c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b13e:	429d      	cmp	r5, r3
   1b140:	bf08      	it	eq
   1b142:	2300      	moveq	r3, #0
   1b144:	2b00      	cmp	r3, #0
   1b146:	bf38      	it	cc
   1b148:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b14a:	b19b      	cbz	r3, 1b174 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   1b14c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b150:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1b154:	4291      	cmp	r1, r2
   1b156:	d008      	beq.n	1b16a <add_to_waitq_locked+0x5e>
		return b2 - b1;
   1b158:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b15a:	2a00      	cmp	r2, #0
   1b15c:	dd05      	ble.n	1b16a <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   1b15e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b160:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b164:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b166:	605c      	str	r4, [r3, #4]
}
   1b168:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1b16a:	686a      	ldr	r2, [r5, #4]
   1b16c:	4293      	cmp	r3, r2
   1b16e:	d001      	beq.n	1b174 <add_to_waitq_locked+0x68>
   1b170:	681b      	ldr	r3, [r3, #0]
   1b172:	e7ea      	b.n	1b14a <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   1b174:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1b176:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1b17a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b17c:	606c      	str	r4, [r5, #4]
   1b17e:	e7f3      	b.n	1b168 <add_to_waitq_locked+0x5c>
   1b180:	20001a58 	.word	0x20001a58
   1b184:	000223c7 	.word	0x000223c7
   1b188:	00020a75 	.word	0x00020a75
   1b18c:	000223a5 	.word	0x000223a5

0001b190 <pend>:
{
   1b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b194:	4604      	mov	r4, r0
   1b196:	460d      	mov	r5, r1
   1b198:	4616      	mov	r6, r2
   1b19a:	461f      	mov	r7, r3
	__asm__ volatile(
   1b19c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b1a0:	f3ef 8811 	mrs	r8, BASEPRI
   1b1a4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b1ac:	481f      	ldr	r0, [pc, #124]	; (1b22c <pend+0x9c>)
   1b1ae:	f7fe f9bf 	bl	19530 <z_spin_lock_valid>
   1b1b2:	b968      	cbnz	r0, 1b1d0 <pend+0x40>
   1b1b4:	4a1e      	ldr	r2, [pc, #120]	; (1b230 <pend+0xa0>)
   1b1b6:	491f      	ldr	r1, [pc, #124]	; (1b234 <pend+0xa4>)
   1b1b8:	481f      	ldr	r0, [pc, #124]	; (1b238 <pend+0xa8>)
   1b1ba:	2381      	movs	r3, #129	; 0x81
   1b1bc:	f001 fe11 	bl	1cde2 <printk>
   1b1c0:	491a      	ldr	r1, [pc, #104]	; (1b22c <pend+0x9c>)
   1b1c2:	481e      	ldr	r0, [pc, #120]	; (1b23c <pend+0xac>)
   1b1c4:	f001 fe0d 	bl	1cde2 <printk>
   1b1c8:	4819      	ldr	r0, [pc, #100]	; (1b230 <pend+0xa0>)
   1b1ca:	2181      	movs	r1, #129	; 0x81
   1b1cc:	f002 f863 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b1d0:	4816      	ldr	r0, [pc, #88]	; (1b22c <pend+0x9c>)
   1b1d2:	f7fe f9cb 	bl	1956c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   1b1d6:	4620      	mov	r0, r4
   1b1d8:	4629      	mov	r1, r5
   1b1da:	f7ff ff97 	bl	1b10c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b1de:	4813      	ldr	r0, [pc, #76]	; (1b22c <pend+0x9c>)
   1b1e0:	f7fe f9b4 	bl	1954c <z_spin_unlock_valid>
   1b1e4:	b968      	cbnz	r0, 1b202 <pend+0x72>
   1b1e6:	4a12      	ldr	r2, [pc, #72]	; (1b230 <pend+0xa0>)
   1b1e8:	4915      	ldr	r1, [pc, #84]	; (1b240 <pend+0xb0>)
   1b1ea:	4813      	ldr	r0, [pc, #76]	; (1b238 <pend+0xa8>)
   1b1ec:	23ac      	movs	r3, #172	; 0xac
   1b1ee:	f001 fdf8 	bl	1cde2 <printk>
   1b1f2:	490e      	ldr	r1, [pc, #56]	; (1b22c <pend+0x9c>)
   1b1f4:	4813      	ldr	r0, [pc, #76]	; (1b244 <pend+0xb4>)
   1b1f6:	f001 fdf4 	bl	1cde2 <printk>
   1b1fa:	480d      	ldr	r0, [pc, #52]	; (1b230 <pend+0xa0>)
   1b1fc:	21ac      	movs	r1, #172	; 0xac
   1b1fe:	f002 f84a 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1b202:	f388 8811 	msr	BASEPRI, r8
   1b206:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b20a:	1c7b      	adds	r3, r7, #1
   1b20c:	bf08      	it	eq
   1b20e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1b212:	d008      	beq.n	1b226 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b214:	4632      	mov	r2, r6
   1b216:	463b      	mov	r3, r7
   1b218:	f104 0018 	add.w	r0, r4, #24
   1b21c:	490a      	ldr	r1, [pc, #40]	; (1b248 <pend+0xb8>)
}
   1b21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b222:	f000 bd95 	b.w	1bd50 <z_add_timeout>
   1b226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b22a:	bf00      	nop
   1b22c:	20001f94 	.word	0x20001f94
   1b230:	00020b35 	.word	0x00020b35
   1b234:	00020b87 	.word	0x00020b87
   1b238:	00020a75 	.word	0x00020a75
   1b23c:	00020b9c 	.word	0x00020b9c
   1b240:	00020b5b 	.word	0x00020b5b
   1b244:	00020b72 	.word	0x00020b72
   1b248:	0001b021 	.word	0x0001b021

0001b24c <z_pend_curr>:
{
   1b24c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   1b24e:	4b11      	ldr	r3, [pc, #68]	; (1b294 <z_pend_curr+0x48>)
{
   1b250:	4604      	mov	r4, r0
	pending_current = _current;
   1b252:	6898      	ldr	r0, [r3, #8]
   1b254:	4b10      	ldr	r3, [pc, #64]	; (1b298 <z_pend_curr+0x4c>)
{
   1b256:	460d      	mov	r5, r1
	pending_current = _current;
   1b258:	6018      	str	r0, [r3, #0]
{
   1b25a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b260:	f7ff ff96 	bl	1b190 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b264:	4620      	mov	r0, r4
   1b266:	f7fe f971 	bl	1954c <z_spin_unlock_valid>
   1b26a:	b968      	cbnz	r0, 1b288 <z_pend_curr+0x3c>
   1b26c:	4a0b      	ldr	r2, [pc, #44]	; (1b29c <z_pend_curr+0x50>)
   1b26e:	490c      	ldr	r1, [pc, #48]	; (1b2a0 <z_pend_curr+0x54>)
   1b270:	480c      	ldr	r0, [pc, #48]	; (1b2a4 <z_pend_curr+0x58>)
   1b272:	23c3      	movs	r3, #195	; 0xc3
   1b274:	f001 fdb5 	bl	1cde2 <printk>
   1b278:	480b      	ldr	r0, [pc, #44]	; (1b2a8 <z_pend_curr+0x5c>)
   1b27a:	4621      	mov	r1, r4
   1b27c:	f001 fdb1 	bl	1cde2 <printk>
   1b280:	4806      	ldr	r0, [pc, #24]	; (1b29c <z_pend_curr+0x50>)
   1b282:	21c3      	movs	r1, #195	; 0xc3
   1b284:	f002 f807 	bl	1d296 <assert_post_action>
   1b288:	4628      	mov	r0, r5
}
   1b28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b28e:	f7f6 b931 	b.w	114f4 <arch_swap>
   1b292:	bf00      	nop
   1b294:	20001f54 	.word	0x20001f54
   1b298:	20001f90 	.word	0x20001f90
   1b29c:	00020b35 	.word	0x00020b35
   1b2a0:	00020b5b 	.word	0x00020b5b
   1b2a4:	00020a75 	.word	0x00020a75
   1b2a8:	00020b72 	.word	0x00020b72

0001b2ac <z_set_prio>:
{
   1b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2ae:	4604      	mov	r4, r0
   1b2b0:	460e      	mov	r6, r1
	__asm__ volatile(
   1b2b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b2b6:	f3ef 8711 	mrs	r7, BASEPRI
   1b2ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1b2be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b2c2:	483c      	ldr	r0, [pc, #240]	; (1b3b4 <z_set_prio+0x108>)
   1b2c4:	f7fe f934 	bl	19530 <z_spin_lock_valid>
   1b2c8:	b968      	cbnz	r0, 1b2e6 <z_set_prio+0x3a>
   1b2ca:	4a3b      	ldr	r2, [pc, #236]	; (1b3b8 <z_set_prio+0x10c>)
   1b2cc:	493b      	ldr	r1, [pc, #236]	; (1b3bc <z_set_prio+0x110>)
   1b2ce:	483c      	ldr	r0, [pc, #240]	; (1b3c0 <z_set_prio+0x114>)
   1b2d0:	2381      	movs	r3, #129	; 0x81
   1b2d2:	f001 fd86 	bl	1cde2 <printk>
   1b2d6:	4937      	ldr	r1, [pc, #220]	; (1b3b4 <z_set_prio+0x108>)
   1b2d8:	483a      	ldr	r0, [pc, #232]	; (1b3c4 <z_set_prio+0x118>)
   1b2da:	f001 fd82 	bl	1cde2 <printk>
   1b2de:	4836      	ldr	r0, [pc, #216]	; (1b3b8 <z_set_prio+0x10c>)
   1b2e0:	2181      	movs	r1, #129	; 0x81
   1b2e2:	f001 ffd8 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b2e6:	4833      	ldr	r0, [pc, #204]	; (1b3b4 <z_set_prio+0x108>)
   1b2e8:	f7fe f940 	bl	1956c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b2ec:	7b63      	ldrb	r3, [r4, #13]
   1b2ee:	06da      	lsls	r2, r3, #27
   1b2f0:	b276      	sxtb	r6, r6
   1b2f2:	d15c      	bne.n	1b3ae <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   1b2f4:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   1b2f6:	2d00      	cmp	r5, #0
   1b2f8:	d159      	bne.n	1b3ae <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b2fe:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1b300:	4831      	ldr	r0, [pc, #196]	; (1b3c8 <z_set_prio+0x11c>)
   1b302:	4621      	mov	r1, r4
   1b304:	f7ff fc08 	bl	1ab18 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b308:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   1b30a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b30c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b310:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b312:	4b2e      	ldr	r3, [pc, #184]	; (1b3cc <z_set_prio+0x120>)
   1b314:	429c      	cmp	r4, r3
   1b316:	d109      	bne.n	1b32c <z_set_prio+0x80>
   1b318:	492d      	ldr	r1, [pc, #180]	; (1b3d0 <z_set_prio+0x124>)
   1b31a:	4829      	ldr	r0, [pc, #164]	; (1b3c0 <z_set_prio+0x114>)
   1b31c:	4a2d      	ldr	r2, [pc, #180]	; (1b3d4 <z_set_prio+0x128>)
   1b31e:	23b1      	movs	r3, #177	; 0xb1
   1b320:	f001 fd5f 	bl	1cde2 <printk>
   1b324:	482b      	ldr	r0, [pc, #172]	; (1b3d4 <z_set_prio+0x128>)
   1b326:	21b1      	movs	r1, #177	; 0xb1
   1b328:	f001 ffb5 	bl	1d296 <assert_post_action>
	return list->head == list;
   1b32c:	492a      	ldr	r1, [pc, #168]	; (1b3d8 <z_set_prio+0x12c>)
   1b32e:	460b      	mov	r3, r1
   1b330:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b334:	4298      	cmp	r0, r3
   1b336:	bf18      	it	ne
   1b338:	4605      	movne	r5, r0
   1b33a:	2d00      	cmp	r5, #0
   1b33c:	461a      	mov	r2, r3
   1b33e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b340:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1b342:	bf38      	it	cc
   1b344:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b346:	b36b      	cbz	r3, 1b3a4 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   1b348:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b34c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b350:	4286      	cmp	r6, r0
   1b352:	d023      	beq.n	1b39c <z_set_prio+0xf0>
		return b2 - b1;
   1b354:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b356:	2800      	cmp	r0, #0
   1b358:	dd20      	ble.n	1b39c <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   1b35a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b35c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b360:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b362:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b364:	2001      	movs	r0, #1
   1b366:	f7ff fc67 	bl	1ac38 <update_cache>
   1b36a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b36c:	4811      	ldr	r0, [pc, #68]	; (1b3b4 <z_set_prio+0x108>)
   1b36e:	f7fe f8ed 	bl	1954c <z_spin_unlock_valid>
   1b372:	b968      	cbnz	r0, 1b390 <z_set_prio+0xe4>
   1b374:	4a10      	ldr	r2, [pc, #64]	; (1b3b8 <z_set_prio+0x10c>)
   1b376:	4919      	ldr	r1, [pc, #100]	; (1b3dc <z_set_prio+0x130>)
   1b378:	4811      	ldr	r0, [pc, #68]	; (1b3c0 <z_set_prio+0x114>)
   1b37a:	23ac      	movs	r3, #172	; 0xac
   1b37c:	f001 fd31 	bl	1cde2 <printk>
   1b380:	490c      	ldr	r1, [pc, #48]	; (1b3b4 <z_set_prio+0x108>)
   1b382:	4817      	ldr	r0, [pc, #92]	; (1b3e0 <z_set_prio+0x134>)
   1b384:	f001 fd2d 	bl	1cde2 <printk>
   1b388:	480b      	ldr	r0, [pc, #44]	; (1b3b8 <z_set_prio+0x10c>)
   1b38a:	21ac      	movs	r1, #172	; 0xac
   1b38c:	f001 ff83 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1b390:	f387 8811 	msr	BASEPRI, r7
   1b394:	f3bf 8f6f 	isb	sy
}
   1b398:	4620      	mov	r0, r4
   1b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b39c:	42ab      	cmp	r3, r5
   1b39e:	d001      	beq.n	1b3a4 <z_set_prio+0xf8>
   1b3a0:	681b      	ldr	r3, [r3, #0]
   1b3a2:	e7d0      	b.n	1b346 <z_set_prio+0x9a>
	node->prev = tail;
   1b3a4:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   1b3a8:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1b3aa:	624c      	str	r4, [r1, #36]	; 0x24
}
   1b3ac:	e7da      	b.n	1b364 <z_set_prio+0xb8>
			thread->base.prio = prio;
   1b3ae:	73a6      	strb	r6, [r4, #14]
   1b3b0:	2400      	movs	r4, #0
   1b3b2:	e7db      	b.n	1b36c <z_set_prio+0xc0>
   1b3b4:	20001f94 	.word	0x20001f94
   1b3b8:	00020b35 	.word	0x00020b35
   1b3bc:	00020b87 	.word	0x00020b87
   1b3c0:	00020a75 	.word	0x00020a75
   1b3c4:	00020b9c 	.word	0x00020b9c
   1b3c8:	20001f74 	.word	0x20001f74
   1b3cc:	20001a58 	.word	0x20001a58
   1b3d0:	000223c7 	.word	0x000223c7
   1b3d4:	000223a5 	.word	0x000223a5
   1b3d8:	20001f54 	.word	0x20001f54
   1b3dc:	00020b5b 	.word	0x00020b5b
   1b3e0:	00020b72 	.word	0x00020b72

0001b3e4 <z_impl_k_thread_suspend>:
{
   1b3e4:	b570      	push	{r4, r5, r6, lr}
   1b3e6:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   1b3e8:	3018      	adds	r0, #24
   1b3ea:	f000 fd85 	bl	1bef8 <z_abort_timeout>
	__asm__ volatile(
   1b3ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b3f2:	f3ef 8611 	mrs	r6, BASEPRI
   1b3f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b3fe:	4825      	ldr	r0, [pc, #148]	; (1b494 <z_impl_k_thread_suspend+0xb0>)
   1b400:	f7fe f896 	bl	19530 <z_spin_lock_valid>
   1b404:	b968      	cbnz	r0, 1b422 <z_impl_k_thread_suspend+0x3e>
   1b406:	4a24      	ldr	r2, [pc, #144]	; (1b498 <z_impl_k_thread_suspend+0xb4>)
   1b408:	4924      	ldr	r1, [pc, #144]	; (1b49c <z_impl_k_thread_suspend+0xb8>)
   1b40a:	4825      	ldr	r0, [pc, #148]	; (1b4a0 <z_impl_k_thread_suspend+0xbc>)
   1b40c:	2381      	movs	r3, #129	; 0x81
   1b40e:	f001 fce8 	bl	1cde2 <printk>
   1b412:	4920      	ldr	r1, [pc, #128]	; (1b494 <z_impl_k_thread_suspend+0xb0>)
   1b414:	4823      	ldr	r0, [pc, #140]	; (1b4a4 <z_impl_k_thread_suspend+0xc0>)
   1b416:	f001 fce4 	bl	1cde2 <printk>
   1b41a:	481f      	ldr	r0, [pc, #124]	; (1b498 <z_impl_k_thread_suspend+0xb4>)
   1b41c:	2181      	movs	r1, #129	; 0x81
   1b41e:	f001 ff3a 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b422:	481c      	ldr	r0, [pc, #112]	; (1b494 <z_impl_k_thread_suspend+0xb0>)
   1b424:	f7fe f8a2 	bl	1956c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   1b428:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1b42c:	7b63      	ldrb	r3, [r4, #13]
   1b42e:	2a00      	cmp	r2, #0
   1b430:	da06      	bge.n	1b440 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   1b436:	481c      	ldr	r0, [pc, #112]	; (1b4a8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b438:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1b43a:	4621      	mov	r1, r4
   1b43c:	f7ff fb6c 	bl	1ab18 <z_priq_dumb_remove>
		update_cache(thread == _current);
   1b440:	4d1a      	ldr	r5, [pc, #104]	; (1b4ac <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b442:	7b63      	ldrb	r3, [r4, #13]
   1b444:	68a8      	ldr	r0, [r5, #8]
   1b446:	f043 0310 	orr.w	r3, r3, #16
   1b44a:	7363      	strb	r3, [r4, #13]
   1b44c:	1b03      	subs	r3, r0, r4
   1b44e:	4258      	negs	r0, r3
   1b450:	4158      	adcs	r0, r3
   1b452:	f7ff fbf1 	bl	1ac38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b456:	480f      	ldr	r0, [pc, #60]	; (1b494 <z_impl_k_thread_suspend+0xb0>)
   1b458:	f7fe f878 	bl	1954c <z_spin_unlock_valid>
   1b45c:	b968      	cbnz	r0, 1b47a <z_impl_k_thread_suspend+0x96>
   1b45e:	4a0e      	ldr	r2, [pc, #56]	; (1b498 <z_impl_k_thread_suspend+0xb4>)
   1b460:	4913      	ldr	r1, [pc, #76]	; (1b4b0 <z_impl_k_thread_suspend+0xcc>)
   1b462:	480f      	ldr	r0, [pc, #60]	; (1b4a0 <z_impl_k_thread_suspend+0xbc>)
   1b464:	23ac      	movs	r3, #172	; 0xac
   1b466:	f001 fcbc 	bl	1cde2 <printk>
   1b46a:	490a      	ldr	r1, [pc, #40]	; (1b494 <z_impl_k_thread_suspend+0xb0>)
   1b46c:	4811      	ldr	r0, [pc, #68]	; (1b4b4 <z_impl_k_thread_suspend+0xd0>)
   1b46e:	f001 fcb8 	bl	1cde2 <printk>
   1b472:	4809      	ldr	r0, [pc, #36]	; (1b498 <z_impl_k_thread_suspend+0xb4>)
   1b474:	21ac      	movs	r1, #172	; 0xac
   1b476:	f001 ff0e 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1b47a:	f386 8811 	msr	BASEPRI, r6
   1b47e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b482:	68ab      	ldr	r3, [r5, #8]
   1b484:	42a3      	cmp	r3, r4
   1b486:	d103      	bne.n	1b490 <z_impl_k_thread_suspend+0xac>
}
   1b488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b48c:	f004 bcc6 	b.w	1fe1c <z_reschedule_unlocked>
}
   1b490:	bd70      	pop	{r4, r5, r6, pc}
   1b492:	bf00      	nop
   1b494:	20001f94 	.word	0x20001f94
   1b498:	00020b35 	.word	0x00020b35
   1b49c:	00020b87 	.word	0x00020b87
   1b4a0:	00020a75 	.word	0x00020a75
   1b4a4:	00020b9c 	.word	0x00020b9c
   1b4a8:	20001f74 	.word	0x20001f74
   1b4ac:	20001f54 	.word	0x20001f54
   1b4b0:	00020b5b 	.word	0x00020b5b
   1b4b4:	00020b72 	.word	0x00020b72

0001b4b8 <k_sched_unlock>:
{
   1b4b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b4ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b4be:	f3ef 8511 	mrs	r5, BASEPRI
   1b4c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b4ca:	482d      	ldr	r0, [pc, #180]	; (1b580 <k_sched_unlock+0xc8>)
   1b4cc:	f7fe f830 	bl	19530 <z_spin_lock_valid>
   1b4d0:	b968      	cbnz	r0, 1b4ee <k_sched_unlock+0x36>
   1b4d2:	4a2c      	ldr	r2, [pc, #176]	; (1b584 <k_sched_unlock+0xcc>)
   1b4d4:	492c      	ldr	r1, [pc, #176]	; (1b588 <k_sched_unlock+0xd0>)
   1b4d6:	482d      	ldr	r0, [pc, #180]	; (1b58c <k_sched_unlock+0xd4>)
   1b4d8:	2381      	movs	r3, #129	; 0x81
   1b4da:	f001 fc82 	bl	1cde2 <printk>
   1b4de:	4928      	ldr	r1, [pc, #160]	; (1b580 <k_sched_unlock+0xc8>)
   1b4e0:	482b      	ldr	r0, [pc, #172]	; (1b590 <k_sched_unlock+0xd8>)
   1b4e2:	f001 fc7e 	bl	1cde2 <printk>
   1b4e6:	4827      	ldr	r0, [pc, #156]	; (1b584 <k_sched_unlock+0xcc>)
   1b4e8:	2181      	movs	r1, #129	; 0x81
   1b4ea:	f001 fed4 	bl	1d296 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   1b4ee:	4c29      	ldr	r4, [pc, #164]	; (1b594 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   1b4f0:	4823      	ldr	r0, [pc, #140]	; (1b580 <k_sched_unlock+0xc8>)
   1b4f2:	f7fe f83b 	bl	1956c <z_spin_lock_set_owner>
   1b4f6:	68a2      	ldr	r2, [r4, #8]
   1b4f8:	7bd2      	ldrb	r2, [r2, #15]
   1b4fa:	b972      	cbnz	r2, 1b51a <k_sched_unlock+0x62>
   1b4fc:	4926      	ldr	r1, [pc, #152]	; (1b598 <k_sched_unlock+0xe0>)
   1b4fe:	4a27      	ldr	r2, [pc, #156]	; (1b59c <k_sched_unlock+0xe4>)
   1b500:	4822      	ldr	r0, [pc, #136]	; (1b58c <k_sched_unlock+0xd4>)
   1b502:	f240 3355 	movw	r3, #853	; 0x355
   1b506:	f001 fc6c 	bl	1cde2 <printk>
   1b50a:	4825      	ldr	r0, [pc, #148]	; (1b5a0 <k_sched_unlock+0xe8>)
   1b50c:	f001 fc69 	bl	1cde2 <printk>
   1b510:	4822      	ldr	r0, [pc, #136]	; (1b59c <k_sched_unlock+0xe4>)
   1b512:	f240 3155 	movw	r1, #853	; 0x355
   1b516:	f001 febe 	bl	1d296 <assert_post_action>
   1b51a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1b51e:	b173      	cbz	r3, 1b53e <k_sched_unlock+0x86>
   1b520:	4920      	ldr	r1, [pc, #128]	; (1b5a4 <k_sched_unlock+0xec>)
   1b522:	4a1e      	ldr	r2, [pc, #120]	; (1b59c <k_sched_unlock+0xe4>)
   1b524:	4819      	ldr	r0, [pc, #100]	; (1b58c <k_sched_unlock+0xd4>)
   1b526:	f240 3356 	movw	r3, #854	; 0x356
   1b52a:	f001 fc5a 	bl	1cde2 <printk>
   1b52e:	481c      	ldr	r0, [pc, #112]	; (1b5a0 <k_sched_unlock+0xe8>)
   1b530:	f001 fc57 	bl	1cde2 <printk>
   1b534:	4819      	ldr	r0, [pc, #100]	; (1b59c <k_sched_unlock+0xe4>)
   1b536:	f240 3156 	movw	r1, #854	; 0x356
   1b53a:	f001 feac 	bl	1d296 <assert_post_action>
		++_current->base.sched_locked;
   1b53e:	68a2      	ldr	r2, [r4, #8]
   1b540:	7bd3      	ldrb	r3, [r2, #15]
   1b542:	3301      	adds	r3, #1
		update_cache(0);
   1b544:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1b546:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b548:	f7ff fb76 	bl	1ac38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b54c:	480c      	ldr	r0, [pc, #48]	; (1b580 <k_sched_unlock+0xc8>)
   1b54e:	f7fd fffd 	bl	1954c <z_spin_unlock_valid>
   1b552:	b968      	cbnz	r0, 1b570 <k_sched_unlock+0xb8>
   1b554:	4a0b      	ldr	r2, [pc, #44]	; (1b584 <k_sched_unlock+0xcc>)
   1b556:	4914      	ldr	r1, [pc, #80]	; (1b5a8 <k_sched_unlock+0xf0>)
   1b558:	480c      	ldr	r0, [pc, #48]	; (1b58c <k_sched_unlock+0xd4>)
   1b55a:	23ac      	movs	r3, #172	; 0xac
   1b55c:	f001 fc41 	bl	1cde2 <printk>
   1b560:	4907      	ldr	r1, [pc, #28]	; (1b580 <k_sched_unlock+0xc8>)
   1b562:	4812      	ldr	r0, [pc, #72]	; (1b5ac <k_sched_unlock+0xf4>)
   1b564:	f001 fc3d 	bl	1cde2 <printk>
   1b568:	4806      	ldr	r0, [pc, #24]	; (1b584 <k_sched_unlock+0xcc>)
   1b56a:	21ac      	movs	r1, #172	; 0xac
   1b56c:	f001 fe93 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1b570:	f385 8811 	msr	BASEPRI, r5
   1b574:	f3bf 8f6f 	isb	sy
}
   1b578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1b57c:	f004 bc4e 	b.w	1fe1c <z_reschedule_unlocked>
   1b580:	20001f94 	.word	0x20001f94
   1b584:	00020b35 	.word	0x00020b35
   1b588:	00020b87 	.word	0x00020b87
   1b58c:	00020a75 	.word	0x00020a75
   1b590:	00020b9c 	.word	0x00020b9c
   1b594:	20001f54 	.word	0x20001f54
   1b598:	00022426 	.word	0x00022426
   1b59c:	000223a5 	.word	0x000223a5
   1b5a0:	00021901 	.word	0x00021901
   1b5a4:	000220dd 	.word	0x000220dd
   1b5a8:	00020b5b 	.word	0x00020b5b
   1b5ac:	00020b72 	.word	0x00020b72

0001b5b0 <z_unpend1_no_timeout>:
{
   1b5b0:	b538      	push	{r3, r4, r5, lr}
   1b5b2:	4604      	mov	r4, r0
	__asm__ volatile(
   1b5b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5b8:	f3ef 8511 	mrs	r5, BASEPRI
   1b5bc:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b5c4:	4819      	ldr	r0, [pc, #100]	; (1b62c <z_unpend1_no_timeout+0x7c>)
   1b5c6:	f7fd ffb3 	bl	19530 <z_spin_lock_valid>
   1b5ca:	b968      	cbnz	r0, 1b5e8 <z_unpend1_no_timeout+0x38>
   1b5cc:	4a18      	ldr	r2, [pc, #96]	; (1b630 <z_unpend1_no_timeout+0x80>)
   1b5ce:	4919      	ldr	r1, [pc, #100]	; (1b634 <z_unpend1_no_timeout+0x84>)
   1b5d0:	4819      	ldr	r0, [pc, #100]	; (1b638 <z_unpend1_no_timeout+0x88>)
   1b5d2:	2381      	movs	r3, #129	; 0x81
   1b5d4:	f001 fc05 	bl	1cde2 <printk>
   1b5d8:	4914      	ldr	r1, [pc, #80]	; (1b62c <z_unpend1_no_timeout+0x7c>)
   1b5da:	4818      	ldr	r0, [pc, #96]	; (1b63c <z_unpend1_no_timeout+0x8c>)
   1b5dc:	f001 fc01 	bl	1cde2 <printk>
   1b5e0:	4813      	ldr	r0, [pc, #76]	; (1b630 <z_unpend1_no_timeout+0x80>)
   1b5e2:	2181      	movs	r1, #129	; 0x81
   1b5e4:	f001 fe57 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b5e8:	4810      	ldr	r0, [pc, #64]	; (1b62c <z_unpend1_no_timeout+0x7c>)
   1b5ea:	f7fd ffbf 	bl	1956c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   1b5ee:	4620      	mov	r0, r4
   1b5f0:	f004 fc1e 	bl	1fe30 <z_priq_dumb_best>
		if (thread != NULL) {
   1b5f4:	4604      	mov	r4, r0
   1b5f6:	b108      	cbz	r0, 1b5fc <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   1b5f8:	f7ff fab0 	bl	1ab5c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b5fc:	480b      	ldr	r0, [pc, #44]	; (1b62c <z_unpend1_no_timeout+0x7c>)
   1b5fe:	f7fd ffa5 	bl	1954c <z_spin_unlock_valid>
   1b602:	b968      	cbnz	r0, 1b620 <z_unpend1_no_timeout+0x70>
   1b604:	4a0a      	ldr	r2, [pc, #40]	; (1b630 <z_unpend1_no_timeout+0x80>)
   1b606:	490e      	ldr	r1, [pc, #56]	; (1b640 <z_unpend1_no_timeout+0x90>)
   1b608:	480b      	ldr	r0, [pc, #44]	; (1b638 <z_unpend1_no_timeout+0x88>)
   1b60a:	23ac      	movs	r3, #172	; 0xac
   1b60c:	f001 fbe9 	bl	1cde2 <printk>
   1b610:	4906      	ldr	r1, [pc, #24]	; (1b62c <z_unpend1_no_timeout+0x7c>)
   1b612:	480c      	ldr	r0, [pc, #48]	; (1b644 <z_unpend1_no_timeout+0x94>)
   1b614:	f001 fbe5 	bl	1cde2 <printk>
   1b618:	4805      	ldr	r0, [pc, #20]	; (1b630 <z_unpend1_no_timeout+0x80>)
   1b61a:	21ac      	movs	r1, #172	; 0xac
   1b61c:	f001 fe3b 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1b620:	f385 8811 	msr	BASEPRI, r5
   1b624:	f3bf 8f6f 	isb	sy
}
   1b628:	4620      	mov	r0, r4
   1b62a:	bd38      	pop	{r3, r4, r5, pc}
   1b62c:	20001f94 	.word	0x20001f94
   1b630:	00020b35 	.word	0x00020b35
   1b634:	00020b87 	.word	0x00020b87
   1b638:	00020a75 	.word	0x00020a75
   1b63c:	00020b9c 	.word	0x00020b9c
   1b640:	00020b5b 	.word	0x00020b5b
   1b644:	00020b72 	.word	0x00020b72

0001b648 <z_unpend_first_thread>:
{
   1b648:	b538      	push	{r3, r4, r5, lr}
   1b64a:	4604      	mov	r4, r0
	__asm__ volatile(
   1b64c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b650:	f3ef 8511 	mrs	r5, BASEPRI
   1b654:	f383 8812 	msr	BASEPRI_MAX, r3
   1b658:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b65c:	481b      	ldr	r0, [pc, #108]	; (1b6cc <z_unpend_first_thread+0x84>)
   1b65e:	f7fd ff67 	bl	19530 <z_spin_lock_valid>
   1b662:	b968      	cbnz	r0, 1b680 <z_unpend_first_thread+0x38>
   1b664:	4a1a      	ldr	r2, [pc, #104]	; (1b6d0 <z_unpend_first_thread+0x88>)
   1b666:	491b      	ldr	r1, [pc, #108]	; (1b6d4 <z_unpend_first_thread+0x8c>)
   1b668:	481b      	ldr	r0, [pc, #108]	; (1b6d8 <z_unpend_first_thread+0x90>)
   1b66a:	2381      	movs	r3, #129	; 0x81
   1b66c:	f001 fbb9 	bl	1cde2 <printk>
   1b670:	4916      	ldr	r1, [pc, #88]	; (1b6cc <z_unpend_first_thread+0x84>)
   1b672:	481a      	ldr	r0, [pc, #104]	; (1b6dc <z_unpend_first_thread+0x94>)
   1b674:	f001 fbb5 	bl	1cde2 <printk>
   1b678:	4815      	ldr	r0, [pc, #84]	; (1b6d0 <z_unpend_first_thread+0x88>)
   1b67a:	2181      	movs	r1, #129	; 0x81
   1b67c:	f001 fe0b 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b680:	4812      	ldr	r0, [pc, #72]	; (1b6cc <z_unpend_first_thread+0x84>)
   1b682:	f7fd ff73 	bl	1956c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   1b686:	4620      	mov	r0, r4
   1b688:	f004 fbd2 	bl	1fe30 <z_priq_dumb_best>
		if (thread != NULL) {
   1b68c:	4604      	mov	r4, r0
   1b68e:	b128      	cbz	r0, 1b69c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   1b690:	f7ff fa64 	bl	1ab5c <unpend_thread_no_timeout>
   1b694:	f104 0018 	add.w	r0, r4, #24
   1b698:	f000 fc2e 	bl	1bef8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b69c:	480b      	ldr	r0, [pc, #44]	; (1b6cc <z_unpend_first_thread+0x84>)
   1b69e:	f7fd ff55 	bl	1954c <z_spin_unlock_valid>
   1b6a2:	b968      	cbnz	r0, 1b6c0 <z_unpend_first_thread+0x78>
   1b6a4:	4a0a      	ldr	r2, [pc, #40]	; (1b6d0 <z_unpend_first_thread+0x88>)
   1b6a6:	490e      	ldr	r1, [pc, #56]	; (1b6e0 <z_unpend_first_thread+0x98>)
   1b6a8:	480b      	ldr	r0, [pc, #44]	; (1b6d8 <z_unpend_first_thread+0x90>)
   1b6aa:	23ac      	movs	r3, #172	; 0xac
   1b6ac:	f001 fb99 	bl	1cde2 <printk>
   1b6b0:	4906      	ldr	r1, [pc, #24]	; (1b6cc <z_unpend_first_thread+0x84>)
   1b6b2:	480c      	ldr	r0, [pc, #48]	; (1b6e4 <z_unpend_first_thread+0x9c>)
   1b6b4:	f001 fb95 	bl	1cde2 <printk>
   1b6b8:	4805      	ldr	r0, [pc, #20]	; (1b6d0 <z_unpend_first_thread+0x88>)
   1b6ba:	21ac      	movs	r1, #172	; 0xac
   1b6bc:	f001 fdeb 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1b6c0:	f385 8811 	msr	BASEPRI, r5
   1b6c4:	f3bf 8f6f 	isb	sy
}
   1b6c8:	4620      	mov	r0, r4
   1b6ca:	bd38      	pop	{r3, r4, r5, pc}
   1b6cc:	20001f94 	.word	0x20001f94
   1b6d0:	00020b35 	.word	0x00020b35
   1b6d4:	00020b87 	.word	0x00020b87
   1b6d8:	00020a75 	.word	0x00020a75
   1b6dc:	00020b9c 	.word	0x00020b9c
   1b6e0:	00020b5b 	.word	0x00020b5b
   1b6e4:	00020b72 	.word	0x00020b72

0001b6e8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b6e8:	4b04      	ldr	r3, [pc, #16]	; (1b6fc <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b6ea:	2100      	movs	r1, #0
   1b6ec:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1b6f0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1b6f4:	4608      	mov	r0, r1
   1b6f6:	f7ff b8a9 	b.w	1a84c <k_sched_time_slice_set>
   1b6fa:	bf00      	nop
   1b6fc:	20001f54 	.word	0x20001f54

0001b700 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b702:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1b706:	b173      	cbz	r3, 1b726 <z_impl_k_yield+0x26>
   1b708:	4941      	ldr	r1, [pc, #260]	; (1b810 <z_impl_k_yield+0x110>)
   1b70a:	4a42      	ldr	r2, [pc, #264]	; (1b814 <z_impl_k_yield+0x114>)
   1b70c:	4842      	ldr	r0, [pc, #264]	; (1b818 <z_impl_k_yield+0x118>)
   1b70e:	f240 43a1 	movw	r3, #1185	; 0x4a1
   1b712:	f001 fb66 	bl	1cde2 <printk>
   1b716:	4841      	ldr	r0, [pc, #260]	; (1b81c <z_impl_k_yield+0x11c>)
   1b718:	f001 fb63 	bl	1cde2 <printk>
   1b71c:	483d      	ldr	r0, [pc, #244]	; (1b814 <z_impl_k_yield+0x114>)
   1b71e:	f240 41a1 	movw	r1, #1185	; 0x4a1
   1b722:	f001 fdb8 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1b726:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b72a:	f3ef 8611 	mrs	r6, BASEPRI
   1b72e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b732:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b736:	483a      	ldr	r0, [pc, #232]	; (1b820 <z_impl_k_yield+0x120>)
   1b738:	f7fd fefa 	bl	19530 <z_spin_lock_valid>
   1b73c:	b968      	cbnz	r0, 1b75a <z_impl_k_yield+0x5a>
   1b73e:	4a39      	ldr	r2, [pc, #228]	; (1b824 <z_impl_k_yield+0x124>)
   1b740:	4939      	ldr	r1, [pc, #228]	; (1b828 <z_impl_k_yield+0x128>)
   1b742:	4835      	ldr	r0, [pc, #212]	; (1b818 <z_impl_k_yield+0x118>)
   1b744:	2381      	movs	r3, #129	; 0x81
   1b746:	f001 fb4c 	bl	1cde2 <printk>
   1b74a:	4935      	ldr	r1, [pc, #212]	; (1b820 <z_impl_k_yield+0x120>)
   1b74c:	4837      	ldr	r0, [pc, #220]	; (1b82c <z_impl_k_yield+0x12c>)
   1b74e:	f001 fb48 	bl	1cde2 <printk>
   1b752:	4834      	ldr	r0, [pc, #208]	; (1b824 <z_impl_k_yield+0x124>)
   1b754:	2181      	movs	r1, #129	; 0x81
   1b756:	f001 fd9e 	bl	1d296 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1b75a:	4d35      	ldr	r5, [pc, #212]	; (1b830 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   1b75c:	4830      	ldr	r0, [pc, #192]	; (1b820 <z_impl_k_yield+0x120>)
   1b75e:	f7fd ff05 	bl	1956c <z_spin_lock_set_owner>
   1b762:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b764:	7b4b      	ldrb	r3, [r1, #13]
   1b766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b76a:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1b76c:	f105 0020 	add.w	r0, r5, #32
   1b770:	f7ff f9d2 	bl	1ab18 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1b774:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b776:	7b63      	ldrb	r3, [r4, #13]
   1b778:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b77c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1b77e:	4b2d      	ldr	r3, [pc, #180]	; (1b834 <z_impl_k_yield+0x134>)
   1b780:	429c      	cmp	r4, r3
   1b782:	d109      	bne.n	1b798 <z_impl_k_yield+0x98>
   1b784:	492c      	ldr	r1, [pc, #176]	; (1b838 <z_impl_k_yield+0x138>)
   1b786:	4824      	ldr	r0, [pc, #144]	; (1b818 <z_impl_k_yield+0x118>)
   1b788:	4a22      	ldr	r2, [pc, #136]	; (1b814 <z_impl_k_yield+0x114>)
   1b78a:	23b1      	movs	r3, #177	; 0xb1
   1b78c:	f001 fb29 	bl	1cde2 <printk>
   1b790:	4820      	ldr	r0, [pc, #128]	; (1b814 <z_impl_k_yield+0x114>)
   1b792:	21b1      	movs	r1, #177	; 0xb1
   1b794:	f001 fd7f 	bl	1d296 <assert_post_action>
	return list->head == list;
   1b798:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b79a:	4828      	ldr	r0, [pc, #160]	; (1b83c <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b79c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b79e:	4283      	cmp	r3, r0
   1b7a0:	bf08      	it	eq
   1b7a2:	2300      	moveq	r3, #0
   1b7a4:	2b00      	cmp	r3, #0
   1b7a6:	bf38      	it	cc
   1b7a8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b7aa:	b35b      	cbz	r3, 1b804 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   1b7ac:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1b7b0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1b7b4:	4297      	cmp	r7, r2
   1b7b6:	d021      	beq.n	1b7fc <z_impl_k_yield+0xfc>
		return b2 - b1;
   1b7b8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b7ba:	2a00      	cmp	r2, #0
   1b7bc:	dd1e      	ble.n	1b7fc <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   1b7be:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b7c0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b7c4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b7c6:	605c      	str	r4, [r3, #4]
	update_cache(1);
   1b7c8:	2001      	movs	r0, #1
   1b7ca:	f7ff fa35 	bl	1ac38 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b7ce:	4814      	ldr	r0, [pc, #80]	; (1b820 <z_impl_k_yield+0x120>)
   1b7d0:	f7fd febc 	bl	1954c <z_spin_unlock_valid>
   1b7d4:	b968      	cbnz	r0, 1b7f2 <z_impl_k_yield+0xf2>
   1b7d6:	4a13      	ldr	r2, [pc, #76]	; (1b824 <z_impl_k_yield+0x124>)
   1b7d8:	4919      	ldr	r1, [pc, #100]	; (1b840 <z_impl_k_yield+0x140>)
   1b7da:	480f      	ldr	r0, [pc, #60]	; (1b818 <z_impl_k_yield+0x118>)
   1b7dc:	23c3      	movs	r3, #195	; 0xc3
   1b7de:	f001 fb00 	bl	1cde2 <printk>
   1b7e2:	490f      	ldr	r1, [pc, #60]	; (1b820 <z_impl_k_yield+0x120>)
   1b7e4:	4817      	ldr	r0, [pc, #92]	; (1b844 <z_impl_k_yield+0x144>)
   1b7e6:	f001 fafc 	bl	1cde2 <printk>
   1b7ea:	480e      	ldr	r0, [pc, #56]	; (1b824 <z_impl_k_yield+0x124>)
   1b7ec:	21c3      	movs	r1, #195	; 0xc3
   1b7ee:	f001 fd52 	bl	1d296 <assert_post_action>
   1b7f2:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   1b7f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b7f8:	f7f5 be7c 	b.w	114f4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b7fc:	428b      	cmp	r3, r1
   1b7fe:	d001      	beq.n	1b804 <z_impl_k_yield+0x104>
   1b800:	681b      	ldr	r3, [r3, #0]
   1b802:	e7d2      	b.n	1b7aa <z_impl_k_yield+0xaa>
	node->prev = tail;
   1b804:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   1b808:	600c      	str	r4, [r1, #0]
	list->tail = node;
   1b80a:	626c      	str	r4, [r5, #36]	; 0x24
}
   1b80c:	e7dc      	b.n	1b7c8 <z_impl_k_yield+0xc8>
   1b80e:	bf00      	nop
   1b810:	000220dd 	.word	0x000220dd
   1b814:	000223a5 	.word	0x000223a5
   1b818:	00020a75 	.word	0x00020a75
   1b81c:	00021901 	.word	0x00021901
   1b820:	20001f94 	.word	0x20001f94
   1b824:	00020b35 	.word	0x00020b35
   1b828:	00020b87 	.word	0x00020b87
   1b82c:	00020b9c 	.word	0x00020b9c
   1b830:	20001f54 	.word	0x20001f54
   1b834:	20001a58 	.word	0x20001a58
   1b838:	000223c7 	.word	0x000223c7
   1b83c:	20001f74 	.word	0x20001f74
   1b840:	00020b5b 	.word	0x00020b5b
   1b844:	00020b72 	.word	0x00020b72

0001b848 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b84c:	4604      	mov	r4, r0
   1b84e:	460d      	mov	r5, r1
   1b850:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b854:	b173      	cbz	r3, 1b874 <z_tick_sleep+0x2c>
   1b856:	4945      	ldr	r1, [pc, #276]	; (1b96c <z_tick_sleep+0x124>)
   1b858:	4a45      	ldr	r2, [pc, #276]	; (1b970 <z_tick_sleep+0x128>)
   1b85a:	4846      	ldr	r0, [pc, #280]	; (1b974 <z_tick_sleep+0x12c>)
   1b85c:	f240 43be 	movw	r3, #1214	; 0x4be
   1b860:	f001 fabf 	bl	1cde2 <printk>
   1b864:	4844      	ldr	r0, [pc, #272]	; (1b978 <z_tick_sleep+0x130>)
   1b866:	f001 fabc 	bl	1cde2 <printk>
   1b86a:	4841      	ldr	r0, [pc, #260]	; (1b970 <z_tick_sleep+0x128>)
   1b86c:	f240 41be 	movw	r1, #1214	; 0x4be
   1b870:	f001 fd11 	bl	1d296 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b874:	ea54 0305 	orrs.w	r3, r4, r5
   1b878:	d104      	bne.n	1b884 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   1b87a:	f7ff ff41 	bl	1b700 <z_impl_k_yield>
		k_yield();
		return 0;
   1b87e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1b884:	f06f 0301 	mvn.w	r3, #1
   1b888:	1b1e      	subs	r6, r3, r4
   1b88a:	f04f 33ff 	mov.w	r3, #4294967295
   1b88e:	eb63 0705 	sbc.w	r7, r3, r5
   1b892:	2e01      	cmp	r6, #1
   1b894:	f177 0300 	sbcs.w	r3, r7, #0
   1b898:	da64      	bge.n	1b964 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1b89a:	f004 fae3 	bl	1fe64 <sys_clock_tick_get_32>
   1b89e:	1906      	adds	r6, r0, r4
   1b8a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8a4:	f3ef 8811 	mrs	r8, BASEPRI
   1b8a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b8b0:	4832      	ldr	r0, [pc, #200]	; (1b97c <z_tick_sleep+0x134>)
   1b8b2:	f7fd fe3d 	bl	19530 <z_spin_lock_valid>
   1b8b6:	b968      	cbnz	r0, 1b8d4 <z_tick_sleep+0x8c>
   1b8b8:	4a31      	ldr	r2, [pc, #196]	; (1b980 <z_tick_sleep+0x138>)
   1b8ba:	4932      	ldr	r1, [pc, #200]	; (1b984 <z_tick_sleep+0x13c>)
   1b8bc:	482d      	ldr	r0, [pc, #180]	; (1b974 <z_tick_sleep+0x12c>)
   1b8be:	2381      	movs	r3, #129	; 0x81
   1b8c0:	f001 fa8f 	bl	1cde2 <printk>
   1b8c4:	492d      	ldr	r1, [pc, #180]	; (1b97c <z_tick_sleep+0x134>)
   1b8c6:	4830      	ldr	r0, [pc, #192]	; (1b988 <z_tick_sleep+0x140>)
   1b8c8:	f001 fa8b 	bl	1cde2 <printk>
   1b8cc:	482c      	ldr	r0, [pc, #176]	; (1b980 <z_tick_sleep+0x138>)
   1b8ce:	2181      	movs	r1, #129	; 0x81
   1b8d0:	f001 fce1 	bl	1d296 <assert_post_action>
	pending_current = _current;
   1b8d4:	4f2d      	ldr	r7, [pc, #180]	; (1b98c <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   1b8d6:	4829      	ldr	r0, [pc, #164]	; (1b97c <z_tick_sleep+0x134>)
   1b8d8:	f7fd fe48 	bl	1956c <z_spin_lock_set_owner>
   1b8dc:	4b2c      	ldr	r3, [pc, #176]	; (1b990 <z_tick_sleep+0x148>)
   1b8de:	68b8      	ldr	r0, [r7, #8]
   1b8e0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b8e2:	f7ff fbf7 	bl	1b0d4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b8e6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b8e8:	492a      	ldr	r1, [pc, #168]	; (1b994 <z_tick_sleep+0x14c>)
   1b8ea:	4622      	mov	r2, r4
   1b8ec:	462b      	mov	r3, r5
   1b8ee:	3018      	adds	r0, #24
   1b8f0:	f000 fa2e 	bl	1bd50 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b8f4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b8f6:	4821      	ldr	r0, [pc, #132]	; (1b97c <z_tick_sleep+0x134>)
   1b8f8:	7b53      	ldrb	r3, [r2, #13]
   1b8fa:	f043 0310 	orr.w	r3, r3, #16
   1b8fe:	7353      	strb	r3, [r2, #13]
   1b900:	f7fd fe24 	bl	1954c <z_spin_unlock_valid>
   1b904:	b968      	cbnz	r0, 1b922 <z_tick_sleep+0xda>
   1b906:	4a1e      	ldr	r2, [pc, #120]	; (1b980 <z_tick_sleep+0x138>)
   1b908:	4923      	ldr	r1, [pc, #140]	; (1b998 <z_tick_sleep+0x150>)
   1b90a:	481a      	ldr	r0, [pc, #104]	; (1b974 <z_tick_sleep+0x12c>)
   1b90c:	23c3      	movs	r3, #195	; 0xc3
   1b90e:	f001 fa68 	bl	1cde2 <printk>
   1b912:	491a      	ldr	r1, [pc, #104]	; (1b97c <z_tick_sleep+0x134>)
   1b914:	4821      	ldr	r0, [pc, #132]	; (1b99c <z_tick_sleep+0x154>)
   1b916:	f001 fa64 	bl	1cde2 <printk>
   1b91a:	4819      	ldr	r0, [pc, #100]	; (1b980 <z_tick_sleep+0x138>)
   1b91c:	21c3      	movs	r1, #195	; 0xc3
   1b91e:	f001 fcba 	bl	1d296 <assert_post_action>
   1b922:	4640      	mov	r0, r8
   1b924:	f7f5 fde6 	bl	114f4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1b928:	68bb      	ldr	r3, [r7, #8]
   1b92a:	7b5b      	ldrb	r3, [r3, #13]
   1b92c:	06db      	lsls	r3, r3, #27
   1b92e:	d50e      	bpl.n	1b94e <z_tick_sleep+0x106>
   1b930:	491b      	ldr	r1, [pc, #108]	; (1b9a0 <z_tick_sleep+0x158>)
   1b932:	4a0f      	ldr	r2, [pc, #60]	; (1b970 <z_tick_sleep+0x128>)
   1b934:	480f      	ldr	r0, [pc, #60]	; (1b974 <z_tick_sleep+0x12c>)
   1b936:	f240 43df 	movw	r3, #1247	; 0x4df
   1b93a:	f001 fa52 	bl	1cde2 <printk>
   1b93e:	480e      	ldr	r0, [pc, #56]	; (1b978 <z_tick_sleep+0x130>)
   1b940:	f001 fa4f 	bl	1cde2 <printk>
   1b944:	480a      	ldr	r0, [pc, #40]	; (1b970 <z_tick_sleep+0x128>)
   1b946:	f240 41df 	movw	r1, #1247	; 0x4df
   1b94a:	f001 fca4 	bl	1d296 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1b94e:	f004 fa89 	bl	1fe64 <sys_clock_tick_get_32>
   1b952:	1a30      	subs	r0, r6, r0
   1b954:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   1b958:	2801      	cmp	r0, #1
   1b95a:	f171 0300 	sbcs.w	r3, r1, #0
   1b95e:	bfb8      	it	lt
   1b960:	2000      	movlt	r0, #0
   1b962:	e78d      	b.n	1b880 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1b964:	f06f 0601 	mvn.w	r6, #1
   1b968:	1b36      	subs	r6, r6, r4
   1b96a:	e799      	b.n	1b8a0 <z_tick_sleep+0x58>
   1b96c:	000220dd 	.word	0x000220dd
   1b970:	000223a5 	.word	0x000223a5
   1b974:	00020a75 	.word	0x00020a75
   1b978:	00021901 	.word	0x00021901
   1b97c:	20001f94 	.word	0x20001f94
   1b980:	00020b35 	.word	0x00020b35
   1b984:	00020b87 	.word	0x00020b87
   1b988:	00020b9c 	.word	0x00020b9c
   1b98c:	20001f54 	.word	0x20001f54
   1b990:	20001f90 	.word	0x20001f90
   1b994:	0001b021 	.word	0x0001b021
   1b998:	00020b5b 	.word	0x00020b5b
   1b99c:	00020b72 	.word	0x00020b72
   1b9a0:	00022457 	.word	0x00022457

0001b9a4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1b9a4:	b538      	push	{r3, r4, r5, lr}
   1b9a6:	4604      	mov	r4, r0
   1b9a8:	460d      	mov	r5, r1
   1b9aa:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1b9ae:	b173      	cbz	r3, 1b9ce <z_impl_k_sleep+0x2a>
   1b9b0:	4913      	ldr	r1, [pc, #76]	; (1ba00 <z_impl_k_sleep+0x5c>)
   1b9b2:	4a14      	ldr	r2, [pc, #80]	; (1ba04 <z_impl_k_sleep+0x60>)
   1b9b4:	4814      	ldr	r0, [pc, #80]	; (1ba08 <z_impl_k_sleep+0x64>)
   1b9b6:	f240 43ee 	movw	r3, #1262	; 0x4ee
   1b9ba:	f001 fa12 	bl	1cde2 <printk>
   1b9be:	4813      	ldr	r0, [pc, #76]	; (1ba0c <z_impl_k_sleep+0x68>)
   1b9c0:	f001 fa0f 	bl	1cde2 <printk>
   1b9c4:	480f      	ldr	r0, [pc, #60]	; (1ba04 <z_impl_k_sleep+0x60>)
   1b9c6:	f240 41ee 	movw	r1, #1262	; 0x4ee
   1b9ca:	f001 fc64 	bl	1d296 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b9ce:	1c6b      	adds	r3, r5, #1
   1b9d0:	bf08      	it	eq
   1b9d2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1b9d6:	d106      	bne.n	1b9e6 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   1b9d8:	4b0d      	ldr	r3, [pc, #52]	; (1ba10 <z_impl_k_sleep+0x6c>)
   1b9da:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b9dc:	f7ff fd02 	bl	1b3e4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b9e0:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b9e4:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1b9e6:	4620      	mov	r0, r4
   1b9e8:	4629      	mov	r1, r5
   1b9ea:	f7ff ff2d 	bl	1b848 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1b9ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b9f2:	fb80 3403 	smull	r3, r4, r0, r3
   1b9f6:	0bd8      	lsrs	r0, r3, #15
   1b9f8:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   1b9fc:	e7f2      	b.n	1b9e4 <z_impl_k_sleep+0x40>
   1b9fe:	bf00      	nop
   1ba00:	000220dd 	.word	0x000220dd
   1ba04:	000223a5 	.word	0x000223a5
   1ba08:	00020a75 	.word	0x00020a75
   1ba0c:	00021901 	.word	0x00021901
   1ba10:	20001f54 	.word	0x20001f54

0001ba14 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ba14:	4b01      	ldr	r3, [pc, #4]	; (1ba1c <z_impl_z_current_get+0x8>)
   1ba16:	6898      	ldr	r0, [r3, #8]
   1ba18:	4770      	bx	lr
   1ba1a:	bf00      	nop
   1ba1c:	20001f54 	.word	0x20001f54

0001ba20 <z_impl_k_is_preempt_thread>:
   1ba20:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1ba24:	b93b      	cbnz	r3, 1ba36 <z_impl_k_is_preempt_thread+0x16>
   1ba26:	4b05      	ldr	r3, [pc, #20]	; (1ba3c <z_impl_k_is_preempt_thread+0x1c>)
   1ba28:	689b      	ldr	r3, [r3, #8]
   1ba2a:	89d8      	ldrh	r0, [r3, #14]
   1ba2c:	287f      	cmp	r0, #127	; 0x7f
   1ba2e:	bf8c      	ite	hi
   1ba30:	2000      	movhi	r0, #0
   1ba32:	2001      	movls	r0, #1
   1ba34:	4770      	bx	lr
   1ba36:	2000      	movs	r0, #0
}
   1ba38:	4770      	bx	lr
   1ba3a:	bf00      	nop
   1ba3c:	20001f54 	.word	0x20001f54

0001ba40 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1ba40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba44:	4604      	mov	r4, r0
   1ba46:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba4a:	f3ef 8611 	mrs	r6, BASEPRI
   1ba4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ba56:	4848      	ldr	r0, [pc, #288]	; (1bb78 <z_thread_abort+0x138>)
   1ba58:	f7fd fd6a 	bl	19530 <z_spin_lock_valid>
   1ba5c:	b968      	cbnz	r0, 1ba7a <z_thread_abort+0x3a>
   1ba5e:	4a47      	ldr	r2, [pc, #284]	; (1bb7c <z_thread_abort+0x13c>)
   1ba60:	4947      	ldr	r1, [pc, #284]	; (1bb80 <z_thread_abort+0x140>)
   1ba62:	4848      	ldr	r0, [pc, #288]	; (1bb84 <z_thread_abort+0x144>)
   1ba64:	2381      	movs	r3, #129	; 0x81
   1ba66:	f001 f9bc 	bl	1cde2 <printk>
   1ba6a:	4943      	ldr	r1, [pc, #268]	; (1bb78 <z_thread_abort+0x138>)
   1ba6c:	4846      	ldr	r0, [pc, #280]	; (1bb88 <z_thread_abort+0x148>)
   1ba6e:	f001 f9b8 	bl	1cde2 <printk>
   1ba72:	4842      	ldr	r0, [pc, #264]	; (1bb7c <z_thread_abort+0x13c>)
   1ba74:	2181      	movs	r1, #129	; 0x81
   1ba76:	f001 fc0e 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ba7a:	483f      	ldr	r0, [pc, #252]	; (1bb78 <z_thread_abort+0x138>)
   1ba7c:	f7fd fd76 	bl	1956c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1ba80:	7b63      	ldrb	r3, [r4, #13]
   1ba82:	071a      	lsls	r2, r3, #28
   1ba84:	d517      	bpl.n	1bab6 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ba86:	483c      	ldr	r0, [pc, #240]	; (1bb78 <z_thread_abort+0x138>)
   1ba88:	f7fd fd60 	bl	1954c <z_spin_unlock_valid>
   1ba8c:	b968      	cbnz	r0, 1baaa <z_thread_abort+0x6a>
   1ba8e:	4a3b      	ldr	r2, [pc, #236]	; (1bb7c <z_thread_abort+0x13c>)
   1ba90:	493e      	ldr	r1, [pc, #248]	; (1bb8c <z_thread_abort+0x14c>)
   1ba92:	483c      	ldr	r0, [pc, #240]	; (1bb84 <z_thread_abort+0x144>)
   1ba94:	23ac      	movs	r3, #172	; 0xac
   1ba96:	f001 f9a4 	bl	1cde2 <printk>
   1ba9a:	4937      	ldr	r1, [pc, #220]	; (1bb78 <z_thread_abort+0x138>)
   1ba9c:	483c      	ldr	r0, [pc, #240]	; (1bb90 <z_thread_abort+0x150>)
   1ba9e:	f001 f9a0 	bl	1cde2 <printk>
   1baa2:	4836      	ldr	r0, [pc, #216]	; (1bb7c <z_thread_abort+0x13c>)
   1baa4:	21ac      	movs	r1, #172	; 0xac
   1baa6:	f001 fbf6 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1baaa:	f386 8811 	msr	BASEPRI, r6
   1baae:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1bab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bab6:	f023 0220 	bic.w	r2, r3, #32
   1baba:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1babe:	09d2      	lsrs	r2, r2, #7
   1bac0:	d142      	bne.n	1bb48 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bac2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   1bac4:	68a3      	ldr	r3, [r4, #8]
   1bac6:	b113      	cbz	r3, 1bace <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   1bac8:	4620      	mov	r0, r4
   1baca:	f7ff f847 	bl	1ab5c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1bace:	f104 0018 	add.w	r0, r4, #24
   1bad2:	f000 fa11 	bl	1bef8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1bad6:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1bada:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1bade:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bae0:	42bd      	cmp	r5, r7
   1bae2:	d001      	beq.n	1bae8 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1bae4:	2d00      	cmp	r5, #0
   1bae6:	d139      	bne.n	1bb5c <z_thread_abort+0x11c>
		update_cache(1);
   1bae8:	2001      	movs	r0, #1
   1baea:	f7ff f8a5 	bl	1ac38 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1baee:	4b29      	ldr	r3, [pc, #164]	; (1bb94 <z_thread_abort+0x154>)
   1baf0:	689b      	ldr	r3, [r3, #8]
   1baf2:	42a3      	cmp	r3, r4
   1baf4:	d1c7      	bne.n	1ba86 <z_thread_abort+0x46>
   1baf6:	f3ef 8305 	mrs	r3, IPSR
   1bafa:	2b00      	cmp	r3, #0
   1bafc:	d1c3      	bne.n	1ba86 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bafe:	481e      	ldr	r0, [pc, #120]	; (1bb78 <z_thread_abort+0x138>)
   1bb00:	f7fd fd24 	bl	1954c <z_spin_unlock_valid>
   1bb04:	b968      	cbnz	r0, 1bb22 <z_thread_abort+0xe2>
   1bb06:	4a1d      	ldr	r2, [pc, #116]	; (1bb7c <z_thread_abort+0x13c>)
   1bb08:	4920      	ldr	r1, [pc, #128]	; (1bb8c <z_thread_abort+0x14c>)
   1bb0a:	481e      	ldr	r0, [pc, #120]	; (1bb84 <z_thread_abort+0x144>)
   1bb0c:	23c3      	movs	r3, #195	; 0xc3
   1bb0e:	f001 f968 	bl	1cde2 <printk>
   1bb12:	4919      	ldr	r1, [pc, #100]	; (1bb78 <z_thread_abort+0x138>)
   1bb14:	481e      	ldr	r0, [pc, #120]	; (1bb90 <z_thread_abort+0x150>)
   1bb16:	f001 f964 	bl	1cde2 <printk>
   1bb1a:	4818      	ldr	r0, [pc, #96]	; (1bb7c <z_thread_abort+0x13c>)
   1bb1c:	21c3      	movs	r1, #195	; 0xc3
   1bb1e:	f001 fbba 	bl	1d296 <assert_post_action>
   1bb22:	4630      	mov	r0, r6
   1bb24:	f7f5 fce6 	bl	114f4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   1bb28:	4a1b      	ldr	r2, [pc, #108]	; (1bb98 <z_thread_abort+0x158>)
   1bb2a:	491c      	ldr	r1, [pc, #112]	; (1bb9c <z_thread_abort+0x15c>)
   1bb2c:	4815      	ldr	r0, [pc, #84]	; (1bb84 <z_thread_abort+0x144>)
   1bb2e:	f240 6309 	movw	r3, #1545	; 0x609
   1bb32:	f001 f956 	bl	1cde2 <printk>
   1bb36:	481a      	ldr	r0, [pc, #104]	; (1bba0 <z_thread_abort+0x160>)
   1bb38:	f001 f953 	bl	1cde2 <printk>
   1bb3c:	4816      	ldr	r0, [pc, #88]	; (1bb98 <z_thread_abort+0x158>)
   1bb3e:	f240 6109 	movw	r1, #1545	; 0x609
   1bb42:	f001 fba8 	bl	1d296 <assert_post_action>
   1bb46:	e79e      	b.n	1ba86 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bb48:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1bb4c:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   1bb50:	4814      	ldr	r0, [pc, #80]	; (1bba4 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bb52:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1bb54:	4621      	mov	r1, r4
   1bb56:	f7fe ffdf 	bl	1ab18 <z_priq_dumb_remove>
}
   1bb5a:	e7b3      	b.n	1bac4 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   1bb5c:	4628      	mov	r0, r5
   1bb5e:	f7fe fffd 	bl	1ab5c <unpend_thread_no_timeout>
   1bb62:	f105 0018 	add.w	r0, r5, #24
   1bb66:	f000 f9c7 	bl	1bef8 <z_abort_timeout>
   1bb6a:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1bb6e:	4628      	mov	r0, r5
   1bb70:	f7ff f968 	bl	1ae44 <ready_thread>
   1bb74:	e7b3      	b.n	1bade <z_thread_abort+0x9e>
   1bb76:	bf00      	nop
   1bb78:	20001f94 	.word	0x20001f94
   1bb7c:	00020b35 	.word	0x00020b35
   1bb80:	00020b87 	.word	0x00020b87
   1bb84:	00020a75 	.word	0x00020a75
   1bb88:	00020b9c 	.word	0x00020b9c
   1bb8c:	00020b5b 	.word	0x00020b5b
   1bb90:	00020b72 	.word	0x00020b72
   1bb94:	20001f54 	.word	0x20001f54
   1bb98:	000223a5 	.word	0x000223a5
   1bb9c:	00022787 	.word	0x00022787
   1bba0:	00022497 	.word	0x00022497
   1bba4:	20001f74 	.word	0x20001f74

0001bba8 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   1bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbaa:	4604      	mov	r4, r0
   1bbac:	460e      	mov	r6, r1
   1bbae:	4615      	mov	r5, r2
	__asm__ volatile(
   1bbb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbb4:	f3ef 8711 	mrs	r7, BASEPRI
   1bbb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bbc0:	481e      	ldr	r0, [pc, #120]	; (1bc3c <z_sched_wake+0x94>)
   1bbc2:	f7fd fcb5 	bl	19530 <z_spin_lock_valid>
   1bbc6:	b968      	cbnz	r0, 1bbe4 <z_sched_wake+0x3c>
   1bbc8:	4a1d      	ldr	r2, [pc, #116]	; (1bc40 <z_sched_wake+0x98>)
   1bbca:	491e      	ldr	r1, [pc, #120]	; (1bc44 <z_sched_wake+0x9c>)
   1bbcc:	481e      	ldr	r0, [pc, #120]	; (1bc48 <z_sched_wake+0xa0>)
   1bbce:	2381      	movs	r3, #129	; 0x81
   1bbd0:	f001 f907 	bl	1cde2 <printk>
   1bbd4:	4919      	ldr	r1, [pc, #100]	; (1bc3c <z_sched_wake+0x94>)
   1bbd6:	481d      	ldr	r0, [pc, #116]	; (1bc4c <z_sched_wake+0xa4>)
   1bbd8:	f001 f903 	bl	1cde2 <printk>
   1bbdc:	4818      	ldr	r0, [pc, #96]	; (1bc40 <z_sched_wake+0x98>)
   1bbde:	2181      	movs	r1, #129	; 0x81
   1bbe0:	f001 fb59 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bbe4:	4815      	ldr	r0, [pc, #84]	; (1bc3c <z_sched_wake+0x94>)
   1bbe6:	f7fd fcc1 	bl	1956c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   1bbea:	4620      	mov	r0, r4
   1bbec:	f004 f920 	bl	1fe30 <z_priq_dumb_best>

		if (thread != NULL) {
   1bbf0:	4604      	mov	r4, r0
   1bbf2:	b158      	cbz	r0, 1bc0c <z_sched_wake+0x64>
   1bbf4:	67c6      	str	r6, [r0, #124]	; 0x7c
   1bbf6:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   1bbf8:	f7fe ffb0 	bl	1ab5c <unpend_thread_no_timeout>
   1bbfc:	f104 0018 	add.w	r0, r4, #24
   1bc00:	f000 f97a 	bl	1bef8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   1bc04:	4620      	mov	r0, r4
   1bc06:	f7ff f91d 	bl	1ae44 <ready_thread>
			ret = true;
   1bc0a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bc0c:	480b      	ldr	r0, [pc, #44]	; (1bc3c <z_sched_wake+0x94>)
   1bc0e:	f7fd fc9d 	bl	1954c <z_spin_unlock_valid>
   1bc12:	b968      	cbnz	r0, 1bc30 <z_sched_wake+0x88>
   1bc14:	4a0a      	ldr	r2, [pc, #40]	; (1bc40 <z_sched_wake+0x98>)
   1bc16:	490e      	ldr	r1, [pc, #56]	; (1bc50 <z_sched_wake+0xa8>)
   1bc18:	480b      	ldr	r0, [pc, #44]	; (1bc48 <z_sched_wake+0xa0>)
   1bc1a:	23ac      	movs	r3, #172	; 0xac
   1bc1c:	f001 f8e1 	bl	1cde2 <printk>
   1bc20:	4906      	ldr	r1, [pc, #24]	; (1bc3c <z_sched_wake+0x94>)
   1bc22:	480c      	ldr	r0, [pc, #48]	; (1bc54 <z_sched_wake+0xac>)
   1bc24:	f001 f8dd 	bl	1cde2 <printk>
   1bc28:	4805      	ldr	r0, [pc, #20]	; (1bc40 <z_sched_wake+0x98>)
   1bc2a:	21ac      	movs	r1, #172	; 0xac
   1bc2c:	f001 fb33 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1bc30:	f387 8811 	msr	BASEPRI, r7
   1bc34:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1bc38:	4620      	mov	r0, r4
   1bc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc3c:	20001f94 	.word	0x20001f94
   1bc40:	00020b35 	.word	0x00020b35
   1bc44:	00020b87 	.word	0x00020b87
   1bc48:	00020a75 	.word	0x00020a75
   1bc4c:	00020b9c 	.word	0x00020b9c
   1bc50:	00020b5b 	.word	0x00020b5b
   1bc54:	00020b72 	.word	0x00020b72

0001bc58 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bc58:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bc5a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1bc5e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bc60:	e9cd 6700 	strd	r6, r7, [sp]
   1bc64:	f7ff faf2 	bl	1b24c <z_pend_curr>

	if (data != NULL) {
   1bc68:	b11c      	cbz	r4, 1bc72 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1bc6a:	4b03      	ldr	r3, [pc, #12]	; (1bc78 <z_sched_wait+0x20>)
   1bc6c:	689b      	ldr	r3, [r3, #8]
   1bc6e:	695b      	ldr	r3, [r3, #20]
   1bc70:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1bc72:	b002      	add	sp, #8
   1bc74:	bdd0      	pop	{r4, r6, r7, pc}
   1bc76:	bf00      	nop
   1bc78:	20001f54 	.word	0x20001f54

0001bc7c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bc7c:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bc7e:	4806      	ldr	r0, [pc, #24]	; (1bc98 <z_data_copy+0x1c>)
   1bc80:	4a06      	ldr	r2, [pc, #24]	; (1bc9c <z_data_copy+0x20>)
   1bc82:	4907      	ldr	r1, [pc, #28]	; (1bca0 <z_data_copy+0x24>)
   1bc84:	1a12      	subs	r2, r2, r0
   1bc86:	f004 f9a0 	bl	1ffca <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bc8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1bc8e:	4a05      	ldr	r2, [pc, #20]	; (1bca4 <z_data_copy+0x28>)
   1bc90:	4905      	ldr	r1, [pc, #20]	; (1bca8 <z_data_copy+0x2c>)
   1bc92:	4806      	ldr	r0, [pc, #24]	; (1bcac <z_data_copy+0x30>)
   1bc94:	f004 b999 	b.w	1ffca <memcpy>
   1bc98:	20000000 	.word	0x20000000
   1bc9c:	200007bc 	.word	0x200007bc
   1bca0:	000228e8 	.word	0x000228e8
   1bca4:	00000000 	.word	0x00000000
   1bca8:	000228e8 	.word	0x000228e8
   1bcac:	20000000 	.word	0x20000000

0001bcb0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bcb0:	4b03      	ldr	r3, [pc, #12]	; (1bcc0 <elapsed+0x10>)
   1bcb2:	681b      	ldr	r3, [r3, #0]
   1bcb4:	b90b      	cbnz	r3, 1bcba <elapsed+0xa>
   1bcb6:	f7fb bfd7 	b.w	17c68 <sys_clock_elapsed>
}
   1bcba:	2000      	movs	r0, #0
   1bcbc:	4770      	bx	lr
   1bcbe:	bf00      	nop
   1bcc0:	20001fa0 	.word	0x20001fa0

0001bcc4 <next_timeout>:

static int32_t next_timeout(void)
{
   1bcc4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1bcc6:	4b13      	ldr	r3, [pc, #76]	; (1bd14 <next_timeout+0x50>)
   1bcc8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcca:	429c      	cmp	r4, r3
   1bccc:	bf08      	it	eq
   1bcce:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1bcd0:	f7ff ffee 	bl	1bcb0 <elapsed>
   1bcd4:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1bcd6:	b1bc      	cbz	r4, 1bd08 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bcd8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1bcdc:	1b40      	subs	r0, r0, r5
   1bcde:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1bce2:	2801      	cmp	r0, #1
   1bce4:	f171 0300 	sbcs.w	r3, r1, #0
   1bce8:	db11      	blt.n	1bd0e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bcea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1bcee:	2300      	movs	r3, #0
   1bcf0:	4282      	cmp	r2, r0
   1bcf2:	eb73 0401 	sbcs.w	r4, r3, r1
   1bcf6:	da00      	bge.n	1bcfa <next_timeout+0x36>
   1bcf8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bcfa:	4b07      	ldr	r3, [pc, #28]	; (1bd18 <next_timeout+0x54>)
   1bcfc:	691b      	ldr	r3, [r3, #16]
   1bcfe:	b113      	cbz	r3, 1bd06 <next_timeout+0x42>
   1bd00:	4298      	cmp	r0, r3
   1bd02:	bfa8      	it	ge
   1bd04:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1bd06:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bd08:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bd0c:	e7f5      	b.n	1bcfa <next_timeout+0x36>
   1bd0e:	2000      	movs	r0, #0
   1bd10:	e7f3      	b.n	1bcfa <next_timeout+0x36>
   1bd12:	bf00      	nop
   1bd14:	20000544 	.word	0x20000544
   1bd18:	20001f54 	.word	0x20001f54

0001bd1c <remove_timeout>:
{
   1bd1c:	b530      	push	{r4, r5, lr}
   1bd1e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bd20:	b168      	cbz	r0, 1bd3e <remove_timeout+0x22>
   1bd22:	4a0a      	ldr	r2, [pc, #40]	; (1bd4c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1bd24:	6852      	ldr	r2, [r2, #4]
   1bd26:	4290      	cmp	r0, r2
   1bd28:	d009      	beq.n	1bd3e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1bd2a:	b143      	cbz	r3, 1bd3e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1bd2c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bd30:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bd34:	1912      	adds	r2, r2, r4
   1bd36:	eb45 0101 	adc.w	r1, r5, r1
   1bd3a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   1bd3e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   1bd40:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bd42:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bd44:	2300      	movs	r3, #0
	node->prev = NULL;
   1bd46:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bd4a:	bd30      	pop	{r4, r5, pc}
   1bd4c:	20000544 	.word	0x20000544

0001bd50 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1bd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd54:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bd56:	1c6b      	adds	r3, r5, #1
   1bd58:	bf08      	it	eq
   1bd5a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1bd5e:	4682      	mov	sl, r0
   1bd60:	468b      	mov	fp, r1
   1bd62:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bd64:	f000 80aa 	beq.w	1bebc <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   1bd68:	6803      	ldr	r3, [r0, #0]
   1bd6a:	b163      	cbz	r3, 1bd86 <z_add_timeout+0x36>
   1bd6c:	4955      	ldr	r1, [pc, #340]	; (1bec4 <z_add_timeout+0x174>)
   1bd6e:	4a56      	ldr	r2, [pc, #344]	; (1bec8 <z_add_timeout+0x178>)
   1bd70:	4856      	ldr	r0, [pc, #344]	; (1becc <z_add_timeout+0x17c>)
   1bd72:	235d      	movs	r3, #93	; 0x5d
   1bd74:	f001 f835 	bl	1cde2 <printk>
   1bd78:	4855      	ldr	r0, [pc, #340]	; (1bed0 <z_add_timeout+0x180>)
   1bd7a:	f001 f832 	bl	1cde2 <printk>
   1bd7e:	4852      	ldr	r0, [pc, #328]	; (1bec8 <z_add_timeout+0x178>)
   1bd80:	215d      	movs	r1, #93	; 0x5d
   1bd82:	f001 fa88 	bl	1d296 <assert_post_action>
	to->fn = fn;
   1bd86:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   1bd8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd8e:	f3ef 8b11 	mrs	fp, BASEPRI
   1bd92:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bd9a:	484e      	ldr	r0, [pc, #312]	; (1bed4 <z_add_timeout+0x184>)
   1bd9c:	f7fd fbc8 	bl	19530 <z_spin_lock_valid>
   1bda0:	b968      	cbnz	r0, 1bdbe <z_add_timeout+0x6e>
   1bda2:	4a4d      	ldr	r2, [pc, #308]	; (1bed8 <z_add_timeout+0x188>)
   1bda4:	494d      	ldr	r1, [pc, #308]	; (1bedc <z_add_timeout+0x18c>)
   1bda6:	4849      	ldr	r0, [pc, #292]	; (1becc <z_add_timeout+0x17c>)
   1bda8:	2381      	movs	r3, #129	; 0x81
   1bdaa:	f001 f81a 	bl	1cde2 <printk>
   1bdae:	4949      	ldr	r1, [pc, #292]	; (1bed4 <z_add_timeout+0x184>)
   1bdb0:	484b      	ldr	r0, [pc, #300]	; (1bee0 <z_add_timeout+0x190>)
   1bdb2:	f001 f816 	bl	1cde2 <printk>
   1bdb6:	4848      	ldr	r0, [pc, #288]	; (1bed8 <z_add_timeout+0x188>)
   1bdb8:	2181      	movs	r1, #129	; 0x81
   1bdba:	f001 fa6c 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bdbe:	4845      	ldr	r0, [pc, #276]	; (1bed4 <z_add_timeout+0x184>)
   1bdc0:	f7fd fbd4 	bl	1956c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1bdc4:	f06f 0301 	mvn.w	r3, #1
   1bdc8:	ebb3 0804 	subs.w	r8, r3, r4
   1bdcc:	f04f 32ff 	mov.w	r2, #4294967295
   1bdd0:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1bdd4:	f1b8 0f00 	cmp.w	r8, #0
   1bdd8:	f179 0100 	sbcs.w	r1, r9, #0
   1bddc:	db1c      	blt.n	1be18 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1bdde:	4841      	ldr	r0, [pc, #260]	; (1bee4 <z_add_timeout+0x194>)
   1bde0:	e9d0 1000 	ldrd	r1, r0, [r0]
   1bde4:	1a5b      	subs	r3, r3, r1
   1bde6:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1bdea:	1b1e      	subs	r6, r3, r4
   1bdec:	eb62 0705 	sbc.w	r7, r2, r5
   1bdf0:	2e01      	cmp	r6, #1
   1bdf2:	f177 0300 	sbcs.w	r3, r7, #0
   1bdf6:	bfbc      	itt	lt
   1bdf8:	2601      	movlt	r6, #1
   1bdfa:	2700      	movlt	r7, #0
   1bdfc:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   1be00:	4a39      	ldr	r2, [pc, #228]	; (1bee8 <z_add_timeout+0x198>)
   1be02:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be06:	4293      	cmp	r3, r2
   1be08:	d11d      	bne.n	1be46 <z_add_timeout+0xf6>
	node->prev = tail;
   1be0a:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   1be0e:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   1be12:	f8c2 a004 	str.w	sl, [r2, #4]
}
   1be16:	e02c      	b.n	1be72 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1be18:	f7ff ff4a 	bl	1bcb0 <elapsed>
   1be1c:	1c63      	adds	r3, r4, #1
   1be1e:	9300      	str	r3, [sp, #0]
   1be20:	f145 0300 	adc.w	r3, r5, #0
   1be24:	9301      	str	r3, [sp, #4]
   1be26:	e9dd 2300 	ldrd	r2, r3, [sp]
   1be2a:	1812      	adds	r2, r2, r0
   1be2c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1be30:	e9ca 2304 	strd	r2, r3, [sl, #16]
   1be34:	e7e4      	b.n	1be00 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1be36:	1be0      	subs	r0, r4, r7
   1be38:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   1be3c:	42b3      	cmp	r3, r6
   1be3e:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1be42:	d0e2      	beq.n	1be0a <z_add_timeout+0xba>
   1be44:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1be46:	2b00      	cmp	r3, #0
   1be48:	d0df      	beq.n	1be0a <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   1be4a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   1be4e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1be52:	42bc      	cmp	r4, r7
   1be54:	eb75 0108 	sbcs.w	r1, r5, r8
   1be58:	daed      	bge.n	1be36 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   1be5a:	1b38      	subs	r0, r7, r4
   1be5c:	eb68 0105 	sbc.w	r1, r8, r5
   1be60:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1be64:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1be66:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   1be6a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1be6e:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   1be72:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be74:	4293      	cmp	r3, r2
   1be76:	d00b      	beq.n	1be90 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1be78:	459a      	cmp	sl, r3
   1be7a:	d109      	bne.n	1be90 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1be7c:	f7ff ff22 	bl	1bcc4 <next_timeout>

			if (next_time == 0 ||
   1be80:	b118      	cbz	r0, 1be8a <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   1be82:	4b1a      	ldr	r3, [pc, #104]	; (1beec <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   1be84:	691b      	ldr	r3, [r3, #16]
   1be86:	4283      	cmp	r3, r0
   1be88:	d002      	beq.n	1be90 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   1be8a:	2100      	movs	r1, #0
   1be8c:	f7fb febc 	bl	17c08 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be90:	4810      	ldr	r0, [pc, #64]	; (1bed4 <z_add_timeout+0x184>)
   1be92:	f7fd fb5b 	bl	1954c <z_spin_unlock_valid>
   1be96:	b968      	cbnz	r0, 1beb4 <z_add_timeout+0x164>
   1be98:	4a0f      	ldr	r2, [pc, #60]	; (1bed8 <z_add_timeout+0x188>)
   1be9a:	4915      	ldr	r1, [pc, #84]	; (1bef0 <z_add_timeout+0x1a0>)
   1be9c:	480b      	ldr	r0, [pc, #44]	; (1becc <z_add_timeout+0x17c>)
   1be9e:	23ac      	movs	r3, #172	; 0xac
   1bea0:	f000 ff9f 	bl	1cde2 <printk>
   1bea4:	490b      	ldr	r1, [pc, #44]	; (1bed4 <z_add_timeout+0x184>)
   1bea6:	4813      	ldr	r0, [pc, #76]	; (1bef4 <z_add_timeout+0x1a4>)
   1bea8:	f000 ff9b 	bl	1cde2 <printk>
   1beac:	480a      	ldr	r0, [pc, #40]	; (1bed8 <z_add_timeout+0x188>)
   1beae:	21ac      	movs	r1, #172	; 0xac
   1beb0:	f001 f9f1 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1beb4:	f38b 8811 	msr	BASEPRI, fp
   1beb8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bebc:	b003      	add	sp, #12
   1bebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bec2:	bf00      	nop
   1bec4:	000224dd 	.word	0x000224dd
   1bec8:	000224b9 	.word	0x000224b9
   1becc:	00020a75 	.word	0x00020a75
   1bed0:	00021901 	.word	0x00021901
   1bed4:	20001fa4 	.word	0x20001fa4
   1bed8:	00020b35 	.word	0x00020b35
   1bedc:	00020b87 	.word	0x00020b87
   1bee0:	00020b9c 	.word	0x00020b9c
   1bee4:	20001bf8 	.word	0x20001bf8
   1bee8:	20000544 	.word	0x20000544
   1beec:	20001f54 	.word	0x20001f54
   1bef0:	00020b5b 	.word	0x00020b5b
   1bef4:	00020b72 	.word	0x00020b72

0001bef8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   1bef8:	b538      	push	{r3, r4, r5, lr}
   1befa:	4604      	mov	r4, r0
	__asm__ volatile(
   1befc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf00:	f3ef 8511 	mrs	r5, BASEPRI
   1bf04:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bf0c:	481a      	ldr	r0, [pc, #104]	; (1bf78 <z_abort_timeout+0x80>)
   1bf0e:	f7fd fb0f 	bl	19530 <z_spin_lock_valid>
   1bf12:	b968      	cbnz	r0, 1bf30 <z_abort_timeout+0x38>
   1bf14:	4a19      	ldr	r2, [pc, #100]	; (1bf7c <z_abort_timeout+0x84>)
   1bf16:	491a      	ldr	r1, [pc, #104]	; (1bf80 <z_abort_timeout+0x88>)
   1bf18:	481a      	ldr	r0, [pc, #104]	; (1bf84 <z_abort_timeout+0x8c>)
   1bf1a:	2381      	movs	r3, #129	; 0x81
   1bf1c:	f000 ff61 	bl	1cde2 <printk>
   1bf20:	4915      	ldr	r1, [pc, #84]	; (1bf78 <z_abort_timeout+0x80>)
   1bf22:	4819      	ldr	r0, [pc, #100]	; (1bf88 <z_abort_timeout+0x90>)
   1bf24:	f000 ff5d 	bl	1cde2 <printk>
   1bf28:	4814      	ldr	r0, [pc, #80]	; (1bf7c <z_abort_timeout+0x84>)
   1bf2a:	2181      	movs	r1, #129	; 0x81
   1bf2c:	f001 f9b3 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bf30:	4811      	ldr	r0, [pc, #68]	; (1bf78 <z_abort_timeout+0x80>)
   1bf32:	f7fd fb1b 	bl	1956c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   1bf36:	6823      	ldr	r3, [r4, #0]
   1bf38:	b1db      	cbz	r3, 1bf72 <z_abort_timeout+0x7a>
			remove_timeout(to);
   1bf3a:	4620      	mov	r0, r4
   1bf3c:	f7ff feee 	bl	1bd1c <remove_timeout>
			ret = 0;
   1bf40:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bf42:	480d      	ldr	r0, [pc, #52]	; (1bf78 <z_abort_timeout+0x80>)
   1bf44:	f7fd fb02 	bl	1954c <z_spin_unlock_valid>
   1bf48:	b968      	cbnz	r0, 1bf66 <z_abort_timeout+0x6e>
   1bf4a:	4a0c      	ldr	r2, [pc, #48]	; (1bf7c <z_abort_timeout+0x84>)
   1bf4c:	490f      	ldr	r1, [pc, #60]	; (1bf8c <z_abort_timeout+0x94>)
   1bf4e:	480d      	ldr	r0, [pc, #52]	; (1bf84 <z_abort_timeout+0x8c>)
   1bf50:	23ac      	movs	r3, #172	; 0xac
   1bf52:	f000 ff46 	bl	1cde2 <printk>
   1bf56:	4908      	ldr	r1, [pc, #32]	; (1bf78 <z_abort_timeout+0x80>)
   1bf58:	480d      	ldr	r0, [pc, #52]	; (1bf90 <z_abort_timeout+0x98>)
   1bf5a:	f000 ff42 	bl	1cde2 <printk>
   1bf5e:	4807      	ldr	r0, [pc, #28]	; (1bf7c <z_abort_timeout+0x84>)
   1bf60:	21ac      	movs	r1, #172	; 0xac
   1bf62:	f001 f998 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1bf66:	f385 8811 	msr	BASEPRI, r5
   1bf6a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1bf6e:	4620      	mov	r0, r4
   1bf70:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1bf72:	f06f 0415 	mvn.w	r4, #21
   1bf76:	e7e4      	b.n	1bf42 <z_abort_timeout+0x4a>
   1bf78:	20001fa4 	.word	0x20001fa4
   1bf7c:	00020b35 	.word	0x00020b35
   1bf80:	00020b87 	.word	0x00020b87
   1bf84:	00020a75 	.word	0x00020a75
   1bf88:	00020b9c 	.word	0x00020b9c
   1bf8c:	00020b5b 	.word	0x00020b5b
   1bf90:	00020b72 	.word	0x00020b72

0001bf94 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1bf94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1bf96:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf9a:	f3ef 8511 	mrs	r5, BASEPRI
   1bf9e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bfa2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bfa6:	4818      	ldr	r0, [pc, #96]	; (1c008 <z_get_next_timeout_expiry+0x74>)
   1bfa8:	f7fd fac2 	bl	19530 <z_spin_lock_valid>
   1bfac:	b968      	cbnz	r0, 1bfca <z_get_next_timeout_expiry+0x36>
   1bfae:	4a17      	ldr	r2, [pc, #92]	; (1c00c <z_get_next_timeout_expiry+0x78>)
   1bfb0:	4917      	ldr	r1, [pc, #92]	; (1c010 <z_get_next_timeout_expiry+0x7c>)
   1bfb2:	4818      	ldr	r0, [pc, #96]	; (1c014 <z_get_next_timeout_expiry+0x80>)
   1bfb4:	2381      	movs	r3, #129	; 0x81
   1bfb6:	f000 ff14 	bl	1cde2 <printk>
   1bfba:	4913      	ldr	r1, [pc, #76]	; (1c008 <z_get_next_timeout_expiry+0x74>)
   1bfbc:	4816      	ldr	r0, [pc, #88]	; (1c018 <z_get_next_timeout_expiry+0x84>)
   1bfbe:	f000 ff10 	bl	1cde2 <printk>
   1bfc2:	4812      	ldr	r0, [pc, #72]	; (1c00c <z_get_next_timeout_expiry+0x78>)
   1bfc4:	2181      	movs	r1, #129	; 0x81
   1bfc6:	f001 f966 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1bfca:	480f      	ldr	r0, [pc, #60]	; (1c008 <z_get_next_timeout_expiry+0x74>)
   1bfcc:	f7fd face 	bl	1956c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1bfd0:	f7ff fe78 	bl	1bcc4 <next_timeout>
   1bfd4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bfd6:	480c      	ldr	r0, [pc, #48]	; (1c008 <z_get_next_timeout_expiry+0x74>)
   1bfd8:	f7fd fab8 	bl	1954c <z_spin_unlock_valid>
   1bfdc:	b968      	cbnz	r0, 1bffa <z_get_next_timeout_expiry+0x66>
   1bfde:	4a0b      	ldr	r2, [pc, #44]	; (1c00c <z_get_next_timeout_expiry+0x78>)
   1bfe0:	490e      	ldr	r1, [pc, #56]	; (1c01c <z_get_next_timeout_expiry+0x88>)
   1bfe2:	480c      	ldr	r0, [pc, #48]	; (1c014 <z_get_next_timeout_expiry+0x80>)
   1bfe4:	23ac      	movs	r3, #172	; 0xac
   1bfe6:	f000 fefc 	bl	1cde2 <printk>
   1bfea:	4907      	ldr	r1, [pc, #28]	; (1c008 <z_get_next_timeout_expiry+0x74>)
   1bfec:	480c      	ldr	r0, [pc, #48]	; (1c020 <z_get_next_timeout_expiry+0x8c>)
   1bfee:	f000 fef8 	bl	1cde2 <printk>
   1bff2:	4806      	ldr	r0, [pc, #24]	; (1c00c <z_get_next_timeout_expiry+0x78>)
   1bff4:	21ac      	movs	r1, #172	; 0xac
   1bff6:	f001 f94e 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1bffa:	f385 8811 	msr	BASEPRI, r5
   1bffe:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1c002:	4620      	mov	r0, r4
   1c004:	bd38      	pop	{r3, r4, r5, pc}
   1c006:	bf00      	nop
   1c008:	20001fa4 	.word	0x20001fa4
   1c00c:	00020b35 	.word	0x00020b35
   1c010:	00020b87 	.word	0x00020b87
   1c014:	00020a75 	.word	0x00020a75
   1c018:	00020b9c 	.word	0x00020b9c
   1c01c:	00020b5b 	.word	0x00020b5b
   1c020:	00020b72 	.word	0x00020b72

0001c024 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1c024:	b570      	push	{r4, r5, r6, lr}
   1c026:	4604      	mov	r4, r0
   1c028:	460d      	mov	r5, r1
	__asm__ volatile(
   1c02a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c02e:	f3ef 8611 	mrs	r6, BASEPRI
   1c032:	f383 8812 	msr	BASEPRI_MAX, r3
   1c036:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c03a:	481b      	ldr	r0, [pc, #108]	; (1c0a8 <z_set_timeout_expiry+0x84>)
   1c03c:	f7fd fa78 	bl	19530 <z_spin_lock_valid>
   1c040:	b968      	cbnz	r0, 1c05e <z_set_timeout_expiry+0x3a>
   1c042:	4a1a      	ldr	r2, [pc, #104]	; (1c0ac <z_set_timeout_expiry+0x88>)
   1c044:	491a      	ldr	r1, [pc, #104]	; (1c0b0 <z_set_timeout_expiry+0x8c>)
   1c046:	481b      	ldr	r0, [pc, #108]	; (1c0b4 <z_set_timeout_expiry+0x90>)
   1c048:	2381      	movs	r3, #129	; 0x81
   1c04a:	f000 feca 	bl	1cde2 <printk>
   1c04e:	4916      	ldr	r1, [pc, #88]	; (1c0a8 <z_set_timeout_expiry+0x84>)
   1c050:	4819      	ldr	r0, [pc, #100]	; (1c0b8 <z_set_timeout_expiry+0x94>)
   1c052:	f000 fec6 	bl	1cde2 <printk>
   1c056:	4815      	ldr	r0, [pc, #84]	; (1c0ac <z_set_timeout_expiry+0x88>)
   1c058:	2181      	movs	r1, #129	; 0x81
   1c05a:	f001 f91c 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c05e:	4812      	ldr	r0, [pc, #72]	; (1c0a8 <z_set_timeout_expiry+0x84>)
   1c060:	f7fd fa84 	bl	1956c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1c064:	f7ff fe2e 	bl	1bcc4 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1c068:	2801      	cmp	r0, #1
   1c06a:	dd05      	ble.n	1c078 <z_set_timeout_expiry+0x54>
   1c06c:	42a0      	cmp	r0, r4
   1c06e:	db03      	blt.n	1c078 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1c070:	4629      	mov	r1, r5
   1c072:	4620      	mov	r0, r4
   1c074:	f7fb fdc8 	bl	17c08 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c078:	480b      	ldr	r0, [pc, #44]	; (1c0a8 <z_set_timeout_expiry+0x84>)
   1c07a:	f7fd fa67 	bl	1954c <z_spin_unlock_valid>
   1c07e:	b968      	cbnz	r0, 1c09c <z_set_timeout_expiry+0x78>
   1c080:	4a0a      	ldr	r2, [pc, #40]	; (1c0ac <z_set_timeout_expiry+0x88>)
   1c082:	490e      	ldr	r1, [pc, #56]	; (1c0bc <z_set_timeout_expiry+0x98>)
   1c084:	480b      	ldr	r0, [pc, #44]	; (1c0b4 <z_set_timeout_expiry+0x90>)
   1c086:	23ac      	movs	r3, #172	; 0xac
   1c088:	f000 feab 	bl	1cde2 <printk>
   1c08c:	4906      	ldr	r1, [pc, #24]	; (1c0a8 <z_set_timeout_expiry+0x84>)
   1c08e:	480c      	ldr	r0, [pc, #48]	; (1c0c0 <z_set_timeout_expiry+0x9c>)
   1c090:	f000 fea7 	bl	1cde2 <printk>
   1c094:	4805      	ldr	r0, [pc, #20]	; (1c0ac <z_set_timeout_expiry+0x88>)
   1c096:	21ac      	movs	r1, #172	; 0xac
   1c098:	f001 f8fd 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1c09c:	f386 8811 	msr	BASEPRI, r6
   1c0a0:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c0a4:	bd70      	pop	{r4, r5, r6, pc}
   1c0a6:	bf00      	nop
   1c0a8:	20001fa4 	.word	0x20001fa4
   1c0ac:	00020b35 	.word	0x00020b35
   1c0b0:	00020b87 	.word	0x00020b87
   1c0b4:	00020a75 	.word	0x00020a75
   1c0b8:	00020b9c 	.word	0x00020b9c
   1c0bc:	00020b5b 	.word	0x00020b5b
   1c0c0:	00020b72 	.word	0x00020b72

0001c0c4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   1c0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0c8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c0ca:	f7fe fe43 	bl	1ad54 <z_time_slice>
	__asm__ volatile(
   1c0ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c0d2:	f3ef 8711 	mrs	r7, BASEPRI
   1c0d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c0de:	4855      	ldr	r0, [pc, #340]	; (1c234 <sys_clock_announce+0x170>)
   1c0e0:	f7fd fa26 	bl	19530 <z_spin_lock_valid>
   1c0e4:	b968      	cbnz	r0, 1c102 <sys_clock_announce+0x3e>
   1c0e6:	4a54      	ldr	r2, [pc, #336]	; (1c238 <sys_clock_announce+0x174>)
   1c0e8:	4954      	ldr	r1, [pc, #336]	; (1c23c <sys_clock_announce+0x178>)
   1c0ea:	4855      	ldr	r0, [pc, #340]	; (1c240 <sys_clock_announce+0x17c>)
   1c0ec:	2381      	movs	r3, #129	; 0x81
   1c0ee:	f000 fe78 	bl	1cde2 <printk>
   1c0f2:	4950      	ldr	r1, [pc, #320]	; (1c234 <sys_clock_announce+0x170>)
   1c0f4:	4853      	ldr	r0, [pc, #332]	; (1c244 <sys_clock_announce+0x180>)
   1c0f6:	f000 fe74 	bl	1cde2 <printk>
   1c0fa:	484f      	ldr	r0, [pc, #316]	; (1c238 <sys_clock_announce+0x174>)
   1c0fc:	2181      	movs	r1, #129	; 0x81
   1c0fe:	f001 f8ca 	bl	1d296 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c102:	4d51      	ldr	r5, [pc, #324]	; (1c248 <sys_clock_announce+0x184>)
   1c104:	4e51      	ldr	r6, [pc, #324]	; (1c24c <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   1c106:	484b      	ldr	r0, [pc, #300]	; (1c234 <sys_clock_announce+0x170>)
	return list->head == list;
   1c108:	f8df a14c 	ldr.w	sl, [pc, #332]	; 1c258 <sys_clock_announce+0x194>
   1c10c:	f7fd fa2e 	bl	1956c <z_spin_lock_set_owner>
   1c110:	46b3      	mov	fp, r6
   1c112:	602c      	str	r4, [r5, #0]
   1c114:	e9d6 2300 	ldrd	r2, r3, [r6]
   1c118:	f8d5 c000 	ldr.w	ip, [r5]
   1c11c:	f8da 4000 	ldr.w	r4, [sl]
   1c120:	e9cd 2300 	strd	r2, r3, [sp]
   1c124:	4662      	mov	r2, ip
   1c126:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c128:	4554      	cmp	r4, sl
   1c12a:	46e0      	mov	r8, ip
   1c12c:	4699      	mov	r9, r3
   1c12e:	d00c      	beq.n	1c14a <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c130:	b15c      	cbz	r4, 1c14a <sys_clock_announce+0x86>
   1c132:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1c136:	458c      	cmp	ip, r1
   1c138:	eb79 0302 	sbcs.w	r3, r9, r2
   1c13c:	da2e      	bge.n	1c19c <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c13e:	ebb1 000c 	subs.w	r0, r1, ip
   1c142:	eb62 0109 	sbc.w	r1, r2, r9
   1c146:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   1c14a:	9a00      	ldr	r2, [sp, #0]
   1c14c:	9901      	ldr	r1, [sp, #4]
   1c14e:	eb18 0202 	adds.w	r2, r8, r2
   1c152:	464b      	mov	r3, r9
   1c154:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   1c158:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1c15a:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   1c15e:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1c160:	f7ff fdb0 	bl	1bcc4 <next_timeout>
   1c164:	4621      	mov	r1, r4
   1c166:	f7fb fd4f 	bl	17c08 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c16a:	4832      	ldr	r0, [pc, #200]	; (1c234 <sys_clock_announce+0x170>)
   1c16c:	f7fd f9ee 	bl	1954c <z_spin_unlock_valid>
   1c170:	b968      	cbnz	r0, 1c18e <sys_clock_announce+0xca>
   1c172:	4a31      	ldr	r2, [pc, #196]	; (1c238 <sys_clock_announce+0x174>)
   1c174:	4936      	ldr	r1, [pc, #216]	; (1c250 <sys_clock_announce+0x18c>)
   1c176:	4832      	ldr	r0, [pc, #200]	; (1c240 <sys_clock_announce+0x17c>)
   1c178:	23ac      	movs	r3, #172	; 0xac
   1c17a:	f000 fe32 	bl	1cde2 <printk>
   1c17e:	492d      	ldr	r1, [pc, #180]	; (1c234 <sys_clock_announce+0x170>)
   1c180:	4834      	ldr	r0, [pc, #208]	; (1c254 <sys_clock_announce+0x190>)
   1c182:	f000 fe2e 	bl	1cde2 <printk>
   1c186:	482c      	ldr	r0, [pc, #176]	; (1c238 <sys_clock_announce+0x174>)
   1c188:	21ac      	movs	r1, #172	; 0xac
   1c18a:	f001 f884 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1c18e:	f387 8811 	msr	BASEPRI, r7
   1c192:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c196:	b003      	add	sp, #12
   1c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1c19c:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   1c1a0:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   1c1a4:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   1c1a8:	f04f 0200 	mov.w	r2, #0
   1c1ac:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1c1b0:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   1c1b4:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   1c1b6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1c1ba:	4620      	mov	r0, r4
		curr_tick += dt;
   1c1bc:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   1c1c0:	f7ff fdac 	bl	1bd1c <remove_timeout>
   1c1c4:	481b      	ldr	r0, [pc, #108]	; (1c234 <sys_clock_announce+0x170>)
   1c1c6:	f7fd f9c1 	bl	1954c <z_spin_unlock_valid>
   1c1ca:	b968      	cbnz	r0, 1c1e8 <sys_clock_announce+0x124>
   1c1cc:	4a1a      	ldr	r2, [pc, #104]	; (1c238 <sys_clock_announce+0x174>)
   1c1ce:	4920      	ldr	r1, [pc, #128]	; (1c250 <sys_clock_announce+0x18c>)
   1c1d0:	481b      	ldr	r0, [pc, #108]	; (1c240 <sys_clock_announce+0x17c>)
   1c1d2:	23ac      	movs	r3, #172	; 0xac
   1c1d4:	f000 fe05 	bl	1cde2 <printk>
   1c1d8:	4916      	ldr	r1, [pc, #88]	; (1c234 <sys_clock_announce+0x170>)
   1c1da:	481e      	ldr	r0, [pc, #120]	; (1c254 <sys_clock_announce+0x190>)
   1c1dc:	f000 fe01 	bl	1cde2 <printk>
   1c1e0:	4815      	ldr	r0, [pc, #84]	; (1c238 <sys_clock_announce+0x174>)
   1c1e2:	21ac      	movs	r1, #172	; 0xac
   1c1e4:	f001 f857 	bl	1d296 <assert_post_action>
   1c1e8:	f387 8811 	msr	BASEPRI, r7
   1c1ec:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c1f0:	68a3      	ldr	r3, [r4, #8]
   1c1f2:	4620      	mov	r0, r4
   1c1f4:	4798      	blx	r3
	__asm__ volatile(
   1c1f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c1fa:	f3ef 8711 	mrs	r7, BASEPRI
   1c1fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1c202:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c206:	480b      	ldr	r0, [pc, #44]	; (1c234 <sys_clock_announce+0x170>)
   1c208:	f7fd f992 	bl	19530 <z_spin_lock_valid>
   1c20c:	b968      	cbnz	r0, 1c22a <sys_clock_announce+0x166>
   1c20e:	4a0a      	ldr	r2, [pc, #40]	; (1c238 <sys_clock_announce+0x174>)
   1c210:	490a      	ldr	r1, [pc, #40]	; (1c23c <sys_clock_announce+0x178>)
   1c212:	480b      	ldr	r0, [pc, #44]	; (1c240 <sys_clock_announce+0x17c>)
   1c214:	2381      	movs	r3, #129	; 0x81
   1c216:	f000 fde4 	bl	1cde2 <printk>
   1c21a:	4906      	ldr	r1, [pc, #24]	; (1c234 <sys_clock_announce+0x170>)
   1c21c:	4809      	ldr	r0, [pc, #36]	; (1c244 <sys_clock_announce+0x180>)
   1c21e:	f000 fde0 	bl	1cde2 <printk>
   1c222:	4805      	ldr	r0, [pc, #20]	; (1c238 <sys_clock_announce+0x174>)
   1c224:	2181      	movs	r1, #129	; 0x81
   1c226:	f001 f836 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c22a:	4802      	ldr	r0, [pc, #8]	; (1c234 <sys_clock_announce+0x170>)
   1c22c:	f7fd f99e 	bl	1956c <z_spin_lock_set_owner>
	return k;
   1c230:	e770      	b.n	1c114 <sys_clock_announce+0x50>
   1c232:	bf00      	nop
   1c234:	20001fa4 	.word	0x20001fa4
   1c238:	00020b35 	.word	0x00020b35
   1c23c:	00020b87 	.word	0x00020b87
   1c240:	00020a75 	.word	0x00020a75
   1c244:	00020b9c 	.word	0x00020b9c
   1c248:	20001fa0 	.word	0x20001fa0
   1c24c:	20001bf8 	.word	0x20001bf8
   1c250:	00020b5b 	.word	0x00020b5b
   1c254:	00020b72 	.word	0x00020b72
   1c258:	20000544 	.word	0x20000544

0001c25c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1c25c:	b570      	push	{r4, r5, r6, lr}
   1c25e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c262:	f3ef 8611 	mrs	r6, BASEPRI
   1c266:	f383 8812 	msr	BASEPRI_MAX, r3
   1c26a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c26e:	481b      	ldr	r0, [pc, #108]	; (1c2dc <sys_clock_tick_get+0x80>)
   1c270:	f7fd f95e 	bl	19530 <z_spin_lock_valid>
   1c274:	b968      	cbnz	r0, 1c292 <sys_clock_tick_get+0x36>
   1c276:	4a1a      	ldr	r2, [pc, #104]	; (1c2e0 <sys_clock_tick_get+0x84>)
   1c278:	491a      	ldr	r1, [pc, #104]	; (1c2e4 <sys_clock_tick_get+0x88>)
   1c27a:	481b      	ldr	r0, [pc, #108]	; (1c2e8 <sys_clock_tick_get+0x8c>)
   1c27c:	2381      	movs	r3, #129	; 0x81
   1c27e:	f000 fdb0 	bl	1cde2 <printk>
   1c282:	4916      	ldr	r1, [pc, #88]	; (1c2dc <sys_clock_tick_get+0x80>)
   1c284:	4819      	ldr	r0, [pc, #100]	; (1c2ec <sys_clock_tick_get+0x90>)
   1c286:	f000 fdac 	bl	1cde2 <printk>
   1c28a:	4815      	ldr	r0, [pc, #84]	; (1c2e0 <sys_clock_tick_get+0x84>)
   1c28c:	2181      	movs	r1, #129	; 0x81
   1c28e:	f001 f802 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c292:	4812      	ldr	r0, [pc, #72]	; (1c2dc <sys_clock_tick_get+0x80>)
   1c294:	f7fd f96a 	bl	1956c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1c298:	f7fb fce6 	bl	17c68 <sys_clock_elapsed>
   1c29c:	4b14      	ldr	r3, [pc, #80]	; (1c2f0 <sys_clock_tick_get+0x94>)
   1c29e:	e9d3 4500 	ldrd	r4, r5, [r3]
   1c2a2:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c2a4:	480d      	ldr	r0, [pc, #52]	; (1c2dc <sys_clock_tick_get+0x80>)
   1c2a6:	f145 0500 	adc.w	r5, r5, #0
   1c2aa:	f7fd f94f 	bl	1954c <z_spin_unlock_valid>
   1c2ae:	b968      	cbnz	r0, 1c2cc <sys_clock_tick_get+0x70>
   1c2b0:	4a0b      	ldr	r2, [pc, #44]	; (1c2e0 <sys_clock_tick_get+0x84>)
   1c2b2:	4910      	ldr	r1, [pc, #64]	; (1c2f4 <sys_clock_tick_get+0x98>)
   1c2b4:	480c      	ldr	r0, [pc, #48]	; (1c2e8 <sys_clock_tick_get+0x8c>)
   1c2b6:	23ac      	movs	r3, #172	; 0xac
   1c2b8:	f000 fd93 	bl	1cde2 <printk>
   1c2bc:	4907      	ldr	r1, [pc, #28]	; (1c2dc <sys_clock_tick_get+0x80>)
   1c2be:	480e      	ldr	r0, [pc, #56]	; (1c2f8 <sys_clock_tick_get+0x9c>)
   1c2c0:	f000 fd8f 	bl	1cde2 <printk>
   1c2c4:	4806      	ldr	r0, [pc, #24]	; (1c2e0 <sys_clock_tick_get+0x84>)
   1c2c6:	21ac      	movs	r1, #172	; 0xac
   1c2c8:	f000 ffe5 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1c2cc:	f386 8811 	msr	BASEPRI, r6
   1c2d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c2d4:	4620      	mov	r0, r4
   1c2d6:	4629      	mov	r1, r5
   1c2d8:	bd70      	pop	{r4, r5, r6, pc}
   1c2da:	bf00      	nop
   1c2dc:	20001fa4 	.word	0x20001fa4
   1c2e0:	00020b35 	.word	0x00020b35
   1c2e4:	00020b87 	.word	0x00020b87
   1c2e8:	00020a75 	.word	0x00020a75
   1c2ec:	00020b9c 	.word	0x00020b9c
   1c2f0:	20001bf8 	.word	0x20001bf8
   1c2f4:	00020b5b 	.word	0x00020b5b
   1c2f8:	00020b72 	.word	0x00020b72

0001c2fc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1c2fc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1c300:	4604      	mov	r4, r0
	__asm__ volatile(
   1c302:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c306:	f3ef 8611 	mrs	r6, BASEPRI
   1c30a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c30e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c312:	4834      	ldr	r0, [pc, #208]	; (1c3e4 <z_timer_expiration_handler+0xe8>)
   1c314:	f7fd f90c 	bl	19530 <z_spin_lock_valid>
   1c318:	b968      	cbnz	r0, 1c336 <z_timer_expiration_handler+0x3a>
   1c31a:	4a33      	ldr	r2, [pc, #204]	; (1c3e8 <z_timer_expiration_handler+0xec>)
   1c31c:	4933      	ldr	r1, [pc, #204]	; (1c3ec <z_timer_expiration_handler+0xf0>)
   1c31e:	4834      	ldr	r0, [pc, #208]	; (1c3f0 <z_timer_expiration_handler+0xf4>)
   1c320:	2381      	movs	r3, #129	; 0x81
   1c322:	f000 fd5e 	bl	1cde2 <printk>
   1c326:	492f      	ldr	r1, [pc, #188]	; (1c3e4 <z_timer_expiration_handler+0xe8>)
   1c328:	4832      	ldr	r0, [pc, #200]	; (1c3f4 <z_timer_expiration_handler+0xf8>)
   1c32a:	f000 fd5a 	bl	1cde2 <printk>
   1c32e:	482e      	ldr	r0, [pc, #184]	; (1c3e8 <z_timer_expiration_handler+0xec>)
   1c330:	2181      	movs	r1, #129	; 0x81
   1c332:	f000 ffb0 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c336:	482b      	ldr	r0, [pc, #172]	; (1c3e4 <z_timer_expiration_handler+0xe8>)
   1c338:	f7fd f918 	bl	1956c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c33c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1c340:	f112 0801 	adds.w	r8, r2, #1
   1c344:	f143 0900 	adc.w	r9, r3, #0
   1c348:	f1b9 0f00 	cmp.w	r9, #0
   1c34c:	bf08      	it	eq
   1c34e:	f1b8 0f02 	cmpeq.w	r8, #2
   1c352:	d303      	bcc.n	1c35c <z_timer_expiration_handler+0x60>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c354:	4928      	ldr	r1, [pc, #160]	; (1c3f8 <z_timer_expiration_handler+0xfc>)
   1c356:	4620      	mov	r0, r4
   1c358:	f7ff fcfa 	bl	1bd50 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c35c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c35e:	3301      	adds	r3, #1
   1c360:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c362:	6a23      	ldr	r3, [r4, #32]
   1c364:	b10b      	cbz	r3, 1c36a <z_timer_expiration_handler+0x6e>
		timer->expiry_fn(timer);
   1c366:	4620      	mov	r0, r4
   1c368:	4798      	blx	r3
	return list->head == list;
   1c36a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c36e:	42a5      	cmp	r5, r4
   1c370:	d000      	beq.n	1c374 <z_timer_expiration_handler+0x78>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c372:	b9bd      	cbnz	r5, 1c3a4 <z_timer_expiration_handler+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c374:	481b      	ldr	r0, [pc, #108]	; (1c3e4 <z_timer_expiration_handler+0xe8>)
   1c376:	f7fd f8e9 	bl	1954c <z_spin_unlock_valid>
   1c37a:	b968      	cbnz	r0, 1c398 <z_timer_expiration_handler+0x9c>
   1c37c:	4a1a      	ldr	r2, [pc, #104]	; (1c3e8 <z_timer_expiration_handler+0xec>)
   1c37e:	491f      	ldr	r1, [pc, #124]	; (1c3fc <z_timer_expiration_handler+0x100>)
   1c380:	481b      	ldr	r0, [pc, #108]	; (1c3f0 <z_timer_expiration_handler+0xf4>)
   1c382:	23ac      	movs	r3, #172	; 0xac
   1c384:	f000 fd2d 	bl	1cde2 <printk>
   1c388:	4916      	ldr	r1, [pc, #88]	; (1c3e4 <z_timer_expiration_handler+0xe8>)
   1c38a:	481d      	ldr	r0, [pc, #116]	; (1c400 <z_timer_expiration_handler+0x104>)
   1c38c:	f000 fd29 	bl	1cde2 <printk>
   1c390:	4815      	ldr	r0, [pc, #84]	; (1c3e8 <z_timer_expiration_handler+0xec>)
   1c392:	21ac      	movs	r1, #172	; 0xac
   1c394:	f000 ff7f 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1c398:	f386 8811 	msr	BASEPRI, r6
   1c39c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1c3a0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	z_unpend_thread_no_timeout(thread);
   1c3a4:	4628      	mov	r0, r5
   1c3a6:	f7fe fab7 	bl	1a918 <z_unpend_thread_no_timeout>
   1c3aa:	2300      	movs	r3, #0
   1c3ac:	480d      	ldr	r0, [pc, #52]	; (1c3e4 <z_timer_expiration_handler+0xe8>)
   1c3ae:	67eb      	str	r3, [r5, #124]	; 0x7c
   1c3b0:	f7fd f8cc 	bl	1954c <z_spin_unlock_valid>
   1c3b4:	b968      	cbnz	r0, 1c3d2 <z_timer_expiration_handler+0xd6>
   1c3b6:	4a0c      	ldr	r2, [pc, #48]	; (1c3e8 <z_timer_expiration_handler+0xec>)
   1c3b8:	4910      	ldr	r1, [pc, #64]	; (1c3fc <z_timer_expiration_handler+0x100>)
   1c3ba:	480d      	ldr	r0, [pc, #52]	; (1c3f0 <z_timer_expiration_handler+0xf4>)
   1c3bc:	23ac      	movs	r3, #172	; 0xac
   1c3be:	f000 fd10 	bl	1cde2 <printk>
   1c3c2:	4908      	ldr	r1, [pc, #32]	; (1c3e4 <z_timer_expiration_handler+0xe8>)
   1c3c4:	480e      	ldr	r0, [pc, #56]	; (1c400 <z_timer_expiration_handler+0x104>)
   1c3c6:	f000 fd0c 	bl	1cde2 <printk>
   1c3ca:	4807      	ldr	r0, [pc, #28]	; (1c3e8 <z_timer_expiration_handler+0xec>)
   1c3cc:	21ac      	movs	r1, #172	; 0xac
   1c3ce:	f000 ff62 	bl	1d296 <assert_post_action>
   1c3d2:	f386 8811 	msr	BASEPRI, r6
   1c3d6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1c3da:	4628      	mov	r0, r5
}
   1c3dc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
	z_ready_thread(thread);
   1c3e0:	f7fe bd82 	b.w	1aee8 <z_ready_thread>
   1c3e4:	20001fa8 	.word	0x20001fa8
   1c3e8:	00020b35 	.word	0x00020b35
   1c3ec:	00020b87 	.word	0x00020b87
   1c3f0:	00020a75 	.word	0x00020a75
   1c3f4:	00020b9c 	.word	0x00020b9c
   1c3f8:	0001c2fd 	.word	0x0001c2fd
   1c3fc:	00020b5b 	.word	0x00020b5b
   1c400:	00020b72 	.word	0x00020b72

0001c404 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1c404:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1c408:	4619      	mov	r1, r3
   1c40a:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c40c:	1c4c      	adds	r4, r1, #1
{
   1c40e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c410:	bf08      	it	eq
   1c412:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1c416:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1c41a:	4680      	mov	r8, r0
   1c41c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c41e:	d04c      	beq.n	1c4ba <z_impl_k_timer_start+0xb6>
   1c420:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c422:	1c6b      	adds	r3, r5, #1
   1c424:	bf08      	it	eq
   1c426:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1c42a:	4614      	mov	r4, r2
   1c42c:	d019      	beq.n	1c462 <z_impl_k_timer_start+0x5e>
   1c42e:	ea54 0305 	orrs.w	r3, r4, r5
   1c432:	d016      	beq.n	1c462 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1c434:	f06f 0301 	mvn.w	r3, #1
   1c438:	ebb3 0a02 	subs.w	sl, r3, r2
   1c43c:	f04f 33ff 	mov.w	r3, #4294967295
   1c440:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c444:	f1ba 0f00 	cmp.w	sl, #0
   1c448:	f17b 0300 	sbcs.w	r3, fp, #0
   1c44c:	da09      	bge.n	1c462 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1c44e:	f112 34ff 	adds.w	r4, r2, #4294967295
   1c452:	f145 35ff 	adc.w	r5, r5, #4294967295
   1c456:	2c01      	cmp	r4, #1
   1c458:	f175 0300 	sbcs.w	r3, r5, #0
   1c45c:	bfbc      	itt	lt
   1c45e:	2401      	movlt	r4, #1
   1c460:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1c462:	f06f 0301 	mvn.w	r3, #1
   1c466:	1a1b      	subs	r3, r3, r0
   1c468:	9300      	str	r3, [sp, #0]
   1c46a:	f04f 33ff 	mov.w	r3, #4294967295
   1c46e:	eb63 0301 	sbc.w	r3, r3, r1
   1c472:	9301      	str	r3, [sp, #4]
   1c474:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c478:	2a00      	cmp	r2, #0
   1c47a:	f173 0300 	sbcs.w	r3, r3, #0
   1c47e:	da0c      	bge.n	1c49a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1c480:	f110 38ff 	adds.w	r8, r0, #4294967295
   1c484:	f141 39ff 	adc.w	r9, r1, #4294967295
   1c488:	f1b8 0f00 	cmp.w	r8, #0
   1c48c:	f179 0300 	sbcs.w	r3, r9, #0
   1c490:	bfbc      	itt	lt
   1c492:	f04f 0800 	movlt.w	r8, #0
   1c496:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1c49a:	4630      	mov	r0, r6
   1c49c:	f7ff fd2c 	bl	1bef8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1c4a0:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c4a2:	4907      	ldr	r1, [pc, #28]	; (1c4c0 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1c4a4:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c4a6:	4642      	mov	r2, r8
   1c4a8:	464b      	mov	r3, r9
   1c4aa:	4630      	mov	r0, r6
	timer->period = period;
   1c4ac:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1c4b0:	b002      	add	sp, #8
   1c4b2:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c4b6:	f7ff bc4b 	b.w	1bd50 <z_add_timeout>
}
   1c4ba:	b002      	add	sp, #8
   1c4bc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1c4c0:	0001c2fd 	.word	0x0001c2fd

0001c4c4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   1c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c4c8:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   1c4ca:	4d53      	ldr	r5, [pc, #332]	; (1c618 <clear_event_registrations+0x154>)
   1c4cc:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1c65c <clear_event_registrations+0x198>
   1c4d0:	4e52      	ldr	r6, [pc, #328]	; (1c61c <clear_event_registrations+0x158>)
{
   1c4d2:	4680      	mov	r8, r0
   1c4d4:	4617      	mov	r7, r2
	while (num_events--) {
   1c4d6:	fb04 0401 	mla	r4, r4, r1, r0
   1c4da:	45a0      	cmp	r8, r4
   1c4dc:	d101      	bne.n	1c4e2 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   1c4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   1c4e2:	2300      	movs	r3, #0
   1c4e4:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1c4e8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1c4ec:	f003 031f 	and.w	r3, r3, #31
   1c4f0:	2b08      	cmp	r3, #8
   1c4f2:	d84f      	bhi.n	1c594 <clear_event_registrations+0xd0>
   1c4f4:	e8df f003 	tbb	[pc, r3]
   1c4f8:	4e05305b 	.word	0x4e05305b
   1c4fc:	4e4e4e21 	.word	0x4e4e4e21
   1c500:	3f          	.byte	0x3f
   1c501:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c502:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c506:	b963      	cbnz	r3, 1c522 <clear_event_registrations+0x5e>
   1c508:	4945      	ldr	r1, [pc, #276]	; (1c620 <clear_event_registrations+0x15c>)
   1c50a:	23a9      	movs	r3, #169	; 0xa9
   1c50c:	462a      	mov	r2, r5
   1c50e:	4630      	mov	r0, r6
   1c510:	f000 fc67 	bl	1cde2 <printk>
   1c514:	4843      	ldr	r0, [pc, #268]	; (1c624 <clear_event_registrations+0x160>)
   1c516:	f000 fc64 	bl	1cde2 <printk>
   1c51a:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c51c:	4628      	mov	r0, r5
   1c51e:	f000 feba 	bl	1d296 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c522:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c526:	2b00      	cmp	r3, #0
   1c528:	d041      	beq.n	1c5ae <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   1c52a:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   1c52e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c530:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c532:	2300      	movs	r3, #0
	node->prev = NULL;
   1c534:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1c538:	e039      	b.n	1c5ae <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c53a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c53e:	2b00      	cmp	r3, #0
   1c540:	d1ef      	bne.n	1c522 <clear_event_registrations+0x5e>
   1c542:	4939      	ldr	r1, [pc, #228]	; (1c628 <clear_event_registrations+0x164>)
   1c544:	23ad      	movs	r3, #173	; 0xad
   1c546:	462a      	mov	r2, r5
   1c548:	4630      	mov	r0, r6
   1c54a:	f000 fc4a 	bl	1cde2 <printk>
   1c54e:	4837      	ldr	r0, [pc, #220]	; (1c62c <clear_event_registrations+0x168>)
   1c550:	f000 fc47 	bl	1cde2 <printk>
   1c554:	21ad      	movs	r1, #173	; 0xad
   1c556:	e7e1      	b.n	1c51c <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c558:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c55c:	2b00      	cmp	r3, #0
   1c55e:	d1e0      	bne.n	1c522 <clear_event_registrations+0x5e>
   1c560:	4933      	ldr	r1, [pc, #204]	; (1c630 <clear_event_registrations+0x16c>)
   1c562:	23b1      	movs	r3, #177	; 0xb1
   1c564:	462a      	mov	r2, r5
   1c566:	4630      	mov	r0, r6
   1c568:	f000 fc3b 	bl	1cde2 <printk>
   1c56c:	4831      	ldr	r0, [pc, #196]	; (1c634 <clear_event_registrations+0x170>)
   1c56e:	f000 fc38 	bl	1cde2 <printk>
   1c572:	21b1      	movs	r1, #177	; 0xb1
   1c574:	e7d2      	b.n	1c51c <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c576:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c57a:	2b00      	cmp	r3, #0
   1c57c:	d1d1      	bne.n	1c522 <clear_event_registrations+0x5e>
   1c57e:	492e      	ldr	r1, [pc, #184]	; (1c638 <clear_event_registrations+0x174>)
   1c580:	23b5      	movs	r3, #181	; 0xb5
   1c582:	462a      	mov	r2, r5
   1c584:	4630      	mov	r0, r6
   1c586:	f000 fc2c 	bl	1cde2 <printk>
   1c58a:	482c      	ldr	r0, [pc, #176]	; (1c63c <clear_event_registrations+0x178>)
   1c58c:	f000 fc29 	bl	1cde2 <printk>
   1c590:	21b5      	movs	r1, #181	; 0xb5
   1c592:	e7c3      	b.n	1c51c <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   1c594:	4649      	mov	r1, r9
   1c596:	23bc      	movs	r3, #188	; 0xbc
   1c598:	462a      	mov	r2, r5
   1c59a:	4630      	mov	r0, r6
   1c59c:	f000 fc21 	bl	1cde2 <printk>
   1c5a0:	4827      	ldr	r0, [pc, #156]	; (1c640 <clear_event_registrations+0x17c>)
   1c5a2:	f000 fc1e 	bl	1cde2 <printk>
   1c5a6:	21bc      	movs	r1, #188	; 0xbc
   1c5a8:	4628      	mov	r0, r5
   1c5aa:	f000 fe74 	bl	1d296 <assert_post_action>
   1c5ae:	4825      	ldr	r0, [pc, #148]	; (1c644 <clear_event_registrations+0x180>)
   1c5b0:	f7fc ffcc 	bl	1954c <z_spin_unlock_valid>
   1c5b4:	b968      	cbnz	r0, 1c5d2 <clear_event_registrations+0x10e>
   1c5b6:	4a24      	ldr	r2, [pc, #144]	; (1c648 <clear_event_registrations+0x184>)
   1c5b8:	4924      	ldr	r1, [pc, #144]	; (1c64c <clear_event_registrations+0x188>)
   1c5ba:	23ac      	movs	r3, #172	; 0xac
   1c5bc:	4630      	mov	r0, r6
   1c5be:	f000 fc10 	bl	1cde2 <printk>
   1c5c2:	4920      	ldr	r1, [pc, #128]	; (1c644 <clear_event_registrations+0x180>)
   1c5c4:	4822      	ldr	r0, [pc, #136]	; (1c650 <clear_event_registrations+0x18c>)
   1c5c6:	f000 fc0c 	bl	1cde2 <printk>
   1c5ca:	481f      	ldr	r0, [pc, #124]	; (1c648 <clear_event_registrations+0x184>)
   1c5cc:	21ac      	movs	r1, #172	; 0xac
   1c5ce:	f000 fe62 	bl	1d296 <assert_post_action>
   1c5d2:	f387 8811 	msr	BASEPRI, r7
   1c5d6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c5da:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c5de:	f3ef 8711 	mrs	r7, BASEPRI
   1c5e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c5e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c5ea:	4816      	ldr	r0, [pc, #88]	; (1c644 <clear_event_registrations+0x180>)
   1c5ec:	f7fc ffa0 	bl	19530 <z_spin_lock_valid>
   1c5f0:	b968      	cbnz	r0, 1c60e <clear_event_registrations+0x14a>
   1c5f2:	4a15      	ldr	r2, [pc, #84]	; (1c648 <clear_event_registrations+0x184>)
   1c5f4:	4917      	ldr	r1, [pc, #92]	; (1c654 <clear_event_registrations+0x190>)
   1c5f6:	2381      	movs	r3, #129	; 0x81
   1c5f8:	4630      	mov	r0, r6
   1c5fa:	f000 fbf2 	bl	1cde2 <printk>
   1c5fe:	4911      	ldr	r1, [pc, #68]	; (1c644 <clear_event_registrations+0x180>)
   1c600:	4815      	ldr	r0, [pc, #84]	; (1c658 <clear_event_registrations+0x194>)
   1c602:	f000 fbee 	bl	1cde2 <printk>
   1c606:	4810      	ldr	r0, [pc, #64]	; (1c648 <clear_event_registrations+0x184>)
   1c608:	2181      	movs	r1, #129	; 0x81
   1c60a:	f000 fe44 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c60e:	480d      	ldr	r0, [pc, #52]	; (1c644 <clear_event_registrations+0x180>)
   1c610:	f7fc ffac 	bl	1956c <z_spin_lock_set_owner>
	return k;
   1c614:	3c14      	subs	r4, #20
   1c616:	e760      	b.n	1c4da <clear_event_registrations+0x16>
   1c618:	000224fd 	.word	0x000224fd
   1c61c:	00020a75 	.word	0x00020a75
   1c620:	0002251e 	.word	0x0002251e
   1c624:	00022538 	.word	0x00022538
   1c628:	0002254d 	.word	0x0002254d
   1c62c:	00022569 	.word	0x00022569
   1c630:	0002257a 	.word	0x0002257a
   1c634:	00022597 	.word	0x00022597
   1c638:	000225ae 	.word	0x000225ae
   1c63c:	000225c9 	.word	0x000225c9
   1c640:	000225e2 	.word	0x000225e2
   1c644:	20001fac 	.word	0x20001fac
   1c648:	00020b35 	.word	0x00020b35
   1c64c:	00020b5b 	.word	0x00020b5b
   1c650:	00020b72 	.word	0x00020b72
   1c654:	00020b87 	.word	0x00020b87
   1c658:	00020b9c 	.word	0x00020b9c
   1c65c:	00022787 	.word	0x00022787

0001c660 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   1c660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   1c664:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c666:	4e7c      	ldr	r6, [pc, #496]	; (1c858 <register_events+0x1f8>)
   1c668:	f8df 8230 	ldr.w	r8, [pc, #560]	; 1c89c <register_events+0x23c>
   1c66c:	f8df a230 	ldr.w	sl, [pc, #560]	; 1c8a0 <register_events+0x240>
{
   1c670:	9100      	str	r1, [sp, #0]
   1c672:	4615      	mov	r5, r2
   1c674:	9301      	str	r3, [sp, #4]
   1c676:	4604      	mov	r4, r0
	int events_registered = 0;
   1c678:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   1c67a:	9b00      	ldr	r3, [sp, #0]
   1c67c:	429f      	cmp	r7, r3
   1c67e:	db03      	blt.n	1c688 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   1c680:	4648      	mov	r0, r9
   1c682:	b003      	add	sp, #12
   1c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c688:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c68c:	f3ef 8b11 	mrs	fp, BASEPRI
   1c690:	f383 8812 	msr	BASEPRI_MAX, r3
   1c694:	f3bf 8f6f 	isb	sy
   1c698:	4630      	mov	r0, r6
   1c69a:	f7fc ff49 	bl	19530 <z_spin_lock_valid>
   1c69e:	b968      	cbnz	r0, 1c6bc <register_events+0x5c>
   1c6a0:	486e      	ldr	r0, [pc, #440]	; (1c85c <register_events+0x1fc>)
   1c6a2:	2381      	movs	r3, #129	; 0x81
   1c6a4:	4642      	mov	r2, r8
   1c6a6:	4651      	mov	r1, sl
   1c6a8:	f000 fb9b 	bl	1cde2 <printk>
   1c6ac:	486c      	ldr	r0, [pc, #432]	; (1c860 <register_events+0x200>)
   1c6ae:	4631      	mov	r1, r6
   1c6b0:	f000 fb97 	bl	1cde2 <printk>
   1c6b4:	2181      	movs	r1, #129	; 0x81
   1c6b6:	4640      	mov	r0, r8
   1c6b8:	f000 fded 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c6bc:	4630      	mov	r0, r6
   1c6be:	f7fc ff55 	bl	1956c <z_spin_lock_set_owner>
	switch (event->type) {
   1c6c2:	7b63      	ldrb	r3, [r4, #13]
   1c6c4:	f003 031f 	and.w	r3, r3, #31
   1c6c8:	2b08      	cmp	r3, #8
   1c6ca:	d84f      	bhi.n	1c76c <register_events+0x10c>
   1c6cc:	e8df f003 	tbb	[pc, r3]
   1c6d0:	4e054230 	.word	0x4e054230
   1c6d4:	4e4e4e2c 	.word	0x4e4e4e2c
   1c6d8:	48          	.byte	0x48
   1c6d9:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1c6da:	6923      	ldr	r3, [r4, #16]
   1c6dc:	689b      	ldr	r3, [r3, #8]
   1c6de:	b33b      	cbz	r3, 1c730 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c6e0:	2302      	movs	r3, #2
	event->state |= state;
   1c6e2:	68e2      	ldr	r2, [r4, #12]
   1c6e4:	f3c2 3045 	ubfx	r0, r2, #13, #6
   1c6e8:	4303      	orrs	r3, r0
	event->poller = NULL;
   1c6ea:	2100      	movs	r1, #0
	event->state |= state;
   1c6ec:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   1c6f0:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1c6f2:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   1c6f4:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c6f6:	4630      	mov	r0, r6
   1c6f8:	f7fc ff28 	bl	1954c <z_spin_unlock_valid>
   1c6fc:	b968      	cbnz	r0, 1c71a <register_events+0xba>
   1c6fe:	4959      	ldr	r1, [pc, #356]	; (1c864 <register_events+0x204>)
   1c700:	4856      	ldr	r0, [pc, #344]	; (1c85c <register_events+0x1fc>)
   1c702:	23ac      	movs	r3, #172	; 0xac
   1c704:	4642      	mov	r2, r8
   1c706:	f000 fb6c 	bl	1cde2 <printk>
   1c70a:	4857      	ldr	r0, [pc, #348]	; (1c868 <register_events+0x208>)
   1c70c:	4631      	mov	r1, r6
   1c70e:	f000 fb68 	bl	1cde2 <printk>
   1c712:	21ac      	movs	r1, #172	; 0xac
   1c714:	4640      	mov	r0, r8
   1c716:	f000 fdbe 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1c71a:	f38b 8811 	msr	BASEPRI, fp
   1c71e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c722:	3701      	adds	r7, #1
   1c724:	3414      	adds	r4, #20
   1c726:	e7a8      	b.n	1c67a <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   1c728:	6923      	ldr	r3, [r4, #16]
   1c72a:	681b      	ldr	r3, [r3, #0]
   1c72c:	2b00      	cmp	r3, #0
   1c72e:	d12e      	bne.n	1c78e <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   1c730:	9b01      	ldr	r3, [sp, #4]
   1c732:	2b00      	cmp	r3, #0
   1c734:	d1df      	bne.n	1c6f6 <register_events+0x96>
   1c736:	782b      	ldrb	r3, [r5, #0]
   1c738:	2b00      	cmp	r3, #0
   1c73a:	d0dc      	beq.n	1c6f6 <register_events+0x96>
	switch (event->type) {
   1c73c:	7b63      	ldrb	r3, [r4, #13]
   1c73e:	f003 031f 	and.w	r3, r3, #31
   1c742:	2b08      	cmp	r3, #8
   1c744:	d879      	bhi.n	1c83a <register_events+0x1da>
   1c746:	e8df f003 	tbb	[pc, r3]
   1c74a:	5139      	.short	0x5139
   1c74c:	783d7824 	.word	0x783d7824
   1c750:	7878      	.short	0x7878
   1c752:	64          	.byte	0x64
   1c753:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1c754:	6923      	ldr	r3, [r4, #16]
   1c756:	689b      	ldr	r3, [r3, #8]
   1c758:	2b00      	cmp	r3, #0
   1c75a:	d0e9      	beq.n	1c730 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   1c75c:	2301      	movs	r3, #1
   1c75e:	e7c0      	b.n	1c6e2 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   1c760:	6923      	ldr	r3, [r4, #16]
   1c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c764:	2b00      	cmp	r3, #0
   1c766:	d0e3      	beq.n	1c730 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1c768:	2310      	movs	r3, #16
   1c76a:	e7ba      	b.n	1c6e2 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1c76c:	4a3f      	ldr	r2, [pc, #252]	; (1c86c <register_events+0x20c>)
   1c76e:	4940      	ldr	r1, [pc, #256]	; (1c870 <register_events+0x210>)
   1c770:	483a      	ldr	r0, [pc, #232]	; (1c85c <register_events+0x1fc>)
   1c772:	235c      	movs	r3, #92	; 0x5c
   1c774:	f000 fb35 	bl	1cde2 <printk>
   1c778:	7b61      	ldrb	r1, [r4, #13]
   1c77a:	483e      	ldr	r0, [pc, #248]	; (1c874 <register_events+0x214>)
   1c77c:	f001 011f 	and.w	r1, r1, #31
   1c780:	f000 fb2f 	bl	1cde2 <printk>
   1c784:	4839      	ldr	r0, [pc, #228]	; (1c86c <register_events+0x20c>)
   1c786:	215c      	movs	r1, #92	; 0x5c
   1c788:	f000 fd85 	bl	1d296 <assert_post_action>
		break;
   1c78c:	e7d0      	b.n	1c730 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c78e:	2304      	movs	r3, #4
   1c790:	e7a7      	b.n	1c6e2 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1c792:	6923      	ldr	r3, [r4, #16]
   1c794:	b963      	cbnz	r3, 1c7b0 <register_events+0x150>
   1c796:	4938      	ldr	r1, [pc, #224]	; (1c878 <register_events+0x218>)
   1c798:	4a34      	ldr	r2, [pc, #208]	; (1c86c <register_events+0x20c>)
   1c79a:	4830      	ldr	r0, [pc, #192]	; (1c85c <register_events+0x1fc>)
   1c79c:	2386      	movs	r3, #134	; 0x86
   1c79e:	f000 fb20 	bl	1cde2 <printk>
   1c7a2:	4836      	ldr	r0, [pc, #216]	; (1c87c <register_events+0x21c>)
   1c7a4:	f000 fb1d 	bl	1cde2 <printk>
   1c7a8:	4830      	ldr	r0, [pc, #192]	; (1c86c <register_events+0x20c>)
   1c7aa:	2186      	movs	r1, #134	; 0x86
   1c7ac:	f000 fd73 	bl	1d296 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1c7b0:	6920      	ldr	r0, [r4, #16]
   1c7b2:	462a      	mov	r2, r5
   1c7b4:	4621      	mov	r1, r4
   1c7b6:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1c7b8:	f003 fbae 	bl	1ff18 <add_event>
	event->poller = poller;
   1c7bc:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   1c7be:	f109 0901 	add.w	r9, r9, #1
   1c7c2:	e798      	b.n	1c6f6 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1c7c4:	6923      	ldr	r3, [r4, #16]
   1c7c6:	b963      	cbnz	r3, 1c7e2 <register_events+0x182>
   1c7c8:	492d      	ldr	r1, [pc, #180]	; (1c880 <register_events+0x220>)
   1c7ca:	4a28      	ldr	r2, [pc, #160]	; (1c86c <register_events+0x20c>)
   1c7cc:	4823      	ldr	r0, [pc, #140]	; (1c85c <register_events+0x1fc>)
   1c7ce:	238a      	movs	r3, #138	; 0x8a
   1c7d0:	f000 fb07 	bl	1cde2 <printk>
   1c7d4:	482b      	ldr	r0, [pc, #172]	; (1c884 <register_events+0x224>)
   1c7d6:	f000 fb04 	bl	1cde2 <printk>
   1c7da:	4824      	ldr	r0, [pc, #144]	; (1c86c <register_events+0x20c>)
   1c7dc:	218a      	movs	r1, #138	; 0x8a
   1c7de:	f000 fd5a 	bl	1d296 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1c7e2:	6920      	ldr	r0, [r4, #16]
   1c7e4:	462a      	mov	r2, r5
   1c7e6:	4621      	mov	r1, r4
   1c7e8:	3014      	adds	r0, #20
   1c7ea:	e7e5      	b.n	1c7b8 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1c7ec:	6923      	ldr	r3, [r4, #16]
   1c7ee:	b963      	cbnz	r3, 1c80a <register_events+0x1aa>
   1c7f0:	4925      	ldr	r1, [pc, #148]	; (1c888 <register_events+0x228>)
   1c7f2:	4a1e      	ldr	r2, [pc, #120]	; (1c86c <register_events+0x20c>)
   1c7f4:	4819      	ldr	r0, [pc, #100]	; (1c85c <register_events+0x1fc>)
   1c7f6:	238e      	movs	r3, #142	; 0x8e
   1c7f8:	f000 faf3 	bl	1cde2 <printk>
   1c7fc:	4823      	ldr	r0, [pc, #140]	; (1c88c <register_events+0x22c>)
   1c7fe:	f000 faf0 	bl	1cde2 <printk>
   1c802:	481a      	ldr	r0, [pc, #104]	; (1c86c <register_events+0x20c>)
   1c804:	218e      	movs	r1, #142	; 0x8e
   1c806:	f000 fd46 	bl	1d296 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1c80a:	6920      	ldr	r0, [r4, #16]
   1c80c:	462a      	mov	r2, r5
   1c80e:	4621      	mov	r1, r4
   1c810:	e7d2      	b.n	1c7b8 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   1c812:	6923      	ldr	r3, [r4, #16]
   1c814:	b963      	cbnz	r3, 1c830 <register_events+0x1d0>
   1c816:	491e      	ldr	r1, [pc, #120]	; (1c890 <register_events+0x230>)
   1c818:	4a14      	ldr	r2, [pc, #80]	; (1c86c <register_events+0x20c>)
   1c81a:	4810      	ldr	r0, [pc, #64]	; (1c85c <register_events+0x1fc>)
   1c81c:	2392      	movs	r3, #146	; 0x92
   1c81e:	f000 fae0 	bl	1cde2 <printk>
   1c822:	481c      	ldr	r0, [pc, #112]	; (1c894 <register_events+0x234>)
   1c824:	f000 fadd 	bl	1cde2 <printk>
   1c828:	4810      	ldr	r0, [pc, #64]	; (1c86c <register_events+0x20c>)
   1c82a:	2192      	movs	r1, #146	; 0x92
   1c82c:	f000 fd33 	bl	1d296 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   1c830:	6920      	ldr	r0, [r4, #16]
   1c832:	462a      	mov	r2, r5
   1c834:	4621      	mov	r1, r4
   1c836:	3028      	adds	r0, #40	; 0x28
   1c838:	e7be      	b.n	1c7b8 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   1c83a:	4a0c      	ldr	r2, [pc, #48]	; (1c86c <register_events+0x20c>)
   1c83c:	490c      	ldr	r1, [pc, #48]	; (1c870 <register_events+0x210>)
   1c83e:	4807      	ldr	r0, [pc, #28]	; (1c85c <register_events+0x1fc>)
   1c840:	2399      	movs	r3, #153	; 0x99
   1c842:	f000 face 	bl	1cde2 <printk>
   1c846:	4814      	ldr	r0, [pc, #80]	; (1c898 <register_events+0x238>)
   1c848:	f000 facb 	bl	1cde2 <printk>
   1c84c:	4807      	ldr	r0, [pc, #28]	; (1c86c <register_events+0x20c>)
   1c84e:	2199      	movs	r1, #153	; 0x99
   1c850:	f000 fd21 	bl	1d296 <assert_post_action>
		break;
   1c854:	e7b2      	b.n	1c7bc <register_events+0x15c>
   1c856:	bf00      	nop
   1c858:	20001fac 	.word	0x20001fac
   1c85c:	00020a75 	.word	0x00020a75
   1c860:	00020b9c 	.word	0x00020b9c
   1c864:	00020b5b 	.word	0x00020b5b
   1c868:	00020b72 	.word	0x00020b72
   1c86c:	000224fd 	.word	0x000224fd
   1c870:	00022787 	.word	0x00022787
   1c874:	000225f8 	.word	0x000225f8
   1c878:	0002251e 	.word	0x0002251e
   1c87c:	00022538 	.word	0x00022538
   1c880:	0002254d 	.word	0x0002254d
   1c884:	00022569 	.word	0x00022569
   1c888:	0002257a 	.word	0x0002257a
   1c88c:	00022597 	.word	0x00022597
   1c890:	000225ae 	.word	0x000225ae
   1c894:	000225c9 	.word	0x000225c9
   1c898:	000225e2 	.word	0x000225e2
   1c89c:	00020b35 	.word	0x00020b35
   1c8a0:	00020b87 	.word	0x00020b87

0001c8a4 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1c8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1c8a8:	6884      	ldr	r4, [r0, #8]
{
   1c8aa:	4605      	mov	r5, r0
   1c8ac:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   1c8ae:	b1d4      	cbz	r4, 1c8e6 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   1c8b0:	7863      	ldrb	r3, [r4, #1]
   1c8b2:	2b01      	cmp	r3, #1
   1c8b4:	d14b      	bne.n	1c94e <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1c8b6:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   1c8ba:	d10e      	bne.n	1c8da <signal_poll_event+0x36>
   1c8bc:	4a30      	ldr	r2, [pc, #192]	; (1c980 <signal_poll_event+0xdc>)
   1c8be:	4931      	ldr	r1, [pc, #196]	; (1c984 <signal_poll_event+0xe0>)
   1c8c0:	4831      	ldr	r0, [pc, #196]	; (1c988 <signal_poll_event+0xe4>)
   1c8c2:	23f9      	movs	r3, #249	; 0xf9
   1c8c4:	f000 fa8d 	bl	1cde2 <printk>
   1c8c8:	4830      	ldr	r0, [pc, #192]	; (1c98c <signal_poll_event+0xe8>)
   1c8ca:	f000 fa8a 	bl	1cde2 <printk>
   1c8ce:	482c      	ldr	r0, [pc, #176]	; (1c980 <signal_poll_event+0xdc>)
   1c8d0:	21f9      	movs	r1, #249	; 0xf9
   1c8d2:	f000 fce0 	bl	1d296 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   1c8d6:	7b7b      	ldrb	r3, [r7, #13]
   1c8d8:	deff      	udf	#255	; 0xff
   1c8da:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1c8de:	f013 0302 	ands.w	r3, r3, #2
   1c8e2:	d10a      	bne.n	1c8fa <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   1c8e4:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1c8e6:	68eb      	ldr	r3, [r5, #12]
   1c8e8:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1c8ec:	430e      	orrs	r6, r1
	event->poller = NULL;
   1c8ee:	2000      	movs	r0, #0
	event->state |= state;
   1c8f0:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1c8f4:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1c8f6:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1c8f8:	e00d      	b.n	1c916 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   1c8fa:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1c8fe:	f04f 31ff 	mov.w	r1, #4294967295
   1c902:	f06f 0001 	mvn.w	r0, #1
   1c906:	428b      	cmp	r3, r1
   1c908:	bf08      	it	eq
   1c90a:	4282      	cmpeq	r2, r0
   1c90c:	d105      	bne.n	1c91a <signal_poll_event+0x76>
		poller->is_polling = false;
   1c90e:	2300      	movs	r3, #0
   1c910:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1c912:	f06f 000a 	mvn.w	r0, #10
}
   1c916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1c91a:	4638      	mov	r0, r7
   1c91c:	f7fe f940 	bl	1aba0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1c920:	2e08      	cmp	r6, #8
   1c922:	bf0c      	ite	eq
   1c924:	f06f 0303 	mvneq.w	r3, #3
   1c928:	2300      	movne	r3, #0
   1c92a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c92c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1c930:	06db      	lsls	r3, r3, #27
   1c932:	d104      	bne.n	1c93e <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   1c934:	f854 8c48 	ldr.w	r8, [r4, #-72]
   1c938:	f1b8 0f00 	cmp.w	r8, #0
   1c93c:	d001      	beq.n	1c942 <signal_poll_event+0x9e>
		poller->is_polling = false;
   1c93e:	2300      	movs	r3, #0
   1c940:	e7d0      	b.n	1c8e4 <signal_poll_event+0x40>
	z_ready_thread(thread);
   1c942:	4638      	mov	r0, r7
   1c944:	f7fe fad0 	bl	1aee8 <z_ready_thread>
		poller->is_polling = false;
   1c948:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1c94c:	e7cb      	b.n	1c8e6 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   1c94e:	2b02      	cmp	r3, #2
   1c950:	d1f5      	bne.n	1c93e <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1c952:	7823      	ldrb	r3, [r4, #0]
   1c954:	2b00      	cmp	r3, #0
   1c956:	d0c6      	beq.n	1c8e6 <signal_poll_event+0x42>
   1c958:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1c95c:	b177      	cbz	r7, 1c97c <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1c95e:	f1a4 0914 	sub.w	r9, r4, #20
   1c962:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   1c966:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1c96a:	f7ff fac5 	bl	1bef8 <z_abort_timeout>
		twork->poll_result = 0;
   1c96e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1c972:	4649      	mov	r1, r9
   1c974:	4638      	mov	r0, r7
   1c976:	f7fd fc55 	bl	1a224 <k_work_submit_to_queue>
   1c97a:	e7e5      	b.n	1c948 <signal_poll_event+0xa4>
		poller->is_polling = false;
   1c97c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1c97e:	e7b2      	b.n	1c8e6 <signal_poll_event+0x42>
   1c980:	000224fd 	.word	0x000224fd
   1c984:	00022615 	.word	0x00022615
   1c988:	00020a75 	.word	0x00020a75
   1c98c:	0002262b 	.word	0x0002262b

0001c990 <k_poll_event_init>:
{
   1c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c992:	4605      	mov	r5, r0
   1c994:	460f      	mov	r7, r1
   1c996:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1c998:	4614      	mov	r4, r2
   1c99a:	b162      	cbz	r2, 1c9b6 <k_poll_event_init+0x26>
   1c99c:	491b      	ldr	r1, [pc, #108]	; (1ca0c <k_poll_event_init+0x7c>)
   1c99e:	4a1c      	ldr	r2, [pc, #112]	; (1ca10 <k_poll_event_init+0x80>)
   1c9a0:	481c      	ldr	r0, [pc, #112]	; (1ca14 <k_poll_event_init+0x84>)
   1c9a2:	232d      	movs	r3, #45	; 0x2d
   1c9a4:	f000 fa1d 	bl	1cde2 <printk>
   1c9a8:	481b      	ldr	r0, [pc, #108]	; (1ca18 <k_poll_event_init+0x88>)
   1c9aa:	f000 fa1a 	bl	1cde2 <printk>
   1c9ae:	4818      	ldr	r0, [pc, #96]	; (1ca10 <k_poll_event_init+0x80>)
   1c9b0:	212d      	movs	r1, #45	; 0x2d
   1c9b2:	f000 fc70 	bl	1d296 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1c9b6:	2f1f      	cmp	r7, #31
   1c9b8:	d90c      	bls.n	1c9d4 <k_poll_event_init+0x44>
   1c9ba:	4918      	ldr	r1, [pc, #96]	; (1ca1c <k_poll_event_init+0x8c>)
   1c9bc:	4a14      	ldr	r2, [pc, #80]	; (1ca10 <k_poll_event_init+0x80>)
   1c9be:	4815      	ldr	r0, [pc, #84]	; (1ca14 <k_poll_event_init+0x84>)
   1c9c0:	232f      	movs	r3, #47	; 0x2f
   1c9c2:	f000 fa0e 	bl	1cde2 <printk>
   1c9c6:	4816      	ldr	r0, [pc, #88]	; (1ca20 <k_poll_event_init+0x90>)
   1c9c8:	f000 fa0b 	bl	1cde2 <printk>
   1c9cc:	4810      	ldr	r0, [pc, #64]	; (1ca10 <k_poll_event_init+0x80>)
   1c9ce:	212f      	movs	r1, #47	; 0x2f
   1c9d0:	f000 fc61 	bl	1d296 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1c9d4:	b966      	cbnz	r6, 1c9f0 <k_poll_event_init+0x60>
   1c9d6:	4913      	ldr	r1, [pc, #76]	; (1ca24 <k_poll_event_init+0x94>)
   1c9d8:	4a0d      	ldr	r2, [pc, #52]	; (1ca10 <k_poll_event_init+0x80>)
   1c9da:	480e      	ldr	r0, [pc, #56]	; (1ca14 <k_poll_event_init+0x84>)
   1c9dc:	2330      	movs	r3, #48	; 0x30
   1c9de:	f000 fa00 	bl	1cde2 <printk>
   1c9e2:	4811      	ldr	r0, [pc, #68]	; (1ca28 <k_poll_event_init+0x98>)
   1c9e4:	f000 f9fd 	bl	1cde2 <printk>
   1c9e8:	4809      	ldr	r0, [pc, #36]	; (1ca10 <k_poll_event_init+0x80>)
   1c9ea:	2130      	movs	r1, #48	; 0x30
   1c9ec:	f000 fc53 	bl	1d296 <assert_post_action>
	event->poller = NULL;
   1c9f0:	2300      	movs	r3, #0
	event->type = type;
   1c9f2:	04e4      	lsls	r4, r4, #19
   1c9f4:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1c9f6:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1c9f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   1c9fc:	7b2b      	ldrb	r3, [r5, #12]
   1c9fe:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   1ca02:	433c      	orrs	r4, r7
   1ca04:	431c      	orrs	r4, r3
	event->obj = obj;
   1ca06:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1ca0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ca0c:	0002264a 	.word	0x0002264a
   1ca10:	000224fd 	.word	0x000224fd
   1ca14:	00020a75 	.word	0x00020a75
   1ca18:	0002266a 	.word	0x0002266a
   1ca1c:	00022690 	.word	0x00022690
   1ca20:	000226b4 	.word	0x000226b4
   1ca24:	000226c4 	.word	0x000226c4
   1ca28:	000226d7 	.word	0x000226d7

0001ca2c <z_impl_k_poll>:
{
   1ca2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ca30:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   1ca32:	4b75      	ldr	r3, [pc, #468]	; (1cc08 <z_impl_k_poll+0x1dc>)
   1ca34:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   1ca36:	2301      	movs	r3, #1
{
   1ca38:	4604      	mov	r4, r0
   1ca3a:	4688      	mov	r8, r1
   1ca3c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   1ca3e:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   1ca42:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1ca46:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   1ca4a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1ca4e:	b173      	cbz	r3, 1ca6e <z_impl_k_poll+0x42>
   1ca50:	496e      	ldr	r1, [pc, #440]	; (1cc0c <z_impl_k_poll+0x1e0>)
   1ca52:	4a6f      	ldr	r2, [pc, #444]	; (1cc10 <z_impl_k_poll+0x1e4>)
   1ca54:	486f      	ldr	r0, [pc, #444]	; (1cc14 <z_impl_k_poll+0x1e8>)
   1ca56:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1ca5a:	f000 f9c2 	bl	1cde2 <printk>
   1ca5e:	486e      	ldr	r0, [pc, #440]	; (1cc18 <z_impl_k_poll+0x1ec>)
   1ca60:	f000 f9bf 	bl	1cde2 <printk>
   1ca64:	486a      	ldr	r0, [pc, #424]	; (1cc10 <z_impl_k_poll+0x1e4>)
   1ca66:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1ca6a:	f000 fc14 	bl	1d296 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1ca6e:	b974      	cbnz	r4, 1ca8e <z_impl_k_poll+0x62>
   1ca70:	496a      	ldr	r1, [pc, #424]	; (1cc1c <z_impl_k_poll+0x1f0>)
   1ca72:	4a67      	ldr	r2, [pc, #412]	; (1cc10 <z_impl_k_poll+0x1e4>)
   1ca74:	4867      	ldr	r0, [pc, #412]	; (1cc14 <z_impl_k_poll+0x1e8>)
   1ca76:	f240 131b 	movw	r3, #283	; 0x11b
   1ca7a:	f000 f9b2 	bl	1cde2 <printk>
   1ca7e:	4868      	ldr	r0, [pc, #416]	; (1cc20 <z_impl_k_poll+0x1f4>)
   1ca80:	f000 f9af 	bl	1cde2 <printk>
   1ca84:	4862      	ldr	r0, [pc, #392]	; (1cc10 <z_impl_k_poll+0x1e4>)
   1ca86:	f240 111b 	movw	r1, #283	; 0x11b
   1ca8a:	f000 fc04 	bl	1d296 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1ca8e:	f1b8 0f00 	cmp.w	r8, #0
   1ca92:	da0e      	bge.n	1cab2 <z_impl_k_poll+0x86>
   1ca94:	4963      	ldr	r1, [pc, #396]	; (1cc24 <z_impl_k_poll+0x1f8>)
   1ca96:	4a5e      	ldr	r2, [pc, #376]	; (1cc10 <z_impl_k_poll+0x1e4>)
   1ca98:	485e      	ldr	r0, [pc, #376]	; (1cc14 <z_impl_k_poll+0x1e8>)
   1ca9a:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1ca9e:	f000 f9a0 	bl	1cde2 <printk>
   1caa2:	4861      	ldr	r0, [pc, #388]	; (1cc28 <z_impl_k_poll+0x1fc>)
   1caa4:	f000 f99d 	bl	1cde2 <printk>
   1caa8:	4859      	ldr	r0, [pc, #356]	; (1cc10 <z_impl_k_poll+0x1e4>)
   1caaa:	f44f 718e 	mov.w	r1, #284	; 0x11c
   1caae:	f000 fbf2 	bl	1d296 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1cab2:	ea56 0307 	orrs.w	r3, r6, r7
   1cab6:	bf0c      	ite	eq
   1cab8:	2301      	moveq	r3, #1
   1caba:	2300      	movne	r3, #0
   1cabc:	4641      	mov	r1, r8
   1cabe:	464a      	mov	r2, r9
   1cac0:	4620      	mov	r0, r4
   1cac2:	f7ff fdcd 	bl	1c660 <register_events>
   1cac6:	4680      	mov	r8, r0
	__asm__ volatile(
   1cac8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cacc:	f3ef 8911 	mrs	r9, BASEPRI
   1cad0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cad4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cad8:	4854      	ldr	r0, [pc, #336]	; (1cc2c <z_impl_k_poll+0x200>)
   1cada:	f7fc fd29 	bl	19530 <z_spin_lock_valid>
   1cade:	b968      	cbnz	r0, 1cafc <z_impl_k_poll+0xd0>
   1cae0:	4a53      	ldr	r2, [pc, #332]	; (1cc30 <z_impl_k_poll+0x204>)
   1cae2:	4954      	ldr	r1, [pc, #336]	; (1cc34 <z_impl_k_poll+0x208>)
   1cae4:	484b      	ldr	r0, [pc, #300]	; (1cc14 <z_impl_k_poll+0x1e8>)
   1cae6:	2381      	movs	r3, #129	; 0x81
   1cae8:	f000 f97b 	bl	1cde2 <printk>
   1caec:	494f      	ldr	r1, [pc, #316]	; (1cc2c <z_impl_k_poll+0x200>)
   1caee:	4852      	ldr	r0, [pc, #328]	; (1cc38 <z_impl_k_poll+0x20c>)
   1caf0:	f000 f977 	bl	1cde2 <printk>
   1caf4:	484e      	ldr	r0, [pc, #312]	; (1cc30 <z_impl_k_poll+0x204>)
   1caf6:	2181      	movs	r1, #129	; 0x81
   1caf8:	f000 fbcd 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cafc:	484b      	ldr	r0, [pc, #300]	; (1cc2c <z_impl_k_poll+0x200>)
   1cafe:	f7fc fd35 	bl	1956c <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1cb02:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   1cb06:	b9fb      	cbnz	r3, 1cb48 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   1cb08:	4620      	mov	r0, r4
   1cb0a:	464a      	mov	r2, r9
   1cb0c:	4641      	mov	r1, r8
   1cb0e:	f7ff fcd9 	bl	1c4c4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cb12:	4846      	ldr	r0, [pc, #280]	; (1cc2c <z_impl_k_poll+0x200>)
   1cb14:	f7fc fd1a 	bl	1954c <z_spin_unlock_valid>
   1cb18:	b968      	cbnz	r0, 1cb36 <z_impl_k_poll+0x10a>
   1cb1a:	4a45      	ldr	r2, [pc, #276]	; (1cc30 <z_impl_k_poll+0x204>)
   1cb1c:	4947      	ldr	r1, [pc, #284]	; (1cc3c <z_impl_k_poll+0x210>)
   1cb1e:	483d      	ldr	r0, [pc, #244]	; (1cc14 <z_impl_k_poll+0x1e8>)
   1cb20:	23ac      	movs	r3, #172	; 0xac
   1cb22:	f000 f95e 	bl	1cde2 <printk>
   1cb26:	4941      	ldr	r1, [pc, #260]	; (1cc2c <z_impl_k_poll+0x200>)
   1cb28:	4845      	ldr	r0, [pc, #276]	; (1cc40 <z_impl_k_poll+0x214>)
   1cb2a:	f000 f95a 	bl	1cde2 <printk>
   1cb2e:	4840      	ldr	r0, [pc, #256]	; (1cc30 <z_impl_k_poll+0x204>)
   1cb30:	21ac      	movs	r1, #172	; 0xac
   1cb32:	f000 fbb0 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1cb36:	f389 8811 	msr	BASEPRI, r9
   1cb3a:	f3bf 8f6f 	isb	sy
		return 0;
   1cb3e:	2500      	movs	r5, #0
}
   1cb40:	4628      	mov	r0, r5
   1cb42:	b003      	add	sp, #12
   1cb44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1cb48:	2300      	movs	r3, #0
   1cb4a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cb4e:	ea56 0307 	orrs.w	r3, r6, r7
   1cb52:	d118      	bne.n	1cb86 <z_impl_k_poll+0x15a>
   1cb54:	4835      	ldr	r0, [pc, #212]	; (1cc2c <z_impl_k_poll+0x200>)
   1cb56:	f7fc fcf9 	bl	1954c <z_spin_unlock_valid>
   1cb5a:	b968      	cbnz	r0, 1cb78 <z_impl_k_poll+0x14c>
   1cb5c:	4a34      	ldr	r2, [pc, #208]	; (1cc30 <z_impl_k_poll+0x204>)
   1cb5e:	4937      	ldr	r1, [pc, #220]	; (1cc3c <z_impl_k_poll+0x210>)
   1cb60:	482c      	ldr	r0, [pc, #176]	; (1cc14 <z_impl_k_poll+0x1e8>)
   1cb62:	23ac      	movs	r3, #172	; 0xac
   1cb64:	f000 f93d 	bl	1cde2 <printk>
   1cb68:	4930      	ldr	r1, [pc, #192]	; (1cc2c <z_impl_k_poll+0x200>)
   1cb6a:	4835      	ldr	r0, [pc, #212]	; (1cc40 <z_impl_k_poll+0x214>)
   1cb6c:	f000 f939 	bl	1cde2 <printk>
   1cb70:	482f      	ldr	r0, [pc, #188]	; (1cc30 <z_impl_k_poll+0x204>)
   1cb72:	21ac      	movs	r1, #172	; 0xac
   1cb74:	f000 fb8f 	bl	1d296 <assert_post_action>
   1cb78:	f389 8811 	msr	BASEPRI, r9
   1cb7c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1cb80:	f06f 050a 	mvn.w	r5, #10
   1cb84:	e7dc      	b.n	1cb40 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1cb86:	e9cd 6700 	strd	r6, r7, [sp]
   1cb8a:	4a2e      	ldr	r2, [pc, #184]	; (1cc44 <z_impl_k_poll+0x218>)
   1cb8c:	4827      	ldr	r0, [pc, #156]	; (1cc2c <z_impl_k_poll+0x200>)
   1cb8e:	4649      	mov	r1, r9
   1cb90:	f7fe fb5c 	bl	1b24c <z_pend_curr>
   1cb94:	4605      	mov	r5, r0
	__asm__ volatile(
   1cb96:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb9a:	f3ef 8611 	mrs	r6, BASEPRI
   1cb9e:	f383 8812 	msr	BASEPRI_MAX, r3
   1cba2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cba6:	4821      	ldr	r0, [pc, #132]	; (1cc2c <z_impl_k_poll+0x200>)
   1cba8:	f7fc fcc2 	bl	19530 <z_spin_lock_valid>
   1cbac:	b968      	cbnz	r0, 1cbca <z_impl_k_poll+0x19e>
   1cbae:	4a20      	ldr	r2, [pc, #128]	; (1cc30 <z_impl_k_poll+0x204>)
   1cbb0:	4920      	ldr	r1, [pc, #128]	; (1cc34 <z_impl_k_poll+0x208>)
   1cbb2:	4818      	ldr	r0, [pc, #96]	; (1cc14 <z_impl_k_poll+0x1e8>)
   1cbb4:	2381      	movs	r3, #129	; 0x81
   1cbb6:	f000 f914 	bl	1cde2 <printk>
   1cbba:	491c      	ldr	r1, [pc, #112]	; (1cc2c <z_impl_k_poll+0x200>)
   1cbbc:	481e      	ldr	r0, [pc, #120]	; (1cc38 <z_impl_k_poll+0x20c>)
   1cbbe:	f000 f910 	bl	1cde2 <printk>
   1cbc2:	481b      	ldr	r0, [pc, #108]	; (1cc30 <z_impl_k_poll+0x204>)
   1cbc4:	2181      	movs	r1, #129	; 0x81
   1cbc6:	f000 fb66 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cbca:	4818      	ldr	r0, [pc, #96]	; (1cc2c <z_impl_k_poll+0x200>)
   1cbcc:	f7fc fcce 	bl	1956c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1cbd0:	4620      	mov	r0, r4
   1cbd2:	4632      	mov	r2, r6
   1cbd4:	4641      	mov	r1, r8
   1cbd6:	f7ff fc75 	bl	1c4c4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cbda:	4814      	ldr	r0, [pc, #80]	; (1cc2c <z_impl_k_poll+0x200>)
   1cbdc:	f7fc fcb6 	bl	1954c <z_spin_unlock_valid>
   1cbe0:	b968      	cbnz	r0, 1cbfe <z_impl_k_poll+0x1d2>
   1cbe2:	4a13      	ldr	r2, [pc, #76]	; (1cc30 <z_impl_k_poll+0x204>)
   1cbe4:	4915      	ldr	r1, [pc, #84]	; (1cc3c <z_impl_k_poll+0x210>)
   1cbe6:	480b      	ldr	r0, [pc, #44]	; (1cc14 <z_impl_k_poll+0x1e8>)
   1cbe8:	23ac      	movs	r3, #172	; 0xac
   1cbea:	f000 f8fa 	bl	1cde2 <printk>
   1cbee:	490f      	ldr	r1, [pc, #60]	; (1cc2c <z_impl_k_poll+0x200>)
   1cbf0:	4813      	ldr	r0, [pc, #76]	; (1cc40 <z_impl_k_poll+0x214>)
   1cbf2:	f000 f8f6 	bl	1cde2 <printk>
   1cbf6:	480e      	ldr	r0, [pc, #56]	; (1cc30 <z_impl_k_poll+0x204>)
   1cbf8:	21ac      	movs	r1, #172	; 0xac
   1cbfa:	f000 fb4c 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1cbfe:	f386 8811 	msr	BASEPRI, r6
   1cc02:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1cc06:	e79b      	b.n	1cb40 <z_impl_k_poll+0x114>
   1cc08:	20001f54 	.word	0x20001f54
   1cc0c:	000220dd 	.word	0x000220dd
   1cc10:	000224fd 	.word	0x000224fd
   1cc14:	00020a75 	.word	0x00020a75
   1cc18:	00021901 	.word	0x00021901
   1cc1c:	000226f1 	.word	0x000226f1
   1cc20:	00022707 	.word	0x00022707
   1cc24:	00022716 	.word	0x00022716
   1cc28:	00022726 	.word	0x00022726
   1cc2c:	20001fac 	.word	0x20001fac
   1cc30:	00020b35 	.word	0x00020b35
   1cc34:	00020b87 	.word	0x00020b87
   1cc38:	00020b9c 	.word	0x00020b9c
   1cc3c:	00020b5b 	.word	0x00020b5b
   1cc40:	00020b72 	.word	0x00020b72
   1cc44:	2000054c 	.word	0x2000054c

0001cc48 <z_impl_k_poll_signal_raise>:
{
   1cc48:	b570      	push	{r4, r5, r6, lr}
   1cc4a:	4604      	mov	r4, r0
   1cc4c:	460d      	mov	r5, r1
	__asm__ volatile(
   1cc4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc52:	f3ef 8611 	mrs	r6, BASEPRI
   1cc56:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cc5e:	4821      	ldr	r0, [pc, #132]	; (1cce4 <z_impl_k_poll_signal_raise+0x9c>)
   1cc60:	f7fc fc66 	bl	19530 <z_spin_lock_valid>
   1cc64:	b968      	cbnz	r0, 1cc82 <z_impl_k_poll_signal_raise+0x3a>
   1cc66:	4a20      	ldr	r2, [pc, #128]	; (1cce8 <z_impl_k_poll_signal_raise+0xa0>)
   1cc68:	4920      	ldr	r1, [pc, #128]	; (1ccec <z_impl_k_poll_signal_raise+0xa4>)
   1cc6a:	4821      	ldr	r0, [pc, #132]	; (1ccf0 <z_impl_k_poll_signal_raise+0xa8>)
   1cc6c:	2381      	movs	r3, #129	; 0x81
   1cc6e:	f000 f8b8 	bl	1cde2 <printk>
   1cc72:	491c      	ldr	r1, [pc, #112]	; (1cce4 <z_impl_k_poll_signal_raise+0x9c>)
   1cc74:	481f      	ldr	r0, [pc, #124]	; (1ccf4 <z_impl_k_poll_signal_raise+0xac>)
   1cc76:	f000 f8b4 	bl	1cde2 <printk>
   1cc7a:	481b      	ldr	r0, [pc, #108]	; (1cce8 <z_impl_k_poll_signal_raise+0xa0>)
   1cc7c:	2181      	movs	r1, #129	; 0x81
   1cc7e:	f000 fb0a 	bl	1d296 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cc82:	4818      	ldr	r0, [pc, #96]	; (1cce4 <z_impl_k_poll_signal_raise+0x9c>)
   1cc84:	f7fc fc72 	bl	1956c <z_spin_lock_set_owner>
	return list->head == list;
   1cc88:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   1cc8a:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   1cc8c:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1cc8e:	4284      	cmp	r4, r0
   1cc90:	60a1      	str	r1, [r4, #8]
   1cc92:	d117      	bne.n	1ccc4 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cc94:	4813      	ldr	r0, [pc, #76]	; (1cce4 <z_impl_k_poll_signal_raise+0x9c>)
   1cc96:	f7fc fc59 	bl	1954c <z_spin_unlock_valid>
   1cc9a:	b968      	cbnz	r0, 1ccb8 <z_impl_k_poll_signal_raise+0x70>
   1cc9c:	4a12      	ldr	r2, [pc, #72]	; (1cce8 <z_impl_k_poll_signal_raise+0xa0>)
   1cc9e:	4916      	ldr	r1, [pc, #88]	; (1ccf8 <z_impl_k_poll_signal_raise+0xb0>)
   1cca0:	4813      	ldr	r0, [pc, #76]	; (1ccf0 <z_impl_k_poll_signal_raise+0xa8>)
   1cca2:	23ac      	movs	r3, #172	; 0xac
   1cca4:	f000 f89d 	bl	1cde2 <printk>
   1cca8:	490e      	ldr	r1, [pc, #56]	; (1cce4 <z_impl_k_poll_signal_raise+0x9c>)
   1ccaa:	4814      	ldr	r0, [pc, #80]	; (1ccfc <z_impl_k_poll_signal_raise+0xb4>)
   1ccac:	f000 f899 	bl	1cde2 <printk>
   1ccb0:	480d      	ldr	r0, [pc, #52]	; (1cce8 <z_impl_k_poll_signal_raise+0xa0>)
   1ccb2:	21ac      	movs	r1, #172	; 0xac
   1ccb4:	f000 faef 	bl	1d296 <assert_post_action>
	__asm__ volatile(
   1ccb8:	f386 8811 	msr	BASEPRI, r6
   1ccbc:	f3bf 8f6f 	isb	sy
		return 0;
   1ccc0:	2400      	movs	r4, #0
   1ccc2:	e00d      	b.n	1cce0 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   1ccc4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1ccc8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ccca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1cccc:	2300      	movs	r3, #0
	node->prev = NULL;
   1ccce:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ccd2:	f7ff fde7 	bl	1c8a4 <signal_poll_event>
	z_reschedule(&lock, key);
   1ccd6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1ccd8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1ccda:	4802      	ldr	r0, [pc, #8]	; (1cce4 <z_impl_k_poll_signal_raise+0x9c>)
   1ccdc:	f7fd fe64 	bl	1a9a8 <z_reschedule>
}
   1cce0:	4620      	mov	r0, r4
   1cce2:	bd70      	pop	{r4, r5, r6, pc}
   1cce4:	20001fac 	.word	0x20001fac
   1cce8:	00020b35 	.word	0x00020b35
   1ccec:	00020b87 	.word	0x00020b87
   1ccf0:	00020a75 	.word	0x00020a75
   1ccf4:	00020b9c 	.word	0x00020b9c
   1ccf8:	00020b5b 	.word	0x00020b5b
   1ccfc:	00020b72 	.word	0x00020b72

0001cd00 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1cd00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cd02:	4606      	mov	r6, r0
   1cd04:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1cd06:	f002 ffdc 	bl	1fcc2 <k_is_in_isr>
   1cd0a:	b980      	cbnz	r0, 1cd2e <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1cd0c:	4b15      	ldr	r3, [pc, #84]	; (1cd64 <z_thread_aligned_alloc+0x64>)
   1cd0e:	689b      	ldr	r3, [r3, #8]
   1cd10:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1cd12:	b31c      	cbz	r4, 1cd5c <z_thread_aligned_alloc+0x5c>
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   1cd14:	2204      	movs	r2, #4
   1cd16:	18aa      	adds	r2, r5, r2
   1cd18:	d209      	bcs.n	1cd2e <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1cd1a:	2000      	movs	r0, #0
   1cd1c:	2100      	movs	r1, #0
   1cd1e:	e9cd 0100 	strd	r0, r1, [sp]
   1cd22:	f046 0104 	orr.w	r1, r6, #4
   1cd26:	4620      	mov	r0, r4
   1cd28:	f7fc f8b2 	bl	18e90 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1cd2c:	b908      	cbnz	r0, 1cd32 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1cd2e:	2400      	movs	r4, #0
	}

	return ret;
   1cd30:	e014      	b.n	1cd5c <z_thread_aligned_alloc+0x5c>
	*heap_ref = heap;
   1cd32:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1cd34:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   1cd36:	b18e      	cbz	r6, 1cd5c <z_thread_aligned_alloc+0x5c>
   1cd38:	1e73      	subs	r3, r6, #1
   1cd3a:	421c      	tst	r4, r3
   1cd3c:	d00e      	beq.n	1cd5c <z_thread_aligned_alloc+0x5c>
   1cd3e:	4a0a      	ldr	r2, [pc, #40]	; (1cd68 <z_thread_aligned_alloc+0x68>)
   1cd40:	490a      	ldr	r1, [pc, #40]	; (1cd6c <z_thread_aligned_alloc+0x6c>)
   1cd42:	480b      	ldr	r0, [pc, #44]	; (1cd70 <z_thread_aligned_alloc+0x70>)
   1cd44:	2325      	movs	r3, #37	; 0x25
   1cd46:	f000 f84c 	bl	1cde2 <printk>
   1cd4a:	480a      	ldr	r0, [pc, #40]	; (1cd74 <z_thread_aligned_alloc+0x74>)
   1cd4c:	4621      	mov	r1, r4
   1cd4e:	4632      	mov	r2, r6
   1cd50:	f000 f847 	bl	1cde2 <printk>
   1cd54:	4804      	ldr	r0, [pc, #16]	; (1cd68 <z_thread_aligned_alloc+0x68>)
   1cd56:	2125      	movs	r1, #37	; 0x25
   1cd58:	f000 fa9d 	bl	1d296 <assert_post_action>
}
   1cd5c:	4620      	mov	r0, r4
   1cd5e:	b002      	add	sp, #8
   1cd60:	bd70      	pop	{r4, r5, r6, pc}
   1cd62:	bf00      	nop
   1cd64:	20001f54 	.word	0x20001f54
   1cd68:	00022733 	.word	0x00022733
   1cd6c:	00022757 	.word	0x00022757
   1cd70:	00020a75 	.word	0x00020a75
   1cd74:	00022789 	.word	0x00022789

0001cd78 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1cd78:	4a02      	ldr	r2, [pc, #8]	; (1cd84 <boot_banner+0xc>)
   1cd7a:	4903      	ldr	r1, [pc, #12]	; (1cd88 <boot_banner+0x10>)
   1cd7c:	4803      	ldr	r0, [pc, #12]	; (1cd8c <boot_banner+0x14>)
   1cd7e:	f000 b830 	b.w	1cde2 <printk>
   1cd82:	bf00      	nop
   1cd84:	00021903 	.word	0x00021903
   1cd88:	000227b1 	.word	0x000227b1
   1cd8c:	000227bd 	.word	0x000227bd

0001cd90 <sys_notify_validate>:
	if (notify == NULL) {
   1cd90:	4603      	mov	r3, r0
   1cd92:	b140      	cbz	r0, 1cda6 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1cd94:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1cd96:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1cd9a:	2a02      	cmp	r2, #2
   1cd9c:	d006      	beq.n	1cdac <sys_notify_validate+0x1c>
   1cd9e:	2a03      	cmp	r2, #3
   1cda0:	d004      	beq.n	1cdac <sys_notify_validate+0x1c>
   1cda2:	2a01      	cmp	r2, #1
   1cda4:	d005      	beq.n	1cdb2 <sys_notify_validate+0x22>
		return -EINVAL;
   1cda6:	f06f 0015 	mvn.w	r0, #21
}
   1cdaa:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1cdac:	681a      	ldr	r2, [r3, #0]
   1cdae:	2a00      	cmp	r2, #0
   1cdb0:	d0f9      	beq.n	1cda6 <sys_notify_validate+0x16>
		notify->result = 0;
   1cdb2:	2000      	movs	r0, #0
   1cdb4:	6098      	str	r0, [r3, #8]
   1cdb6:	4770      	bx	lr

0001cdb8 <arch_printk_char_out>:
}
   1cdb8:	2000      	movs	r0, #0
   1cdba:	4770      	bx	lr

0001cdbc <str_out>:
{
   1cdbc:	b530      	push	{r4, r5, lr}
   1cdbe:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1cdc0:	680c      	ldr	r4, [r1, #0]
   1cdc2:	1c55      	adds	r5, r2, #1
   1cdc4:	b114      	cbz	r4, 1cdcc <str_out+0x10>
   1cdc6:	684b      	ldr	r3, [r1, #4]
   1cdc8:	4293      	cmp	r3, r2
   1cdca:	dc01      	bgt.n	1cdd0 <str_out+0x14>
		ctx->count++;
   1cdcc:	608d      	str	r5, [r1, #8]
}
   1cdce:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1cdd0:	3b01      	subs	r3, #1
   1cdd2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1cdd4:	bf08      	it	eq
   1cdd6:	2200      	moveq	r2, #0
   1cdd8:	608d      	str	r5, [r1, #8]
   1cdda:	bf0c      	ite	eq
   1cddc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1cdde:	54a0      	strbne	r0, [r4, r2]
   1cde0:	e7f5      	b.n	1cdce <str_out+0x12>

0001cde2 <printk>:
{
   1cde2:	b40f      	push	{r0, r1, r2, r3}
   1cde4:	b507      	push	{r0, r1, r2, lr}
   1cde6:	a904      	add	r1, sp, #16
   1cde8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1cdec:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1cdee:	f7f2 fef1 	bl	fbd4 <vprintk>
}
   1cdf2:	b003      	add	sp, #12
   1cdf4:	f85d eb04 	ldr.w	lr, [sp], #4
   1cdf8:	b004      	add	sp, #16
   1cdfa:	4770      	bx	lr

0001cdfc <snprintk>:
{
   1cdfc:	b40c      	push	{r2, r3}
   1cdfe:	b507      	push	{r0, r1, r2, lr}
   1ce00:	ab04      	add	r3, sp, #16
   1ce02:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1ce06:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1ce08:	f7f2 fef2 	bl	fbf0 <vsnprintk>
}
   1ce0c:	b003      	add	sp, #12
   1ce0e:	f85d eb04 	ldr.w	lr, [sp], #4
   1ce12:	b002      	add	sp, #8
   1ce14:	4770      	bx	lr

0001ce16 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1ce16:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1ce18:	f013 0307 	ands.w	r3, r3, #7
   1ce1c:	d105      	bne.n	1ce2a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1ce1e:	6803      	ldr	r3, [r0, #0]
   1ce20:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1ce22:	bf0c      	ite	eq
   1ce24:	2000      	moveq	r0, #0
   1ce26:	2003      	movne	r0, #3
   1ce28:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1ce2a:	2b02      	cmp	r3, #2
   1ce2c:	d105      	bne.n	1ce3a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1ce2e:	8bc3      	ldrh	r3, [r0, #30]
   1ce30:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1ce32:	bf14      	ite	ne
   1ce34:	2000      	movne	r0, #0
   1ce36:	2004      	moveq	r0, #4
   1ce38:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1ce3a:	2b01      	cmp	r3, #1
   1ce3c:	d105      	bne.n	1ce4a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1ce3e:	6803      	ldr	r3, [r0, #0]
   1ce40:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1ce42:	bf0c      	ite	eq
   1ce44:	2000      	moveq	r0, #0
   1ce46:	2005      	movne	r0, #5
   1ce48:	4770      	bx	lr
	int evt = EVT_NOP;
   1ce4a:	2000      	movs	r0, #0
}
   1ce4c:	4770      	bx	lr

0001ce4e <notify_one>:
{
   1ce4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce52:	460d      	mov	r5, r1
   1ce54:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ce56:	4619      	mov	r1, r3
   1ce58:	1d28      	adds	r0, r5, #4
{
   1ce5a:	4690      	mov	r8, r2
   1ce5c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ce5e:	f7f2 fe7b 	bl	fb58 <sys_notify_finalize>
	if (cb) {
   1ce62:	4604      	mov	r4, r0
   1ce64:	b138      	cbz	r0, 1ce76 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1ce66:	4633      	mov	r3, r6
   1ce68:	4642      	mov	r2, r8
   1ce6a:	4629      	mov	r1, r5
   1ce6c:	4638      	mov	r0, r7
   1ce6e:	46a4      	mov	ip, r4
}
   1ce70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ce74:	4760      	bx	ip
}
   1ce76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce7a <validate_args>:
{
   1ce7a:	b510      	push	{r4, lr}
   1ce7c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ce7e:	b140      	cbz	r0, 1ce92 <validate_args+0x18>
   1ce80:	b139      	cbz	r1, 1ce92 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ce82:	1d08      	adds	r0, r1, #4
   1ce84:	f7ff ff84 	bl	1cd90 <sys_notify_validate>
	if ((rv == 0)
   1ce88:	b928      	cbnz	r0, 1ce96 <validate_args+0x1c>
	    && ((cli->notify.flags
   1ce8a:	68a3      	ldr	r3, [r4, #8]
   1ce8c:	f033 0303 	bics.w	r3, r3, #3
   1ce90:	d001      	beq.n	1ce96 <validate_args+0x1c>
		rv = -EINVAL;
   1ce92:	f06f 0015 	mvn.w	r0, #21
}
   1ce96:	bd10      	pop	{r4, pc}

0001ce98 <onoff_manager_init>:
{
   1ce98:	b538      	push	{r3, r4, r5, lr}
   1ce9a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ce9c:	4605      	mov	r5, r0
   1ce9e:	b158      	cbz	r0, 1ceb8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1cea0:	b151      	cbz	r1, 1ceb8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1cea2:	680b      	ldr	r3, [r1, #0]
   1cea4:	b143      	cbz	r3, 1ceb8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1cea6:	684b      	ldr	r3, [r1, #4]
   1cea8:	b133      	cbz	r3, 1ceb8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ceaa:	2220      	movs	r2, #32
   1ceac:	2100      	movs	r1, #0
   1ceae:	f003 f8ad 	bl	2000c <memset>
   1ceb2:	612c      	str	r4, [r5, #16]
	return 0;
   1ceb4:	2000      	movs	r0, #0
}
   1ceb6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ceb8:	f06f 0015 	mvn.w	r0, #21
   1cebc:	e7fb      	b.n	1ceb6 <onoff_manager_init+0x1e>

0001cebe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1cebe:	4604      	mov	r4, r0
   1cec0:	b508      	push	{r3, lr}
   1cec2:	4608      	mov	r0, r1
   1cec4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1cec6:	461a      	mov	r2, r3
   1cec8:	47a0      	blx	r4
	return z_impl_z_current_get();
   1ceca:	f7fe fda3 	bl	1ba14 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1cece:	f7f4 fdaf 	bl	11a30 <z_impl_k_thread_abort>

0001ced2 <chunk_field>:
	if (big_heap(h)) {
   1ced2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1ced4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ced8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1cedc:	bf2c      	ite	cs
   1cede:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1cee2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1cee6:	4770      	bx	lr

0001cee8 <chunk_set>:
	void *cmem = &buf[c];
   1cee8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1ceec:	6880      	ldr	r0, [r0, #8]
   1ceee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1cef2:	bf2c      	ite	cs
   1cef4:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1cef8:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1cefc:	4770      	bx	lr

0001cefe <chunk_size>:
{
   1cefe:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cf00:	2201      	movs	r2, #1
   1cf02:	f7ff ffe6 	bl	1ced2 <chunk_field>
}
   1cf06:	0840      	lsrs	r0, r0, #1
   1cf08:	bd08      	pop	{r3, pc}

0001cf0a <set_chunk_used>:
	if (big_heap(h)) {
   1cf0a:	6883      	ldr	r3, [r0, #8]
   1cf0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1cf10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1cf14:	d308      	bcc.n	1cf28 <set_chunk_used+0x1e>
		if (used) {
   1cf16:	684b      	ldr	r3, [r1, #4]
   1cf18:	b11a      	cbz	r2, 1cf22 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cf1a:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cf1e:	604b      	str	r3, [r1, #4]
   1cf20:	4770      	bx	lr
   1cf22:	f023 0301 	bic.w	r3, r3, #1
   1cf26:	e7fa      	b.n	1cf1e <set_chunk_used+0x14>
		if (used) {
   1cf28:	884b      	ldrh	r3, [r1, #2]
   1cf2a:	b11a      	cbz	r2, 1cf34 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cf2c:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cf30:	804b      	strh	r3, [r1, #2]
}
   1cf32:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1cf34:	f023 0301 	bic.w	r3, r3, #1
   1cf38:	e7fa      	b.n	1cf30 <set_chunk_used+0x26>

0001cf3a <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1cf3a:	0053      	lsls	r3, r2, #1
   1cf3c:	2201      	movs	r2, #1
   1cf3e:	f7ff bfd3 	b.w	1cee8 <chunk_set>

0001cf42 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   1cf42:	6883      	ldr	r3, [r0, #8]
   1cf44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cf48:	bf2c      	ite	cs
   1cf4a:	2008      	movcs	r0, #8
   1cf4c:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cf4e:	3107      	adds	r1, #7
   1cf50:	4408      	add	r0, r1
}
   1cf52:	08c0      	lsrs	r0, r0, #3
   1cf54:	4770      	bx	lr

0001cf56 <bucket_idx>:
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   1cf56:	460a      	mov	r2, r1
   1cf58:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   1cf5a:	2101      	movs	r1, #1
   1cf5c:	f7ff fff1 	bl	1cf42 <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1cf60:	3201      	adds	r2, #1
   1cf62:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   1cf64:	fab2 f082 	clz	r0, r2
}
   1cf68:	f1c0 001f 	rsb	r0, r0, #31
   1cf6c:	bd08      	pop	{r3, pc}

0001cf6e <merge_chunks>:
{
   1cf6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf72:	4616      	mov	r6, r2
   1cf74:	4604      	mov	r4, r0
   1cf76:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1cf78:	f7ff ffc1 	bl	1cefe <chunk_size>
   1cf7c:	4631      	mov	r1, r6
   1cf7e:	4605      	mov	r5, r0
   1cf80:	4620      	mov	r0, r4
   1cf82:	f7ff ffbc 	bl	1cefe <chunk_size>
   1cf86:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1cf88:	462a      	mov	r2, r5
   1cf8a:	4639      	mov	r1, r7
   1cf8c:	4620      	mov	r0, r4
   1cf8e:	f7ff ffd4 	bl	1cf3a <set_chunk_size>
	return c + chunk_size(h, c);
   1cf92:	4631      	mov	r1, r6
   1cf94:	4620      	mov	r0, r4
   1cf96:	f7ff ffb2 	bl	1cefe <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cf9a:	462b      	mov	r3, r5
   1cf9c:	1831      	adds	r1, r6, r0
   1cf9e:	2200      	movs	r2, #0
   1cfa0:	4620      	mov	r0, r4
}
   1cfa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cfa6:	f7ff bf9f 	b.w	1cee8 <chunk_set>

0001cfaa <split_chunks>:
{
   1cfaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cfae:	4614      	mov	r4, r2
   1cfb0:	4605      	mov	r5, r0
   1cfb2:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1cfb4:	f7ff ffa3 	bl	1cefe <chunk_size>
	chunksz_t lsz = rc - lc;
   1cfb8:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1cfbc:	1b37      	subs	r7, r6, r4
   1cfbe:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1cfc0:	4642      	mov	r2, r8
   1cfc2:	4631      	mov	r1, r6
   1cfc4:	4628      	mov	r0, r5
   1cfc6:	f7ff ffb8 	bl	1cf3a <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1cfca:	463a      	mov	r2, r7
   1cfcc:	4621      	mov	r1, r4
   1cfce:	4628      	mov	r0, r5
   1cfd0:	f7ff ffb3 	bl	1cf3a <set_chunk_size>
   1cfd4:	4643      	mov	r3, r8
   1cfd6:	2200      	movs	r2, #0
   1cfd8:	4621      	mov	r1, r4
   1cfda:	4628      	mov	r0, r5
   1cfdc:	f7ff ff84 	bl	1cee8 <chunk_set>
	return c + chunk_size(h, c);
   1cfe0:	4621      	mov	r1, r4
   1cfe2:	4628      	mov	r0, r5
   1cfe4:	f7ff ff8b 	bl	1cefe <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cfe8:	463b      	mov	r3, r7
   1cfea:	1821      	adds	r1, r4, r0
   1cfec:	2200      	movs	r2, #0
   1cfee:	4628      	mov	r0, r5
}
   1cff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cff4:	f7ff bf78 	b.w	1cee8 <chunk_set>

0001cff8 <free_list_remove_bidx>:
{
   1cff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cffc:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1cffe:	2203      	movs	r2, #3
   1d000:	460e      	mov	r6, r1
   1d002:	4604      	mov	r4, r0
   1d004:	f7ff ff65 	bl	1ced2 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1d008:	4286      	cmp	r6, r0
   1d00a:	4605      	mov	r5, r0
   1d00c:	f107 0804 	add.w	r8, r7, #4
   1d010:	d10b      	bne.n	1d02a <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1d012:	2301      	movs	r3, #1
   1d014:	fa03 f707 	lsl.w	r7, r3, r7
   1d018:	68e3      	ldr	r3, [r4, #12]
   1d01a:	ea23 0307 	bic.w	r3, r3, r7
   1d01e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1d020:	2300      	movs	r3, #0
   1d022:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1d026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1d02a:	4631      	mov	r1, r6
   1d02c:	2202      	movs	r2, #2
   1d02e:	4620      	mov	r0, r4
   1d030:	f7ff ff4f 	bl	1ced2 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1d034:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1d036:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1d038:	4601      	mov	r1, r0
		b->next = second;
   1d03a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1d03e:	4620      	mov	r0, r4
   1d040:	2203      	movs	r2, #3
   1d042:	f7ff ff51 	bl	1cee8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d046:	4633      	mov	r3, r6
   1d048:	4629      	mov	r1, r5
   1d04a:	4620      	mov	r0, r4
   1d04c:	2202      	movs	r2, #2
}
   1d04e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d052:	f7ff bf49 	b.w	1cee8 <chunk_set>

0001d056 <alloc_chunk>:
{
   1d056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d05a:	4605      	mov	r5, r0
   1d05c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1d05e:	f7ff ff7a 	bl	1cf56 <bucket_idx>
   1d062:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1d066:	4606      	mov	r6, r0
	if (b->next) {
   1d068:	f8da 9010 	ldr.w	r9, [sl, #16]
   1d06c:	f1b9 0f00 	cmp.w	r9, #0
   1d070:	d01b      	beq.n	1d0aa <alloc_chunk+0x54>
   1d072:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1d074:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1d078:	4628      	mov	r0, r5
   1d07a:	4621      	mov	r1, r4
   1d07c:	f7ff ff3f 	bl	1cefe <chunk_size>
   1d080:	4540      	cmp	r0, r8
   1d082:	d307      	bcc.n	1d094 <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   1d084:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   1d086:	4621      	mov	r1, r4
   1d088:	4628      	mov	r0, r5
   1d08a:	f7ff ffb5 	bl	1cff8 <free_list_remove_bidx>
}
   1d08e:	4620      	mov	r0, r4
   1d090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1d094:	2203      	movs	r2, #3
   1d096:	4621      	mov	r1, r4
   1d098:	4628      	mov	r0, r5
   1d09a:	f7ff ff1a 	bl	1ced2 <chunk_field>
		} while (--i && b->next != first);
   1d09e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1d0a0:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1d0a4:	d001      	beq.n	1d0aa <alloc_chunk+0x54>
   1d0a6:	4581      	cmp	r9, r0
   1d0a8:	d1e4      	bne.n	1d074 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1d0aa:	68e9      	ldr	r1, [r5, #12]
   1d0ac:	3601      	adds	r6, #1
   1d0ae:	f04f 34ff 	mov.w	r4, #4294967295
   1d0b2:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1d0b4:	400c      	ands	r4, r1
   1d0b6:	d0ea      	beq.n	1d08e <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   1d0b8:	fa94 f2a4 	rbit	r2, r4
   1d0bc:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1d0c0:	1d13      	adds	r3, r2, #4
   1d0c2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1d0c6:	e7de      	b.n	1d086 <alloc_chunk+0x30>

0001d0c8 <free_list_add>:
{
   1d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0cc:	4604      	mov	r4, r0
   1d0ce:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1d0d0:	f7ff ff15 	bl	1cefe <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d0d4:	68a3      	ldr	r3, [r4, #8]
   1d0d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d0da:	4601      	mov	r1, r0
   1d0dc:	d301      	bcc.n	1d0e2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1d0de:	2801      	cmp	r0, #1
   1d0e0:	d035      	beq.n	1d14e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d0e2:	4620      	mov	r0, r4
   1d0e4:	f7ff ff37 	bl	1cf56 <bucket_idx>
	if (b->next == 0U) {
   1d0e8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1d0ec:	6916      	ldr	r6, [r2, #16]
   1d0ee:	b99e      	cbnz	r6, 1d118 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1d0f0:	2301      	movs	r3, #1
   1d0f2:	fa03 f000 	lsl.w	r0, r3, r0
   1d0f6:	68e3      	ldr	r3, [r4, #12]
   1d0f8:	4303      	orrs	r3, r0
   1d0fa:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1d0fc:	4629      	mov	r1, r5
		b->next = c;
   1d0fe:	6115      	str	r5, [r2, #16]
   1d100:	462b      	mov	r3, r5
   1d102:	2202      	movs	r2, #2
   1d104:	4620      	mov	r0, r4
   1d106:	f7ff feef 	bl	1cee8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d10a:	2203      	movs	r2, #3
   1d10c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1d10e:	4620      	mov	r0, r4
}
   1d110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1d114:	f7ff bee8 	b.w	1cee8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1d118:	2202      	movs	r2, #2
   1d11a:	4631      	mov	r1, r6
   1d11c:	4620      	mov	r0, r4
   1d11e:	f7ff fed8 	bl	1ced2 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1d122:	2202      	movs	r2, #2
   1d124:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1d126:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1d128:	4629      	mov	r1, r5
   1d12a:	4620      	mov	r0, r4
   1d12c:	f7ff fedc 	bl	1cee8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1d130:	4633      	mov	r3, r6
   1d132:	2203      	movs	r2, #3
   1d134:	4629      	mov	r1, r5
   1d136:	4620      	mov	r0, r4
   1d138:	f7ff fed6 	bl	1cee8 <chunk_set>
   1d13c:	2203      	movs	r2, #3
   1d13e:	4639      	mov	r1, r7
   1d140:	462b      	mov	r3, r5
   1d142:	4620      	mov	r0, r4
   1d144:	f7ff fed0 	bl	1cee8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1d148:	2202      	movs	r2, #2
   1d14a:	4631      	mov	r1, r6
   1d14c:	e7df      	b.n	1d10e <free_list_add+0x46>
   1d14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d152 <free_list_remove>:
{
   1d152:	b538      	push	{r3, r4, r5, lr}
   1d154:	4604      	mov	r4, r0
   1d156:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1d158:	f7ff fed1 	bl	1cefe <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1d15c:	68a3      	ldr	r3, [r4, #8]
   1d15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d162:	4601      	mov	r1, r0
   1d164:	d301      	bcc.n	1d16a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1d166:	2801      	cmp	r0, #1
   1d168:	d009      	beq.n	1d17e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d16a:	4620      	mov	r0, r4
   1d16c:	f7ff fef3 	bl	1cf56 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1d170:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1d172:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1d174:	4620      	mov	r0, r4
}
   1d176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1d17a:	f7ff bf3d 	b.w	1cff8 <free_list_remove_bidx>
}
   1d17e:	bd38      	pop	{r3, r4, r5, pc}

0001d180 <free_chunk>:
{
   1d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d182:	460c      	mov	r4, r1
   1d184:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1d186:	f7ff feba 	bl	1cefe <chunk_size>
   1d18a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d18c:	2201      	movs	r2, #1
   1d18e:	4631      	mov	r1, r6
   1d190:	4628      	mov	r0, r5
   1d192:	f7ff fe9e 	bl	1ced2 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1d196:	07c3      	lsls	r3, r0, #31
   1d198:	d40c      	bmi.n	1d1b4 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1d19a:	4631      	mov	r1, r6
   1d19c:	4628      	mov	r0, r5
   1d19e:	f7ff ffd8 	bl	1d152 <free_list_remove>
	return c + chunk_size(h, c);
   1d1a2:	4621      	mov	r1, r4
   1d1a4:	4628      	mov	r0, r5
   1d1a6:	f7ff feaa 	bl	1cefe <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1d1aa:	4621      	mov	r1, r4
   1d1ac:	1822      	adds	r2, r4, r0
   1d1ae:	4628      	mov	r0, r5
   1d1b0:	f7ff fedd 	bl	1cf6e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d1b4:	2200      	movs	r2, #0
   1d1b6:	4621      	mov	r1, r4
   1d1b8:	4628      	mov	r0, r5
   1d1ba:	f7ff fe8a 	bl	1ced2 <chunk_field>
   1d1be:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1d1c0:	2201      	movs	r2, #1
   1d1c2:	4639      	mov	r1, r7
   1d1c4:	4628      	mov	r0, r5
   1d1c6:	f7ff fe84 	bl	1ced2 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1d1ca:	f010 0601 	ands.w	r6, r0, #1
   1d1ce:	d113      	bne.n	1d1f8 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1d1d0:	4639      	mov	r1, r7
   1d1d2:	4628      	mov	r0, r5
   1d1d4:	f7ff ffbd 	bl	1d152 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1d1d8:	4621      	mov	r1, r4
   1d1da:	4632      	mov	r2, r6
   1d1dc:	4628      	mov	r0, r5
   1d1de:	f7ff fe78 	bl	1ced2 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1d1e2:	4622      	mov	r2, r4
   1d1e4:	1a21      	subs	r1, r4, r0
   1d1e6:	4628      	mov	r0, r5
   1d1e8:	f7ff fec1 	bl	1cf6e <merge_chunks>
   1d1ec:	4621      	mov	r1, r4
   1d1ee:	4632      	mov	r2, r6
   1d1f0:	4628      	mov	r0, r5
   1d1f2:	f7ff fe6e 	bl	1ced2 <chunk_field>
   1d1f6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1d1f8:	4621      	mov	r1, r4
   1d1fa:	4628      	mov	r0, r5
}
   1d1fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1d200:	f7ff bf62 	b.w	1d0c8 <free_list_add>

0001d204 <sys_heap_alloc>:
{
   1d204:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1d206:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1d208:	b909      	cbnz	r1, 1d20e <sys_heap_alloc+0xa>
		return NULL;
   1d20a:	2000      	movs	r0, #0
}
   1d20c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1d20e:	68a2      	ldr	r2, [r4, #8]
   1d210:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1d214:	d9f9      	bls.n	1d20a <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   1d216:	4620      	mov	r0, r4
   1d218:	f7ff fe93 	bl	1cf42 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1d21c:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   1d21e:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1d220:	4620      	mov	r0, r4
   1d222:	f7ff ff18 	bl	1d056 <alloc_chunk>
	if (c == 0U) {
   1d226:	4605      	mov	r5, r0
   1d228:	2800      	cmp	r0, #0
   1d22a:	d0ee      	beq.n	1d20a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1d22c:	4601      	mov	r1, r0
   1d22e:	4620      	mov	r0, r4
   1d230:	f7ff fe65 	bl	1cefe <chunk_size>
   1d234:	42b0      	cmp	r0, r6
   1d236:	d909      	bls.n	1d24c <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   1d238:	442e      	add	r6, r5
   1d23a:	4629      	mov	r1, r5
   1d23c:	4620      	mov	r0, r4
   1d23e:	4632      	mov	r2, r6
   1d240:	f7ff feb3 	bl	1cfaa <split_chunks>
		free_list_add(h, c + chunk_sz);
   1d244:	4631      	mov	r1, r6
   1d246:	4620      	mov	r0, r4
   1d248:	f7ff ff3e 	bl	1d0c8 <free_list_add>
	set_chunk_used(h, c, true);
   1d24c:	4620      	mov	r0, r4
   1d24e:	2201      	movs	r2, #1
   1d250:	4629      	mov	r1, r5
   1d252:	f7ff fe5a 	bl	1cf0a <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1d256:	68a3      	ldr	r3, [r4, #8]
   1d258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d25c:	bf2c      	ite	cs
   1d25e:	2008      	movcs	r0, #8
   1d260:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1d262:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   1d266:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1d268:	e7d0      	b.n	1d20c <sys_heap_alloc+0x8>

0001d26a <outs>:
{
   1d26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d26e:	4607      	mov	r7, r0
   1d270:	4688      	mov	r8, r1
   1d272:	4615      	mov	r5, r2
   1d274:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d276:	4614      	mov	r4, r2
   1d278:	42b4      	cmp	r4, r6
   1d27a:	eba4 0005 	sub.w	r0, r4, r5
   1d27e:	d302      	bcc.n	1d286 <outs+0x1c>
   1d280:	b93e      	cbnz	r6, 1d292 <outs+0x28>
   1d282:	7823      	ldrb	r3, [r4, #0]
   1d284:	b12b      	cbz	r3, 1d292 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1d286:	f814 0b01 	ldrb.w	r0, [r4], #1
   1d28a:	4641      	mov	r1, r8
   1d28c:	47b8      	blx	r7
		if (rc < 0) {
   1d28e:	2800      	cmp	r0, #0
   1d290:	daf2      	bge.n	1d278 <outs+0xe>
}
   1d292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d296 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1d296:	4040      	eors	r0, r0
   1d298:	f380 8811 	msr	BASEPRI, r0
   1d29c:	f04f 0004 	mov.w	r0, #4
   1d2a0:	df02      	svc	2
}
   1d2a2:	4770      	bx	lr

0001d2a4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1d2a4:	4770      	bx	lr

0001d2a6 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1d2a6:	2200      	movs	r2, #0
   1d2a8:	e9c0 2200 	strd	r2, r2, [r0]
   1d2ac:	6082      	str	r2, [r0, #8]
}
   1d2ae:	4770      	bx	lr

0001d2b0 <bt_scan_stop>:
	return bt_le_scan_stop();
   1d2b0:	f7f6 b986 	b.w	135c0 <bt_le_scan_stop>

0001d2b4 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1d2b4:	b538      	push	{r3, r4, r5, lr}
   1d2b6:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1d2b8:	42ab      	cmp	r3, r5
{
   1d2ba:	4611      	mov	r1, r2
   1d2bc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1d2be:	d804      	bhi.n	1d2ca <_copy+0x16>
   1d2c0:	461a      	mov	r2, r3
   1d2c2:	f002 fe82 	bl	1ffca <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1d2c6:	4620      	mov	r0, r4
   1d2c8:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1d2ca:	2400      	movs	r4, #0
   1d2cc:	e7fb      	b.n	1d2c6 <_copy+0x12>

0001d2ce <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1d2ce:	f002 be9d 	b.w	2000c <memset>

0001d2d2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1d2d2:	09c3      	lsrs	r3, r0, #7
   1d2d4:	005a      	lsls	r2, r3, #1
   1d2d6:	4413      	add	r3, r2
   1d2d8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1d2dc:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1d2e0:	b2c0      	uxtb	r0, r0
   1d2e2:	4770      	bx	lr

0001d2e4 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d2e4:	78cb      	ldrb	r3, [r1, #3]
   1d2e6:	7802      	ldrb	r2, [r0, #0]
   1d2e8:	4053      	eors	r3, r2
   1d2ea:	7003      	strb	r3, [r0, #0]
   1d2ec:	884b      	ldrh	r3, [r1, #2]
   1d2ee:	7842      	ldrb	r2, [r0, #1]
   1d2f0:	4053      	eors	r3, r2
   1d2f2:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d2f4:	680a      	ldr	r2, [r1, #0]
   1d2f6:	7883      	ldrb	r3, [r0, #2]
   1d2f8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d2fc:	7083      	strb	r3, [r0, #2]
   1d2fe:	680a      	ldr	r2, [r1, #0]
   1d300:	78c3      	ldrb	r3, [r0, #3]
   1d302:	4053      	eors	r3, r2
   1d304:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d306:	79cb      	ldrb	r3, [r1, #7]
   1d308:	7902      	ldrb	r2, [r0, #4]
   1d30a:	4053      	eors	r3, r2
   1d30c:	7103      	strb	r3, [r0, #4]
   1d30e:	88cb      	ldrh	r3, [r1, #6]
   1d310:	7942      	ldrb	r2, [r0, #5]
   1d312:	4053      	eors	r3, r2
   1d314:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d316:	684a      	ldr	r2, [r1, #4]
   1d318:	7983      	ldrb	r3, [r0, #6]
   1d31a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d31e:	7183      	strb	r3, [r0, #6]
   1d320:	684a      	ldr	r2, [r1, #4]
   1d322:	79c3      	ldrb	r3, [r0, #7]
   1d324:	4053      	eors	r3, r2
   1d326:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d328:	7acb      	ldrb	r3, [r1, #11]
   1d32a:	7a02      	ldrb	r2, [r0, #8]
   1d32c:	4053      	eors	r3, r2
   1d32e:	7203      	strb	r3, [r0, #8]
   1d330:	7a42      	ldrb	r2, [r0, #9]
   1d332:	894b      	ldrh	r3, [r1, #10]
   1d334:	4053      	eors	r3, r2
   1d336:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d338:	688a      	ldr	r2, [r1, #8]
   1d33a:	7a83      	ldrb	r3, [r0, #10]
   1d33c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d340:	7283      	strb	r3, [r0, #10]
   1d342:	688a      	ldr	r2, [r1, #8]
   1d344:	7ac3      	ldrb	r3, [r0, #11]
   1d346:	4053      	eors	r3, r2
   1d348:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d34a:	7bcb      	ldrb	r3, [r1, #15]
   1d34c:	7b02      	ldrb	r2, [r0, #12]
   1d34e:	4053      	eors	r3, r2
   1d350:	7303      	strb	r3, [r0, #12]
   1d352:	89cb      	ldrh	r3, [r1, #14]
   1d354:	7b42      	ldrb	r2, [r0, #13]
   1d356:	4053      	eors	r3, r2
   1d358:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d35a:	68ca      	ldr	r2, [r1, #12]
   1d35c:	7b83      	ldrb	r3, [r0, #14]
   1d35e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d362:	7383      	strb	r3, [r0, #14]
   1d364:	68ca      	ldr	r2, [r1, #12]
   1d366:	7bc3      	ldrb	r3, [r0, #15]
   1d368:	4053      	eors	r3, r2
   1d36a:	73c3      	strb	r3, [r0, #15]
}
   1d36c:	4770      	bx	lr

0001d36e <shift_rows>:
{
   1d36e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d370:	7802      	ldrb	r2, [r0, #0]
   1d372:	f88d 2000 	strb.w	r2, [sp]
   1d376:	7942      	ldrb	r2, [r0, #5]
   1d378:	f88d 2001 	strb.w	r2, [sp, #1]
   1d37c:	7a82      	ldrb	r2, [r0, #10]
   1d37e:	f88d 2002 	strb.w	r2, [sp, #2]
   1d382:	7bc2      	ldrb	r2, [r0, #15]
   1d384:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d388:	7902      	ldrb	r2, [r0, #4]
   1d38a:	f88d 2004 	strb.w	r2, [sp, #4]
   1d38e:	7a42      	ldrb	r2, [r0, #9]
   1d390:	f88d 2005 	strb.w	r2, [sp, #5]
   1d394:	7b82      	ldrb	r2, [r0, #14]
   1d396:	f88d 2006 	strb.w	r2, [sp, #6]
   1d39a:	78c2      	ldrb	r2, [r0, #3]
   1d39c:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d3a0:	7a02      	ldrb	r2, [r0, #8]
   1d3a2:	f88d 2008 	strb.w	r2, [sp, #8]
   1d3a6:	7b42      	ldrb	r2, [r0, #13]
   1d3a8:	f88d 2009 	strb.w	r2, [sp, #9]
   1d3ac:	7882      	ldrb	r2, [r0, #2]
   1d3ae:	f88d 200a 	strb.w	r2, [sp, #10]
   1d3b2:	79c2      	ldrb	r2, [r0, #7]
   1d3b4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d3b8:	7b02      	ldrb	r2, [r0, #12]
   1d3ba:	f88d 200c 	strb.w	r2, [sp, #12]
   1d3be:	7842      	ldrb	r2, [r0, #1]
   1d3c0:	7ac3      	ldrb	r3, [r0, #11]
   1d3c2:	f88d 200d 	strb.w	r2, [sp, #13]
   1d3c6:	7982      	ldrb	r2, [r0, #6]
   1d3c8:	f88d 200e 	strb.w	r2, [sp, #14]
   1d3cc:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d3d0:	2310      	movs	r3, #16
   1d3d2:	466a      	mov	r2, sp
   1d3d4:	4619      	mov	r1, r3
   1d3d6:	f7ff ff6d 	bl	1d2b4 <_copy>
}
   1d3da:	b005      	add	sp, #20
   1d3dc:	f85d fb04 	ldr.w	pc, [sp], #4

0001d3e0 <mult_row_column>:
{
   1d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3e2:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d3e4:	7808      	ldrb	r0, [r1, #0]
{
   1d3e6:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d3e8:	f7ff ff73 	bl	1d2d2 <_double_byte>
   1d3ec:	4605      	mov	r5, r0
   1d3ee:	7860      	ldrb	r0, [r4, #1]
   1d3f0:	f7ff ff6f 	bl	1d2d2 <_double_byte>
   1d3f4:	78a2      	ldrb	r2, [r4, #2]
   1d3f6:	7863      	ldrb	r3, [r4, #1]
   1d3f8:	4053      	eors	r3, r2
   1d3fa:	78e2      	ldrb	r2, [r4, #3]
   1d3fc:	4053      	eors	r3, r2
   1d3fe:	405d      	eors	r5, r3
   1d400:	4045      	eors	r5, r0
   1d402:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d404:	7860      	ldrb	r0, [r4, #1]
   1d406:	7827      	ldrb	r7, [r4, #0]
   1d408:	f7ff ff63 	bl	1d2d2 <_double_byte>
   1d40c:	4605      	mov	r5, r0
   1d40e:	78a0      	ldrb	r0, [r4, #2]
   1d410:	f7ff ff5f 	bl	1d2d2 <_double_byte>
   1d414:	78a3      	ldrb	r3, [r4, #2]
   1d416:	405f      	eors	r7, r3
   1d418:	78e3      	ldrb	r3, [r4, #3]
   1d41a:	405f      	eors	r7, r3
   1d41c:	407d      	eors	r5, r7
   1d41e:	4045      	eors	r5, r0
   1d420:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d422:	78a0      	ldrb	r0, [r4, #2]
   1d424:	7865      	ldrb	r5, [r4, #1]
   1d426:	7827      	ldrb	r7, [r4, #0]
   1d428:	f7ff ff53 	bl	1d2d2 <_double_byte>
   1d42c:	406f      	eors	r7, r5
   1d42e:	4605      	mov	r5, r0
   1d430:	78e0      	ldrb	r0, [r4, #3]
   1d432:	f7ff ff4e 	bl	1d2d2 <_double_byte>
   1d436:	78e3      	ldrb	r3, [r4, #3]
   1d438:	405f      	eors	r7, r3
   1d43a:	407d      	eors	r5, r7
   1d43c:	4045      	eors	r5, r0
   1d43e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d440:	7820      	ldrb	r0, [r4, #0]
   1d442:	f7ff ff46 	bl	1d2d2 <_double_byte>
   1d446:	7863      	ldrb	r3, [r4, #1]
   1d448:	7825      	ldrb	r5, [r4, #0]
   1d44a:	405d      	eors	r5, r3
   1d44c:	78a3      	ldrb	r3, [r4, #2]
   1d44e:	405d      	eors	r5, r3
   1d450:	4045      	eors	r5, r0
   1d452:	78e0      	ldrb	r0, [r4, #3]
   1d454:	f7ff ff3d 	bl	1d2d2 <_double_byte>
   1d458:	b2ed      	uxtb	r5, r5
   1d45a:	4045      	eors	r5, r0
   1d45c:	70f5      	strb	r5, [r6, #3]
}
   1d45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d460 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1d460:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d462:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1d464:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d466:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1d46a:	2b00      	cmp	r3, #0
   1d46c:	bfb4      	ite	lt
   1d46e:	2387      	movlt	r3, #135	; 0x87
   1d470:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d472:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d476:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d47a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d47c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d480:	d002      	beq.n	1d488 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d482:	7813      	ldrb	r3, [r2, #0]
   1d484:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d486:	e7f4      	b.n	1d472 <gf_double+0x12>
	}
}
   1d488:	bd10      	pop	{r4, pc}

0001d48a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d48a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d48c:	b120      	cbz	r0, 1d498 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d48e:	2258      	movs	r2, #88	; 0x58
   1d490:	2100      	movs	r1, #0
   1d492:	f7ff ff1c 	bl	1d2ce <_set>
   1d496:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d498:	bd08      	pop	{r3, pc}

0001d49a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d49a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d49c:	4604      	mov	r4, r0
   1d49e:	b188      	cbz	r0, 1d4c4 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d4a0:	2210      	movs	r2, #16
   1d4a2:	2100      	movs	r1, #0
   1d4a4:	f7ff ff13 	bl	1d2ce <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d4a8:	2210      	movs	r2, #16
   1d4aa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d4ae:	2100      	movs	r1, #0
   1d4b0:	f7ff ff0d 	bl	1d2ce <_set>
	s->leftover_offset = 0;
   1d4b4:	2300      	movs	r3, #0
   1d4b6:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d4b8:	2200      	movs	r2, #0
   1d4ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d4be:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1d4c2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d4c4:	bd10      	pop	{r4, pc}

0001d4c6 <tc_cmac_setup>:
{
   1d4c6:	b570      	push	{r4, r5, r6, lr}
   1d4c8:	460d      	mov	r5, r1
   1d4ca:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d4cc:	4604      	mov	r4, r0
   1d4ce:	b310      	cbz	r0, 1d516 <tc_cmac_setup+0x50>
   1d4d0:	b311      	cbz	r1, 1d518 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d4d2:	2258      	movs	r2, #88	; 0x58
   1d4d4:	2100      	movs	r1, #0
   1d4d6:	f7ff fefa 	bl	1d2ce <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d4da:	4629      	mov	r1, r5
	s->sched = sched;
   1d4dc:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d4de:	4630      	mov	r0, r6
   1d4e0:	f7f3 fe96 	bl	11210 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d4e4:	2210      	movs	r2, #16
   1d4e6:	2100      	movs	r1, #0
   1d4e8:	4620      	mov	r0, r4
   1d4ea:	f7ff fef0 	bl	1d2ce <_set>
	gf_double (s->K1, s->iv);
   1d4ee:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d4f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d4f4:	4621      	mov	r1, r4
   1d4f6:	4620      	mov	r0, r4
   1d4f8:	f7f3 fedc 	bl	112b4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d4fc:	4621      	mov	r1, r4
   1d4fe:	4628      	mov	r0, r5
   1d500:	f7ff ffae 	bl	1d460 <gf_double>
	gf_double (s->K2, s->K1);
   1d504:	4629      	mov	r1, r5
   1d506:	f104 0020 	add.w	r0, r4, #32
   1d50a:	f7ff ffa9 	bl	1d460 <gf_double>
	tc_cmac_init(s);
   1d50e:	4620      	mov	r0, r4
   1d510:	f7ff ffc3 	bl	1d49a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d514:	2001      	movs	r0, #1
}
   1d516:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d518:	4608      	mov	r0, r1
   1d51a:	e7fc      	b.n	1d516 <tc_cmac_setup+0x50>

0001d51c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d520:	460d      	mov	r5, r1
   1d522:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d524:	4604      	mov	r4, r0
   1d526:	2800      	cmp	r0, #0
   1d528:	d062      	beq.n	1d5f0 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d52a:	b912      	cbnz	r2, 1d532 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1d52c:	2001      	movs	r0, #1
}
   1d52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1d532:	2900      	cmp	r1, #0
   1d534:	d05c      	beq.n	1d5f0 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1d536:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1d53a:	ea50 0301 	orrs.w	r3, r0, r1
   1d53e:	d057      	beq.n	1d5f0 <tc_cmac_update+0xd4>
	s->countdown--;
   1d540:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   1d544:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1d548:	f141 33ff 	adc.w	r3, r1, #4294967295
   1d54c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d550:	f1b8 0f00 	cmp.w	r8, #0
   1d554:	d02a      	beq.n	1d5ac <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d556:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1d55a:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1d55e:	42be      	cmp	r6, r7
   1d560:	4420      	add	r0, r4
   1d562:	d208      	bcs.n	1d576 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d564:	462a      	mov	r2, r5
   1d566:	4633      	mov	r3, r6
   1d568:	4631      	mov	r1, r6
   1d56a:	f7ff fea3 	bl	1d2b4 <_copy>
			s->leftover_offset += data_length;
   1d56e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1d570:	4432      	add	r2, r6
   1d572:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1d574:	e7da      	b.n	1d52c <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1d576:	463b      	mov	r3, r7
   1d578:	462a      	mov	r2, r5
   1d57a:	4639      	mov	r1, r7
   1d57c:	f7ff fe9a 	bl	1d2b4 <_copy>
		data_length -= remaining_space;
   1d580:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1d582:	2300      	movs	r3, #0
   1d584:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1d586:	4446      	add	r6, r8
		data += remaining_space;
   1d588:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d58a:	1e63      	subs	r3, r4, #1
   1d58c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1d590:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d594:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d598:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1d59a:	ea82 0200 	eor.w	r2, r2, r0
   1d59e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d5a0:	d1f6      	bne.n	1d590 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d5a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d5a4:	4621      	mov	r1, r4
   1d5a6:	4620      	mov	r0, r4
   1d5a8:	f7f3 fe84 	bl	112b4 <tc_aes_encrypt>
   1d5ac:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1d5b0:	2e10      	cmp	r6, #16
   1d5b2:	d80a      	bhi.n	1d5ca <tc_cmac_update+0xae>
	if (data_length > 0) {
   1d5b4:	2e00      	cmp	r6, #0
   1d5b6:	d0b9      	beq.n	1d52c <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1d5b8:	4633      	mov	r3, r6
   1d5ba:	462a      	mov	r2, r5
   1d5bc:	4631      	mov	r1, r6
   1d5be:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d5c2:	f7ff fe77 	bl	1d2b4 <_copy>
		s->leftover_offset = data_length;
   1d5c6:	6466      	str	r6, [r4, #68]	; 0x44
   1d5c8:	e7b0      	b.n	1d52c <tc_cmac_update+0x10>
   1d5ca:	1e63      	subs	r3, r4, #1
   1d5cc:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1d5ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d5d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d5d6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1d5d8:	ea82 0200 	eor.w	r2, r2, r0
   1d5dc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d5de:	d1f6      	bne.n	1d5ce <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d5e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d5e2:	4621      	mov	r1, r4
   1d5e4:	4620      	mov	r0, r4
   1d5e6:	f7f3 fe65 	bl	112b4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1d5ea:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1d5ec:	3e10      	subs	r6, #16
   1d5ee:	e7df      	b.n	1d5b0 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1d5f0:	2000      	movs	r0, #0
   1d5f2:	e79c      	b.n	1d52e <tc_cmac_update+0x12>

0001d5f4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1d5f4:	b570      	push	{r4, r5, r6, lr}
   1d5f6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d5f8:	4605      	mov	r5, r0
   1d5fa:	b1e8      	cbz	r0, 1d638 <tc_cmac_final+0x44>
   1d5fc:	b369      	cbz	r1, 1d65a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1d5fe:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1d600:	2a10      	cmp	r2, #16
   1d602:	d11a      	bne.n	1d63a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1d604:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d606:	1e63      	subs	r3, r4, #1
   1d608:	3901      	subs	r1, #1
   1d60a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d60e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d612:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1d616:	4072      	eors	r2, r6
   1d618:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d61c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d61e:	ea82 0206 	eor.w	r2, r2, r6
   1d622:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d624:	d1f3      	bne.n	1d60e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1d626:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d628:	4621      	mov	r1, r4
   1d62a:	4628      	mov	r0, r5
   1d62c:	f7f3 fe42 	bl	112b4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1d630:	4620      	mov	r0, r4
   1d632:	f7ff ff2a 	bl	1d48a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1d636:	2001      	movs	r0, #1
}
   1d638:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1d63a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1d63e:	2100      	movs	r1, #0
   1d640:	f1c2 0210 	rsb	r2, r2, #16
   1d644:	4420      	add	r0, r4
   1d646:	f7ff fe42 	bl	1d2ce <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d64a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d64c:	4423      	add	r3, r4
   1d64e:	2280      	movs	r2, #128	; 0x80
   1d650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1d654:	f104 0120 	add.w	r1, r4, #32
   1d658:	e7d5      	b.n	1d606 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1d65a:	4608      	mov	r0, r1
   1d65c:	e7ec      	b.n	1d638 <tc_cmac_final+0x44>

0001d65e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1d65e:	f7fb baf5 	b.w	18c4c <z_fatal_error>

0001d662 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d662:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1d664:	6800      	ldr	r0, [r0, #0]
   1d666:	f7fb baf1 	b.w	18c4c <z_fatal_error>

0001d66a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1d66a:	2100      	movs	r1, #0
   1d66c:	2001      	movs	r0, #1
   1d66e:	f7ff bff6 	b.w	1d65e <z_arm_fatal_error>

0001d672 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d672:	b508      	push	{r3, lr}
	handler();
   1d674:	f7f3 ff1e 	bl	114b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1d678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1d67c:	f7f3 bffa 	b.w	11674 <z_arm_exc_exit>

0001d680 <_stdout_hook_default>:
}
   1d680:	f04f 30ff 	mov.w	r0, #4294967295
   1d684:	4770      	bx	lr

0001d686 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1d686:	b084      	sub	sp, #16
   1d688:	ab04      	add	r3, sp, #16
   1d68a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1d68e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d692:	2b06      	cmp	r3, #6
   1d694:	d108      	bne.n	1d6a8 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1d696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d69a:	2201      	movs	r2, #1
   1d69c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1d6a0:	f3bf 8f4f 	dsb	sy
        __WFE();
   1d6a4:	bf20      	wfe
    while (true)
   1d6a6:	e7fd      	b.n	1d6a4 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1d6a8:	b004      	add	sp, #16
   1d6aa:	4770      	bx	lr

0001d6ac <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1d6ac:	b084      	sub	sp, #16
   1d6ae:	ab04      	add	r3, sp, #16
   1d6b0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1d6b4:	2300      	movs	r3, #0
   1d6b6:	f383 8811 	msr	BASEPRI, r3
   1d6ba:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1d6be:	b004      	add	sp, #16
   1d6c0:	4770      	bx	lr

0001d6c2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1d6c2:	b510      	push	{r4, lr}
   1d6c4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1d6c6:	7801      	ldrb	r1, [r0, #0]
   1d6c8:	7822      	ldrb	r2, [r4, #0]
   1d6ca:	428a      	cmp	r2, r1
{
   1d6cc:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1d6ce:	d00e      	beq.n	1d6ee <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1d6d0:	4669      	mov	r1, sp
   1d6d2:	f7f4 fb6b 	bl	11dac <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1d6d6:	a905      	add	r1, sp, #20
   1d6d8:	4620      	mov	r0, r4
   1d6da:	f7f4 fb67 	bl	11dac <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1d6de:	2210      	movs	r2, #16
   1d6e0:	f10d 0115 	add.w	r1, sp, #21
   1d6e4:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1d6e8:	f002 fc61 	bl	1ffae <memcmp>
   1d6ec:	e007      	b.n	1d6fe <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1d6ee:	2a01      	cmp	r2, #1
   1d6f0:	d007      	beq.n	1d702 <bt_uuid_cmp+0x40>
   1d6f2:	2a02      	cmp	r2, #2
   1d6f4:	d008      	beq.n	1d708 <bt_uuid_cmp+0x46>
   1d6f6:	b95a      	cbnz	r2, 1d710 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1d6f8:	8840      	ldrh	r0, [r0, #2]
   1d6fa:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1d6fc:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1d6fe:	b00a      	add	sp, #40	; 0x28
   1d700:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1d702:	6840      	ldr	r0, [r0, #4]
   1d704:	6863      	ldr	r3, [r4, #4]
   1d706:	e7f9      	b.n	1d6fc <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1d708:	2210      	movs	r2, #16
   1d70a:	1c61      	adds	r1, r4, #1
   1d70c:	3001      	adds	r0, #1
   1d70e:	e7eb      	b.n	1d6e8 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1d710:	f06f 0015 	mvn.w	r0, #21
   1d714:	e7f3      	b.n	1d6fe <bt_uuid_cmp+0x3c>

0001d716 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1d716:	2a04      	cmp	r2, #4
{
   1d718:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   1d71a:	d00d      	beq.n	1d738 <bt_uuid_create+0x22>
   1d71c:	2a10      	cmp	r2, #16
   1d71e:	d019      	beq.n	1d754 <bt_uuid_create+0x3e>
   1d720:	2a02      	cmp	r2, #2
   1d722:	f04f 0300 	mov.w	r3, #0
   1d726:	d121      	bne.n	1d76c <bt_uuid_create+0x56>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1d728:	7003      	strb	r3, [r0, #0]
   1d72a:	784a      	ldrb	r2, [r1, #1]
   1d72c:	780b      	ldrb	r3, [r1, #0]
   1d72e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1d732:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1d734:	2001      	movs	r0, #1
}
   1d736:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1d738:	2301      	movs	r3, #1
   1d73a:	7003      	strb	r3, [r0, #0]
   1d73c:	788a      	ldrb	r2, [r1, #2]
   1d73e:	78cc      	ldrb	r4, [r1, #3]
   1d740:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1d742:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1d746:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1d748:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1d74c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1d750:	6042      	str	r2, [r0, #4]
		break;
   1d752:	e7ef      	b.n	1d734 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   1d754:	2302      	movs	r3, #2
   1d756:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d75a:	f101 0310 	add.w	r3, r1, #16
   1d75e:	f851 2b04 	ldr.w	r2, [r1], #4
   1d762:	f840 2b04 	str.w	r2, [r0], #4
   1d766:	4299      	cmp	r1, r3
   1d768:	d1f9      	bne.n	1d75e <bt_uuid_create+0x48>
   1d76a:	e7e3      	b.n	1d734 <bt_uuid_create+0x1e>
	switch (data_len) {
   1d76c:	4618      	mov	r0, r3
   1d76e:	e7e2      	b.n	1d736 <bt_uuid_create+0x20>

0001d770 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1d770:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1d772:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1d774:	2106      	movs	r1, #6
{
   1d776:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1d778:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1d77c:	f7fa ff72 	bl	18664 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1d780:	b918      	cbnz	r0, 1d78a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1d782:	79a3      	ldrb	r3, [r4, #6]
   1d784:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d788:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1d78a:	bd10      	pop	{r4, pc}

0001d78c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1d78c:	280f      	cmp	r0, #15
   1d78e:	d806      	bhi.n	1d79e <bt_hci_evt_get_flags+0x12>
   1d790:	280d      	cmp	r0, #13
   1d792:	d80b      	bhi.n	1d7ac <bt_hci_evt_get_flags+0x20>
   1d794:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1d796:	bf14      	ite	ne
   1d798:	2002      	movne	r0, #2
   1d79a:	2003      	moveq	r0, #3
   1d79c:	4770      	bx	lr
	switch (evt) {
   1d79e:	2813      	cmp	r0, #19
   1d7a0:	d004      	beq.n	1d7ac <bt_hci_evt_get_flags+0x20>
   1d7a2:	281a      	cmp	r0, #26
   1d7a4:	bf14      	ite	ne
   1d7a6:	2002      	movne	r0, #2
   1d7a8:	2001      	moveq	r0, #1
   1d7aa:	4770      	bx	lr
   1d7ac:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1d7ae:	4770      	bx	lr

0001d7b0 <handle_event>:
{
   1d7b0:	b410      	push	{r4}
   1d7b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1d7b6:	4604      	mov	r4, r0
   1d7b8:	4608      	mov	r0, r1
		if (handler->event != event) {
   1d7ba:	7811      	ldrb	r1, [r2, #0]
   1d7bc:	42a1      	cmp	r1, r4
   1d7be:	d004      	beq.n	1d7ca <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1d7c0:	3208      	adds	r2, #8
   1d7c2:	429a      	cmp	r2, r3
   1d7c4:	d1f9      	bne.n	1d7ba <handle_event+0xa>
}
   1d7c6:	bc10      	pop	{r4}
   1d7c8:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1d7ca:	8981      	ldrh	r1, [r0, #12]
   1d7cc:	7853      	ldrb	r3, [r2, #1]
   1d7ce:	4299      	cmp	r1, r3
   1d7d0:	d3f9      	bcc.n	1d7c6 <handle_event+0x16>
		handler->handler(buf);
   1d7d2:	6853      	ldr	r3, [r2, #4]
}
   1d7d4:	bc10      	pop	{r4}
		handler->handler(buf);
   1d7d6:	4718      	bx	r3

0001d7d8 <hci_data_buf_overflow>:
}
   1d7d8:	4770      	bx	lr

0001d7da <le_data_len_change>:
{
   1d7da:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1d7dc:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d7de:	8818      	ldrh	r0, [r3, #0]
   1d7e0:	f7f6 f91e 	bl	13a20 <bt_conn_lookup_handle>
	if (!conn) {
   1d7e4:	b118      	cbz	r0, 1d7ee <le_data_len_change+0x14>
}
   1d7e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1d7ea:	f7f6 b8ef 	b.w	139cc <bt_conn_unref>
}
   1d7ee:	bd08      	pop	{r3, pc}

0001d7f0 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1d7f0:	2101      	movs	r1, #1
   1d7f2:	3008      	adds	r0, #8
   1d7f4:	f7f8 be20 	b.w	16438 <net_buf_simple_pull_mem>

0001d7f8 <bt_addr_le_copy>:
   1d7f8:	680b      	ldr	r3, [r1, #0]
   1d7fa:	6003      	str	r3, [r0, #0]
   1d7fc:	888b      	ldrh	r3, [r1, #4]
   1d7fe:	8083      	strh	r3, [r0, #4]
   1d800:	798b      	ldrb	r3, [r1, #6]
   1d802:	7183      	strb	r3, [r0, #6]
}
   1d804:	4770      	bx	lr

0001d806 <bt_addr_copy>:
   1d806:	680b      	ldr	r3, [r1, #0]
   1d808:	6003      	str	r3, [r0, #0]
   1d80a:	888b      	ldrh	r3, [r1, #4]
   1d80c:	8083      	strh	r3, [r0, #4]
}
   1d80e:	4770      	bx	lr

0001d810 <hci_vendor_event>:
   1d810:	4770      	bx	lr

0001d812 <hci_num_completed_packets>:
{
   1d812:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   1d816:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1d818:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   1d81a:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1d81c:	783b      	ldrb	r3, [r7, #0]
   1d81e:	429d      	cmp	r5, r3
   1d820:	db01      	blt.n	1d826 <hci_num_completed_packets+0x14>
}
   1d822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1d826:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   1d82a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1d82e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1d832:	f7f6 f8f5 	bl	13a20 <bt_conn_lookup_handle>
		if (!conn) {
   1d836:	4604      	mov	r4, r0
   1d838:	b350      	cbz	r0, 1d890 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   1d83a:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   1d83e:	b326      	cbz	r6, 1d88a <hci_num_completed_packets+0x78>
	__asm__ volatile(
   1d840:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d844:	f3ef 8211 	mrs	r2, BASEPRI
   1d848:	f383 8812 	msr	BASEPRI_MAX, r3
   1d84c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1d850:	69e3      	ldr	r3, [r4, #28]
   1d852:	b16b      	cbz	r3, 1d870 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   1d854:	3b01      	subs	r3, #1
   1d856:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1d858:	f382 8811 	msr	BASEPRI, r2
   1d85c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1d860:	4620      	mov	r0, r4
   1d862:	f7f5 ffbf 	bl	137e4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1d866:	3e01      	subs	r6, #1
   1d868:	f7fc f9e0 	bl	19c2c <z_impl_k_sem_give>
   1d86c:	b2b6      	uxth	r6, r6
   1d86e:	e7e6      	b.n	1d83e <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   1d870:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1d872:	b12b      	cbz	r3, 1d880 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d874:	69a1      	ldr	r1, [r4, #24]
   1d876:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1d878:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d87a:	428b      	cmp	r3, r1
	list->tail = node;
   1d87c:	bf08      	it	eq
   1d87e:	61a0      	streq	r0, [r4, #24]
   1d880:	f382 8811 	msr	BASEPRI, r2
   1d884:	f3bf 8f6f 	isb	sy
			if (!node) {
   1d888:	b923      	cbnz	r3, 1d894 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1d88a:	4620      	mov	r0, r4
   1d88c:	f7f6 f89e 	bl	139cc <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1d890:	3501      	adds	r5, #1
   1d892:	e7c3      	b.n	1d81c <hci_num_completed_packets+0xa>
	__asm__ volatile(
   1d894:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d898:	f3ef 8111 	mrs	r1, BASEPRI
   1d89c:	f382 8812 	msr	BASEPRI_MAX, r2
   1d8a0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1d8a4:	68da      	ldr	r2, [r3, #12]
   1d8a6:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   1d8a8:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   1d8ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1d8ae:	f8c3 800c 	str.w	r8, [r3, #12]
   1d8b2:	b94a      	cbnz	r2, 1d8c8 <hci_num_completed_packets+0xb6>
	list->head = node;
   1d8b4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1d8b8:	f381 8811 	msr	BASEPRI, r1
   1d8bc:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1d8c0:	4648      	mov	r0, r9
   1d8c2:	f7fc fd13 	bl	1a2ec <k_work_submit>
   1d8c6:	e7cb      	b.n	1d860 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1d8c8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1d8ca:	6263      	str	r3, [r4, #36]	; 0x24
}
   1d8cc:	e7f4      	b.n	1d8b8 <hci_num_completed_packets+0xa6>

0001d8ce <hci_disconn_complete>:
{
   1d8ce:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1d8d0:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1d8d2:	7835      	ldrb	r5, [r6, #0]
   1d8d4:	bb0d      	cbnz	r5, 1d91a <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   1d8d6:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1d8da:	f7f6 f8a1 	bl	13a20 <bt_conn_lookup_handle>
	if (!conn) {
   1d8de:	4604      	mov	r4, r0
   1d8e0:	b1d8      	cbz	r0, 1d91a <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   1d8e2:	78f3      	ldrb	r3, [r6, #3]
   1d8e4:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1d8e6:	4629      	mov	r1, r5
   1d8e8:	f7f6 f8a6 	bl	13a38 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   1d8ec:	78a3      	ldrb	r3, [r4, #2]
   1d8ee:	2b01      	cmp	r3, #1
   1d8f0:	d004      	beq.n	1d8fc <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   1d8f2:	4620      	mov	r0, r4
}
   1d8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1d8f8:	f7f6 b868 	b.w	139cc <bt_conn_unref>
   1d8fc:	f3bf 8f5b 	dmb	ish
   1d900:	6863      	ldr	r3, [r4, #4]
   1d902:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1d906:	07db      	lsls	r3, r3, #31
   1d908:	d5f3      	bpl.n	1d8f2 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1d90a:	4620      	mov	r0, r4
   1d90c:	2102      	movs	r1, #2
   1d90e:	f7f6 f893 	bl	13a38 <bt_conn_set_state>
		bt_le_scan_update(false);
   1d912:	4628      	mov	r0, r5
   1d914:	f7f5 fca4 	bl	13260 <bt_le_scan_update>
   1d918:	e7eb      	b.n	1d8f2 <hci_disconn_complete+0x24>
}
   1d91a:	bd70      	pop	{r4, r5, r6, pc}

0001d91c <le_conn_update_complete>:
{
   1d91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1d91e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1d920:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1d924:	f7f6 f87c 	bl	13a20 <bt_conn_lookup_handle>
	if (!conn) {
   1d928:	4604      	mov	r4, r0
   1d92a:	b1c0      	cbz	r0, 1d95e <le_conn_update_complete+0x42>
	if (!evt->status) {
   1d92c:	782b      	ldrb	r3, [r5, #0]
   1d92e:	b9c3      	cbnz	r3, 1d962 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1d930:	792a      	ldrb	r2, [r5, #4]
   1d932:	78eb      	ldrb	r3, [r5, #3]
   1d934:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d938:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1d93c:	79aa      	ldrb	r2, [r5, #6]
   1d93e:	796b      	ldrb	r3, [r5, #5]
   1d940:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d944:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1d948:	79eb      	ldrb	r3, [r5, #7]
   1d94a:	7a2a      	ldrb	r2, [r5, #8]
   1d94c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d950:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   1d954:	f7f6 f98c 	bl	13c70 <notify_le_param_updated>
	bt_conn_unref(conn);
   1d958:	4620      	mov	r0, r4
   1d95a:	f7f6 f837 	bl	139cc <bt_conn_unref>
}
   1d95e:	b003      	add	sp, #12
   1d960:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1d962:	2b1a      	cmp	r3, #26
   1d964:	d1f8      	bne.n	1d958 <le_conn_update_complete+0x3c>
   1d966:	78c3      	ldrb	r3, [r0, #3]
   1d968:	2b01      	cmp	r3, #1
   1d96a:	d1f5      	bne.n	1d958 <le_conn_update_complete+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d96c:	f3bf 8f5b 	dmb	ish
   1d970:	1d03      	adds	r3, r0, #4
   1d972:	e853 2f00 	ldrex	r2, [r3]
   1d976:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1d97a:	e843 1500 	strex	r5, r1, [r3]
   1d97e:	2d00      	cmp	r5, #0
   1d980:	d1f7      	bne.n	1d972 <le_conn_update_complete+0x56>
   1d982:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1d986:	0553      	lsls	r3, r2, #21
   1d988:	d4e6      	bmi.n	1d958 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1d98a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1d98e:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1d990:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1d992:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1d996:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1d998:	f7f6 fd1a 	bl	143d0 <bt_l2cap_update_conn_param>
   1d99c:	e7dc      	b.n	1d958 <le_conn_update_complete+0x3c>

0001d99e <hci_le_read_max_data_len>:
{
   1d99e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d9a0:	4606      	mov	r6, r0
   1d9a2:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1d9a4:	aa01      	add	r2, sp, #4
   1d9a6:	2100      	movs	r1, #0
   1d9a8:	f242 002f 	movw	r0, #8239	; 0x202f
   1d9ac:	f7f4 fc60 	bl	12270 <bt_hci_cmd_send_sync>
	if (err) {
   1d9b0:	4604      	mov	r4, r0
   1d9b2:	b948      	cbnz	r0, 1d9c8 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1d9b4:	9801      	ldr	r0, [sp, #4]
   1d9b6:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1d9b8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1d9bc:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1d9be:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1d9c2:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1d9c4:	f7f8 fc2a 	bl	1621c <net_buf_unref>
}
   1d9c8:	4620      	mov	r0, r4
   1d9ca:	b002      	add	sp, #8
   1d9cc:	bd70      	pop	{r4, r5, r6, pc}

0001d9ce <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1d9ce:	f7f4 be73 	b.w	126b8 <bt_le_create_conn_legacy>

0001d9d2 <bt_hci_disconnect>:
{
   1d9d2:	b570      	push	{r4, r5, r6, lr}
   1d9d4:	4606      	mov	r6, r0
   1d9d6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1d9d8:	f240 4006 	movw	r0, #1030	; 0x406
   1d9dc:	2103      	movs	r1, #3
   1d9de:	f7f4 fbff 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   1d9e2:	4604      	mov	r4, r0
   1d9e4:	b168      	cbz	r0, 1da02 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1d9e6:	2103      	movs	r1, #3
   1d9e8:	3008      	adds	r0, #8
   1d9ea:	f7f8 fd47 	bl	1647c <net_buf_simple_add>
	disconn->reason = reason;
   1d9ee:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1d9f0:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1d9f2:	4621      	mov	r1, r4
   1d9f4:	2200      	movs	r2, #0
}
   1d9f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1d9fa:	f240 4006 	movw	r0, #1030	; 0x406
   1d9fe:	f7f4 bc37 	b.w	12270 <bt_hci_cmd_send_sync>
}
   1da02:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1da06:	bd70      	pop	{r4, r5, r6, pc}

0001da08 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1da08:	8802      	ldrh	r2, [r0, #0]
   1da0a:	8843      	ldrh	r3, [r0, #2]
   1da0c:	429a      	cmp	r2, r3
{
   1da0e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1da10:	d818      	bhi.n	1da44 <bt_le_conn_params_valid+0x3c>
   1da12:	2a05      	cmp	r2, #5
   1da14:	d916      	bls.n	1da44 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1da16:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1da1a:	d813      	bhi.n	1da44 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1da1c:	8884      	ldrh	r4, [r0, #4]
   1da1e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1da22:	d20f      	bcs.n	1da44 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1da24:	88c1      	ldrh	r1, [r0, #6]
   1da26:	f1a1 020a 	sub.w	r2, r1, #10
   1da2a:	b292      	uxth	r2, r2
   1da2c:	f640 4076 	movw	r0, #3190	; 0xc76
   1da30:	4282      	cmp	r2, r0
   1da32:	d807      	bhi.n	1da44 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1da34:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1da38:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1da3c:	bf34      	ite	cc
   1da3e:	2001      	movcc	r0, #1
   1da40:	2000      	movcs	r0, #0
}
   1da42:	bd10      	pop	{r4, pc}
		return false;
   1da44:	2000      	movs	r0, #0
   1da46:	e7fc      	b.n	1da42 <bt_le_conn_params_valid+0x3a>

0001da48 <bt_le_set_data_len>:
{
   1da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da4a:	4607      	mov	r7, r0
   1da4c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1da4e:	f242 0022 	movw	r0, #8226	; 0x2022
   1da52:	2106      	movs	r1, #6
{
   1da54:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1da56:	f7f4 fbc3 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   1da5a:	4604      	mov	r4, r0
   1da5c:	b170      	cbz	r0, 1da7c <bt_le_set_data_len+0x34>
   1da5e:	2106      	movs	r1, #6
   1da60:	3008      	adds	r0, #8
   1da62:	f7f8 fd0b 	bl	1647c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1da66:	883b      	ldrh	r3, [r7, #0]
   1da68:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1da6a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1da6c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1da6e:	4621      	mov	r1, r4
   1da70:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1da74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1da78:	f7f4 bea6 	b.w	127c8 <bt_hci_cmd_send>
}
   1da7c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1da80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001da82 <bt_le_set_phy>:
{
   1da82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1da86:	4680      	mov	r8, r0
   1da88:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1da8a:	f242 0032 	movw	r0, #8242	; 0x2032
   1da8e:	2107      	movs	r1, #7
{
   1da90:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1da94:	4616      	mov	r6, r2
   1da96:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1da98:	f7f4 fba2 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   1da9c:	4604      	mov	r4, r0
   1da9e:	b190      	cbz	r0, 1dac6 <bt_le_set_phy+0x44>
   1daa0:	2107      	movs	r1, #7
   1daa2:	3008      	adds	r0, #8
   1daa4:	f7f8 fcea 	bl	1647c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1daa8:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1daac:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1daae:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1dab0:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1dab2:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1dab4:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1dab8:	4621      	mov	r1, r4
   1daba:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1dabe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1dac2:	f7f4 be81 	b.w	127c8 <bt_hci_cmd_send>
}
   1dac6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1daca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001dace <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1dace:	6880      	ldr	r0, [r0, #8]
   1dad0:	f7f4 bf02 	b.w	128d8 <bt_hci_le_enh_conn_complete>

0001dad4 <le_legacy_conn_complete>:
{
   1dad4:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1dad6:	6881      	ldr	r1, [r0, #8]
{
   1dad8:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   1dada:	780b      	ldrb	r3, [r1, #0]
   1dadc:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1dae0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1dae4:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1dae8:	78cb      	ldrb	r3, [r1, #3]
   1daea:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1daee:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1daf2:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1daf6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1dafa:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1dafe:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1db02:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1db06:	7c4b      	ldrb	r3, [r1, #17]
   1db08:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1db0c:	a803      	add	r0, sp, #12
   1db0e:	3104      	adds	r1, #4
   1db10:	f7ff fe72 	bl	1d7f8 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1db14:	2200      	movs	r2, #0
   1db16:	4669      	mov	r1, sp
   1db18:	f10d 0013 	add.w	r0, sp, #19
   1db1c:	9200      	str	r2, [sp, #0]
   1db1e:	f8ad 2004 	strh.w	r2, [sp, #4]
   1db22:	f7ff fe70 	bl	1d806 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1db26:	4669      	mov	r1, sp
   1db28:	f10d 0019 	add.w	r0, sp, #25
   1db2c:	9200      	str	r2, [sp, #0]
   1db2e:	f8ad 2004 	strh.w	r2, [sp, #4]
   1db32:	f7ff fe68 	bl	1d806 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1db36:	a802      	add	r0, sp, #8
   1db38:	f7f4 fece 	bl	128d8 <bt_hci_le_enh_conn_complete>
}
   1db3c:	b00b      	add	sp, #44	; 0x2c
   1db3e:	f85d fb04 	ldr.w	pc, [sp], #4

0001db42 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1db42:	6883      	ldr	r3, [r0, #8]
{
   1db44:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   1db46:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1db4a:	f7f5 ff69 	bl	13a20 <bt_conn_lookup_handle>
	if (!conn) {
   1db4e:	4604      	mov	r4, r0
   1db50:	b310      	cbz	r0, 1db98 <le_phy_update_complete+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1db52:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1db56:	1d03      	adds	r3, r0, #4
   1db58:	e853 2f00 	ldrex	r2, [r3]
   1db5c:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1db60:	e843 1c00 	strex	ip, r1, [r3]
   1db64:	f1bc 0f00 	cmp.w	ip, #0
   1db68:	d1f6      	bne.n	1db58 <le_phy_update_complete+0x16>
   1db6a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1db6e:	0612      	lsls	r2, r2, #24
   1db70:	d50d      	bpl.n	1db8e <le_phy_update_complete+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1db72:	f3bf 8f5b 	dmb	ish
   1db76:	e853 2f00 	ldrex	r2, [r3]
   1db7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1db7e:	e843 2100 	strex	r1, r2, [r3]
   1db82:	2900      	cmp	r1, #0
   1db84:	d1f7      	bne.n	1db76 <le_phy_update_complete+0x34>
   1db86:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   1db8a:	f7f4 fe3f 	bl	1280c <conn_auto_initiate>
	bt_conn_unref(conn);
   1db8e:	4620      	mov	r0, r4
}
   1db90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1db94:	f7f5 bf1a 	b.w	139cc <bt_conn_unref>
}
   1db98:	bd10      	pop	{r4, pc}

0001db9a <le_remote_feat_complete>:
{
   1db9a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1db9c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1db9e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1dba2:	f7f5 ff3d 	bl	13a20 <bt_conn_lookup_handle>
	if (!conn) {
   1dba6:	4604      	mov	r4, r0
   1dba8:	b1e8      	cbz	r0, 1dbe6 <le_remote_feat_complete+0x4c>
	if (!evt->status) {
   1dbaa:	782b      	ldrb	r3, [r5, #0]
   1dbac:	b933      	cbnz	r3, 1dbbc <le_remote_feat_complete+0x22>
   1dbae:	f855 3f03 	ldr.w	r3, [r5, #3]!
   1dbb2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   1dbb6:	686b      	ldr	r3, [r5, #4]
   1dbb8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   1dbbc:	1d23      	adds	r3, r4, #4
   1dbbe:	f3bf 8f5b 	dmb	ish
   1dbc2:	e853 2f00 	ldrex	r2, [r3]
   1dbc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1dbca:	e843 2100 	strex	r1, r2, [r3]
   1dbce:	2900      	cmp	r1, #0
   1dbd0:	d1f7      	bne.n	1dbc2 <le_remote_feat_complete+0x28>
   1dbd2:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   1dbd6:	4620      	mov	r0, r4
   1dbd8:	f7f4 fe18 	bl	1280c <conn_auto_initiate>
	bt_conn_unref(conn);
   1dbdc:	4620      	mov	r0, r4
}
   1dbde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1dbe2:	f7f5 bef3 	b.w	139cc <bt_conn_unref>
}
   1dbe6:	bd38      	pop	{r3, r4, r5, pc}

0001dbe8 <le_conn_param_neg_reply>:
{
   1dbe8:	b570      	push	{r4, r5, r6, lr}
   1dbea:	4606      	mov	r6, r0
   1dbec:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1dbee:	f242 0021 	movw	r0, #8225	; 0x2021
   1dbf2:	2103      	movs	r1, #3
   1dbf4:	f7f4 faf4 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   1dbf8:	4604      	mov	r4, r0
   1dbfa:	b160      	cbz	r0, 1dc16 <le_conn_param_neg_reply+0x2e>
   1dbfc:	2103      	movs	r1, #3
   1dbfe:	3008      	adds	r0, #8
   1dc00:	f7f8 fc3c 	bl	1647c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1dc04:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1dc06:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1dc08:	4621      	mov	r1, r4
   1dc0a:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1dc0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1dc12:	f7f4 bdd9 	b.w	127c8 <bt_hci_cmd_send>
}
   1dc16:	bd70      	pop	{r4, r5, r6, pc}

0001dc18 <le_conn_param_req>:
{
   1dc18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1dc1a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1dc1c:	78d9      	ldrb	r1, [r3, #3]
   1dc1e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1dc20:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1dc22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1dc26:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1dc2a:	7959      	ldrb	r1, [r3, #5]
   1dc2c:	791a      	ldrb	r2, [r3, #4]
   1dc2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1dc32:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1dc36:	799a      	ldrb	r2, [r3, #6]
   1dc38:	79d9      	ldrb	r1, [r3, #7]
   1dc3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1dc3e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1dc42:	7a1a      	ldrb	r2, [r3, #8]
   1dc44:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1dc46:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1dc48:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1dc4c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1dc4e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1dc52:	f7f5 fee5 	bl	13a20 <bt_conn_lookup_handle>
	if (!conn) {
   1dc56:	4606      	mov	r6, r0
   1dc58:	b928      	cbnz	r0, 1dc66 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1dc5a:	2102      	movs	r1, #2
   1dc5c:	4620      	mov	r0, r4
   1dc5e:	f7ff ffc3 	bl	1dbe8 <le_conn_param_neg_reply>
}
   1dc62:	b003      	add	sp, #12
   1dc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1dc66:	4669      	mov	r1, sp
   1dc68:	f7f6 f86a 	bl	13d40 <le_param_req>
   1dc6c:	b938      	cbnz	r0, 1dc7e <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1dc6e:	211e      	movs	r1, #30
   1dc70:	4620      	mov	r0, r4
   1dc72:	f7ff ffb9 	bl	1dbe8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1dc76:	4630      	mov	r0, r6
   1dc78:	f7f5 fea8 	bl	139cc <bt_conn_unref>
   1dc7c:	e7f1      	b.n	1dc62 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1dc7e:	210e      	movs	r1, #14
   1dc80:	f242 0020 	movw	r0, #8224	; 0x2020
   1dc84:	f7f4 faac 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   1dc88:	4605      	mov	r5, r0
   1dc8a:	2800      	cmp	r0, #0
   1dc8c:	d0f3      	beq.n	1dc76 <le_conn_param_req+0x5e>
   1dc8e:	210e      	movs	r1, #14
   1dc90:	3008      	adds	r0, #8
   1dc92:	f7f8 fbf3 	bl	1647c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1dc96:	220e      	movs	r2, #14
   1dc98:	4604      	mov	r4, r0
   1dc9a:	2100      	movs	r1, #0
   1dc9c:	f002 f9b6 	bl	2000c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1dca0:	f8bd 3000 	ldrh.w	r3, [sp]
   1dca4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1dca6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1dcaa:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1dcac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1dcb0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1dcb2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1dcb6:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1dcb8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1dcba:	4629      	mov	r1, r5
   1dcbc:	f242 0020 	movw	r0, #8224	; 0x2020
   1dcc0:	f7f4 fd82 	bl	127c8 <bt_hci_cmd_send>
   1dcc4:	e7d7      	b.n	1dc76 <le_conn_param_req+0x5e>

0001dcc6 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1dcc6:	2000      	movs	r0, #0
   1dcc8:	4770      	bx	lr

0001dcca <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   1dcca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dccc:	4604      	mov	r4, r0
   1dcce:	460e      	mov	r6, r1
   1dcd0:	4617      	mov	r7, r2
	while (ad->len > 1) {
   1dcd2:	88a3      	ldrh	r3, [r4, #4]
   1dcd4:	2b01      	cmp	r3, #1
   1dcd6:	d801      	bhi.n	1dcdc <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   1dcd8:	b003      	add	sp, #12
   1dcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   1dcdc:	4620      	mov	r0, r4
   1dcde:	f001 fb8a 	bl	1f3f6 <net_buf_simple_pull_u8>
		if (len == 0U) {
   1dce2:	4605      	mov	r5, r0
   1dce4:	2800      	cmp	r0, #0
   1dce6:	d0f7      	beq.n	1dcd8 <bt_data_parse+0xe>
		if (len > ad->len) {
   1dce8:	88a2      	ldrh	r2, [r4, #4]
   1dcea:	b283      	uxth	r3, r0
   1dcec:	429a      	cmp	r2, r3
   1dcee:	d3f3      	bcc.n	1dcd8 <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   1dcf0:	4620      	mov	r0, r4
   1dcf2:	f001 fb80 	bl	1f3f6 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   1dcf6:	3d01      	subs	r5, #1
		data.data = ad->data;
   1dcf8:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   1dcfa:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   1dcfe:	4639      	mov	r1, r7
   1dd00:	4668      	mov	r0, sp
		data.data_len = len - 1;
   1dd02:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   1dd06:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   1dd08:	47b0      	blx	r6
   1dd0a:	2800      	cmp	r0, #0
   1dd0c:	d0e4      	beq.n	1dcd8 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   1dd0e:	4629      	mov	r1, r5
   1dd10:	4620      	mov	r0, r4
   1dd12:	f7f8 fb71 	bl	163f8 <net_buf_simple_pull>
   1dd16:	e7dc      	b.n	1dcd2 <bt_data_parse+0x8>

0001dd18 <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1dd18:	680b      	ldr	r3, [r1, #0]
   1dd1a:	6003      	str	r3, [r0, #0]
   1dd1c:	888b      	ldrh	r3, [r1, #4]
   1dd1e:	8083      	strh	r3, [r0, #4]
   1dd20:	4770      	bx	lr

0001dd22 <bt_addr_le_copy>:
   1dd22:	680b      	ldr	r3, [r1, #0]
   1dd24:	6003      	str	r3, [r0, #0]
   1dd26:	888b      	ldrh	r3, [r1, #4]
   1dd28:	8083      	strh	r3, [r0, #4]
   1dd2a:	798b      	ldrb	r3, [r1, #6]
   1dd2c:	7183      	strb	r3, [r0, #6]
}
   1dd2e:	4770      	bx	lr

0001dd30 <bt_lookup_id_addr>:
}
   1dd30:	4608      	mov	r0, r1
   1dd32:	4770      	bx	lr

0001dd34 <bt_id_set_private_addr>:
{
   1dd34:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1dd36:	2106      	movs	r1, #6
   1dd38:	4668      	mov	r0, sp
   1dd3a:	f7fa fc93 	bl	18664 <bt_rand>
	if (err) {
   1dd3e:	b940      	cbnz	r0, 1dd52 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1dd40:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1dd44:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1dd46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1dd4a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1dd4e:	f7f5 f86f 	bl	12e30 <set_random_address>
}
   1dd52:	b003      	add	sp, #12
   1dd54:	f85d fb04 	ldr.w	pc, [sp], #4

0001dd58 <bt_id_scan_random_addr_check>:
}
   1dd58:	2001      	movs	r0, #1
   1dd5a:	4770      	bx	lr

0001dd5c <atomic_and>:
{
   1dd5c:	4603      	mov	r3, r0
}
   1dd5e:	f3bf 8f5b 	dmb	ish
   1dd62:	e853 0f00 	ldrex	r0, [r3]
   1dd66:	ea00 0201 	and.w	r2, r0, r1
   1dd6a:	e843 2c00 	strex	ip, r2, [r3]
   1dd6e:	f1bc 0f00 	cmp.w	ip, #0
   1dd72:	d1f6      	bne.n	1dd62 <atomic_and+0x6>
   1dd74:	f3bf 8f5b 	dmb	ish
   1dd78:	4770      	bx	lr

0001dd7a <bt_addr_le_copy>:
   1dd7a:	680b      	ldr	r3, [r1, #0]
   1dd7c:	6003      	str	r3, [r0, #0]
   1dd7e:	888b      	ldrh	r3, [r1, #4]
   1dd80:	8083      	strh	r3, [r0, #4]
   1dd82:	798b      	ldrb	r3, [r1, #6]
   1dd84:	7183      	strb	r3, [r0, #6]
   1dd86:	4770      	bx	lr

0001dd88 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dd88:	f3bf 8f5b 	dmb	ish
   1dd8c:	6800      	ldr	r0, [r0, #0]
   1dd8e:	f3bf 8f5b 	dmb	ish
}
   1dd92:	4770      	bx	lr

0001dd94 <bt_addr_le_copy>:
   1dd94:	680b      	ldr	r3, [r1, #0]
   1dd96:	6003      	str	r3, [r0, #0]
   1dd98:	888b      	ldrh	r3, [r1, #4]
   1dd9a:	8083      	strh	r3, [r0, #4]
   1dd9c:	798b      	ldrb	r3, [r1, #6]
   1dd9e:	7183      	strb	r3, [r0, #6]
   1dda0:	4770      	bx	lr

0001dda2 <tx_notify>:
{
   1dda2:	b570      	push	{r4, r5, r6, lr}
   1dda4:	4604      	mov	r4, r0
	__asm__ volatile(
   1dda6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ddaa:	f3ef 8311 	mrs	r3, BASEPRI
   1ddae:	f382 8812 	msr	BASEPRI_MAX, r2
   1ddb2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1ddb6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1ddb8:	b920      	cbnz	r0, 1ddc4 <tx_notify+0x22>
	__asm__ volatile(
   1ddba:	f383 8811 	msr	BASEPRI, r3
   1ddbe:	f3bf 8f6f 	isb	sy
}
   1ddc2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ddc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ddc6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ddc8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ddca:	4288      	cmp	r0, r1
	list->tail = node;
   1ddcc:	bf08      	it	eq
   1ddce:	6262      	streq	r2, [r4, #36]	; 0x24
   1ddd0:	f383 8811 	msr	BASEPRI, r3
   1ddd4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1ddd8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1dddc:	f7f5 fc16 	bl	1360c <tx_free>
		cb(conn, user_data);
   1dde0:	4631      	mov	r1, r6
   1dde2:	4620      	mov	r0, r4
   1dde4:	47a8      	blx	r5
	while (1) {
   1dde6:	e7de      	b.n	1dda6 <tx_notify+0x4>

0001dde8 <tx_complete_work>:
	tx_notify(conn);
   1dde8:	3828      	subs	r0, #40	; 0x28
   1ddea:	f7ff bfda 	b.w	1dda2 <tx_notify>

0001ddee <bt_conn_reset_rx_state>:
{
   1ddee:	b510      	push	{r4, lr}
   1ddf0:	4604      	mov	r4, r0
	if (!conn->rx) {
   1ddf2:	6900      	ldr	r0, [r0, #16]
   1ddf4:	b118      	cbz	r0, 1ddfe <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1ddf6:	f7f8 fa11 	bl	1621c <net_buf_unref>
	conn->rx = NULL;
   1ddfa:	2300      	movs	r3, #0
   1ddfc:	6123      	str	r3, [r4, #16]
}
   1ddfe:	bd10      	pop	{r4, pc}

0001de00 <bt_conn_recv>:
{
   1de00:	b570      	push	{r4, r5, r6, lr}
   1de02:	4616      	mov	r6, r2
   1de04:	4604      	mov	r4, r0
   1de06:	460d      	mov	r5, r1
	tx_notify(conn);
   1de08:	f7ff ffcb 	bl	1dda2 <tx_notify>
	switch (flags) {
   1de0c:	2e01      	cmp	r6, #1
   1de0e:	d01a      	beq.n	1de46 <bt_conn_recv+0x46>
   1de10:	2e02      	cmp	r6, #2
   1de12:	d11a      	bne.n	1de4a <bt_conn_recv+0x4a>
		if (conn->rx) {
   1de14:	6923      	ldr	r3, [r4, #16]
   1de16:	b113      	cbz	r3, 1de1e <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1de18:	4620      	mov	r0, r4
   1de1a:	f7ff ffe8 	bl	1ddee <bt_conn_reset_rx_state>
		conn->rx = buf;
   1de1e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1de20:	6921      	ldr	r1, [r4, #16]
   1de22:	898a      	ldrh	r2, [r1, #12]
   1de24:	2a01      	cmp	r2, #1
   1de26:	d93a      	bls.n	1de9e <bt_conn_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1de28:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1de2a:	7845      	ldrb	r5, [r0, #1]
   1de2c:	7803      	ldrb	r3, [r0, #0]
   1de2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1de32:	3304      	adds	r3, #4
   1de34:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1de36:	429a      	cmp	r2, r3
   1de38:	d331      	bcc.n	1de9e <bt_conn_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   1de3a:	d928      	bls.n	1de8e <bt_conn_recv+0x8e>
		bt_conn_reset_rx_state(conn);
   1de3c:	4620      	mov	r0, r4
}
   1de3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1de42:	f7ff bfd4 	b.w	1ddee <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1de46:	6920      	ldr	r0, [r4, #16]
   1de48:	b918      	cbnz	r0, 1de52 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1de4a:	4620      	mov	r0, r4
   1de4c:	f7ff ffcf 	bl	1ddee <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1de50:	e001      	b.n	1de56 <bt_conn_recv+0x56>
		if (!buf->len) {
   1de52:	89ae      	ldrh	r6, [r5, #12]
   1de54:	b926      	cbnz	r6, 1de60 <bt_conn_recv+0x60>
			net_buf_unref(buf);
   1de56:	4628      	mov	r0, r5
}
   1de58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1de5c:	f7f8 b9de 	b.w	1621c <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   1de60:	3008      	adds	r0, #8
   1de62:	f001 fadc 	bl	1f41e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1de66:	4286      	cmp	r6, r0
   1de68:	d907      	bls.n	1de7a <bt_conn_recv+0x7a>
			bt_l2cap_recv(conn, conn->rx, false);
   1de6a:	6921      	ldr	r1, [r4, #16]
   1de6c:	2200      	movs	r2, #0
   1de6e:	4620      	mov	r0, r4
   1de70:	f000 f9e2 	bl	1e238 <bt_l2cap_recv>
			conn->rx = NULL;
   1de74:	2300      	movs	r3, #0
   1de76:	6123      	str	r3, [r4, #16]
   1de78:	e7ed      	b.n	1de56 <bt_conn_recv+0x56>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1de7a:	6920      	ldr	r0, [r4, #16]
   1de7c:	89aa      	ldrh	r2, [r5, #12]
   1de7e:	68a9      	ldr	r1, [r5, #8]
   1de80:	3008      	adds	r0, #8
   1de82:	f001 fad4 	bl	1f42e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1de86:	4628      	mov	r0, r5
   1de88:	f7f8 f9c8 	bl	1621c <net_buf_unref>
		break;
   1de8c:	e7c8      	b.n	1de20 <bt_conn_recv+0x20>
	conn->rx = NULL;
   1de8e:	2300      	movs	r3, #0
   1de90:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1de92:	4620      	mov	r0, r4
   1de94:	2201      	movs	r2, #1
}
   1de96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1de9a:	f000 b9cd 	b.w	1e238 <bt_l2cap_recv>
}
   1de9e:	bd70      	pop	{r4, r5, r6, pc}

0001dea0 <bt_conn_ref>:
{
   1dea0:	b510      	push	{r4, lr}
   1dea2:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   1dea4:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   1dea8:	4610      	mov	r0, r2
   1deaa:	f7ff ff6d 	bl	1dd88 <atomic_get>
		if (!old) {
   1deae:	b180      	cbz	r0, 1ded2 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1deb0:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1deb4:	1c41      	adds	r1, r0, #1
   1deb6:	e852 4f00 	ldrex	r4, [r2]
   1deba:	4284      	cmp	r4, r0
   1debc:	d104      	bne.n	1dec8 <bt_conn_ref+0x28>
   1debe:	e842 1c00 	strex	ip, r1, [r2]
   1dec2:	f1bc 0f00 	cmp.w	ip, #0
   1dec6:	d1f6      	bne.n	1deb6 <bt_conn_ref+0x16>
   1dec8:	f3bf 8f5b 	dmb	ish
   1decc:	d1ec      	bne.n	1dea8 <bt_conn_ref+0x8>
}
   1dece:	4618      	mov	r0, r3
   1ded0:	bd10      	pop	{r4, pc}
			return NULL;
   1ded2:	4603      	mov	r3, r0
   1ded4:	e7fb      	b.n	1dece <bt_conn_ref+0x2e>

0001ded6 <conn_lookup_handle>:
{
   1ded6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1deda:	4607      	mov	r7, r0
   1dedc:	460e      	mov	r6, r1
   1dede:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1dee0:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1dee2:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1dee6:	42b4      	cmp	r4, r6
   1dee8:	d103      	bne.n	1def2 <conn_lookup_handle+0x1c>
	return NULL;
   1deea:	2300      	movs	r3, #0
}
   1deec:	4618      	mov	r0, r3
   1deee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1def2:	fb09 7004 	mla	r0, r9, r4, r7
   1def6:	f7ff ffd3 	bl	1dea0 <bt_conn_ref>
   1defa:	4603      	mov	r3, r0
		if (!conn) {
   1defc:	b158      	cbz	r0, 1df16 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1defe:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1df00:	2d01      	cmp	r5, #1
   1df02:	d002      	beq.n	1df0a <conn_lookup_handle+0x34>
   1df04:	3d07      	subs	r5, #7
   1df06:	2d01      	cmp	r5, #1
   1df08:	d803      	bhi.n	1df12 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1df0a:	881a      	ldrh	r2, [r3, #0]
   1df0c:	4542      	cmp	r2, r8
   1df0e:	d0ed      	beq.n	1deec <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1df10:	4618      	mov	r0, r3
   1df12:	f7f5 fd5b 	bl	139cc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1df16:	3401      	adds	r4, #1
   1df18:	e7e5      	b.n	1dee6 <conn_lookup_handle+0x10>

0001df1a <bt_conn_connected>:
{
   1df1a:	b510      	push	{r4, lr}
   1df1c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1df1e:	f7f6 f9e1 	bl	142e4 <bt_l2cap_connected>
	notify_connected(conn);
   1df22:	4620      	mov	r0, r4
}
   1df24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1df28:	f7f5 bb7a 	b.w	13620 <notify_connected>

0001df2c <bt_conn_get_security>:
}
   1df2c:	2001      	movs	r0, #1
   1df2e:	4770      	bx	lr

0001df30 <bt_conn_is_peer_addr_le>:
{
   1df30:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1df32:	7a03      	ldrb	r3, [r0, #8]
   1df34:	428b      	cmp	r3, r1
{
   1df36:	4604      	mov	r4, r0
   1df38:	4615      	mov	r5, r2
	if (id != conn->id) {
   1df3a:	d115      	bne.n	1df68 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1df3c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1df40:	2207      	movs	r2, #7
   1df42:	4628      	mov	r0, r5
   1df44:	f002 f833 	bl	1ffae <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1df48:	b180      	cbz	r0, 1df6c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1df4a:	78e3      	ldrb	r3, [r4, #3]
   1df4c:	2207      	movs	r2, #7
   1df4e:	b943      	cbnz	r3, 1df62 <bt_conn_is_peer_addr_le+0x32>
   1df50:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   1df54:	4628      	mov	r0, r5
   1df56:	f002 f82a 	bl	1ffae <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1df5a:	fab0 f080 	clz	r0, r0
   1df5e:	0940      	lsrs	r0, r0, #5
}
   1df60:	bd38      	pop	{r3, r4, r5, pc}
   1df62:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1df66:	e7f5      	b.n	1df54 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1df68:	2000      	movs	r0, #0
   1df6a:	e7f9      	b.n	1df60 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1df6c:	2001      	movs	r0, #1
   1df6e:	e7f7      	b.n	1df60 <bt_conn_is_peer_addr_le+0x30>

0001df70 <bt_conn_exists_le>:
{
   1df70:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1df72:	f7f5 ff55 	bl	13e20 <bt_conn_lookup_addr_le>
	if (conn) {
   1df76:	b110      	cbz	r0, 1df7e <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1df78:	f7f5 fd28 	bl	139cc <bt_conn_unref>
		return true;
   1df7c:	2001      	movs	r0, #1
}
   1df7e:	bd08      	pop	{r3, pc}

0001df80 <bt_conn_le_conn_update>:
{
   1df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df82:	4607      	mov	r7, r0
   1df84:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1df86:	f242 0013 	movw	r0, #8211	; 0x2013
   1df8a:	210e      	movs	r1, #14
   1df8c:	f7f4 f928 	bl	121e0 <bt_hci_cmd_create>
	if (!buf) {
   1df90:	4606      	mov	r6, r0
   1df92:	b1d0      	cbz	r0, 1dfca <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1df94:	210e      	movs	r1, #14
   1df96:	3008      	adds	r0, #8
   1df98:	f7f8 fa70 	bl	1647c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1df9c:	220e      	movs	r2, #14
   1df9e:	4604      	mov	r4, r0
   1dfa0:	2100      	movs	r1, #0
   1dfa2:	f002 f833 	bl	2000c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1dfa6:	883b      	ldrh	r3, [r7, #0]
   1dfa8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1dfaa:	882b      	ldrh	r3, [r5, #0]
   1dfac:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1dfae:	886b      	ldrh	r3, [r5, #2]
   1dfb0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1dfb2:	88ab      	ldrh	r3, [r5, #4]
   1dfb4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1dfb6:	88eb      	ldrh	r3, [r5, #6]
   1dfb8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1dfba:	4631      	mov	r1, r6
   1dfbc:	2200      	movs	r2, #0
}
   1dfbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1dfc2:	f242 0013 	movw	r0, #8211	; 0x2013
   1dfc6:	f7f4 b953 	b.w	12270 <bt_hci_cmd_send_sync>
}
   1dfca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dfd0 <l2cap_connected>:
}
   1dfd0:	4770      	bx	lr

0001dfd2 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1dfd2:	3010      	adds	r0, #16
   1dfd4:	f7fc bb2c 	b.w	1a630 <k_work_cancel_delayable>

0001dfd8 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dfda:	4607      	mov	r7, r0
   1dfdc:	460e      	mov	r6, r1
   1dfde:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1dfe0:	2300      	movs	r3, #0
   1dfe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1dfe6:	2104      	movs	r1, #4
   1dfe8:	2000      	movs	r0, #0
   1dfea:	f7f5 fe15 	bl	13c18 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1dfee:	4604      	mov	r4, r0
   1dff0:	b130      	cbz	r0, 1e000 <l2cap_create_le_sig_pdu.isra.0+0x28>
   1dff2:	2104      	movs	r1, #4
   1dff4:	3008      	adds	r0, #8
   1dff6:	f7f8 fa41 	bl	1647c <net_buf_simple_add>
	hdr->code = code;
   1dffa:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1dffc:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1dffe:	8045      	strh	r5, [r0, #2]
}
   1e000:	4620      	mov	r0, r4
   1e002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e004 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e004:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   1e006:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e008:	b17b      	cbz	r3, 1e02a <bt_l2cap_chan_remove+0x26>
   1e00a:	3b08      	subs	r3, #8
   1e00c:	2200      	movs	r2, #0
   1e00e:	b163      	cbz	r3, 1e02a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e010:	428b      	cmp	r3, r1
   1e012:	f103 0408 	add.w	r4, r3, #8
   1e016:	d10f      	bne.n	1e038 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1e018:	688b      	ldr	r3, [r1, #8]
   1e01a:	b93a      	cbnz	r2, 1e02c <bt_l2cap_chan_remove+0x28>
   1e01c:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   1e01e:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1e020:	4294      	cmp	r4, r2
   1e022:	d100      	bne.n	1e026 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e024:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   1e026:	2300      	movs	r3, #0
   1e028:	608b      	str	r3, [r1, #8]
}
   1e02a:	bd10      	pop	{r4, pc}
   1e02c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e02e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1e030:	429c      	cmp	r4, r3
	list->tail = node;
   1e032:	bf08      	it	eq
   1e034:	6582      	streq	r2, [r0, #88]	; 0x58
}
   1e036:	e7f6      	b.n	1e026 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e038:	2c00      	cmp	r4, #0
   1e03a:	d0f6      	beq.n	1e02a <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e03c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e03e:	2b00      	cmp	r3, #0
   1e040:	d0f3      	beq.n	1e02a <bt_l2cap_chan_remove+0x26>
   1e042:	3b08      	subs	r3, #8
   1e044:	4622      	mov	r2, r4
   1e046:	e7e2      	b.n	1e00e <bt_l2cap_chan_remove+0xa>

0001e048 <bt_l2cap_chan_del>:
{
   1e048:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1e04a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1e04e:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e050:	b123      	cbz	r3, 1e05c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e052:	686b      	ldr	r3, [r5, #4]
   1e054:	b103      	cbz	r3, 1e058 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e056:	4798      	blx	r3
	chan->conn = NULL;
   1e058:	2300      	movs	r3, #0
   1e05a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e05c:	68e3      	ldr	r3, [r4, #12]
   1e05e:	b10b      	cbz	r3, 1e064 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e060:	4620      	mov	r0, r4
   1e062:	4798      	blx	r3
	if (ops->released) {
   1e064:	69eb      	ldr	r3, [r5, #28]
   1e066:	b11b      	cbz	r3, 1e070 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e068:	4620      	mov	r0, r4
}
   1e06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e06e:	4718      	bx	r3
}
   1e070:	bd70      	pop	{r4, r5, r6, pc}

0001e072 <l2cap_rtx_timeout>:
{
   1e072:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1e074:	f1a0 0110 	sub.w	r1, r0, #16
   1e078:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1e07c:	f7ff ffc2 	bl	1e004 <bt_l2cap_chan_remove>
}
   1e080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1e084:	4608      	mov	r0, r1
   1e086:	f7ff bfdf 	b.w	1e048 <bt_l2cap_chan_del>

0001e08a <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e08a:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   1e08c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e08e:	b18b      	cbz	r3, 1e0b4 <bt_l2cap_disconnected+0x2a>
   1e090:	f1b3 0008 	subs.w	r0, r3, #8
   1e094:	d00e      	beq.n	1e0b4 <bt_l2cap_disconnected+0x2a>
   1e096:	681c      	ldr	r4, [r3, #0]
   1e098:	b104      	cbz	r4, 1e09c <bt_l2cap_disconnected+0x12>
   1e09a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e09c:	f7ff ffd4 	bl	1e048 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e0a0:	b144      	cbz	r4, 1e0b4 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e0a2:	f114 0308 	adds.w	r3, r4, #8
   1e0a6:	d002      	beq.n	1e0ae <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e0a8:	68a3      	ldr	r3, [r4, #8]
   1e0aa:	b103      	cbz	r3, 1e0ae <bt_l2cap_disconnected+0x24>
   1e0ac:	3b08      	subs	r3, #8
{
   1e0ae:	4620      	mov	r0, r4
   1e0b0:	461c      	mov	r4, r3
   1e0b2:	e7f3      	b.n	1e09c <bt_l2cap_disconnected+0x12>
}
   1e0b4:	bd10      	pop	{r4, pc}

0001e0b6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e0b6:	3104      	adds	r1, #4
   1e0b8:	f7f5 bdae 	b.w	13c18 <bt_conn_create_pdu_timeout>

0001e0bc <bt_l2cap_send_cb>:
{
   1e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0c0:	4614      	mov	r4, r2
   1e0c2:	4605      	mov	r5, r0
   1e0c4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1e0c6:	f102 0008 	add.w	r0, r2, #8
   1e0ca:	2104      	movs	r1, #4
   1e0cc:	461e      	mov	r6, r3
   1e0ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e0d2:	f7f8 f96f 	bl	163b4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e0d6:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e0d8:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e0da:	3a04      	subs	r2, #4
   1e0dc:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e0de:	4643      	mov	r3, r8
   1e0e0:	4632      	mov	r2, r6
   1e0e2:	4621      	mov	r1, r4
   1e0e4:	4628      	mov	r0, r5
}
   1e0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e0ea:	f7f5 bbfb 	b.w	138e4 <bt_conn_send_cb>

0001e0ee <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1e0ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e0f0:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1e0f2:	2202      	movs	r2, #2
   1e0f4:	2001      	movs	r0, #1
   1e0f6:	f7ff ff6f 	bl	1dfd8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1e0fa:	4604      	mov	r4, r0
   1e0fc:	b198      	cbz	r0, 1e126 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1e0fe:	2102      	movs	r1, #2
   1e100:	3008      	adds	r0, #8
   1e102:	f7f8 f9bb 	bl	1647c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1e106:	2300      	movs	r3, #0
   1e108:	7003      	strb	r3, [r0, #0]
   1e10a:	7043      	strb	r3, [r0, #1]
   1e10c:	4622      	mov	r2, r4
   1e10e:	9300      	str	r3, [sp, #0]
   1e110:	2105      	movs	r1, #5
   1e112:	4628      	mov	r0, r5
   1e114:	f7ff ffd2 	bl	1e0bc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1e118:	b128      	cbz	r0, 1e126 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   1e11a:	4620      	mov	r0, r4
}
   1e11c:	b003      	add	sp, #12
   1e11e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1e122:	f7f8 b87b 	b.w	1621c <net_buf_unref>
}
   1e126:	b003      	add	sp, #12
   1e128:	bd30      	pop	{r4, r5, pc}

0001e12a <l2cap_recv>:
{
   1e12a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1e12c:	898b      	ldrh	r3, [r1, #12]
   1e12e:	2b03      	cmp	r3, #3
{
   1e130:	b085      	sub	sp, #20
   1e132:	4605      	mov	r5, r0
   1e134:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1e136:	d911      	bls.n	1e15c <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   1e138:	2104      	movs	r1, #4
   1e13a:	f104 0008 	add.w	r0, r4, #8
   1e13e:	f7f8 f97b 	bl	16438 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1e142:	89a3      	ldrh	r3, [r4, #12]
   1e144:	8842      	ldrh	r2, [r0, #2]
   1e146:	429a      	cmp	r2, r3
   1e148:	d108      	bne.n	1e15c <l2cap_recv+0x32>
	if (!hdr->ident) {
   1e14a:	7841      	ldrb	r1, [r0, #1]
   1e14c:	b131      	cbz	r1, 1e15c <l2cap_recv+0x32>
	switch (hdr->code) {
   1e14e:	7803      	ldrb	r3, [r0, #0]
   1e150:	2b12      	cmp	r3, #18
   1e152:	d006      	beq.n	1e162 <l2cap_recv+0x38>
   1e154:	2b13      	cmp	r3, #19
   1e156:	d001      	beq.n	1e15c <l2cap_recv+0x32>
   1e158:	2b01      	cmp	r3, #1
   1e15a:	d14b      	bne.n	1e1f4 <l2cap_recv+0xca>
}
   1e15c:	2000      	movs	r0, #0
   1e15e:	b005      	add	sp, #20
   1e160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   1e162:	2a07      	cmp	r2, #7
   1e164:	d9fa      	bls.n	1e15c <l2cap_recv+0x32>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1e166:	682d      	ldr	r5, [r5, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1e168:	78ef      	ldrb	r7, [r5, #3]
   1e16a:	b11f      	cbz	r7, 1e174 <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1e16c:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   1e16e:	f7ff ffbe 	bl	1e0ee <l2cap_send_reject.constprop.0>
		break;
   1e172:	e7f3      	b.n	1e15c <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1e174:	68a2      	ldr	r2, [r4, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1e176:	7850      	ldrb	r0, [r2, #1]
   1e178:	7813      	ldrb	r3, [r2, #0]
   1e17a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1e17e:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1e182:	78d0      	ldrb	r0, [r2, #3]
   1e184:	7893      	ldrb	r3, [r2, #2]
   1e186:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1e18a:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1e18e:	7950      	ldrb	r0, [r2, #5]
   1e190:	7913      	ldrb	r3, [r2, #4]
   1e192:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1e196:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1e19a:	7993      	ldrb	r3, [r2, #6]
   1e19c:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1e19e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1e1a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1e1a4:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1e1a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1e1aa:	f7ff ff15 	bl	1dfd8 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1e1ae:	4604      	mov	r4, r0
   1e1b0:	2800      	cmp	r0, #0
   1e1b2:	d0d3      	beq.n	1e15c <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   1e1b4:	a902      	add	r1, sp, #8
   1e1b6:	4628      	mov	r0, r5
   1e1b8:	f7f5 fdc2 	bl	13d40 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1e1bc:	2102      	movs	r1, #2
   1e1be:	4606      	mov	r6, r0
   1e1c0:	f104 0008 	add.w	r0, r4, #8
   1e1c4:	f7f8 f95a 	bl	1647c <net_buf_simple_add>
	if (accepted) {
   1e1c8:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1e1cc:	b2db      	uxtb	r3, r3
   1e1ce:	8003      	strh	r3, [r0, #0]
   1e1d0:	4622      	mov	r2, r4
   1e1d2:	9700      	str	r7, [sp, #0]
   1e1d4:	463b      	mov	r3, r7
   1e1d6:	2105      	movs	r1, #5
   1e1d8:	4628      	mov	r0, r5
   1e1da:	f7ff ff6f 	bl	1e0bc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1e1de:	b110      	cbz	r0, 1e1e6 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   1e1e0:	4620      	mov	r0, r4
   1e1e2:	f7f8 f81b 	bl	1621c <net_buf_unref>
	if (accepted) {
   1e1e6:	2e00      	cmp	r6, #0
   1e1e8:	d0b8      	beq.n	1e15c <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   1e1ea:	a902      	add	r1, sp, #8
   1e1ec:	4628      	mov	r0, r5
   1e1ee:	f7ff fec7 	bl	1df80 <bt_conn_le_conn_update>
   1e1f2:	e7b3      	b.n	1e15c <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   1e1f4:	6828      	ldr	r0, [r5, #0]
   1e1f6:	e7ba      	b.n	1e16e <l2cap_recv+0x44>

0001e1f8 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e1f8:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1e1fa:	b160      	cbz	r0, 1e216 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1e1fc:	3808      	subs	r0, #8
   1e1fe:	b900      	cbnz	r0, 1e202 <bt_l2cap_le_lookup_tx_cid+0xa>
   1e200:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e202:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   1e206:	428b      	cmp	r3, r1
   1e208:	d005      	beq.n	1e216 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e20a:	f110 0308 	adds.w	r3, r0, #8
   1e20e:	d001      	beq.n	1e214 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e210:	6880      	ldr	r0, [r0, #8]
   1e212:	e7f2      	b.n	1e1fa <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1e214:	4618      	mov	r0, r3
}
   1e216:	4770      	bx	lr

0001e218 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e218:	6d40      	ldr	r0, [r0, #84]	; 0x54
   1e21a:	b160      	cbz	r0, 1e236 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1e21c:	3808      	subs	r0, #8
   1e21e:	b900      	cbnz	r0, 1e222 <bt_l2cap_le_lookup_rx_cid+0xa>
   1e220:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e222:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1e226:	428b      	cmp	r3, r1
   1e228:	d005      	beq.n	1e236 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e22a:	f110 0308 	adds.w	r3, r0, #8
   1e22e:	d001      	beq.n	1e234 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e230:	6880      	ldr	r0, [r0, #8]
   1e232:	e7f2      	b.n	1e21a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1e234:	4618      	mov	r0, r3
}
   1e236:	4770      	bx	lr

0001e238 <bt_l2cap_recv>:
{
   1e238:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1e23a:	898b      	ldrh	r3, [r1, #12]
   1e23c:	2b03      	cmp	r3, #3
{
   1e23e:	4605      	mov	r5, r0
   1e240:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1e242:	d804      	bhi.n	1e24e <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1e244:	4620      	mov	r0, r4
}
   1e246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1e24a:	f7f7 bfe7 	b.w	1621c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1e24e:	2104      	movs	r1, #4
   1e250:	f104 0008 	add.w	r0, r4, #8
   1e254:	f7f8 f8f0 	bl	16438 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1e258:	8841      	ldrh	r1, [r0, #2]
   1e25a:	4628      	mov	r0, r5
   1e25c:	f7ff ffdc 	bl	1e218 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e260:	2800      	cmp	r0, #0
   1e262:	d0ef      	beq.n	1e244 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1e264:	6843      	ldr	r3, [r0, #4]
   1e266:	4621      	mov	r1, r4
   1e268:	691b      	ldr	r3, [r3, #16]
   1e26a:	4798      	blx	r3
   1e26c:	e7ea      	b.n	1e244 <bt_l2cap_recv+0xc>

0001e26e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1e26e:	4770      	bx	lr

0001e270 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1e270:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1e272:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1e274:	b128      	cbz	r0, 1e282 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e276:	6859      	ldr	r1, [r3, #4]
   1e278:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e27a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e27c:	4288      	cmp	r0, r1
	list->tail = node;
   1e27e:	bf08      	it	eq
   1e280:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1e282:	4770      	bx	lr

0001e284 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e284:	4603      	mov	r3, r0
   1e286:	6800      	ldr	r0, [r0, #0]
   1e288:	2200      	movs	r2, #0
   1e28a:	b900      	cbnz	r0, 1e28e <sys_slist_find_and_remove+0xa>
   1e28c:	4770      	bx	lr
   1e28e:	4288      	cmp	r0, r1
   1e290:	d110      	bne.n	1e2b4 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1e292:	6808      	ldr	r0, [r1, #0]
   1e294:	b942      	cbnz	r2, 1e2a8 <sys_slist_find_and_remove+0x24>
   1e296:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1e298:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e29a:	4291      	cmp	r1, r2
   1e29c:	d100      	bne.n	1e2a0 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1e29e:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1e2a0:	2300      	movs	r3, #0
   1e2a2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e2a4:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1e2a6:	4770      	bx	lr
	parent->next = child;
   1e2a8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e2aa:	6858      	ldr	r0, [r3, #4]
   1e2ac:	4281      	cmp	r1, r0
	list->tail = node;
   1e2ae:	bf08      	it	eq
   1e2b0:	605a      	streq	r2, [r3, #4]
}
   1e2b2:	e7f5      	b.n	1e2a0 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e2b4:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e2b6:	6800      	ldr	r0, [r0, #0]
   1e2b8:	e7e7      	b.n	1e28a <sys_slist_find_and_remove+0x6>

0001e2ba <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1e2ba:	4603      	mov	r3, r0
	size_t bytes = 0;
   1e2bc:	2000      	movs	r0, #0

	while (buf) {
   1e2be:	b903      	cbnz	r3, 1e2c2 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1e2c0:	4770      	bx	lr
		bytes += buf->len;
   1e2c2:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e2c4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e2c6:	4410      	add	r0, r2
		buf = buf->frags;
   1e2c8:	e7f9      	b.n	1e2be <net_buf_frags_len+0x4>

0001e2ca <att_sent>:
	if (chan->ops->sent) {
   1e2ca:	684b      	ldr	r3, [r1, #4]
   1e2cc:	695b      	ldr	r3, [r3, #20]
{
   1e2ce:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1e2d0:	b103      	cbz	r3, 1e2d4 <att_sent+0xa>
		chan->ops->sent(chan);
   1e2d2:	4718      	bx	r3
}
   1e2d4:	4770      	bx	lr

0001e2d6 <attr_read_type_cb>:
{
   1e2d6:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1e2d8:	68d4      	ldr	r4, [r2, #12]
   1e2da:	7823      	ldrb	r3, [r4, #0]
   1e2dc:	3102      	adds	r1, #2
   1e2de:	b913      	cbnz	r3, 1e2e6 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1e2e0:	7021      	strb	r1, [r4, #0]
	return true;
   1e2e2:	2001      	movs	r0, #1
   1e2e4:	e006      	b.n	1e2f4 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1e2e6:	428b      	cmp	r3, r1
   1e2e8:	d0fb      	beq.n	1e2e2 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1e2ea:	8983      	ldrh	r3, [r0, #12]
   1e2ec:	3b02      	subs	r3, #2
   1e2ee:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1e2f0:	2000      	movs	r0, #0
   1e2f2:	6110      	str	r0, [r2, #16]
}
   1e2f4:	bd10      	pop	{r4, pc}

0001e2f6 <att_prepare_write_req>:
}
   1e2f6:	2006      	movs	r0, #6
   1e2f8:	4770      	bx	lr

0001e2fa <att_op_get_type>:
	switch (op) {
   1e2fa:	281e      	cmp	r0, #30
   1e2fc:	d816      	bhi.n	1e32c <att_op_get_type+0x32>
   1e2fe:	b308      	cbz	r0, 1e344 <att_op_get_type+0x4a>
   1e300:	1e43      	subs	r3, r0, #1
   1e302:	2b1d      	cmp	r3, #29
   1e304:	d81e      	bhi.n	1e344 <att_op_get_type+0x4a>
   1e306:	e8df f003 	tbb	[pc, r3]
   1e30a:	2317      	.short	0x2317
   1e30c:	23172317 	.word	0x23172317
   1e310:	23172317 	.word	0x23172317
   1e314:	23172317 	.word	0x23172317
   1e318:	23172317 	.word	0x23172317
   1e31c:	231d1d17 	.word	0x231d1d17
   1e320:	1d172317 	.word	0x1d172317
   1e324:	0f1b1d19 	.word	0x0f1b1d19
   1e328:	2004      	movs	r0, #4
   1e32a:	4770      	bx	lr
   1e32c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1e330:	2b52      	cmp	r3, #82	; 0x52
   1e332:	d107      	bne.n	1e344 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1e334:	2000      	movs	r0, #0
}
   1e336:	4770      	bx	lr
		return ATT_RESPONSE;
   1e338:	2002      	movs	r0, #2
   1e33a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1e33c:	2003      	movs	r0, #3
   1e33e:	4770      	bx	lr
		return ATT_INDICATION;
   1e340:	2005      	movs	r0, #5
   1e342:	4770      	bx	lr
		return ATT_COMMAND;
   1e344:	f010 0f40 	tst.w	r0, #64	; 0x40
   1e348:	bf0c      	ite	eq
   1e34a:	2006      	moveq	r0, #6
   1e34c:	2000      	movne	r0, #0
   1e34e:	4770      	bx	lr
		return ATT_REQUEST;
   1e350:	2001      	movs	r0, #1
   1e352:	4770      	bx	lr

0001e354 <att_notify_mult>:
{
   1e354:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1e356:	6803      	ldr	r3, [r0, #0]
   1e358:	898a      	ldrh	r2, [r1, #12]
   1e35a:	6818      	ldr	r0, [r3, #0]
   1e35c:	6889      	ldr	r1, [r1, #8]
   1e35e:	f000 ff97 	bl	1f290 <bt_gatt_mult_notification>
}
   1e362:	2000      	movs	r0, #0
   1e364:	bd08      	pop	{r3, pc}

0001e366 <att_notify>:
{
   1e366:	b538      	push	{r3, r4, r5, lr}
   1e368:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1e36a:	f101 0008 	add.w	r0, r1, #8
   1e36e:	460c      	mov	r4, r1
   1e370:	f001 f849 	bl	1f406 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1e374:	682d      	ldr	r5, [r5, #0]
   1e376:	89a3      	ldrh	r3, [r4, #12]
   1e378:	68a2      	ldr	r2, [r4, #8]
   1e37a:	4601      	mov	r1, r0
   1e37c:	6828      	ldr	r0, [r5, #0]
   1e37e:	f000 ff5c 	bl	1f23a <bt_gatt_notification>
}
   1e382:	2000      	movs	r0, #0
   1e384:	bd38      	pop	{r3, r4, r5, pc}

0001e386 <att_chan_mtu_updated>:
{
   1e386:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1e388:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e38a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   1e38c:	b30a      	cbz	r2, 1e3d2 <att_chan_mtu_updated+0x4c>
   1e38e:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   1e392:	d01d      	beq.n	1e3d0 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e394:	6813      	ldr	r3, [r2, #0]
   1e396:	b10b      	cbz	r3, 1e39c <att_chan_mtu_updated+0x16>
   1e398:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1e39c:	2200      	movs	r2, #0
   1e39e:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   1e3a0:	42a0      	cmp	r0, r4
   1e3a2:	d009      	beq.n	1e3b8 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e3a4:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e3a8:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e3ac:	42a9      	cmp	r1, r5
   1e3ae:	bf38      	it	cc
   1e3b0:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e3b2:	42a2      	cmp	r2, r4
   1e3b4:	bf38      	it	cc
   1e3b6:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e3b8:	b163      	cbz	r3, 1e3d4 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e3ba:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   1e3be:	d004      	beq.n	1e3ca <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e3c0:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   1e3c4:	b10d      	cbz	r5, 1e3ca <att_chan_mtu_updated+0x44>
   1e3c6:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   1e3ca:	461c      	mov	r4, r3
   1e3cc:	462b      	mov	r3, r5
   1e3ce:	e7e7      	b.n	1e3a0 <att_chan_mtu_updated+0x1a>
   1e3d0:	4622      	mov	r2, r4
   1e3d2:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e3d4:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1e3d8:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   1e3dc:	428b      	cmp	r3, r1
   1e3de:	d801      	bhi.n	1e3e4 <att_chan_mtu_updated+0x5e>
   1e3e0:	4290      	cmp	r0, r2
   1e3e2:	d909      	bls.n	1e3f8 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e3e4:	4282      	cmp	r2, r0
   1e3e6:	bf38      	it	cc
   1e3e8:	4602      	movcc	r2, r0
   1e3ea:	4299      	cmp	r1, r3
   1e3ec:	6830      	ldr	r0, [r6, #0]
   1e3ee:	bf38      	it	cc
   1e3f0:	4619      	movcc	r1, r3
}
   1e3f2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e3f4:	f7f7 bcb8 	b.w	15d68 <bt_gatt_att_max_mtu_changed>
}
   1e3f8:	bc70      	pop	{r4, r5, r6}
   1e3fa:	4770      	bx	lr

0001e3fc <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1e3fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1e3fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1e402:	2300      	movs	r3, #0
   1e404:	9300      	str	r3, [sp, #0]
   1e406:	461a      	mov	r2, r3
   1e408:	f7f7 f91e 	bl	15648 <bt_gatt_foreach_attr_type>
				  user_data);
}
   1e40c:	b005      	add	sp, #20
   1e40e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e412 <att_chan_read>:
{
   1e412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e416:	4680      	mov	r8, r0
   1e418:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e41a:	4610      	mov	r0, r2
{
   1e41c:	4699      	mov	r9, r3
   1e41e:	468b      	mov	fp, r1
   1e420:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e422:	f7ff ff4a 	bl	1e2ba <net_buf_frags_len>
   1e426:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   1e42a:	4283      	cmp	r3, r0
   1e42c:	d97a      	bls.n	1e524 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1e42e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e432:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1e434:	4630      	mov	r0, r6
   1e436:	f7f7 ff51 	bl	162dc <net_buf_frag_last>
	size_t len, total = 0;
   1e43a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1e43e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e440:	4630      	mov	r0, r6
   1e442:	f7ff ff3a 	bl	1e2ba <net_buf_frags_len>
   1e446:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1e44a:	f105 0708 	add.w	r7, r5, #8
   1e44e:	1a24      	subs	r4, r4, r0
   1e450:	4638      	mov	r0, r7
   1e452:	f000 ffe4 	bl	1f41e <net_buf_simple_tailroom>
   1e456:	4284      	cmp	r4, r0
   1e458:	d211      	bcs.n	1e47e <att_chan_read+0x6c>
   1e45a:	4630      	mov	r0, r6
   1e45c:	f7ff ff2d 	bl	1e2ba <net_buf_frags_len>
   1e460:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1e464:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e466:	bb34      	cbnz	r4, 1e4b6 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e468:	79b0      	ldrb	r0, [r6, #6]
   1e46a:	f7f7 fd37 	bl	15edc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e46e:	2200      	movs	r2, #0
   1e470:	2300      	movs	r3, #0
   1e472:	f000 ffb5 	bl	1f3e0 <net_buf_alloc_fixed>
			if (!frag) {
   1e476:	4605      	mov	r5, r0
   1e478:	b930      	cbnz	r0, 1e488 <att_chan_read+0x76>
	return total;
   1e47a:	4657      	mov	r7, sl
   1e47c:	e02c      	b.n	1e4d8 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e47e:	4638      	mov	r0, r7
   1e480:	f000 ffcd 	bl	1f41e <net_buf_simple_tailroom>
   1e484:	4604      	mov	r4, r0
   1e486:	e7ee      	b.n	1e466 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1e488:	4601      	mov	r1, r0
   1e48a:	4630      	mov	r0, r6
   1e48c:	f7f7 ff6e 	bl	1636c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e490:	4630      	mov	r0, r6
   1e492:	f7ff ff12 	bl	1e2ba <net_buf_frags_len>
   1e496:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1e49a:	f105 0708 	add.w	r7, r5, #8
   1e49e:	1a24      	subs	r4, r4, r0
   1e4a0:	4638      	mov	r0, r7
   1e4a2:	f000 ffbc 	bl	1f41e <net_buf_simple_tailroom>
   1e4a6:	4284      	cmp	r4, r0
   1e4a8:	d21a      	bcs.n	1e4e0 <att_chan_read+0xce>
   1e4aa:	4630      	mov	r0, r6
   1e4ac:	f7ff ff05 	bl	1e2ba <net_buf_frags_len>
   1e4b0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1e4b4:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1e4b6:	68a9      	ldr	r1, [r5, #8]
   1e4b8:	89aa      	ldrh	r2, [r5, #12]
   1e4ba:	f8db 7004 	ldr.w	r7, [fp, #4]
   1e4be:	9803      	ldr	r0, [sp, #12]
   1e4c0:	f8cd 9000 	str.w	r9, [sp]
   1e4c4:	440a      	add	r2, r1
   1e4c6:	b2a3      	uxth	r3, r4
   1e4c8:	4659      	mov	r1, fp
   1e4ca:	47b8      	blx	r7
		if (read < 0) {
   1e4cc:	1e07      	subs	r7, r0, #0
   1e4ce:	da0c      	bge.n	1e4ea <att_chan_read+0xd8>
				return total;
   1e4d0:	f1ba 0f00 	cmp.w	sl, #0
   1e4d4:	bf18      	it	ne
   1e4d6:	4657      	movne	r7, sl
}
   1e4d8:	4638      	mov	r0, r7
   1e4da:	b005      	add	sp, #20
   1e4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4e0:	4638      	mov	r0, r7
   1e4e2:	f000 ff9c 	bl	1f41e <net_buf_simple_tailroom>
   1e4e6:	4604      	mov	r4, r0
   1e4e8:	e7e5      	b.n	1e4b6 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1e4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e4ec:	b993      	cbnz	r3, 1e514 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1e4ee:	4639      	mov	r1, r7
   1e4f0:	f105 0008 	add.w	r0, r5, #8
   1e4f4:	f7f7 ffc2 	bl	1647c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e4f8:	4630      	mov	r0, r6
   1e4fa:	f7ff fede 	bl	1e2ba <net_buf_frags_len>
   1e4fe:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   1e502:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e504:	4283      	cmp	r3, r0
		total += read;
   1e506:	44ba      	add	sl, r7
		offset += read;
   1e508:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e50c:	d9b5      	bls.n	1e47a <att_chan_read+0x68>
   1e50e:	42a7      	cmp	r7, r4
   1e510:	d096      	beq.n	1e440 <att_chan_read+0x2e>
   1e512:	e7b2      	b.n	1e47a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1e514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e518:	4639      	mov	r1, r7
   1e51a:	4628      	mov	r0, r5
   1e51c:	4798      	blx	r3
   1e51e:	2800      	cmp	r0, #0
   1e520:	d1e5      	bne.n	1e4ee <att_chan_read+0xdc>
   1e522:	e7aa      	b.n	1e47a <att_chan_read+0x68>
		return 0;
   1e524:	2700      	movs	r7, #0
   1e526:	e7d7      	b.n	1e4d8 <att_chan_read+0xc6>

0001e528 <find_type_cb>:
{
   1e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1e52c:	f8d2 9000 	ldr.w	r9, [r2]
{
   1e530:	b091      	sub	sp, #68	; 0x44
   1e532:	4607      	mov	r7, r0
   1e534:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e536:	2500      	movs	r5, #0
   1e538:	f642 0301 	movw	r3, #10241	; 0x2801
   1e53c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1e53e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e542:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1e546:	a90b      	add	r1, sp, #44	; 0x2c
{
   1e548:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1e54a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1e54e:	f7ff f8b8 	bl	1d6c2 <bt_uuid_cmp>
   1e552:	2800      	cmp	r0, #0
   1e554:	d079      	beq.n	1e64a <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1e556:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1e55a:	6838      	ldr	r0, [r7, #0]
   1e55c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1e560:	a90b      	add	r1, sp, #44	; 0x2c
   1e562:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1e566:	f7ff f8ac 	bl	1d6c2 <bt_uuid_cmp>
   1e56a:	b138      	cbz	r0, 1e57c <find_type_cb+0x54>
		if (data->group &&
   1e56c:	68a3      	ldr	r3, [r4, #8]
   1e56e:	b11b      	cbz	r3, 1e578 <find_type_cb+0x50>
   1e570:	885a      	ldrh	r2, [r3, #2]
   1e572:	42b2      	cmp	r2, r6
   1e574:	d200      	bcs.n	1e578 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1e576:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1e578:	2001      	movs	r0, #1
   1e57a:	e009      	b.n	1e590 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1e57c:	6861      	ldr	r1, [r4, #4]
   1e57e:	4608      	mov	r0, r1
   1e580:	f7ff fe9b 	bl	1e2ba <net_buf_frags_len>
   1e584:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1e588:	1a1b      	subs	r3, r3, r0
   1e58a:	2b03      	cmp	r3, #3
   1e58c:	d803      	bhi.n	1e596 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1e58e:	2000      	movs	r0, #0
}
   1e590:	b011      	add	sp, #68	; 0x44
   1e592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1e596:	4608      	mov	r0, r1
   1e598:	f7f7 fea0 	bl	162dc <net_buf_frag_last>
   1e59c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1e59e:	6860      	ldr	r0, [r4, #4]
   1e5a0:	f7ff fe8b 	bl	1e2ba <net_buf_frags_len>
   1e5a4:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1e5a8:	f105 0b08 	add.w	fp, r5, #8
   1e5ac:	ebaa 0a00 	sub.w	sl, sl, r0
   1e5b0:	4658      	mov	r0, fp
   1e5b2:	f000 ff34 	bl	1f41e <net_buf_simple_tailroom>
   1e5b6:	4582      	cmp	sl, r0
   1e5b8:	d23f      	bcs.n	1e63a <find_type_cb+0x112>
   1e5ba:	6860      	ldr	r0, [r4, #4]
   1e5bc:	f7ff fe7d 	bl	1e2ba <net_buf_frags_len>
   1e5c0:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1e5c4:	1a18      	subs	r0, r3, r0
	if (!len) {
   1e5c6:	b970      	cbnz	r0, 1e5e6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1e5c8:	6863      	ldr	r3, [r4, #4]
   1e5ca:	7998      	ldrb	r0, [r3, #6]
   1e5cc:	f7f7 fc86 	bl	15edc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e5d0:	2200      	movs	r2, #0
   1e5d2:	2300      	movs	r3, #0
   1e5d4:	f000 ff04 	bl	1f3e0 <net_buf_alloc_fixed>
		if (!frag) {
   1e5d8:	4605      	mov	r5, r0
   1e5da:	2800      	cmp	r0, #0
   1e5dc:	d0d7      	beq.n	1e58e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1e5de:	4601      	mov	r1, r0
   1e5e0:	6860      	ldr	r0, [r4, #4]
   1e5e2:	f7f7 fec3 	bl	1636c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1e5e6:	2300      	movs	r3, #0
   1e5e8:	9300      	str	r3, [sp, #0]
   1e5ea:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1e5ee:	4639      	mov	r1, r7
   1e5f0:	2310      	movs	r3, #16
   1e5f2:	aa02      	add	r2, sp, #8
   1e5f4:	4640      	mov	r0, r8
   1e5f6:	47c8      	blx	r9
	if (read < 0) {
   1e5f8:	1e07      	subs	r7, r0, #0
   1e5fa:	db26      	blt.n	1e64a <find_type_cb+0x122>
	if (read != data->value_len) {
   1e5fc:	7c22      	ldrb	r2, [r4, #16]
   1e5fe:	68e0      	ldr	r0, [r4, #12]
   1e600:	42ba      	cmp	r2, r7
   1e602:	d01e      	beq.n	1e642 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1e604:	4601      	mov	r1, r0
   1e606:	a80b      	add	r0, sp, #44	; 0x2c
   1e608:	f7ff f885 	bl	1d716 <bt_uuid_create>
   1e60c:	b1e8      	cbz	r0, 1e64a <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1e60e:	b2fa      	uxtb	r2, r7
   1e610:	a902      	add	r1, sp, #8
   1e612:	a806      	add	r0, sp, #24
   1e614:	f7ff f87f 	bl	1d716 <bt_uuid_create>
   1e618:	b1b8      	cbz	r0, 1e64a <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1e61a:	a906      	add	r1, sp, #24
   1e61c:	a80b      	add	r0, sp, #44	; 0x2c
   1e61e:	f7ff f850 	bl	1d6c2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1e622:	b990      	cbnz	r0, 1e64a <find_type_cb+0x122>
	data->err = 0x00;
   1e624:	2300      	movs	r3, #0
   1e626:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1e628:	2104      	movs	r1, #4
   1e62a:	f105 0008 	add.w	r0, r5, #8
   1e62e:	f7f7 ff25 	bl	1647c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1e632:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1e634:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1e636:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1e638:	e79e      	b.n	1e578 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1e63a:	4658      	mov	r0, fp
   1e63c:	f000 feef 	bl	1f41e <net_buf_simple_tailroom>
   1e640:	e7c1      	b.n	1e5c6 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   1e642:	a902      	add	r1, sp, #8
   1e644:	f001 fcb3 	bl	1ffae <memcmp>
   1e648:	e7eb      	b.n	1e622 <find_type_cb+0xfa>
	data->group = NULL;
   1e64a:	2300      	movs	r3, #0
   1e64c:	60a3      	str	r3, [r4, #8]
   1e64e:	e793      	b.n	1e578 <find_type_cb+0x50>

0001e650 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e650:	68d0      	ldr	r0, [r2, #12]
   1e652:	7803      	ldrb	r3, [r0, #0]
   1e654:	3104      	adds	r1, #4
   1e656:	b913      	cbnz	r3, 1e65e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e658:	7001      	strb	r1, [r0, #0]
	return true;
   1e65a:	2001      	movs	r0, #1
}
   1e65c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e65e:	428b      	cmp	r3, r1
   1e660:	d0fb      	beq.n	1e65a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1e662:	6891      	ldr	r1, [r2, #8]
   1e664:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1e666:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e668:	3b04      	subs	r3, #4
   1e66a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e66c:	6110      	str	r0, [r2, #16]
		return false;
   1e66e:	4770      	bx	lr

0001e670 <chan_req_send>:
{
   1e670:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e672:	688e      	ldr	r6, [r1, #8]
{
   1e674:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e676:	4630      	mov	r0, r6
{
   1e678:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e67a:	f7ff fe1e 	bl	1e2ba <net_buf_frags_len>
   1e67e:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
   1e682:	4283      	cmp	r3, r0
   1e684:	d30a      	bcc.n	1e69c <chan_req_send+0x2c>
	req->buf = NULL;
   1e686:	2200      	movs	r2, #0
	chan->req = req;
   1e688:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   1e68c:	4628      	mov	r0, r5
	req->buf = NULL;
   1e68e:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1e690:	4631      	mov	r1, r6
   1e692:	f7f5 ff9d 	bl	145d0 <chan_send>
	if (err) {
   1e696:	b100      	cbz	r0, 1e69a <chan_req_send+0x2a>
		req->buf = buf;
   1e698:	60a6      	str	r6, [r4, #8]
}
   1e69a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1e69c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e6a0:	e7fb      	b.n	1e69a <chan_req_send+0x2a>

0001e6a2 <process_queue>:
{
   1e6a2:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1e6a4:	2200      	movs	r2, #0
{
   1e6a6:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1e6a8:	2300      	movs	r3, #0
   1e6aa:	4608      	mov	r0, r1
{
   1e6ac:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1e6ae:	f7f7 fd23 	bl	160f8 <net_buf_get>
	if (buf) {
   1e6b2:	4605      	mov	r5, r0
   1e6b4:	b160      	cbz	r0, 1e6d0 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1e6b6:	4601      	mov	r1, r0
   1e6b8:	2200      	movs	r2, #0
   1e6ba:	4620      	mov	r0, r4
   1e6bc:	f7f5 ff88 	bl	145d0 <chan_send>
		if (err) {
   1e6c0:	4604      	mov	r4, r0
   1e6c2:	b118      	cbz	r0, 1e6cc <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1e6c4:	4629      	mov	r1, r5
   1e6c6:	4630      	mov	r0, r6
   1e6c8:	f001 fb31 	bl	1fd2e <k_queue_prepend>
}
   1e6cc:	4620      	mov	r0, r4
   1e6ce:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e6d0:	f06f 0401 	mvn.w	r4, #1
   1e6d4:	e7fa      	b.n	1e6cc <process_queue+0x2a>

0001e6d6 <bt_att_chan_send_rsp>:
{
   1e6d6:	b538      	push	{r3, r4, r5, lr}
   1e6d8:	4604      	mov	r4, r0
   1e6da:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   1e6dc:	f7f5 ff78 	bl	145d0 <chan_send>
	if (err) {
   1e6e0:	b130      	cbz	r0, 1e6f0 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1e6e2:	4629      	mov	r1, r5
   1e6e4:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   1e6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1e6ec:	f7f7 bd62 	b.w	161b4 <net_buf_put>
}
   1e6f0:	bd38      	pop	{r3, r4, r5, pc}

0001e6f2 <chan_req_sent>:
	if (chan->req) {
   1e6f2:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1e6f6:	b133      	cbz	r3, 1e706 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1e6f8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e6fc:	2300      	movs	r3, #0
   1e6fe:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1e702:	f7fb bf8f 	b.w	1a624 <k_work_reschedule>
}
   1e706:	4770      	bx	lr

0001e708 <find_info_cb>:
{
   1e708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e70a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1e70c:	6816      	ldr	r6, [r2, #0]
{
   1e70e:	4605      	mov	r5, r0
   1e710:	460f      	mov	r7, r1
   1e712:	4614      	mov	r4, r2
	if (!data->rsp) {
   1e714:	b963      	cbnz	r3, 1e730 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1e716:	6850      	ldr	r0, [r2, #4]
   1e718:	2101      	movs	r1, #1
   1e71a:	3008      	adds	r0, #8
   1e71c:	f7f7 feae 	bl	1647c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e720:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e722:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e724:	781b      	ldrb	r3, [r3, #0]
   1e726:	2b00      	cmp	r3, #0
   1e728:	bf0c      	ite	eq
   1e72a:	2301      	moveq	r3, #1
   1e72c:	2302      	movne	r3, #2
   1e72e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e730:	68a3      	ldr	r3, [r4, #8]
   1e732:	781b      	ldrb	r3, [r3, #0]
   1e734:	2b01      	cmp	r3, #1
   1e736:	d003      	beq.n	1e740 <find_info_cb+0x38>
   1e738:	2b02      	cmp	r3, #2
   1e73a:	d019      	beq.n	1e770 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1e73c:	2000      	movs	r0, #0
   1e73e:	e016      	b.n	1e76e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e740:	682b      	ldr	r3, [r5, #0]
   1e742:	781b      	ldrb	r3, [r3, #0]
   1e744:	2b00      	cmp	r3, #0
   1e746:	d1f9      	bne.n	1e73c <find_info_cb+0x34>
   1e748:	6860      	ldr	r0, [r4, #4]
   1e74a:	2104      	movs	r1, #4
   1e74c:	3008      	adds	r0, #8
   1e74e:	f7f7 fe95 	bl	1647c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e752:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e754:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e756:	885b      	ldrh	r3, [r3, #2]
   1e758:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e75a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e75c:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1e75e:	899b      	ldrh	r3, [r3, #12]
   1e760:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   1e764:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e766:	2804      	cmp	r0, #4
   1e768:	bf94      	ite	ls
   1e76a:	2000      	movls	r0, #0
   1e76c:	2001      	movhi	r0, #1
}
   1e76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e770:	682b      	ldr	r3, [r5, #0]
   1e772:	781b      	ldrb	r3, [r3, #0]
   1e774:	2b02      	cmp	r3, #2
   1e776:	d1e1      	bne.n	1e73c <find_info_cb+0x34>
   1e778:	6860      	ldr	r0, [r4, #4]
   1e77a:	2112      	movs	r1, #18
   1e77c:	3008      	adds	r0, #8
   1e77e:	f7f7 fe7d 	bl	1647c <net_buf_simple_add>
   1e782:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e784:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e786:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1e788:	f823 7b02 	strh.w	r7, [r3], #2
   1e78c:	1c51      	adds	r1, r2, #1
   1e78e:	3211      	adds	r2, #17
   1e790:	f851 0b04 	ldr.w	r0, [r1], #4
   1e794:	f843 0b04 	str.w	r0, [r3], #4
   1e798:	4291      	cmp	r1, r2
   1e79a:	d1f9      	bne.n	1e790 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   1e79c:	6863      	ldr	r3, [r4, #4]
   1e79e:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   1e7a2:	899b      	ldrh	r3, [r3, #12]
   1e7a4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e7a6:	2812      	cmp	r0, #18
   1e7a8:	e7de      	b.n	1e768 <find_info_cb+0x60>

0001e7aa <att_exec_write_req>:
   1e7aa:	2006      	movs	r0, #6
   1e7ac:	4770      	bx	lr

0001e7ae <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e7ae:	30f8      	adds	r0, #248	; 0xf8
   1e7b0:	f3bf 8f5b 	dmb	ish
   1e7b4:	e850 3f00 	ldrex	r3, [r0]
   1e7b8:	f023 0302 	bic.w	r3, r3, #2
   1e7bc:	e840 3200 	strex	r2, r3, [r0]
   1e7c0:	2a00      	cmp	r2, #0
   1e7c2:	d1f7      	bne.n	1e7b4 <chan_cfm_sent+0x6>
   1e7c4:	f3bf 8f5b 	dmb	ish
}
   1e7c8:	4770      	bx	lr

0001e7ca <chan_rsp_sent>:
   1e7ca:	30f8      	adds	r0, #248	; 0xf8
   1e7cc:	f3bf 8f5b 	dmb	ish
   1e7d0:	e850 3f00 	ldrex	r3, [r0]
   1e7d4:	f023 0301 	bic.w	r3, r3, #1
   1e7d8:	e840 3200 	strex	r2, r3, [r0]
   1e7dc:	2a00      	cmp	r2, #0
   1e7de:	d1f7      	bne.n	1e7d0 <chan_rsp_sent+0x6>
   1e7e0:	f3bf 8f5b 	dmb	ish
}
   1e7e4:	4770      	bx	lr

0001e7e6 <att_get>:
{
   1e7e6:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1e7e8:	7a83      	ldrb	r3, [r0, #10]
   1e7ea:	2b07      	cmp	r3, #7
   1e7ec:	d001      	beq.n	1e7f2 <att_get+0xc>
		return NULL;
   1e7ee:	2000      	movs	r0, #0
}
   1e7f0:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1e7f2:	2104      	movs	r1, #4
   1e7f4:	f7ff fd10 	bl	1e218 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e7f8:	2800      	cmp	r0, #0
   1e7fa:	d0f8      	beq.n	1e7ee <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e7fc:	f3bf 8f5b 	dmb	ish
   1e800:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1e804:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1e808:	075b      	lsls	r3, r3, #29
   1e80a:	d4f0      	bmi.n	1e7ee <att_get+0x8>
	return att_chan->att;
   1e80c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e810:	e7ee      	b.n	1e7f0 <att_get+0xa>

0001e812 <bt_att_status>:
{
   1e812:	b538      	push	{r3, r4, r5, lr}
   1e814:	f3bf 8f5b 	dmb	ish
   1e818:	680b      	ldr	r3, [r1, #0]
   1e81a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e81e:	07db      	lsls	r3, r3, #31
{
   1e820:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1e822:	d519      	bpl.n	1e858 <bt_att_status+0x46>
	if (!chan->att) {
   1e824:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1e828:	b1b0      	cbz	r0, 1e858 <bt_att_status+0x46>
	if (chan->req) {
   1e82a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   1e82e:	b99b      	cbnz	r3, 1e858 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1e830:	3004      	adds	r0, #4
   1e832:	f7ff fd1d 	bl	1e270 <sys_slist_get>
	if (!node) {
   1e836:	4604      	mov	r4, r0
   1e838:	b170      	cbz	r0, 1e858 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e83a:	4601      	mov	r1, r0
   1e83c:	f1a5 0008 	sub.w	r0, r5, #8
   1e840:	f7f5 ff24 	bl	1468c <bt_att_chan_req_send>
   1e844:	2800      	cmp	r0, #0
   1e846:	da07      	bge.n	1e858 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1e848:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1e84c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1e84e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e850:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1e852:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e854:	b902      	cbnz	r2, 1e858 <bt_att_status+0x46>
	list->tail = node;
   1e856:	609c      	str	r4, [r3, #8]
}
   1e858:	bd38      	pop	{r3, r4, r5, pc}

0001e85a <att_req_send_process>:
{
   1e85a:	b570      	push	{r4, r5, r6, lr}
   1e85c:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1e85e:	3004      	adds	r0, #4
   1e860:	f7ff fd06 	bl	1e270 <sys_slist_get>
	if (!node) {
   1e864:	4606      	mov	r6, r0
   1e866:	b1c0      	cbz	r0, 1e89a <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e868:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e86a:	b153      	cbz	r3, 1e882 <att_req_send_process+0x28>
   1e86c:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1e870:	d007      	beq.n	1e882 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e872:	681c      	ldr	r4, [r3, #0]
   1e874:	b10c      	cbz	r4, 1e87a <att_req_send_process+0x20>
   1e876:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   1e87a:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1e87e:	b13b      	cbz	r3, 1e890 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e880:	b964      	cbnz	r4, 1e89c <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   1e882:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1e884:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e886:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1e888:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e88a:	b933      	cbnz	r3, 1e89a <att_req_send_process+0x40>
	list->tail = node;
   1e88c:	60ae      	str	r6, [r5, #8]
}
   1e88e:	e004      	b.n	1e89a <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e890:	4631      	mov	r1, r6
   1e892:	f7f5 fefb 	bl	1468c <bt_att_chan_req_send>
   1e896:	2800      	cmp	r0, #0
   1e898:	dbf2      	blt.n	1e880 <att_req_send_process+0x26>
}
   1e89a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e89c:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1e8a0:	d004      	beq.n	1e8ac <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e8a2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e8a6:	b10b      	cbz	r3, 1e8ac <att_req_send_process+0x52>
   1e8a8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1e8ac:	4620      	mov	r0, r4
   1e8ae:	461c      	mov	r4, r3
   1e8b0:	e7e3      	b.n	1e87a <att_req_send_process+0x20>

0001e8b2 <write_cb>:
{
   1e8b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e8b4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e8b6:	4601      	mov	r1, r0
{
   1e8b8:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e8ba:	222a      	movs	r2, #42	; 0x2a
   1e8bc:	6820      	ldr	r0, [r4, #0]
   1e8be:	f000 fc66 	bl	1f18e <bt_gatt_check_perm>
   1e8c2:	4605      	mov	r5, r0
   1e8c4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e8c6:	bb00      	cbnz	r0, 1e90a <write_cb+0x58>
	if (!data->req) {
   1e8c8:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1e8ca:	68b7      	ldr	r7, [r6, #8]
   1e8cc:	68e2      	ldr	r2, [r4, #12]
   1e8ce:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1e8d0:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e8d2:	bf14      	ite	ne
   1e8d4:	2300      	movne	r3, #0
   1e8d6:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e8d8:	9301      	str	r3, [sp, #4]
   1e8da:	8a63      	ldrh	r3, [r4, #18]
   1e8dc:	9300      	str	r3, [sp, #0]
   1e8de:	4631      	mov	r1, r6
   1e8e0:	8a23      	ldrh	r3, [r4, #16]
   1e8e2:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1e8e4:	1e03      	subs	r3, r0, #0
   1e8e6:	db05      	blt.n	1e8f4 <write_cb+0x42>
   1e8e8:	8a22      	ldrh	r2, [r4, #16]
   1e8ea:	4293      	cmp	r3, r2
   1e8ec:	d10b      	bne.n	1e906 <write_cb+0x54>
	data->err = 0U;
   1e8ee:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e8f0:	2501      	movs	r5, #1
   1e8f2:	e005      	b.n	1e900 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1e8f4:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1e8f8:	d305      	bcc.n	1e906 <write_cb+0x54>
		return -err;
   1e8fa:	425b      	negs	r3, r3
   1e8fc:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1e8fe:	7523      	strb	r3, [r4, #20]
}
   1e900:	4628      	mov	r0, r5
   1e902:	b003      	add	sp, #12
   1e904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e906:	230e      	movs	r3, #14
   1e908:	e7f9      	b.n	1e8fe <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1e90a:	2500      	movs	r5, #0
   1e90c:	e7f8      	b.n	1e900 <write_cb+0x4e>

0001e90e <bt_att_sent>:
{
   1e90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1e910:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   1e914:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1e918:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1e91a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1e91e:	b10b      	cbz	r3, 1e924 <bt_att_sent+0x16>
		chan->sent(chan);
   1e920:	4638      	mov	r0, r7
   1e922:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e924:	f3bf 8f5b 	dmb	ish
   1e928:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   1e92c:	e853 2f00 	ldrex	r2, [r3]
   1e930:	f022 0210 	bic.w	r2, r2, #16
   1e934:	e843 2100 	strex	r1, r2, [r3]
   1e938:	2900      	cmp	r1, #0
   1e93a:	d1f7      	bne.n	1e92c <bt_att_sent+0x1e>
   1e93c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1e940:	b30c      	cbz	r4, 1e986 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1e942:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   1e946:	b98b      	cbnz	r3, 1e96c <bt_att_sent+0x5e>
   1e948:	6863      	ldr	r3, [r4, #4]
   1e94a:	b17b      	cbz	r3, 1e96c <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e94c:	1d20      	adds	r0, r4, #4
   1e94e:	f7ff fc8f 	bl	1e270 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e952:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1e954:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1e956:	4638      	mov	r0, r7
   1e958:	f7ff fe8a 	bl	1e670 <chan_req_send>
   1e95c:	2800      	cmp	r0, #0
   1e95e:	da12      	bge.n	1e986 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   1e960:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1e962:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e964:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1e966:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e968:	b903      	cbnz	r3, 1e96c <bt_att_sent+0x5e>
	list->tail = node;
   1e96a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1e96c:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   1e970:	4638      	mov	r0, r7
   1e972:	f7ff fe96 	bl	1e6a2 <process_queue>
	if (!err) {
   1e976:	b130      	cbz	r0, 1e986 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1e978:	f104 010c 	add.w	r1, r4, #12
   1e97c:	4638      	mov	r0, r7
}
   1e97e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1e982:	f7ff be8e 	b.w	1e6a2 <process_queue>
}
   1e986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e988 <read_cb>:
{
   1e988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1e98c:	f8d2 8000 	ldr.w	r8, [r2]
{
   1e990:	4606      	mov	r6, r0
	data->err = 0x00;
   1e992:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1e994:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1e998:	7317      	strb	r7, [r2, #12]
{
   1e99a:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1e99c:	4631      	mov	r1, r6
   1e99e:	2215      	movs	r2, #21
   1e9a0:	f000 fbf5 	bl	1f18e <bt_gatt_check_perm>
   1e9a4:	4604      	mov	r4, r0
   1e9a6:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1e9a8:	b9a0      	cbnz	r0, 1e9d4 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1e9aa:	e9cd 0000 	strd	r0, r0, [sp]
   1e9ae:	88ab      	ldrh	r3, [r5, #4]
   1e9b0:	68aa      	ldr	r2, [r5, #8]
   1e9b2:	4631      	mov	r1, r6
   1e9b4:	4640      	mov	r0, r8
   1e9b6:	f7ff fd2c 	bl	1e412 <att_chan_read>
	if (ret < 0) {
   1e9ba:	1e03      	subs	r3, r0, #0
   1e9bc:	da0c      	bge.n	1e9d8 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1e9be:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1e9c2:	bf26      	itte	cs
   1e9c4:	425b      	negcs	r3, r3
   1e9c6:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1e9c8:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1e9ca:	732b      	strb	r3, [r5, #12]
}
   1e9cc:	4620      	mov	r0, r4
   1e9ce:	b002      	add	sp, #8
   1e9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1e9d4:	463c      	mov	r4, r7
   1e9d6:	e7f9      	b.n	1e9cc <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1e9d8:	2401      	movs	r4, #1
   1e9da:	e7f7      	b.n	1e9cc <read_cb+0x44>

0001e9dc <bt_att_chan_create_pdu>:
{
   1e9dc:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e9de:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1e9e2:	3201      	adds	r2, #1
   1e9e4:	429a      	cmp	r2, r3
{
   1e9e6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1e9e8:	d81b      	bhi.n	1ea22 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1e9ea:	4608      	mov	r0, r1
   1e9ec:	f7ff fc85 	bl	1e2fa <att_op_get_type>
   1e9f0:	2802      	cmp	r0, #2
   1e9f2:	d001      	beq.n	1e9f8 <bt_att_chan_create_pdu+0x1c>
   1e9f4:	2804      	cmp	r0, #4
   1e9f6:	d10f      	bne.n	1ea18 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1e9f8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e9fc:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1e9fe:	2100      	movs	r1, #0
   1ea00:	4608      	mov	r0, r1
   1ea02:	f7ff fb58 	bl	1e0b6 <bt_l2cap_create_pdu_timeout>
   1ea06:	4604      	mov	r4, r0
	if (!buf) {
   1ea08:	b120      	cbz	r0, 1ea14 <bt_att_chan_create_pdu+0x38>
   1ea0a:	2101      	movs	r1, #1
   1ea0c:	3008      	adds	r0, #8
   1ea0e:	f7f7 fd35 	bl	1647c <net_buf_simple_add>
	hdr->code = op;
   1ea12:	7005      	strb	r5, [r0, #0]
}
   1ea14:	4620      	mov	r0, r4
   1ea16:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1ea18:	f04f 32ff 	mov.w	r2, #4294967295
   1ea1c:	f04f 33ff 	mov.w	r3, #4294967295
   1ea20:	e7ed      	b.n	1e9fe <bt_att_chan_create_pdu+0x22>
		return NULL;
   1ea22:	2400      	movs	r4, #0
   1ea24:	e7f6      	b.n	1ea14 <bt_att_chan_create_pdu+0x38>

0001ea26 <bt_att_create_pdu>:
{
   1ea26:	b570      	push	{r4, r5, r6, lr}
   1ea28:	460e      	mov	r6, r1
   1ea2a:	4615      	mov	r5, r2
	att = att_get(conn);
   1ea2c:	f7ff fedb 	bl	1e7e6 <att_get>
	if (!att) {
   1ea30:	b170      	cbz	r0, 1ea50 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ea32:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1ea34:	b163      	cbz	r3, 1ea50 <bt_att_create_pdu+0x2a>
   1ea36:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1ea3a:	d009      	beq.n	1ea50 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ea3c:	681b      	ldr	r3, [r3, #0]
   1ea3e:	b10b      	cbz	r3, 1ea44 <bt_att_create_pdu+0x1e>
   1ea40:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ea44:	1c6a      	adds	r2, r5, #1
   1ea46:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1ea4a:	428a      	cmp	r2, r1
   1ea4c:	d902      	bls.n	1ea54 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ea4e:	b93b      	cbnz	r3, 1ea60 <bt_att_create_pdu+0x3a>
}
   1ea50:	2000      	movs	r0, #0
   1ea52:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1ea54:	462a      	mov	r2, r5
   1ea56:	4631      	mov	r1, r6
}
   1ea58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1ea5c:	f7ff bfbe 	b.w	1e9dc <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea60:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   1ea64:	d004      	beq.n	1ea70 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ea66:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ea6a:	b10c      	cbz	r4, 1ea70 <bt_att_create_pdu+0x4a>
   1ea6c:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   1ea70:	4618      	mov	r0, r3
   1ea72:	4623      	mov	r3, r4
   1ea74:	e7e7      	b.n	1ea46 <bt_att_create_pdu+0x20>

0001ea76 <att_read_blob_req>:
{
   1ea76:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1ea78:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1ea7a:	8813      	ldrh	r3, [r2, #0]
   1ea7c:	8852      	ldrh	r2, [r2, #2]
   1ea7e:	9200      	str	r2, [sp, #0]
   1ea80:	210c      	movs	r1, #12
   1ea82:	220d      	movs	r2, #13
   1ea84:	f7f6 f902 	bl	14c8c <att_read_rsp>
}
   1ea88:	b003      	add	sp, #12
   1ea8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001ea8e <att_read_req>:
{
   1ea8e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1ea90:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1ea92:	2200      	movs	r2, #0
   1ea94:	881b      	ldrh	r3, [r3, #0]
   1ea96:	9200      	str	r2, [sp, #0]
   1ea98:	210a      	movs	r1, #10
   1ea9a:	220b      	movs	r2, #11
   1ea9c:	f7f6 f8f6 	bl	14c8c <att_read_rsp>
}
   1eaa0:	b003      	add	sp, #12
   1eaa2:	f85d fb04 	ldr.w	pc, [sp], #4

0001eaa6 <bt_att_init>:
	bt_gatt_init();
   1eaa6:	f7f6 bd15 	b.w	154d4 <bt_gatt_init>

0001eaaa <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1eaaa:	898a      	ldrh	r2, [r1, #12]
   1eaac:	6889      	ldr	r1, [r1, #8]
   1eaae:	2300      	movs	r3, #0
   1eab0:	f7f6 baa2 	b.w	14ff8 <att_handle_rsp>

0001eab4 <att_handle_find_type_rsp>:
   1eab4:	f7ff bff9 	b.w	1eaaa <att_handle_find_info_rsp>

0001eab8 <att_handle_read_type_rsp>:
   1eab8:	f7ff bff7 	b.w	1eaaa <att_handle_find_info_rsp>

0001eabc <att_handle_read_rsp>:
   1eabc:	f7ff bff5 	b.w	1eaaa <att_handle_find_info_rsp>

0001eac0 <att_handle_read_blob_rsp>:
   1eac0:	f7ff bff3 	b.w	1eaaa <att_handle_find_info_rsp>

0001eac4 <att_handle_read_mult_rsp>:
   1eac4:	f7ff bff1 	b.w	1eaaa <att_handle_find_info_rsp>

0001eac8 <att_handle_read_group_rsp>:
   1eac8:	f7ff bfef 	b.w	1eaaa <att_handle_find_info_rsp>

0001eacc <att_handle_write_rsp>:
   1eacc:	f7ff bfed 	b.w	1eaaa <att_handle_find_info_rsp>

0001ead0 <att_handle_prepare_write_rsp>:
   1ead0:	f7ff bfeb 	b.w	1eaaa <att_handle_find_info_rsp>

0001ead4 <att_handle_exec_write_rsp>:
   1ead4:	f7ff bfe9 	b.w	1eaaa <att_handle_find_info_rsp>

0001ead8 <att_confirm>:
   1ead8:	f7ff bfe7 	b.w	1eaaa <att_handle_find_info_rsp>

0001eadc <att_mtu_rsp>:
{
   1eadc:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   1eade:	688e      	ldr	r6, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1eae0:	8833      	ldrh	r3, [r6, #0]
   1eae2:	2b16      	cmp	r3, #22
{
   1eae4:	4604      	mov	r4, r0
   1eae6:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1eae8:	d806      	bhi.n	1eaf8 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1eaea:	2200      	movs	r2, #0
   1eaec:	2304      	movs	r3, #4
   1eaee:	4611      	mov	r1, r2
}
   1eaf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1eaf4:	f7f6 ba80 	b.w	14ff8 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1eaf8:	2317      	movs	r3, #23
   1eafa:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1eafe:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1eb02:	f7ff fc40 	bl	1e386 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1eb06:	89aa      	ldrh	r2, [r5, #12]
   1eb08:	2300      	movs	r3, #0
   1eb0a:	4631      	mov	r1, r6
   1eb0c:	4620      	mov	r0, r4
   1eb0e:	e7ef      	b.n	1eaf0 <att_mtu_rsp+0x14>

0001eb10 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1eb10:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
   1eb14:	f7f6 bab2 	b.w	1507c <bt_att_disconnected>

0001eb18 <gatt_ccc_changed>:
{
   1eb18:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1eb1a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1eb1c:	895a      	ldrh	r2, [r3, #10]
   1eb1e:	428a      	cmp	r2, r1
   1eb20:	d003      	beq.n	1eb2a <gatt_ccc_changed+0x12>
		ccc->value = value;
   1eb22:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1eb24:	68db      	ldr	r3, [r3, #12]
   1eb26:	b103      	cbz	r3, 1eb2a <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1eb28:	4718      	bx	r3
}
   1eb2a:	4770      	bx	lr

0001eb2c <gatt_indicate_rsp>:
{
   1eb2c:	b510      	push	{r4, lr}
   1eb2e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1eb30:	68a3      	ldr	r3, [r4, #8]
{
   1eb32:	460a      	mov	r2, r1
	if (params->func) {
   1eb34:	b10b      	cbz	r3, 1eb3a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1eb36:	4621      	mov	r1, r4
   1eb38:	4798      	blx	r3
	params->_ref--;
   1eb3a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1eb3c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1eb3e:	3b01      	subs	r3, #1
   1eb40:	b2db      	uxtb	r3, r3
   1eb42:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1eb44:	b122      	cbz	r2, 1eb50 <gatt_indicate_rsp+0x24>
   1eb46:	b91b      	cbnz	r3, 1eb50 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1eb48:	4620      	mov	r0, r4
}
   1eb4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1eb4e:	4710      	bx	r2
}
   1eb50:	bd10      	pop	{r4, pc}

0001eb52 <match_uuid>:
	data->attr = attr;
   1eb52:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1eb54:	8091      	strh	r1, [r2, #4]
}
   1eb56:	2000      	movs	r0, #0
   1eb58:	4770      	bx	lr

0001eb5a <gen_hash_m>:
{
   1eb5a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1eb5c:	6807      	ldr	r7, [r0, #0]
   1eb5e:	783d      	ldrb	r5, [r7, #0]
{
   1eb60:	b089      	sub	sp, #36	; 0x24
   1eb62:	4606      	mov	r6, r0
   1eb64:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1eb66:	b10d      	cbz	r5, 1eb6c <gen_hash_m+0x12>
	switch (u16->val) {
   1eb68:	2501      	movs	r5, #1
   1eb6a:	e014      	b.n	1eb96 <gen_hash_m+0x3c>
   1eb6c:	887b      	ldrh	r3, [r7, #2]
   1eb6e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1eb72:	d004      	beq.n	1eb7e <gen_hash_m+0x24>
   1eb74:	d812      	bhi.n	1eb9c <gen_hash_m+0x42>
   1eb76:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1eb7a:	2b03      	cmp	r3, #3
   1eb7c:	d8f4      	bhi.n	1eb68 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1eb7e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1eb82:	2202      	movs	r2, #2
   1eb84:	f10d 010e 	add.w	r1, sp, #14
   1eb88:	4620      	mov	r0, r4
   1eb8a:	f7fe fcc7 	bl	1d51c <tc_cmac_update>
   1eb8e:	b9e0      	cbnz	r0, 1ebca <gen_hash_m+0x70>
			state->err = -EINVAL;
   1eb90:	f06f 0315 	mvn.w	r3, #21
   1eb94:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1eb96:	4628      	mov	r0, r5
   1eb98:	b009      	add	sp, #36	; 0x24
   1eb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1eb9c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1eba0:	33ff      	adds	r3, #255	; 0xff
   1eba2:	b29b      	uxth	r3, r3
   1eba4:	2b04      	cmp	r3, #4
   1eba6:	d8df      	bhi.n	1eb68 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1eba8:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ebac:	2202      	movs	r2, #2
   1ebae:	f10d 010e 	add.w	r1, sp, #14
   1ebb2:	4620      	mov	r0, r4
   1ebb4:	f7fe fcb2 	bl	1d51c <tc_cmac_update>
   1ebb8:	2800      	cmp	r0, #0
   1ebba:	d0e9      	beq.n	1eb90 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1ebbc:	887b      	ldrh	r3, [r7, #2]
   1ebbe:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ebc2:	2202      	movs	r2, #2
   1ebc4:	f10d 010e 	add.w	r1, sp, #14
   1ebc8:	e017      	b.n	1ebfa <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1ebca:	887b      	ldrh	r3, [r7, #2]
   1ebcc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ebd0:	2202      	movs	r2, #2
   1ebd2:	f10d 010e 	add.w	r1, sp, #14
   1ebd6:	4620      	mov	r0, r4
   1ebd8:	f7fe fca0 	bl	1d51c <tc_cmac_update>
   1ebdc:	2800      	cmp	r0, #0
   1ebde:	d0d7      	beq.n	1eb90 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ebe0:	2000      	movs	r0, #0
   1ebe2:	2310      	movs	r3, #16
   1ebe4:	eb0d 0203 	add.w	r2, sp, r3
   1ebe8:	6877      	ldr	r7, [r6, #4]
   1ebea:	9000      	str	r0, [sp, #0]
   1ebec:	4631      	mov	r1, r6
   1ebee:	47b8      	blx	r7
		if (len < 0) {
   1ebf0:	1e02      	subs	r2, r0, #0
   1ebf2:	da01      	bge.n	1ebf8 <gen_hash_m+0x9e>
			state->err = len;
   1ebf4:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1ebf6:	e7ce      	b.n	1eb96 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1ebf8:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ebfa:	4620      	mov	r0, r4
   1ebfc:	f7fe fc8e 	bl	1d51c <tc_cmac_update>
   1ec00:	2800      	cmp	r0, #0
   1ec02:	d1b1      	bne.n	1eb68 <gen_hash_m+0xe>
   1ec04:	e7c4      	b.n	1eb90 <gen_hash_m+0x36>

0001ec06 <bt_addr_le_cmp>:
   1ec06:	2207      	movs	r2, #7
   1ec08:	f001 b9d1 	b.w	1ffae <memcmp>

0001ec0c <find_ccc_cfg>:
{
   1ec0c:	b513      	push	{r0, r1, r4, lr}
   1ec0e:	1c4a      	adds	r2, r1, #1
   1ec10:	460c      	mov	r4, r1
		if (conn) {
   1ec12:	b140      	cbz	r0, 1ec26 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ec14:	7809      	ldrb	r1, [r1, #0]
   1ec16:	f7ff f98b 	bl	1df30 <bt_conn_is_peer_addr_le>
   1ec1a:	2800      	cmp	r0, #0
	return NULL;
   1ec1c:	bf08      	it	eq
   1ec1e:	2400      	moveq	r4, #0
}
   1ec20:	4620      	mov	r0, r4
   1ec22:	b002      	add	sp, #8
   1ec24:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ec26:	9000      	str	r0, [sp, #0]
   1ec28:	4669      	mov	r1, sp
   1ec2a:	f8cd 0003 	str.w	r0, [sp, #3]
   1ec2e:	4610      	mov	r0, r2
   1ec30:	f7ff ffe9 	bl	1ec06 <bt_addr_le_cmp>
   1ec34:	2800      	cmp	r0, #0
	return NULL;
   1ec36:	bf18      	it	ne
   1ec38:	2400      	movne	r4, #0
   1ec3a:	e7f1      	b.n	1ec20 <find_ccc_cfg+0x14>

0001ec3c <bt_addr_le_copy>:
   1ec3c:	680b      	ldr	r3, [r1, #0]
   1ec3e:	6003      	str	r3, [r0, #0]
   1ec40:	888b      	ldrh	r3, [r1, #4]
   1ec42:	8083      	strh	r3, [r0, #4]
   1ec44:	798b      	ldrb	r3, [r1, #6]
   1ec46:	7183      	strb	r3, [r0, #6]
}
   1ec48:	4770      	bx	lr

0001ec4a <sc_save>:
{
   1ec4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ec4e:	4680      	mov	r8, r0
   1ec50:	460f      	mov	r7, r1
   1ec52:	4616      	mov	r6, r2
   1ec54:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1ec56:	f7f6 fb61 	bl	1531c <find_sc_cfg>
	if (!cfg) {
   1ec5a:	4604      	mov	r4, r0
   1ec5c:	b960      	cbnz	r0, 1ec78 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1ec5e:	4669      	mov	r1, sp
   1ec60:	9000      	str	r0, [sp, #0]
   1ec62:	f8cd 0003 	str.w	r0, [sp, #3]
   1ec66:	f7f6 fb59 	bl	1531c <find_sc_cfg>
		if (!cfg) {
   1ec6a:	4604      	mov	r4, r0
   1ec6c:	b178      	cbz	r0, 1ec8e <sc_save+0x44>
		cfg->id = id;
   1ec6e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1ec72:	4639      	mov	r1, r7
   1ec74:	f7ff ffe2 	bl	1ec3c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1ec78:	8922      	ldrh	r2, [r4, #8]
   1ec7a:	8963      	ldrh	r3, [r4, #10]
   1ec7c:	b91a      	cbnz	r2, 1ec86 <sc_save+0x3c>
   1ec7e:	b923      	cbnz	r3, 1ec8a <sc_save+0x40>
		cfg->data.start = start;
   1ec80:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1ec82:	8165      	strh	r5, [r4, #10]
   1ec84:	e003      	b.n	1ec8e <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   1ec86:	4296      	cmp	r6, r2
   1ec88:	d304      	bcc.n	1ec94 <sc_save+0x4a>
   1ec8a:	429d      	cmp	r5, r3
   1ec8c:	d8f9      	bhi.n	1ec82 <sc_save+0x38>
}
   1ec8e:	b002      	add	sp, #8
   1ec90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1ec94:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1ec96:	e7f8      	b.n	1ec8a <sc_save+0x40>

0001ec98 <bt_gatt_attr_write_ccc>:
{
   1ec98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ec9c:	461f      	mov	r7, r3
   1ec9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1eca2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1eca6:	4606      	mov	r6, r0
   1eca8:	4688      	mov	r8, r1
	if (offset) {
   1ecaa:	2b00      	cmp	r3, #0
   1ecac:	d144      	bne.n	1ed38 <bt_gatt_attr_write_ccc+0xa0>
	if (!len || len > sizeof(uint16_t)) {
   1ecae:	1e7b      	subs	r3, r7, #1
   1ecb0:	2b01      	cmp	r3, #1
   1ecb2:	d844      	bhi.n	1ed3e <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(uint16_t)) {
   1ecb4:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1ecb6:	7815      	ldrb	r5, [r2, #0]
   1ecb8:	bf18      	it	ne
   1ecba:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1ecbc:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1ecbe:	bf0c      	ite	eq
   1ecc0:	b2ad      	uxtheq	r5, r5
   1ecc2:	ea45 2502 	orrne.w	r5, r5, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1ecc6:	f7ff ffa1 	bl	1ec0c <find_ccc_cfg>
	if (!cfg) {
   1ecca:	4604      	mov	r4, r0
   1eccc:	b980      	cbnz	r0, 1ecf0 <bt_gatt_attr_write_ccc+0x58>
		if (!value) {
   1ecce:	b91d      	cbnz	r5, 1ecd8 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1ecd0:	4638      	mov	r0, r7
}
   1ecd2:	b003      	add	sp, #12
   1ecd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1ecd8:	4649      	mov	r1, r9
   1ecda:	f7ff ff97 	bl	1ec0c <find_ccc_cfg>
		if (!cfg) {
   1ecde:	4604      	mov	r4, r0
   1ece0:	b380      	cbz	r0, 1ed44 <bt_gatt_attr_write_ccc+0xac>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ece2:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1ece6:	3001      	adds	r0, #1
   1ece8:	f7ff ffa8 	bl	1ec3c <bt_addr_le_copy>
		cfg->id = conn->id;
   1ecec:	7a33      	ldrb	r3, [r6, #8]
   1ecee:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1ecf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ecf4:	b9a3      	cbnz	r3, 1ed20 <bt_gatt_attr_write_ccc+0x88>
	if (cfg->value != ccc->value) {
   1ecf6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1ecfa:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1ecfc:	42ab      	cmp	r3, r5
   1ecfe:	d003      	beq.n	1ed08 <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   1ed00:	4649      	mov	r1, r9
   1ed02:	4640      	mov	r0, r8
   1ed04:	f7ff ff08 	bl	1eb18 <gatt_ccc_changed>
	if (!value) {
   1ed08:	2d00      	cmp	r5, #0
   1ed0a:	d1e1      	bne.n	1ecd0 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ed0c:	4669      	mov	r1, sp
   1ed0e:	1c60      	adds	r0, r4, #1
   1ed10:	9500      	str	r5, [sp, #0]
   1ed12:	f8cd 5003 	str.w	r5, [sp, #3]
   1ed16:	f7ff ff91 	bl	1ec3c <bt_addr_le_copy>
	cfg->id = 0U;
   1ed1a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1ed1c:	8125      	strh	r5, [r4, #8]
}
   1ed1e:	e7d7      	b.n	1ecd0 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1ed20:	462a      	mov	r2, r5
   1ed22:	4641      	mov	r1, r8
   1ed24:	4630      	mov	r0, r6
   1ed26:	4798      	blx	r3
		if (write < 0) {
   1ed28:	2800      	cmp	r0, #0
   1ed2a:	dbd2      	blt.n	1ecd2 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1ed2c:	3801      	subs	r0, #1
   1ed2e:	2801      	cmp	r0, #1
   1ed30:	d9e1      	bls.n	1ecf6 <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1ed32:	f06f 000d 	mvn.w	r0, #13
   1ed36:	e7cc      	b.n	1ecd2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ed38:	f06f 0006 	mvn.w	r0, #6
   1ed3c:	e7c9      	b.n	1ecd2 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ed3e:	f06f 000c 	mvn.w	r0, #12
   1ed42:	e7c6      	b.n	1ecd2 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ed44:	f06f 0010 	mvn.w	r0, #16
   1ed48:	e7c3      	b.n	1ecd2 <bt_gatt_attr_write_ccc+0x3a>

0001ed4a <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   1ed4a:	2300      	movs	r3, #0
   1ed4c:	6003      	str	r3, [r0, #0]
   1ed4e:	6043      	str	r3, [r0, #4]
   1ed50:	6083      	str	r3, [r0, #8]
}
   1ed52:	4770      	bx	lr

0001ed54 <sc_clear>:
{
   1ed54:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ed56:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1ed5a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ed5c:	4629      	mov	r1, r5
   1ed5e:	7a00      	ldrb	r0, [r0, #8]
   1ed60:	f7fe ffb1 	bl	1dcc6 <bt_addr_le_is_bonded>
   1ed64:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1ed66:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ed68:	f7f6 fad8 	bl	1531c <find_sc_cfg>
		if (cfg) {
   1ed6c:	b118      	cbz	r0, 1ed76 <sc_clear+0x22>
}
   1ed6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   1ed72:	f7ff bfea 	b.w	1ed4a <clear_sc_cfg>
}
   1ed76:	bd38      	pop	{r3, r4, r5, pc}

0001ed78 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1ed78:	2a02      	cmp	r2, #2
{
   1ed7a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1ed7c:	d108      	bne.n	1ed90 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1ed7e:	2300      	movs	r3, #0
   1ed80:	f100 0190 	add.w	r1, r0, #144	; 0x90
   1ed84:	461a      	mov	r2, r3
   1ed86:	7a00      	ldrb	r0, [r0, #8]
   1ed88:	f7ff ff5f 	bl	1ec4a <sc_save>
}
   1ed8c:	2002      	movs	r0, #2
   1ed8e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1ed90:	f7ff ffe0 	bl	1ed54 <sc_clear>
   1ed94:	e7fa      	b.n	1ed8c <sc_ccc_cfg_write+0x14>

0001ed96 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1ed96:	b538      	push	{r3, r4, r5, lr}
   1ed98:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   1ed9c:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   1ed9e:	460c      	mov	r4, r1
   1eda0:	4611      	mov	r1, r2
	if (offset > value_len) {
   1eda2:	d30a      	bcc.n	1edba <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   1eda4:	1aad      	subs	r5, r5, r2
   1eda6:	42a5      	cmp	r5, r4
   1eda8:	bfa8      	it	ge
   1edaa:	4625      	movge	r5, r4
   1edac:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1edae:	462a      	mov	r2, r5
   1edb0:	4419      	add	r1, r3
   1edb2:	f001 f90a 	bl	1ffca <memcpy>
}
   1edb6:	4628      	mov	r0, r5
   1edb8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1edba:	f06f 0506 	mvn.w	r5, #6
   1edbe:	e7fa      	b.n	1edb6 <bt_gatt_attr_read.constprop.0+0x20>

0001edc0 <bt_gatt_attr_read_ccc>:
{
   1edc0:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1edc2:	68c9      	ldr	r1, [r1, #12]
{
   1edc4:	b085      	sub	sp, #20
   1edc6:	4614      	mov	r4, r2
   1edc8:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   1edca:	f7ff ff1f 	bl	1ec0c <find_ccc_cfg>
	if (cfg) {
   1edce:	b100      	cbz	r0, 1edd2 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   1edd0:	8900      	ldrh	r0, [r0, #8]
   1edd2:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1edd6:	2302      	movs	r3, #2
   1edd8:	9300      	str	r3, [sp, #0]
   1edda:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1edde:	f10d 030e 	add.w	r3, sp, #14
   1ede2:	4629      	mov	r1, r5
   1ede4:	4620      	mov	r0, r4
   1ede6:	f7ff ffd6 	bl	1ed96 <bt_gatt_attr_read.constprop.0>
}
   1edea:	b005      	add	sp, #20
   1edec:	bd30      	pop	{r4, r5, pc}

0001edee <bt_gatt_attr_read_service>:
{
   1edee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1edf0:	460c      	mov	r4, r1
   1edf2:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   1edf4:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   1edf6:	781c      	ldrb	r4, [r3, #0]
{
   1edf8:	4610      	mov	r0, r2
   1edfa:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1edfe:	b954      	cbnz	r4, 1ee16 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1ee00:	885b      	ldrh	r3, [r3, #2]
   1ee02:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1ee06:	2302      	movs	r3, #2
   1ee08:	9300      	str	r3, [sp, #0]
   1ee0a:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1ee0e:	f7ff ffc2 	bl	1ed96 <bt_gatt_attr_read.constprop.0>
}
   1ee12:	b004      	add	sp, #16
   1ee14:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1ee16:	2410      	movs	r4, #16
   1ee18:	9400      	str	r4, [sp, #0]
   1ee1a:	3301      	adds	r3, #1
   1ee1c:	e7f7      	b.n	1ee0e <bt_gatt_attr_read_service+0x20>

0001ee1e <cf_read>:
{
   1ee1e:	b530      	push	{r4, r5, lr}
   1ee20:	b085      	sub	sp, #20
   1ee22:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   1ee24:	2300      	movs	r3, #0
{
   1ee26:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   1ee28:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   1ee2c:	f7f6 fa58 	bl	152e0 <find_cf_cfg>
	if (cfg) {
   1ee30:	b110      	cbz	r0, 1ee38 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   1ee32:	7a03      	ldrb	r3, [r0, #8]
   1ee34:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1ee38:	2301      	movs	r3, #1
   1ee3a:	9300      	str	r3, [sp, #0]
   1ee3c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1ee40:	ab03      	add	r3, sp, #12
   1ee42:	4629      	mov	r1, r5
   1ee44:	4620      	mov	r0, r4
   1ee46:	f7ff ffa6 	bl	1ed96 <bt_gatt_attr_read.constprop.0>
}
   1ee4a:	b005      	add	sp, #20
   1ee4c:	bd30      	pop	{r4, r5, pc}

0001ee4e <read_name>:
{
   1ee4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee52:	4614      	mov	r4, r2
   1ee54:	461d      	mov	r5, r3
   1ee56:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   1ee5a:	f7f3 ffcb 	bl	12df4 <bt_get_name>
   1ee5e:	4606      	mov	r6, r0
				 strlen(name));
   1ee60:	f7ed f9cc 	bl	c1fc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1ee64:	b280      	uxth	r0, r0
   1ee66:	9006      	str	r0, [sp, #24]
   1ee68:	4633      	mov	r3, r6
   1ee6a:	463a      	mov	r2, r7
   1ee6c:	4629      	mov	r1, r5
   1ee6e:	4620      	mov	r0, r4
}
   1ee70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1ee74:	f7ff bf8f 	b.w	1ed96 <bt_gatt_attr_read.constprop.0>

0001ee78 <read_appearance>:
{
   1ee78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1ee7a:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ee7c:	2300      	movs	r3, #0
   1ee7e:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1ee82:	2302      	movs	r3, #2
   1ee84:	9300      	str	r3, [sp, #0]
{
   1ee86:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1ee88:	f10d 030e 	add.w	r3, sp, #14
   1ee8c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1ee90:	f7ff ff81 	bl	1ed96 <bt_gatt_attr_read.constprop.0>
}
   1ee94:	b005      	add	sp, #20
   1ee96:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee9a <clear_cf_cfg>:
{
   1ee9a:	b513      	push	{r0, r1, r4, lr}
   1ee9c:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ee9e:	2400      	movs	r4, #0
   1eea0:	4669      	mov	r1, sp
   1eea2:	3001      	adds	r0, #1
   1eea4:	9400      	str	r4, [sp, #0]
   1eea6:	f8cd 4003 	str.w	r4, [sp, #3]
   1eeaa:	f7ff fec7 	bl	1ec3c <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   1eeae:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1eeb0:	320c      	adds	r2, #12
   1eeb2:	f3bf 8f5b 	dmb	ish
   1eeb6:	e852 3f00 	ldrex	r3, [r2]
   1eeba:	e842 4100 	strex	r1, r4, [r2]
   1eebe:	2900      	cmp	r1, #0
   1eec0:	d1f9      	bne.n	1eeb6 <clear_cf_cfg+0x1c>
   1eec2:	f3bf 8f5b 	dmb	ish
}
   1eec6:	b002      	add	sp, #8
   1eec8:	bd10      	pop	{r4, pc}

0001eeca <gatt_write_ccc_buf>:
{
   1eeca:	b538      	push	{r3, r4, r5, lr}
   1eecc:	f100 0508 	add.w	r5, r0, #8
   1eed0:	2102      	movs	r1, #2
   1eed2:	4628      	mov	r0, r5
   1eed4:	4614      	mov	r4, r2
   1eed6:	f7f7 fad1 	bl	1647c <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   1eeda:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   1eedc:	89a1      	ldrh	r1, [r4, #12]
   1eede:	8003      	strh	r3, [r0, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eee0:	3410      	adds	r4, #16
   1eee2:	4628      	mov	r0, r5
   1eee4:	f000 faaf 	bl	1f446 <net_buf_simple_add_le16>
   1eee8:	f3bf 8f5b 	dmb	ish
   1eeec:	e854 3f00 	ldrex	r3, [r4]
   1eef0:	f043 0304 	orr.w	r3, r3, #4
   1eef4:	e844 3200 	strex	r2, r3, [r4]
   1eef8:	2a00      	cmp	r2, #0
   1eefa:	d1f7      	bne.n	1eeec <gatt_write_ccc_buf+0x22>
   1eefc:	f3bf 8f5b 	dmb	ish
}
   1ef00:	2000      	movs	r0, #0
   1ef02:	bd38      	pop	{r3, r4, r5, pc}

0001ef04 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1ef04:	2301      	movs	r3, #1
   1ef06:	408b      	lsls	r3, r1
   1ef08:	f3bf 8f5b 	dmb	ish
   1ef0c:	e850 2f00 	ldrex	r2, [r0]
   1ef10:	431a      	orrs	r2, r3
   1ef12:	e840 2100 	strex	r1, r2, [r0]
   1ef16:	2900      	cmp	r1, #0
   1ef18:	d1f8      	bne.n	1ef0c <atomic_set_bit+0x8>
   1ef1a:	f3bf 8f5b 	dmb	ish
}
   1ef1e:	4770      	bx	lr

0001ef20 <sc_restore_rsp>:
{
   1ef20:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1ef22:	f7f6 f9dd 	bl	152e0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1ef26:	b140      	cbz	r0, 1ef3a <sc_restore_rsp+0x1a>
   1ef28:	7a03      	ldrb	r3, [r0, #8]
   1ef2a:	07db      	lsls	r3, r3, #31
   1ef2c:	d505      	bpl.n	1ef3a <sc_restore_rsp+0x1a>
}
   1ef2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ef32:	2100      	movs	r1, #0
   1ef34:	300c      	adds	r0, #12
   1ef36:	f7ff bfe5 	b.w	1ef04 <atomic_set_bit>
}
   1ef3a:	bd08      	pop	{r3, pc}

0001ef3c <cf_write>:
{
   1ef3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef40:	4698      	mov	r8, r3
   1ef42:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1ef46:	2b01      	cmp	r3, #1
{
   1ef48:	4606      	mov	r6, r0
   1ef4a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1ef4c:	d830      	bhi.n	1efb0 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1ef4e:	4443      	add	r3, r8
   1ef50:	2b01      	cmp	r3, #1
   1ef52:	4645      	mov	r5, r8
   1ef54:	dc2f      	bgt.n	1efb6 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   1ef56:	f7f6 f9c3 	bl	152e0 <find_cf_cfg>
	if (!cfg) {
   1ef5a:	4604      	mov	r4, r0
   1ef5c:	b918      	cbnz	r0, 1ef66 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1ef5e:	f7f6 f9bf 	bl	152e0 <find_cf_cfg>
	if (!cfg) {
   1ef62:	4604      	mov	r4, r0
   1ef64:	b350      	cbz	r0, 1efbc <cf_write+0x80>
{
   1ef66:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ef68:	f1b8 0f00 	cmp.w	r8, #0
   1ef6c:	d10e      	bne.n	1ef8c <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ef6e:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1ef72:	1c60      	adds	r0, r4, #1
   1ef74:	f7ff fe62 	bl	1ec3c <bt_addr_le_copy>
	cfg->id = conn->id;
   1ef78:	4620      	mov	r0, r4
   1ef7a:	7a33      	ldrb	r3, [r6, #8]
   1ef7c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1ef80:	2100      	movs	r1, #0
   1ef82:	f7ff ffbf 	bl	1ef04 <atomic_set_bit>
}
   1ef86:	4628      	mov	r0, r5
   1ef88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ef8c:	7a20      	ldrb	r0, [r4, #8]
   1ef8e:	fa20 f301 	lsr.w	r3, r0, r1
   1ef92:	07da      	lsls	r2, r3, #31
   1ef94:	d503      	bpl.n	1ef9e <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1ef96:	783b      	ldrb	r3, [r7, #0]
   1ef98:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ef9a:	07db      	lsls	r3, r3, #31
   1ef9c:	d511      	bpl.n	1efc2 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ef9e:	3101      	adds	r1, #1
   1efa0:	2903      	cmp	r1, #3
   1efa2:	d1e1      	bne.n	1ef68 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1efa4:	783b      	ldrb	r3, [r7, #0]
   1efa6:	f003 0307 	and.w	r3, r3, #7
   1efaa:	4318      	orrs	r0, r3
   1efac:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1efae:	e7de      	b.n	1ef6e <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1efb0:	f06f 0506 	mvn.w	r5, #6
   1efb4:	e7e7      	b.n	1ef86 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1efb6:	f06f 050c 	mvn.w	r5, #12
   1efba:	e7e4      	b.n	1ef86 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1efbc:	f06f 0510 	mvn.w	r5, #16
   1efc0:	e7e1      	b.n	1ef86 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1efc2:	f06f 0512 	mvn.w	r5, #18
   1efc6:	e7de      	b.n	1ef86 <cf_write+0x4a>

0001efc8 <gatt_sub_remove>:
{
   1efc8:	b538      	push	{r3, r4, r5, lr}
   1efca:	460c      	mov	r4, r1
	if (params) {
   1efcc:	4619      	mov	r1, r3
   1efce:	b16b      	cbz	r3, 1efec <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1efd0:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   1efd4:	695b      	ldr	r3, [r3, #20]
   1efd6:	b982      	cbnz	r2, 1effa <gatt_sub_remove+0x32>
   1efd8:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   1efda:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1efdc:	4295      	cmp	r5, r2
   1efde:	d100      	bne.n	1efe2 <gatt_sub_remove+0x1a>
	list->tail = node;
   1efe0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1efe2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1efe4:	680d      	ldr	r5, [r1, #0]
   1efe6:	614b      	str	r3, [r1, #20]
   1efe8:	461a      	mov	r2, r3
   1efea:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   1efec:	68a3      	ldr	r3, [r4, #8]
   1efee:	b953      	cbnz	r3, 1f006 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   1eff0:	4620      	mov	r0, r4
}
   1eff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   1eff6:	f7f6 b9bf 	b.w	15378 <gatt_sub_free>
   1effa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1effc:	68e3      	ldr	r3, [r4, #12]
   1effe:	429d      	cmp	r5, r3
	list->tail = node;
   1f000:	bf08      	it	eq
   1f002:	60e2      	streq	r2, [r4, #12]
}
   1f004:	e7ed      	b.n	1efe2 <gatt_sub_remove+0x1a>
}
   1f006:	bd38      	pop	{r3, r4, r5, pc}

0001f008 <gatt_write_ccc_rsp>:
{
   1f008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f00c:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f00e:	f3bf 8f5b 	dmb	ish
   1f012:	4606      	mov	r6, r0
   1f014:	460d      	mov	r5, r1
   1f016:	f104 0310 	add.w	r3, r4, #16
   1f01a:	e853 2f00 	ldrex	r2, [r3]
   1f01e:	f022 0204 	bic.w	r2, r2, #4
   1f022:	e843 2100 	strex	r1, r2, [r3]
   1f026:	2900      	cmp	r1, #0
   1f028:	d1f7      	bne.n	1f01a <gatt_write_ccc_rsp+0x12>
   1f02a:	f3bf 8f5b 	dmb	ish
	if (err) {
   1f02e:	b1dd      	cbz	r5, 1f068 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   1f030:	f7f6 f984 	bl	1533c <gatt_sub_find>
		if (!sub) {
   1f034:	4601      	mov	r1, r0
   1f036:	b300      	cbz	r0, 1f07a <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1f038:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f03a:	b143      	cbz	r3, 1f04e <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f03c:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1f03e:	f104 0014 	add.w	r0, r4, #20
   1f042:	4283      	cmp	r3, r0
   1f044:	d10b      	bne.n	1f05e <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   1f046:	4623      	mov	r3, r4
   1f048:	4630      	mov	r0, r6
   1f04a:	f7ff ffbd 	bl	1efc8 <gatt_sub_remove>
	if (params->write) {
   1f04e:	6863      	ldr	r3, [r4, #4]
   1f050:	b19b      	cbz	r3, 1f07a <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   1f052:	4629      	mov	r1, r5
   1f054:	4630      	mov	r0, r6
   1f056:	2200      	movs	r2, #0
}
   1f058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1f05c:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f05e:	2a00      	cmp	r2, #0
   1f060:	d0f5      	beq.n	1f04e <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f062:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f064:	6812      	ldr	r2, [r2, #0]
   1f066:	e7ec      	b.n	1f042 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   1f068:	89a3      	ldrh	r3, [r4, #12]
   1f06a:	2b00      	cmp	r3, #0
   1f06c:	d1ef      	bne.n	1f04e <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   1f06e:	6827      	ldr	r7, [r4, #0]
   1f070:	462b      	mov	r3, r5
   1f072:	462a      	mov	r2, r5
   1f074:	4621      	mov	r1, r4
   1f076:	47b8      	blx	r7
   1f078:	e7e9      	b.n	1f04e <gatt_write_ccc_rsp+0x46>
}
   1f07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f07e <gatt_req_send>:
{
   1f07e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f082:	4606      	mov	r6, r0
   1f084:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1f086:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1f08a:	2100      	movs	r1, #0
{
   1f08c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   1f090:	4614      	mov	r4, r2
   1f092:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1f094:	f7f5 ff88 	bl	14fa8 <bt_att_req_alloc>
	if (!req) {
   1f098:	4605      	mov	r5, r0
   1f09a:	b920      	cbnz	r0, 1f0a6 <gatt_req_send+0x28>
		return -ENOMEM;
   1f09c:	f06f 040b 	mvn.w	r4, #11
}
   1f0a0:	4620      	mov	r0, r4
   1f0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   1f0a6:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   1f0aa:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   1f0ac:	f89d 1020 	ldrb.w	r1, [sp, #32]
   1f0b0:	464a      	mov	r2, r9
   1f0b2:	4630      	mov	r0, r6
   1f0b4:	f7ff fcb7 	bl	1ea26 <bt_att_create_pdu>
	if (!buf) {
   1f0b8:	b918      	cbnz	r0, 1f0c2 <gatt_req_send+0x44>
		bt_att_req_free(req);
   1f0ba:	4628      	mov	r0, r5
   1f0bc:	f7f5 ff8a 	bl	14fd4 <bt_att_req_free>
   1f0c0:	e7ec      	b.n	1f09c <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   1f0c2:	4622      	mov	r2, r4
	req->buf = buf;
   1f0c4:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   1f0c6:	4649      	mov	r1, r9
   1f0c8:	47b8      	blx	r7
	if (err) {
   1f0ca:	4604      	mov	r4, r0
   1f0cc:	b118      	cbz	r0, 1f0d6 <gatt_req_send+0x58>
		bt_att_req_free(req);
   1f0ce:	4628      	mov	r0, r5
   1f0d0:	f7f5 ff80 	bl	14fd4 <bt_att_req_free>
   1f0d4:	e7e4      	b.n	1f0a0 <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   1f0d6:	4629      	mov	r1, r5
   1f0d8:	4630      	mov	r0, r6
   1f0da:	f7f6 f897 	bl	1520c <bt_att_req_send>
	if (err) {
   1f0de:	4604      	mov	r4, r0
   1f0e0:	2800      	cmp	r0, #0
   1f0e2:	d0dd      	beq.n	1f0a0 <gatt_req_send+0x22>
   1f0e4:	e7f3      	b.n	1f0ce <gatt_req_send+0x50>

0001f0e6 <bt_gatt_attr_value_handle>:
{
   1f0e6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f0e8:	4604      	mov	r4, r0
   1f0ea:	b910      	cbnz	r0, 1f0f2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f0ec:	2000      	movs	r0, #0
}
   1f0ee:	b002      	add	sp, #8
   1f0f0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f0f2:	2300      	movs	r3, #0
   1f0f4:	f88d 3004 	strb.w	r3, [sp, #4]
   1f0f8:	6800      	ldr	r0, [r0, #0]
   1f0fa:	f642 0303 	movw	r3, #10243	; 0x2803
   1f0fe:	a901      	add	r1, sp, #4
   1f100:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f104:	f7fe fadd 	bl	1d6c2 <bt_uuid_cmp>
   1f108:	2800      	cmp	r0, #0
   1f10a:	d1ef      	bne.n	1f0ec <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f10c:	68e3      	ldr	r3, [r4, #12]
   1f10e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f110:	2800      	cmp	r0, #0
   1f112:	d1ec      	bne.n	1f0ee <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f114:	4620      	mov	r0, r4
   1f116:	f7f6 fa4b 	bl	155b0 <bt_gatt_attr_get_handle>
   1f11a:	3001      	adds	r0, #1
   1f11c:	b280      	uxth	r0, r0
	return handle;
   1f11e:	e7e6      	b.n	1f0ee <bt_gatt_attr_value_handle+0x8>

0001f120 <bt_gatt_attr_read_chrc>:
{
   1f120:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f122:	68ce      	ldr	r6, [r1, #12]
{
   1f124:	b088      	sub	sp, #32
   1f126:	4608      	mov	r0, r1
   1f128:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   1f12a:	79b3      	ldrb	r3, [r6, #6]
   1f12c:	f88d 300c 	strb.w	r3, [sp, #12]
{
   1f130:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f132:	f7ff ffd8 	bl	1f0e6 <bt_gatt_attr_value_handle>
   1f136:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f13a:	6830      	ldr	r0, [r6, #0]
   1f13c:	7803      	ldrb	r3, [r0, #0]
   1f13e:	b96b      	cbnz	r3, 1f15c <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f140:	8843      	ldrh	r3, [r0, #2]
   1f142:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   1f146:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f148:	9300      	str	r3, [sp, #0]
   1f14a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1f14e:	ab03      	add	r3, sp, #12
   1f150:	4629      	mov	r1, r5
   1f152:	4620      	mov	r0, r4
   1f154:	f7ff fe1f 	bl	1ed96 <bt_gatt_attr_read.constprop.0>
}
   1f158:	b008      	add	sp, #32
   1f15a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f15c:	1c43      	adds	r3, r0, #1
   1f15e:	f10d 020f 	add.w	r2, sp, #15
   1f162:	3011      	adds	r0, #17
   1f164:	f853 1b04 	ldr.w	r1, [r3], #4
   1f168:	f842 1b04 	str.w	r1, [r2], #4
   1f16c:	4283      	cmp	r3, r0
   1f16e:	d1f9      	bne.n	1f164 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   1f170:	2313      	movs	r3, #19
   1f172:	e7e9      	b.n	1f148 <bt_gatt_attr_read_chrc+0x28>

0001f174 <bt_gatt_foreach_attr>:
{
   1f174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f176:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f17a:	2300      	movs	r3, #0
   1f17c:	9300      	str	r3, [sp, #0]
   1f17e:	461a      	mov	r2, r3
   1f180:	f7f6 fa62 	bl	15648 <bt_gatt_foreach_attr_type>
}
   1f184:	b005      	add	sp, #20
   1f186:	f85d fb04 	ldr.w	pc, [sp], #4

0001f18a <db_hash_process>:
	db_hash_gen(true);
   1f18a:	f7f6 bad3 	b.w	15734 <db_hash_gen.isra.0>

0001f18e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1f18e:	07d3      	lsls	r3, r2, #31
{
   1f190:	b510      	push	{r4, lr}
   1f192:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1f194:	d504      	bpl.n	1f1a0 <bt_gatt_check_perm+0x12>
   1f196:	f014 0f15 	tst.w	r4, #21
   1f19a:	d017      	beq.n	1f1cc <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f19c:	684b      	ldr	r3, [r1, #4]
   1f19e:	b1ab      	cbz	r3, 1f1cc <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1f1a0:	0793      	lsls	r3, r2, #30
   1f1a2:	d504      	bpl.n	1f1ae <bt_gatt_check_perm+0x20>
   1f1a4:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1f1a8:	d012      	beq.n	1f1d0 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1f1aa:	688b      	ldr	r3, [r1, #8]
   1f1ac:	b183      	cbz	r3, 1f1d0 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1f1ae:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1f1b0:	f014 0f30 	tst.w	r4, #48	; 0x30
   1f1b4:	d104      	bne.n	1f1c0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1f1b6:	f014 000c 	ands.w	r0, r4, #12
   1f1ba:	bf18      	it	ne
   1f1bc:	200f      	movne	r0, #15
}
   1f1be:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1f1c0:	f7fe feb4 	bl	1df2c <bt_conn_get_security>
   1f1c4:	2802      	cmp	r0, #2
   1f1c6:	d8f6      	bhi.n	1f1b6 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1f1c8:	2005      	movs	r0, #5
   1f1ca:	e7f8      	b.n	1f1be <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1f1cc:	2002      	movs	r0, #2
   1f1ce:	e7f6      	b.n	1f1be <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1f1d0:	2003      	movs	r0, #3
   1f1d2:	e7f4      	b.n	1f1be <bt_gatt_check_perm+0x30>

0001f1d4 <gatt_notify>:
{
   1f1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f1d8:	4614      	mov	r4, r2
   1f1da:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1f1dc:	2214      	movs	r2, #20
   1f1de:	6861      	ldr	r1, [r4, #4]
{
   1f1e0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1f1e2:	f7ff ffd4 	bl	1f18e <bt_gatt_check_perm>
   1f1e6:	bb08      	cbnz	r0, 1f22c <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1f1e8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1f1ea:	211b      	movs	r1, #27
   1f1ec:	3202      	adds	r2, #2
   1f1ee:	4638      	mov	r0, r7
   1f1f0:	f7ff fc19 	bl	1ea26 <bt_att_create_pdu>
	if (!buf) {
   1f1f4:	4605      	mov	r5, r0
   1f1f6:	b1e8      	cbz	r0, 1f234 <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   1f1f8:	f100 0908 	add.w	r9, r0, #8
   1f1fc:	2102      	movs	r1, #2
   1f1fe:	4648      	mov	r0, r9
   1f200:	f7f7 f93c 	bl	1647c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1f204:	4606      	mov	r6, r0
   1f206:	89a1      	ldrh	r1, [r4, #12]
   1f208:	f826 8b02 	strh.w	r8, [r6], #2
   1f20c:	4648      	mov	r0, r9
   1f20e:	f7f7 f935 	bl	1647c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f212:	89a2      	ldrh	r2, [r4, #12]
   1f214:	68a1      	ldr	r1, [r4, #8]
   1f216:	4630      	mov	r0, r6
   1f218:	f000 fed7 	bl	1ffca <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1f21c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1f220:	4629      	mov	r1, r5
   1f222:	4638      	mov	r0, r7
}
   1f224:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1f228:	f7f5 bf82 	b.w	15130 <bt_att_send>
		return -EPERM;
   1f22c:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1f234:	f06f 000b 	mvn.w	r0, #11
   1f238:	e7fa      	b.n	1f230 <gatt_notify+0x5c>

0001f23a <bt_gatt_notification>:
{
   1f23a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f23e:	4607      	mov	r7, r0
   1f240:	4688      	mov	r8, r1
   1f242:	4691      	mov	r9, r2
   1f244:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1f246:	f7f6 f879 	bl	1533c <gatt_sub_find>
	if (!sub) {
   1f24a:	b1f8      	cbz	r0, 1f28c <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1f24c:	6883      	ldr	r3, [r0, #8]
   1f24e:	b1eb      	cbz	r3, 1f28c <bt_gatt_notification+0x52>
   1f250:	f1b3 0614 	subs.w	r6, r3, #20
   1f254:	d01a      	beq.n	1f28c <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f256:	681c      	ldr	r4, [r3, #0]
   1f258:	b104      	cbz	r4, 1f25c <bt_gatt_notification+0x22>
   1f25a:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1f25c:	8933      	ldrh	r3, [r6, #8]
   1f25e:	4543      	cmp	r3, r8
   1f260:	d10a      	bne.n	1f278 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1f262:	6835      	ldr	r5, [r6, #0]
   1f264:	4653      	mov	r3, sl
   1f266:	464a      	mov	r2, r9
   1f268:	4631      	mov	r1, r6
   1f26a:	4638      	mov	r0, r7
   1f26c:	47a8      	blx	r5
   1f26e:	b918      	cbnz	r0, 1f278 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1f270:	4631      	mov	r1, r6
   1f272:	4638      	mov	r0, r7
   1f274:	f7f6 fca0 	bl	15bb8 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1f278:	b144      	cbz	r4, 1f28c <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f27a:	f114 0514 	adds.w	r5, r4, #20
   1f27e:	d002      	beq.n	1f286 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f280:	6965      	ldr	r5, [r4, #20]
   1f282:	b105      	cbz	r5, 1f286 <bt_gatt_notification+0x4c>
   1f284:	3d14      	subs	r5, #20
{
   1f286:	4626      	mov	r6, r4
   1f288:	462c      	mov	r4, r5
   1f28a:	e7e7      	b.n	1f25c <bt_gatt_notification+0x22>
}
   1f28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f290 <bt_gatt_mult_notification>:
{
   1f290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f294:	b085      	sub	sp, #20
   1f296:	4681      	mov	r9, r0
   1f298:	460c      	mov	r4, r1
   1f29a:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   1f29c:	f7f6 f84e 	bl	1533c <gatt_sub_find>
	if (!sub) {
   1f2a0:	4607      	mov	r7, r0
   1f2a2:	b140      	cbz	r0, 1f2b6 <bt_gatt_mult_notification+0x26>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1f2a4:	462a      	mov	r2, r5
   1f2a6:	4621      	mov	r1, r4
   1f2a8:	a801      	add	r0, sp, #4
   1f2aa:	f000 f89e 	bl	1f3ea <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1f2ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1f2b2:	2b04      	cmp	r3, #4
   1f2b4:	d802      	bhi.n	1f2bc <bt_gatt_mult_notification+0x2c>
}
   1f2b6:	b005      	add	sp, #20
   1f2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1f2bc:	2104      	movs	r1, #4
   1f2be:	eb0d 0001 	add.w	r0, sp, r1
   1f2c2:	f7f7 f8b9 	bl	16438 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1f2c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1f2ca:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		if (len > buf.len) {
   1f2ce:	455b      	cmp	r3, fp
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1f2d0:	4605      	mov	r5, r0
		if (len > buf.len) {
   1f2d2:	d3f0      	bcc.n	1f2b6 <bt_gatt_mult_notification+0x26>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1f2d4:	68bb      	ldr	r3, [r7, #8]
   1f2d6:	b303      	cbz	r3, 1f31a <bt_gatt_mult_notification+0x8a>
   1f2d8:	f1b3 0614 	subs.w	r6, r3, #20
   1f2dc:	d01d      	beq.n	1f31a <bt_gatt_mult_notification+0x8a>
   1f2de:	681c      	ldr	r4, [r3, #0]
   1f2e0:	b104      	cbz	r4, 1f2e4 <bt_gatt_mult_notification+0x54>
   1f2e2:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1f2e4:	46a8      	mov	r8, r5
   1f2e6:	f838 ab04 	ldrh.w	sl, [r8], #4
			if (handle != params->value_handle) {
   1f2ea:	8933      	ldrh	r3, [r6, #8]
   1f2ec:	4553      	cmp	r3, sl
   1f2ee:	d10a      	bne.n	1f306 <bt_gatt_mult_notification+0x76>
			if (params->notify(conn, params, nfy->value, len) ==
   1f2f0:	6835      	ldr	r5, [r6, #0]
   1f2f2:	465b      	mov	r3, fp
   1f2f4:	4642      	mov	r2, r8
   1f2f6:	4631      	mov	r1, r6
   1f2f8:	4648      	mov	r0, r9
   1f2fa:	47a8      	blx	r5
   1f2fc:	b918      	cbnz	r0, 1f306 <bt_gatt_mult_notification+0x76>
				bt_gatt_unsubscribe(conn, params);
   1f2fe:	4631      	mov	r1, r6
   1f300:	4648      	mov	r0, r9
   1f302:	f7f6 fc59 	bl	15bb8 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1f306:	b144      	cbz	r4, 1f31a <bt_gatt_mult_notification+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f308:	f114 0214 	adds.w	r2, r4, #20
   1f30c:	d002      	beq.n	1f314 <bt_gatt_mult_notification+0x84>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f30e:	6962      	ldr	r2, [r4, #20]
   1f310:	b102      	cbz	r2, 1f314 <bt_gatt_mult_notification+0x84>
   1f312:	3a14      	subs	r2, #20
{
   1f314:	4626      	mov	r6, r4
   1f316:	4614      	mov	r4, r2
   1f318:	e7e7      	b.n	1f2ea <bt_gatt_mult_notification+0x5a>
		net_buf_simple_pull_mem(&buf, len);
   1f31a:	4659      	mov	r1, fp
   1f31c:	a801      	add	r0, sp, #4
   1f31e:	f7f7 f88b 	bl	16438 <net_buf_simple_pull_mem>
   1f322:	e7c4      	b.n	1f2ae <bt_gatt_mult_notification+0x1e>

0001f324 <bt_gatt_change_aware>:
{
   1f324:	b510      	push	{r4, lr}
   1f326:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1f328:	f7f5 ffda 	bl	152e0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f32c:	4603      	mov	r3, r0
   1f32e:	b910      	cbnz	r0, 1f336 <bt_gatt_change_aware+0x12>
		return true;
   1f330:	2401      	movs	r4, #1
}
   1f332:	4620      	mov	r0, r4
   1f334:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f336:	7a02      	ldrb	r2, [r0, #8]
   1f338:	07d2      	lsls	r2, r2, #31
   1f33a:	d5f9      	bpl.n	1f330 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f33c:	f3bf 8f5b 	dmb	ish
   1f340:	68d9      	ldr	r1, [r3, #12]
   1f342:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1f346:	f011 0101 	ands.w	r1, r1, #1
   1f34a:	f100 000c 	add.w	r0, r0, #12
   1f34e:	d1ef      	bne.n	1f330 <bt_gatt_change_aware+0xc>
	if (!req) {
   1f350:	2c00      	cmp	r4, #0
   1f352:	d0ee      	beq.n	1f332 <bt_gatt_change_aware+0xe>
   1f354:	f3bf 8f5b 	dmb	ish
   1f358:	68db      	ldr	r3, [r3, #12]
   1f35a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f35e:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1f362:	079b      	lsls	r3, r3, #30
   1f364:	d50e      	bpl.n	1f384 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f366:	f3bf 8f5b 	dmb	ish
   1f36a:	e850 3f00 	ldrex	r3, [r0]
   1f36e:	f023 0302 	bic.w	r3, r3, #2
   1f372:	e840 3200 	strex	r2, r3, [r0]
   1f376:	2a00      	cmp	r2, #0
   1f378:	d1f7      	bne.n	1f36a <bt_gatt_change_aware+0x46>
   1f37a:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1f37e:	f7ff fdc1 	bl	1ef04 <atomic_set_bit>
	return false;
   1f382:	e7d6      	b.n	1f332 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1f384:	2101      	movs	r1, #1
   1f386:	e7fa      	b.n	1f37e <bt_gatt_change_aware+0x5a>

0001f388 <bt_smp_recv>:
{
   1f388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1f38a:	2100      	movs	r1, #0
   1f38c:	f04f 32ff 	mov.w	r2, #4294967295
   1f390:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1f394:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1f396:	4608      	mov	r0, r1
   1f398:	f7fe fe8d 	bl	1e0b6 <bt_l2cap_create_pdu_timeout>
   1f39c:	f100 0608 	add.w	r6, r0, #8
   1f3a0:	4604      	mov	r4, r0
   1f3a2:	2101      	movs	r1, #1
   1f3a4:	4630      	mov	r0, r6
   1f3a6:	f7f7 f869 	bl	1647c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1f3aa:	2505      	movs	r5, #5
   1f3ac:	7005      	strb	r5, [r0, #0]
   1f3ae:	2101      	movs	r1, #1
   1f3b0:	4630      	mov	r0, r6
   1f3b2:	f7f7 f863 	bl	1647c <net_buf_simple_add>
   1f3b6:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1f3b8:	7005      	strb	r5, [r0, #0]
   1f3ba:	4622      	mov	r2, r4
   1f3bc:	9300      	str	r3, [sp, #0]
   1f3be:	2106      	movs	r1, #6
   1f3c0:	4638      	mov	r0, r7
   1f3c2:	f7fe fe7b 	bl	1e0bc <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1f3c6:	b110      	cbz	r0, 1f3ce <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1f3c8:	4620      	mov	r0, r4
   1f3ca:	f7f6 ff27 	bl	1621c <net_buf_unref>
}
   1f3ce:	2000      	movs	r0, #0
   1f3d0:	b003      	add	sp, #12
   1f3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f3d4 <bt_smp_sign>:
   1f3d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f3d8:	4770      	bx	lr

0001f3da <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1f3da:	2000      	movs	r0, #0
   1f3dc:	4770      	bx	lr

0001f3de <fixed_data_unref>:
}
   1f3de:	4770      	bx	lr

0001f3e0 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f3e0:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1f3e2:	6849      	ldr	r1, [r1, #4]
   1f3e4:	6809      	ldr	r1, [r1, #0]
   1f3e6:	f7f6 bdd1 	b.w	15f8c <net_buf_alloc_len>

0001f3ea <net_buf_simple_init_with_data>:
	buf->size  = size;
   1f3ea:	b292      	uxth	r2, r2
	buf->__buf = data;
   1f3ec:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1f3ee:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1f3f0:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1f3f2:	8082      	strh	r2, [r0, #4]
}
   1f3f4:	4770      	bx	lr

0001f3f6 <net_buf_simple_pull_u8>:
{
   1f3f6:	b510      	push	{r4, lr}
	val = buf->data[0];
   1f3f8:	6803      	ldr	r3, [r0, #0]
   1f3fa:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1f3fc:	2101      	movs	r1, #1
   1f3fe:	f7f6 fffb 	bl	163f8 <net_buf_simple_pull>
}
   1f402:	4620      	mov	r0, r4
   1f404:	bd10      	pop	{r4, pc}

0001f406 <net_buf_simple_pull_le16>:
{
   1f406:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1f408:	6803      	ldr	r3, [r0, #0]
   1f40a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1f40c:	2102      	movs	r1, #2
   1f40e:	f7f6 fff3 	bl	163f8 <net_buf_simple_pull>
}
   1f412:	4620      	mov	r0, r4
   1f414:	bd10      	pop	{r4, pc}

0001f416 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1f416:	6802      	ldr	r2, [r0, #0]
   1f418:	6880      	ldr	r0, [r0, #8]
}
   1f41a:	1a10      	subs	r0, r2, r0
   1f41c:	4770      	bx	lr

0001f41e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1f41e:	8883      	ldrh	r3, [r0, #4]
   1f420:	88c2      	ldrh	r2, [r0, #6]
   1f422:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1f424:	6803      	ldr	r3, [r0, #0]
   1f426:	6880      	ldr	r0, [r0, #8]
   1f428:	1a18      	subs	r0, r3, r0
}
   1f42a:	1a10      	subs	r0, r2, r0
   1f42c:	4770      	bx	lr

0001f42e <net_buf_simple_add_mem>:
{
   1f42e:	b538      	push	{r3, r4, r5, lr}
   1f430:	460d      	mov	r5, r1
   1f432:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1f434:	4611      	mov	r1, r2
   1f436:	f7f7 f821 	bl	1647c <net_buf_simple_add>
   1f43a:	4622      	mov	r2, r4
   1f43c:	4629      	mov	r1, r5
}
   1f43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f442:	f000 bdc2 	b.w	1ffca <memcpy>

0001f446 <net_buf_simple_add_le16>:
{
   1f446:	b510      	push	{r4, lr}
   1f448:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1f44a:	2102      	movs	r1, #2
   1f44c:	f7f7 f816 	bl	1647c <net_buf_simple_add>
	dst[0] = val;
   1f450:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1f452:	0a24      	lsrs	r4, r4, #8
   1f454:	7044      	strb	r4, [r0, #1]
}
   1f456:	bd10      	pop	{r4, pc}

0001f458 <set_starting_state>:
{
   1f458:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f45a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f45e:	f3ef 8211 	mrs	r2, BASEPRI
   1f462:	f383 8812 	msr	BASEPRI_MAX, r3
   1f466:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f46a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1f46c:	f003 0407 	and.w	r4, r3, #7
   1f470:	2c01      	cmp	r4, #1
   1f472:	d106      	bne.n	1f482 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1f474:	6001      	str	r1, [r0, #0]
	int err = 0;
   1f476:	2000      	movs	r0, #0
	__asm__ volatile(
   1f478:	f382 8811 	msr	BASEPRI, r2
   1f47c:	f3bf 8f6f 	isb	sy
}
   1f480:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1f482:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1f486:	428b      	cmp	r3, r1
		err = -EALREADY;
   1f488:	bf14      	ite	ne
   1f48a:	f04f 30ff 	movne.w	r0, #4294967295
   1f48e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1f492:	e7f1      	b.n	1f478 <set_starting_state+0x20>

0001f494 <set_on_state>:
	__asm__ volatile(
   1f494:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f498:	f3ef 8211 	mrs	r2, BASEPRI
   1f49c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4a0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1f4a4:	6803      	ldr	r3, [r0, #0]
   1f4a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f4aa:	f043 0302 	orr.w	r3, r3, #2
   1f4ae:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1f4b0:	f382 8811 	msr	BASEPRI, r2
   1f4b4:	f3bf 8f6f 	isb	sy
}
   1f4b8:	4770      	bx	lr

0001f4ba <onoff_started_callback>:
	return &data->mgr[type];
   1f4ba:	6900      	ldr	r0, [r0, #16]
   1f4bc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1f4be:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1f4c2:	2100      	movs	r1, #0
   1f4c4:	4710      	bx	r2

0001f4c6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1f4c6:	2000      	movs	r0, #0
   1f4c8:	f7f9 b98a 	b.w	187e0 <nrfx_clock_start>

0001f4cc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1f4cc:	2000      	movs	r0, #0
   1f4ce:	f7f9 b9b1 	b.w	18834 <nrfx_clock_stop>

0001f4d2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1f4d2:	2280      	movs	r2, #128	; 0x80
   1f4d4:	f7f7 b83c 	b.w	16550 <stop>

0001f4d8 <blocking_start_callback>:
{
   1f4d8:	4610      	mov	r0, r2
   1f4da:	f7fa bba7 	b.w	19c2c <z_impl_k_sem_give>

0001f4de <api_start>:
{
   1f4de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f4e2:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1f4e4:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1f4e6:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1f4e8:	436f      	muls	r7, r5
{
   1f4ea:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1f4ec:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1f4f0:	2180      	movs	r1, #128	; 0x80
   1f4f2:	4420      	add	r0, r4
{
   1f4f4:	4690      	mov	r8, r2
   1f4f6:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   1f4f8:	f7ff ffae 	bl	1f458 <set_starting_state>
	if (err < 0) {
   1f4fc:	2800      	cmp	r0, #0
   1f4fe:	db07      	blt.n	1f510 <api_start+0x32>
	subdata->cb = cb;
   1f500:	443c      	add	r4, r7
	subdata->user_data = user_data;
   1f502:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1f506:	6873      	ldr	r3, [r6, #4]
   1f508:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1f50c:	4798      	blx	r3
	return 0;
   1f50e:	2000      	movs	r0, #0
}
   1f510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f514 <uart_poll_out>:
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1f514:	6883      	ldr	r3, [r0, #8]
   1f516:	69db      	ldr	r3, [r3, #28]
   1f518:	4718      	bx	r3

0001f51a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f51a:	6843      	ldr	r3, [r0, #4]
   1f51c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1f51e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1f522:	600b      	str	r3, [r1, #0]
}
   1f524:	2000      	movs	r0, #0
   1f526:	4770      	bx	lr

0001f528 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f528:	6843      	ldr	r3, [r0, #4]
   1f52a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1f52c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1f530:	4042      	eors	r2, r0
   1f532:	400a      	ands	r2, r1
   1f534:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1f536:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1f53a:	2000      	movs	r0, #0
   1f53c:	4770      	bx	lr

0001f53e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f53e:	6843      	ldr	r3, [r0, #4]
   1f540:	685b      	ldr	r3, [r3, #4]
}
   1f542:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1f544:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1f548:	4770      	bx	lr

0001f54a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f54a:	6843      	ldr	r3, [r0, #4]
   1f54c:	685b      	ldr	r3, [r3, #4]
}
   1f54e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1f550:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1f554:	4770      	bx	lr

0001f556 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1f556:	6843      	ldr	r3, [r0, #4]
   1f558:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1f55a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1f55e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1f560:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1f564:	2000      	movs	r0, #0
   1f566:	4770      	bx	lr

0001f568 <nrf_gpio_cfg_sense_set>:
{
   1f568:	b513      	push	{r0, r1, r4, lr}
   1f56a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f56c:	a801      	add	r0, sp, #4
{
   1f56e:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f570:	f7f7 fa86 	bl	16a80 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1f574:	9b01      	ldr	r3, [sp, #4]
   1f576:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1f57a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   1f57e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1f582:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1f586:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1f58a:	b002      	add	sp, #8
   1f58c:	bd10      	pop	{r4, pc}

0001f58e <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   1f58e:	6903      	ldr	r3, [r0, #16]
{
   1f590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f594:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   1f596:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   1f59a:	68de      	ldr	r6, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1f59c:	f8d0 b004 	ldr.w	fp, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1f5a0:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   1f5a2:	430a      	orrs	r2, r1
   1f5a4:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1f5a8:	f8db 2004 	ldr.w	r2, [fp, #4]
    return p_reg->IN;
   1f5ac:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1f5b0:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1f5b2:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   1f5b6:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   1f5b8:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   1f5ba:	f04f 0a00 	mov.w	sl, #0
	while (check_pins) {
   1f5be:	b91f      	cbnz	r7, 1f5c8 <check_level_trigger_pins+0x3a>
}
   1f5c0:	4628      	mov	r0, r5
   1f5c2:	b003      	add	sp, #12
   1f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   1f5c8:	423c      	tst	r4, r7
   1f5ca:	d020      	beq.n	1f60e <check_level_trigger_pins+0x80>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f5cc:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1f5d0:	f00a 091f 	and.w	r9, sl, #31
			if (!(level_pins & bit)) {
   1f5d4:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f5d6:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
			if (!(level_pins & bit)) {
   1f5da:	d112      	bne.n	1f602 <check_level_trigger_pins+0x74>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f5dc:	a801      	add	r0, sp, #4
   1f5de:	f8cd 9004 	str.w	r9, [sp, #4]
   1f5e2:	f7f7 fa4d 	bl	16a80 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f5e6:	9b01      	ldr	r3, [sp, #4]
   1f5e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f5ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f5f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   1f5f4:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   1f5f6:	bf02      	ittt	eq
   1f5f8:	f8d8 3000 	ldreq.w	r3, [r8]
   1f5fc:	4323      	orreq	r3, r4
   1f5fe:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1f602:	2100      	movs	r1, #0
   1f604:	4648      	mov	r0, r9
   1f606:	f7ff ffaf 	bl	1f568 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1f60a:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   1f60e:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   1f612:	0064      	lsls	r4, r4, #1
   1f614:	e7d3      	b.n	1f5be <check_level_trigger_pins+0x30>

0001f616 <cfg_level_pins>:
{
   1f616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   1f61a:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1f61c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1f620:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1f622:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1f626:	4313      	orrs	r3, r2
   1f628:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1f62c:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1f62e:	2500      	movs	r5, #0
	while (level_pins) {
   1f630:	b90c      	cbnz	r4, 1f636 <cfg_level_pins+0x20>
}
   1f632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1f636:	4226      	tst	r6, r4
   1f638:	d010      	beq.n	1f65c <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f63a:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f63c:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1f640:	40e9      	lsrs	r1, r5
   1f642:	f001 0101 	and.w	r1, r1, #1
   1f646:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f64a:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1f64e:	b2c9      	uxtb	r1, r1
   1f650:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1f654:	f7ff ff88 	bl	1f568 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1f658:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1f65c:	3501      	adds	r5, #1
		bit <<= 1;
   1f65e:	0076      	lsls	r6, r6, #1
   1f660:	e7e6      	b.n	1f630 <cfg_level_pins+0x1a>

0001f662 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1f662:	6843      	ldr	r3, [r0, #4]
   1f664:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1f666:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1f66a:	05d1      	lsls	r1, r2, #23
{
   1f66c:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1f66e:	d518      	bpl.n	1f6a2 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f670:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1f674:	b1aa      	cbz	r2, 1f6a2 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1f676:	f04f 0140 	mov.w	r1, #64	; 0x40
   1f67a:	f3ef 8211 	mrs	r2, BASEPRI
   1f67e:	f381 8812 	msr	BASEPRI_MAX, r1
   1f682:	f3bf 8f6f 	isb	sy
   1f686:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f68a:	b131      	cbz	r1, 1f69a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f68c:	2100      	movs	r1, #0
   1f68e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1f692:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f696:	2101      	movs	r1, #1
   1f698:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1f69a:	f382 8811 	msr	BASEPRI, r2
   1f69e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f6a2:	6842      	ldr	r2, [r0, #4]
   1f6a4:	6852      	ldr	r2, [r2, #4]
   1f6a6:	06d2      	lsls	r2, r2, #27
   1f6a8:	d51a      	bpl.n	1f6e0 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   1f6aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f6ae:	f3ef 8111 	mrs	r1, BASEPRI
   1f6b2:	f382 8812 	msr	BASEPRI_MAX, r2
   1f6b6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f6ba:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1f6be:	b112      	cbz	r2, 1f6c6 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1f6c0:	2200      	movs	r2, #0
   1f6c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1f6c6:	6902      	ldr	r2, [r0, #16]
   1f6c8:	68d2      	ldr	r2, [r2, #12]
   1f6ca:	b10a      	cbz	r2, 1f6d0 <uarte_nrfx_isr_int+0x6e>
   1f6cc:	6912      	ldr	r2, [r2, #16]
   1f6ce:	b91a      	cbnz	r2, 1f6d8 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   1f6d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1f6d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1f6d8:	f381 8811 	msr	BASEPRI, r1
   1f6dc:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1f6e0:	6902      	ldr	r2, [r0, #16]
   1f6e2:	68d2      	ldr	r2, [r2, #12]
   1f6e4:	b15a      	cbz	r2, 1f6fe <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f6e6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1f6ea:	b151      	cbz	r1, 1f702 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   1f6ec:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1f6ee:	2100      	movs	r1, #0
   1f6f0:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1f6f2:	b134      	cbz	r4, 1f702 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   1f6f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1f6f8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1f6fc:	7391      	strb	r1, [r2, #14]
}
   1f6fe:	bc10      	pop	{r4}
   1f700:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f702:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1f706:	b121      	cbz	r1, 1f712 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f708:	2100      	movs	r1, #0
   1f70a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1f70e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1f712:	6813      	ldr	r3, [r2, #0]
   1f714:	2b00      	cmp	r3, #0
   1f716:	d0f2      	beq.n	1f6fe <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1f718:	6851      	ldr	r1, [r2, #4]
}
   1f71a:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1f71c:	4718      	bx	r3

0001f71e <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1f71e:	6902      	ldr	r2, [r0, #16]
{
   1f720:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1f722:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1f726:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1f72a:	2000      	movs	r0, #0
   1f72c:	4770      	bx	lr

0001f72e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1f72e:	6843      	ldr	r3, [r0, #4]
   1f730:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f732:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f736:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1f73a:	4770      	bx	lr

0001f73c <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1f73c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1f73e:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f740:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f744:	b940      	cbnz	r0, 1f758 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1f746:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1f748:	0712      	lsls	r2, r2, #28
   1f74a:	d406      	bmi.n	1f75a <is_tx_ready+0x1e>
   1f74c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1f750:	3800      	subs	r0, #0
   1f752:	bf18      	it	ne
   1f754:	2001      	movne	r0, #1
   1f756:	4770      	bx	lr
   1f758:	2001      	movs	r0, #1
}
   1f75a:	4770      	bx	lr

0001f75c <user_callback>:
	if (data->async->user_callback) {
   1f75c:	6903      	ldr	r3, [r0, #16]
   1f75e:	691a      	ldr	r2, [r3, #16]
   1f760:	6813      	ldr	r3, [r2, #0]
   1f762:	b10b      	cbz	r3, 1f768 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   1f764:	6852      	ldr	r2, [r2, #4]
   1f766:	4718      	bx	r3
}
   1f768:	4770      	bx	lr

0001f76a <notify_uart_rx_rdy>:
{
   1f76a:	b570      	push	{r4, r5, r6, lr}
   1f76c:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f76e:	6906      	ldr	r6, [r0, #16]
{
   1f770:	4604      	mov	r4, r0
   1f772:	460d      	mov	r5, r1
	struct uart_event evt = {
   1f774:	2214      	movs	r2, #20
   1f776:	2100      	movs	r1, #0
   1f778:	a801      	add	r0, sp, #4
   1f77a:	f000 fc47 	bl	2000c <memset>
   1f77e:	2302      	movs	r3, #2
   1f780:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   1f784:	6933      	ldr	r3, [r6, #16]
	struct uart_event evt = {
   1f786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1f788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1f78a:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   1f78c:	a901      	add	r1, sp, #4
   1f78e:	4620      	mov	r0, r4
	struct uart_event evt = {
   1f790:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   1f794:	f7ff ffe2 	bl	1f75c <user_callback>
}
   1f798:	b006      	add	sp, #24
   1f79a:	bd70      	pop	{r4, r5, r6, pc}

0001f79c <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   1f79c:	6843      	ldr	r3, [r0, #4]
{
   1f79e:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   1f7a0:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f7a2:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   1f7a4:	f04f 0040 	mov.w	r0, #64	; 0x40
   1f7a8:	f3ef 8511 	mrs	r5, BASEPRI
   1f7ac:	f380 8812 	msr	BASEPRI_MAX, r0
   1f7b0:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   1f7b4:	6924      	ldr	r4, [r4, #16]
   1f7b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1f7b8:	b190      	cbz	r0, 1f7e0 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   1f7ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1f7bc:	b998      	cbnz	r0, 1f7e6 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   1f7be:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1f7c2:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1f7c6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   1f7ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f7ce:	f042 0220 	orr.w	r2, r2, #32
   1f7d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   1f7d6:	f385 8811 	msr	BASEPRI, r5
   1f7da:	f3bf 8f6f 	isb	sy
}
   1f7de:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   1f7e0:	f06f 000c 	mvn.w	r0, #12
   1f7e4:	e7f7      	b.n	1f7d6 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   1f7e6:	f06f 000f 	mvn.w	r0, #15
   1f7ea:	e7f4      	b.n	1f7d6 <uarte_nrfx_rx_buf_rsp+0x3a>

0001f7ec <uarte_nrfx_callback_set>:
	if (!data->async) {
   1f7ec:	6903      	ldr	r3, [r0, #16]
   1f7ee:	691b      	ldr	r3, [r3, #16]
   1f7f0:	b11b      	cbz	r3, 1f7fa <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   1f7f2:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   1f7f6:	2000      	movs	r0, #0
   1f7f8:	4770      	bx	lr
		return -ENOTSUP;
   1f7fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1f7fe:	4770      	bx	lr

0001f800 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f800:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1f802:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   1f804:	6910      	ldr	r0, [r2, #16]
	return config->uarte_regs;
   1f806:	681b      	ldr	r3, [r3, #0]
{
   1f808:	b510      	push	{r4, lr}
	if (data->async) {
   1f80a:	b958      	cbnz	r0, 1f824 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f80c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f810:	b15c      	cbz	r4, 1f82a <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   1f812:	7e52      	ldrb	r2, [r2, #25]
   1f814:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f816:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f81a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f81e:	2201      	movs	r2, #1
   1f820:	601a      	str	r2, [r3, #0]
}
   1f822:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1f824:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f828:	e7fb      	b.n	1f822 <uarte_nrfx_poll_in+0x22>
		return -1;
   1f82a:	f04f 30ff 	mov.w	r0, #4294967295
   1f82e:	e7f8      	b.n	1f822 <uarte_nrfx_poll_in+0x22>

0001f830 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f830:	2a00      	cmp	r2, #0
{
   1f832:	b510      	push	{r4, lr}
   1f834:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f836:	dd0f      	ble.n	1f858 <__kernel_ram_size+0x18>
	return config->uarte_regs;
   1f838:	6843      	ldr	r3, [r0, #4]
   1f83a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f83c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1f840:	b148      	cbz	r0, 1f856 <__kernel_ram_size+0x16>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1f842:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f844:	2000      	movs	r0, #0
   1f846:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1f84a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1f84e:	7e52      	ldrb	r2, [r2, #25]
   1f850:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f852:	2001      	movs	r0, #1
   1f854:	6018      	str	r0, [r3, #0]
}
   1f856:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   1f858:	2000      	movs	r0, #0
   1f85a:	e7fc      	b.n	1f856 <__kernel_ram_size+0x16>

0001f85c <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1f85c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f85e:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   1f860:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1f862:	f04f 0040 	mov.w	r0, #64	; 0x40
   1f866:	f3ef 8311 	mrs	r3, BASEPRI
   1f86a:	f380 8812 	msr	BASEPRI_MAX, r0
   1f86e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1f872:	68c9      	ldr	r1, [r1, #12]
   1f874:	2000      	movs	r0, #0
   1f876:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1f878:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1f87c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1f880:	f383 8811 	msr	BASEPRI, r3
   1f884:	f3bf 8f6f 	isb	sy
}
   1f888:	4770      	bx	lr

0001f88a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1f88a:	6903      	ldr	r3, [r0, #16]
   1f88c:	68db      	ldr	r3, [r3, #12]
   1f88e:	2201      	movs	r2, #1
   1f890:	739a      	strb	r2, [r3, #14]
}
   1f892:	4770      	bx	lr

0001f894 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1f894:	6903      	ldr	r3, [r0, #16]
   1f896:	68db      	ldr	r3, [r3, #12]
   1f898:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1f89a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1f89e:	b962      	cbnz	r2, 1f8ba <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1f8a0:	6842      	ldr	r2, [r0, #4]
   1f8a2:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f8a4:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1f8a8:	b140      	cbz	r0, 1f8bc <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1f8aa:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1f8ae:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1f8b2:	d003      	beq.n	1f8bc <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   1f8b4:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1f8b6:	2001      	movs	r0, #1
   1f8b8:	4770      	bx	lr
   1f8ba:	2000      	movs	r0, #0
}
   1f8bc:	4770      	bx	lr

0001f8be <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1f8be:	6843      	ldr	r3, [r0, #4]
   1f8c0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f8c2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1f8c6:	3800      	subs	r0, #0
   1f8c8:	bf18      	it	ne
   1f8ca:	2001      	movne	r0, #1
   1f8cc:	4770      	bx	lr

0001f8ce <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   1f8ce:	6843      	ldr	r3, [r0, #4]
   1f8d0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1f8d2:	2210      	movs	r2, #16
   1f8d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f8d8:	4770      	bx	lr

0001f8da <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   1f8da:	6843      	ldr	r3, [r0, #4]
   1f8dc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1f8de:	2210      	movs	r2, #16
   1f8e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f8e4:	4770      	bx	lr

0001f8e6 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   1f8e6:	6843      	ldr	r3, [r0, #4]
   1f8e8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1f8ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f8ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f8f2:	4770      	bx	lr

0001f8f4 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   1f8f4:	6843      	ldr	r3, [r0, #4]
   1f8f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1f8f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f8fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1f900:	4770      	bx	lr

0001f902 <uarte_nrfx_irq_update>:
}
   1f902:	2001      	movs	r0, #1
   1f904:	4770      	bx	lr

0001f906 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1f906:	6903      	ldr	r3, [r0, #16]
   1f908:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1f90a:	e9c3 1200 	strd	r1, r2, [r3]
}
   1f90e:	4770      	bx	lr

0001f910 <rx_timeout>:
{
   1f910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   1f912:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   1f914:	6933      	ldr	r3, [r6, #16]
   1f916:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   1f91a:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   1f91e:	bb32      	cbnz	r2, 1f96e <rx_timeout+0x5e>
	const struct device *dev = data->dev;
   1f920:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
   1f922:	686a      	ldr	r2, [r5, #4]
   1f924:	6812      	ldr	r2, [r2, #0]
   1f926:	2110      	movs	r1, #16
   1f928:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   1f92c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
	if (read != data->async->rx_total_byte_cnt) {
   1f930:	6e59      	ldr	r1, [r3, #100]	; 0x64
   1f932:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   1f934:	bf1e      	ittt	ne
   1f936:	665a      	strne	r2, [r3, #100]	; 0x64
		data->async->rx_timeout_left = data->async->rx_timeout;
   1f938:	6eda      	ldrne	r2, [r3, #108]	; 0x6c
   1f93a:	675a      	strne	r2, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
   1f93c:	e9d3 4219 	ldrd	r4, r2, [r3, #100]	; 0x64
	if (!hw_rx_counting_enabled(data) &&
   1f940:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   1f942:	bf48      	it	mi
   1f944:	f8c3 20b0 	strmi.w	r2, [r3, #176]	; 0xb0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   1f948:	e9d3 1215 	ldrd	r1, r2, [r3, #84]	; 0x54
		len = 0;
   1f94c:	bf48      	it	mi
   1f94e:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   1f950:	18a0      	adds	r0, r4, r2
   1f952:	4288      	cmp	r0, r1
   1f954:	d90c      	bls.n	1f970 <rx_timeout+0x60>
		len = data->async->rx_buf_len - data->async->rx_offset;
   1f956:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   1f958:	2c00      	cmp	r4, #0
   1f95a:	dd03      	ble.n	1f964 <rx_timeout+0x54>
		clipped = true;
   1f95c:	2701      	movs	r7, #1
   1f95e:	e00d      	b.n	1f97c <rx_timeout+0x6c>
			data->async->rx_timeout_left -=
   1f960:	1a52      	subs	r2, r2, r1
   1f962:	675a      	str	r2, [r3, #116]	; 0x74
	return config->uarte_regs;
   1f964:	686b      	ldr	r3, [r5, #4]
   1f966:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1f968:	2210      	movs	r2, #16
   1f96a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   1f970:	2c00      	cmp	r4, #0
   1f972:	d0f7      	beq.n	1f964 <rx_timeout+0x54>
				< data->async->rx_timeout_slab)) {
   1f974:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
		if (clipped ||
   1f978:	428a      	cmp	r2, r1
   1f97a:	daf1      	bge.n	1f960 <rx_timeout+0x50>
			notify_uart_rx_rdy(dev, len);
   1f97c:	4621      	mov	r1, r4
   1f97e:	4628      	mov	r0, r5
   1f980:	f7ff fef3 	bl	1f76a <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   1f984:	6930      	ldr	r0, [r6, #16]
   1f986:	6d83      	ldr	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   1f988:	6e81      	ldr	r1, [r0, #104]	; 0x68
			data->async->rx_offset += len;
   1f98a:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   1f98c:	4421      	add	r1, r4
			data->async->rx_offset += len;
   1f98e:	6583      	str	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   1f990:	6681      	str	r1, [r0, #104]	; 0x68
		if (clipped) {
   1f992:	2f00      	cmp	r7, #0
   1f994:	d0e6      	beq.n	1f964 <rx_timeout+0x54>
	z_impl_k_timer_stop(timer);
   1f996:	3078      	adds	r0, #120	; 0x78
   1f998:	f000 faa1 	bl	1fede <z_impl_k_timer_stop>
}
   1f99c:	e7e2      	b.n	1f964 <rx_timeout+0x54>

0001f99e <uarte_nrfx_irq_is_pending>:
{
   1f99e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1f9a0:	6843      	ldr	r3, [r0, #4]
   1f9a2:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1f9a4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1f9a8:	025b      	lsls	r3, r3, #9
{
   1f9aa:	4604      	mov	r4, r0
		||
   1f9ac:	d405      	bmi.n	1f9ba <uarte_nrfx_irq_is_pending+0x1c>
   1f9ae:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1f9b2:	f010 0010 	ands.w	r0, r0, #16
   1f9b6:	d106      	bne.n	1f9c6 <uarte_nrfx_irq_is_pending+0x28>
}
   1f9b8:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1f9ba:	f7ff ff6b 	bl	1f894 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1f9be:	2800      	cmp	r0, #0
   1f9c0:	d0f5      	beq.n	1f9ae <uarte_nrfx_irq_is_pending+0x10>
		||
   1f9c2:	2001      	movs	r0, #1
   1f9c4:	e7f8      	b.n	1f9b8 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1f9c6:	4620      	mov	r0, r4
   1f9c8:	f7ff ff79 	bl	1f8be <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1f9cc:	3800      	subs	r0, #0
   1f9ce:	bf18      	it	ne
   1f9d0:	2001      	movne	r0, #1
   1f9d2:	e7f1      	b.n	1f9b8 <uarte_nrfx_irq_is_pending+0x1a>

0001f9d4 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   1f9d4:	6843      	ldr	r3, [r0, #4]
{
   1f9d6:	b510      	push	{r4, lr}
	return config->uarte_regs;
   1f9d8:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   1f9da:	6903      	ldr	r3, [r0, #16]
   1f9dc:	6918      	ldr	r0, [r3, #16]
   1f9de:	6883      	ldr	r3, [r0, #8]
   1f9e0:	b133      	cbz	r3, 1f9f0 <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   1f9e2:	3018      	adds	r0, #24
   1f9e4:	f000 fa7b 	bl	1fede <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f9e8:	2301      	movs	r3, #1
   1f9ea:	60e3      	str	r3, [r4, #12]
	return 0;
   1f9ec:	2000      	movs	r0, #0
}
   1f9ee:	bd10      	pop	{r4, pc}
		return -EFAULT;
   1f9f0:	f06f 000d 	mvn.w	r0, #13
   1f9f4:	e7fb      	b.n	1f9ee <uarte_nrfx_tx_abort+0x1a>

0001f9f6 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   1f9f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1f9f8:	6818      	ldr	r0, [r3, #0]
   1f9fa:	f7ff bfeb 	b.w	1f9d4 <uarte_nrfx_tx_abort>

0001f9fe <uarte_nrfx_rx_disable>:
{
   1f9fe:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1fa00:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   1fa02:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   1fa04:	6928      	ldr	r0, [r5, #16]
	return config->uarte_regs;
   1fa06:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   1fa08:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1fa0a:	b1b3      	cbz	r3, 1fa3a <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   1fa0c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1fa0e:	b153      	cbz	r3, 1fa26 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   1fa10:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   1fa14:	f023 0320 	bic.w	r3, r3, #32
   1fa18:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fa1c:	2300      	movs	r3, #0
   1fa1e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   1fa22:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   1fa26:	3078      	adds	r0, #120	; 0x78
   1fa28:	f000 fa59 	bl	1fede <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   1fa2c:	692b      	ldr	r3, [r5, #16]
   1fa2e:	2000      	movs	r0, #0
   1fa30:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fa34:	2301      	movs	r3, #1
   1fa36:	6063      	str	r3, [r4, #4]
}
   1fa38:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   1fa3a:	f06f 000d 	mvn.w	r0, #13
   1fa3e:	e7fb      	b.n	1fa38 <uarte_nrfx_rx_disable+0x3a>

0001fa40 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1fa40:	b510      	push	{r4, lr}
   1fa42:	2200      	movs	r2, #0
   1fa44:	4604      	mov	r4, r0
   1fa46:	2101      	movs	r1, #1
   1fa48:	2002      	movs	r0, #2
   1fa4a:	f7f1 fced 	bl	11428 <z_arm_irq_priority_set>
   1fa4e:	2002      	movs	r0, #2
   1fa50:	f7f1 fcb8 	bl	113c4 <arch_irq_enable>
   1fa54:	4620      	mov	r0, r4
   1fa56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fa5a:	f7f7 bbbf 	b.w	171dc <uarte_instance_init.isra.0>

0001fa5e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1fa5e:	b510      	push	{r4, lr}
   1fa60:	2200      	movs	r2, #0
   1fa62:	4604      	mov	r4, r0
   1fa64:	2101      	movs	r1, #1
   1fa66:	2028      	movs	r0, #40	; 0x28
   1fa68:	f7f1 fcde 	bl	11428 <z_arm_irq_priority_set>
   1fa6c:	2028      	movs	r0, #40	; 0x28
   1fa6e:	f7f1 fca9 	bl	113c4 <arch_irq_enable>
   1fa72:	4620      	mov	r0, r4
   1fa74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fa78:	f7f7 bbb0 	b.w	171dc <uarte_instance_init.isra.0>

0001fa7c <tx_start>:
{
   1fa7c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1fa7e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   1fa80:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1fa82:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1fa86:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fa8a:	2200      	movs	r2, #0
   1fa8c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1fa90:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1fa94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1fa98:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1fa9c:	6862      	ldr	r2, [r4, #4]
   1fa9e:	06d2      	lsls	r2, r2, #27
   1faa0:	d50f      	bpl.n	1fac2 <tx_start+0x46>
	if (data->async) {
   1faa2:	6902      	ldr	r2, [r0, #16]
   1faa4:	6912      	ldr	r2, [r2, #16]
   1faa6:	b12a      	cbz	r2, 1fab4 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   1faa8:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   1faac:	f041 0101 	orr.w	r1, r1, #1
   1fab0:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1fab4:	2208      	movs	r2, #8
   1fab6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1faba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1fabe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fac2:	2201      	movs	r2, #1
   1fac4:	609a      	str	r2, [r3, #8]
}
   1fac6:	bd10      	pop	{r4, pc}

0001fac8 <uarte_nrfx_fifo_fill>:
{
   1fac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1faca:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   1facc:	68f3      	ldr	r3, [r6, #12]
   1face:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1fad0:	f3bf 8f5b 	dmb	ish
   1fad4:	4294      	cmp	r4, r2
   1fad6:	bfa8      	it	ge
   1fad8:	4614      	movge	r4, r2
{
   1fada:	4605      	mov	r5, r0
   1fadc:	3310      	adds	r3, #16
   1fade:	2201      	movs	r2, #1
   1fae0:	e853 0f00 	ldrex	r0, [r3]
   1fae4:	2800      	cmp	r0, #0
   1fae6:	d103      	bne.n	1faf0 <uarte_nrfx_fifo_fill+0x28>
   1fae8:	e843 2700 	strex	r7, r2, [r3]
   1faec:	2f00      	cmp	r7, #0
   1faee:	d1f7      	bne.n	1fae0 <uarte_nrfx_fifo_fill+0x18>
   1faf0:	f3bf 8f5b 	dmb	ish
   1faf4:	bf0c      	ite	eq
   1faf6:	4613      	moveq	r3, r2
   1faf8:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1fafa:	d01d      	beq.n	1fb38 <uarte_nrfx_fifo_fill+0x70>
		return 0;
   1fafc:	461c      	mov	r4, r3
}
   1fafe:	4620      	mov	r0, r4
   1fb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1fb02:	68f2      	ldr	r2, [r6, #12]
   1fb04:	5cc8      	ldrb	r0, [r1, r3]
   1fb06:	6892      	ldr	r2, [r2, #8]
   1fb08:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   1fb0a:	3301      	adds	r3, #1
   1fb0c:	42a3      	cmp	r3, r4
   1fb0e:	dbf8      	blt.n	1fb02 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   1fb10:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb14:	f3ef 8711 	mrs	r7, BASEPRI
   1fb18:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb1c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1fb20:	4628      	mov	r0, r5
   1fb22:	f7ff fe0b 	bl	1f73c <is_tx_ready>
   1fb26:	68f3      	ldr	r3, [r6, #12]
   1fb28:	b940      	cbnz	r0, 1fb3c <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   1fb2a:	6118      	str	r0, [r3, #16]
		len = 0;
   1fb2c:	4604      	mov	r4, r0
	__asm__ volatile(
   1fb2e:	f387 8811 	msr	BASEPRI, r7
   1fb32:	f3bf 8f6f 	isb	sy
	return len;
   1fb36:	e7e2      	b.n	1fafe <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   1fb38:	2300      	movs	r3, #0
   1fb3a:	e7e7      	b.n	1fb0c <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   1fb3c:	6899      	ldr	r1, [r3, #8]
   1fb3e:	4622      	mov	r2, r4
   1fb40:	4628      	mov	r0, r5
   1fb42:	f7ff ff9b 	bl	1fa7c <tx_start>
   1fb46:	e7f2      	b.n	1fb2e <uarte_nrfx_fifo_fill+0x66>

0001fb48 <uarte_nrfx_tx>:
{
   1fb48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fb4c:	461c      	mov	r4, r3
	return config->uarte_regs;
   1fb4e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1fb50:	6906      	ldr	r6, [r0, #16]
{
   1fb52:	4617      	mov	r7, r2
	return config->uarte_regs;
   1fb54:	681a      	ldr	r2, [r3, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1fb56:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   1fb5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   1fb5e:	4605      	mov	r5, r0
	if (!nrfx_is_in_ram(buf)) {
   1fb60:	d14e      	bne.n	1fc00 <uarte_nrfx_tx+0xb8>
	__asm__ volatile(
   1fb62:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb66:	f3ef 8811 	mrs	r8, BASEPRI
   1fb6a:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb6e:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   1fb72:	6933      	ldr	r3, [r6, #16]
   1fb74:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   1fb78:	f1bc 0f00 	cmp.w	ip, #0
   1fb7c:	d008      	beq.n	1fb90 <uarte_nrfx_tx+0x48>
	__asm__ volatile(
   1fb7e:	f388 8811 	msr	BASEPRI, r8
   1fb82:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1fb86:	f06f 000f 	mvn.w	r0, #15
}
   1fb8a:	b002      	add	sp, #8
   1fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->async->tx_size = len;
   1fb90:	60df      	str	r7, [r3, #12]
    p_reg->INTENSET = mask;
   1fb92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1fb96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   1fb9a:	f7ff fdcf 	bl	1f73c <is_tx_ready>
   1fb9e:	6933      	ldr	r3, [r6, #16]
   1fba0:	bb20      	cbnz	r0, 1fbec <uarte_nrfx_tx+0xa4>
		data->async->pend_tx_buf = (uint8_t *)buf;
   1fba2:	6119      	str	r1, [r3, #16]
   1fba4:	f388 8811 	msr	BASEPRI, r8
   1fba8:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1fbac:	7af3      	ldrb	r3, [r6, #11]
   1fbae:	2b01      	cmp	r3, #1
   1fbb0:	d11a      	bne.n	1fbe8 <uarte_nrfx_tx+0xa0>
	    && timeout != SYS_FOREVER_MS) {
   1fbb2:	1c63      	adds	r3, r4, #1
   1fbb4:	d018      	beq.n	1fbe8 <uarte_nrfx_tx+0xa0>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   1fbb6:	6935      	ldr	r5, [r6, #16]
   1fbb8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1fbbc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1fbc0:	f240 30e7 	movw	r0, #999	; 0x3e7
   1fbc4:	2100      	movs	r1, #0
   1fbc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fbca:	2300      	movs	r3, #0
   1fbcc:	fbc6 0104 	smlal	r0, r1, r6, r4
   1fbd0:	f7e0 fa96 	bl	100 <__aeabi_uldivmod>
   1fbd4:	3518      	adds	r5, #24
   1fbd6:	4602      	mov	r2, r0
   1fbd8:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1fbda:	2000      	movs	r0, #0
   1fbdc:	2100      	movs	r1, #0
   1fbde:	e9cd 0100 	strd	r0, r1, [sp]
   1fbe2:	4628      	mov	r0, r5
   1fbe4:	f7fc fc0e 	bl	1c404 <z_impl_k_timer_start>
	return 0;
   1fbe8:	2000      	movs	r0, #0
   1fbea:	e7ce      	b.n	1fb8a <uarte_nrfx_tx+0x42>
		data->async->tx_amount = -1;
   1fbec:	f04f 32ff 	mov.w	r2, #4294967295
   1fbf0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		data->async->tx_buf = buf;
   1fbf4:	6099      	str	r1, [r3, #8]
		tx_start(dev, buf, len);
   1fbf6:	463a      	mov	r2, r7
   1fbf8:	4628      	mov	r0, r5
   1fbfa:	f7ff ff3f 	bl	1fa7c <tx_start>
   1fbfe:	e7d1      	b.n	1fba4 <uarte_nrfx_tx+0x5c>
		return -ENOTSUP;
   1fc00:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fc04:	e7c1      	b.n	1fb8a <uarte_nrfx_tx+0x42>

0001fc06 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1fc06:	4770      	bx	lr

0001fc08 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1fc08:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1fc0a:	2000      	movs	r0, #0
   1fc0c:	f7f2 f8ae 	bl	11d6c <sys_arch_reboot>

0001fc10 <sdc_assertion_handler>:
	k_oops();
   1fc10:	4040      	eors	r0, r0
   1fc12:	f380 8811 	msr	BASEPRI, r0
   1fc16:	f04f 0003 	mov.w	r0, #3
   1fc1a:	df02      	svc	2
}
   1fc1c:	4770      	bx	lr

0001fc1e <m_assert_handler>:
	k_oops();
   1fc1e:	4040      	eors	r0, r0
   1fc20:	f380 8811 	msr	BASEPRI, r0
   1fc24:	f04f 0003 	mov.w	r0, #3
   1fc28:	df02      	svc	2
}
   1fc2a:	4770      	bx	lr

0001fc2c <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1fc2c:	4668      	mov	r0, sp
   1fc2e:	f020 0107 	bic.w	r1, r0, #7
   1fc32:	468d      	mov	sp, r1
   1fc34:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   1fc36:	f7e2 fe31 	bl	289c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1fc3a:	f7f1 fc2d 	bl	11498 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1fc3e:	f7f1 fd19 	bl	11674 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1fc42:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fc46:	4685      	mov	sp, r0
   1fc48:	4770      	bx	lr

0001fc4a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1fc4a:	4668      	mov	r0, sp
   1fc4c:	f020 0107 	bic.w	r1, r0, #7
   1fc50:	468d      	mov	sp, r1
   1fc52:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   1fc54:	f7e2 fda4 	bl	27a0 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   1fc58:	f7f1 fc1e 	bl	11498 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   1fc5c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fc60:	4685      	mov	sp, r0
   1fc62:	4770      	bx	lr

0001fc64 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fc64:	4668      	mov	r0, sp
   1fc66:	f020 0107 	bic.w	r1, r0, #7
   1fc6a:	468d      	mov	sp, r1
   1fc6c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1fc6e:	f7ec fafa 	bl	c266 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1fc72:	f7f1 fc11 	bl	11498 <_arch_isr_direct_pm>
   1fc76:	f7f1 fcfd 	bl	11674 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   1fc7a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1fc7e:	4685      	mov	sp, r0
   1fc80:	4770      	bx	lr

0001fc82 <nrfx_clock_enable>:
}
   1fc82:	4770      	bx	lr

0001fc84 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   1fc84:	f7e3 ba1e 	b.w	30c4 <MPSL_IRQ_CLOCK_Handler>

0001fc88 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1fc88:	4700      	bx	r0

0001fc8a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1fc8a:	f000 b8ef 	b.w	1fe6c <z_impl_k_busy_wait>

0001fc8e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1fc8e:	f7f8 bf5b 	b.w	18b48 <_DoInit>

0001fc92 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1fc92:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1fc94:	f7ff fffb 	bl	1fc8e <SEGGER_RTT_Init>

	return 0;
}
   1fc98:	2000      	movs	r0, #0
   1fc9a:	bd08      	pop	{r3, pc}

0001fc9c <z_device_state_init>:
}
   1fc9c:	4770      	bx	lr

0001fc9e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1fc9e:	b138      	cbz	r0, 1fcb0 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1fca0:	68c3      	ldr	r3, [r0, #12]
   1fca2:	8818      	ldrh	r0, [r3, #0]
   1fca4:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1fca8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1fcac:	4258      	negs	r0, r3
   1fcae:	4158      	adcs	r0, r3
}
   1fcb0:	4770      	bx	lr

0001fcb2 <k_heap_init>:
{
   1fcb2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1fcb4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1fcb8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1fcbc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1fcbe:	f7f0 bb55 	b.w	1036c <sys_heap_init>

0001fcc2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fcc2:	f3ef 8005 	mrs	r0, IPSR
}
   1fcc6:	3800      	subs	r0, #0
   1fcc8:	bf18      	it	ne
   1fcca:	2001      	movne	r0, #1
   1fccc:	4770      	bx	lr

0001fcce <z_impl_k_thread_name_set>:
}
   1fcce:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1fcd2:	4770      	bx	lr

0001fcd4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1fcd4:	f7fb b950 	b.w	1af78 <z_sched_start>

0001fcd8 <z_pm_save_idle_exit>:
{
   1fcd8:	b508      	push	{r3, lr}
	pm_system_resume();
   1fcda:	f7f1 f83d 	bl	10d58 <pm_system_resume>
}
   1fcde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1fce2:	f7ff bf90 	b.w	1fc06 <sys_clock_idle_exit>

0001fce6 <z_queue_node_peek>:
{
   1fce6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1fce8:	4604      	mov	r4, r0
   1fcea:	b130      	cbz	r0, 1fcfa <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fcec:	6802      	ldr	r2, [r0, #0]
   1fcee:	0793      	lsls	r3, r2, #30
   1fcf0:	d003      	beq.n	1fcfa <z_queue_node_peek+0x14>
		ret = anode->data;
   1fcf2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1fcf4:	b109      	cbz	r1, 1fcfa <z_queue_node_peek+0x14>
			k_free(anode);
   1fcf6:	f000 f952 	bl	1ff9e <k_free>
}
   1fcfa:	4620      	mov	r0, r4
   1fcfc:	bd10      	pop	{r4, pc}

0001fcfe <z_impl_k_queue_init>:
	list->head = NULL;
   1fcfe:	2300      	movs	r3, #0
	list->tail = NULL;
   1fd00:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1fd04:	6083      	str	r3, [r0, #8]
   1fd06:	f100 030c 	add.w	r3, r0, #12
   1fd0a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1fd0e:	f100 0314 	add.w	r3, r0, #20
   1fd12:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1fd16:	4770      	bx	lr

0001fd18 <k_queue_append>:
{
   1fd18:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1fd1a:	2301      	movs	r3, #1
   1fd1c:	9300      	str	r3, [sp, #0]
   1fd1e:	2300      	movs	r3, #0
{
   1fd20:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1fd22:	4619      	mov	r1, r3
   1fd24:	f7f9 fe1e 	bl	19964 <queue_insert>
}
   1fd28:	b003      	add	sp, #12
   1fd2a:	f85d fb04 	ldr.w	pc, [sp], #4

0001fd2e <k_queue_prepend>:
{
   1fd2e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1fd30:	2300      	movs	r3, #0
{
   1fd32:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1fd34:	9300      	str	r3, [sp, #0]
   1fd36:	4619      	mov	r1, r3
   1fd38:	f7f9 fe14 	bl	19964 <queue_insert>
}
   1fd3c:	b003      	add	sp, #12
   1fd3e:	f85d fb04 	ldr.w	pc, [sp], #4

0001fd42 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1fd42:	b15a      	cbz	r2, 1fd5c <z_impl_k_sem_init+0x1a>
   1fd44:	428a      	cmp	r2, r1
   1fd46:	d309      	bcc.n	1fd5c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1fd48:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1fd4c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1fd50:	e9c0 0000 	strd	r0, r0, [r0]
   1fd54:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1fd58:	2000      	movs	r0, #0
   1fd5a:	4770      	bx	lr
		return -EINVAL;
   1fd5c:	f06f 0015 	mvn.w	r0, #21
}
   1fd60:	4770      	bx	lr

0001fd62 <notify_queue_locked>:
	if (queue != NULL) {
   1fd62:	b120      	cbz	r0, 1fd6e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1fd64:	2200      	movs	r2, #0
   1fd66:	4611      	mov	r1, r2
   1fd68:	3088      	adds	r0, #136	; 0x88
   1fd6a:	f7fb bf1d 	b.w	1bba8 <z_sched_wake>
}
   1fd6e:	4770      	bx	lr

0001fd70 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   1fd70:	68c3      	ldr	r3, [r0, #12]
{
   1fd72:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   1fd74:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   1fd78:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1fd7c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   1fd7e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1fd80:	d502      	bpl.n	1fd88 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1fd82:	3010      	adds	r0, #16
   1fd84:	f7fc f8b8 	bl	1bef8 <z_abort_timeout>
}
   1fd88:	4620      	mov	r0, r4
   1fd8a:	bd10      	pop	{r4, pc}

0001fd8c <cancel_async_locked>:
{
   1fd8c:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fd8e:	68c0      	ldr	r0, [r0, #12]
{
   1fd90:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fd92:	0784      	lsls	r4, r0, #30
   1fd94:	f3c0 0140 	ubfx	r1, r0, #1, #1
   1fd98:	d416      	bmi.n	1fdc8 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   1fd9a:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1fd9e:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   1fda0:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   1fda2:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1fda4:	d510      	bpl.n	1fdc8 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fda6:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   1fdaa:	b168      	cbz	r0, 1fdc8 <cancel_async_locked+0x3c>
   1fdac:	4283      	cmp	r3, r0
   1fdae:	d11d      	bne.n	1fdec <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   1fdb0:	6818      	ldr	r0, [r3, #0]
   1fdb2:	b999      	cbnz	r1, 1fddc <cancel_async_locked+0x50>
   1fdb4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   1fdb8:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1fdbc:	428b      	cmp	r3, r1
   1fdbe:	d101      	bne.n	1fdc4 <cancel_async_locked+0x38>
	list->tail = node;
   1fdc0:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   1fdc4:	2200      	movs	r2, #0
   1fdc6:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   1fdc8:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   1fdca:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   1fdce:	bf1e      	ittt	ne
   1fdd0:	f042 0202 	orrne.w	r2, r2, #2
   1fdd4:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1fdd6:	f002 000f 	andne.w	r0, r2, #15
}
   1fdda:	bd10      	pop	{r4, pc}
   1fddc:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fdde:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   1fde2:	4283      	cmp	r3, r0
	list->tail = node;
   1fde4:	bf08      	it	eq
   1fde6:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   1fdea:	e7eb      	b.n	1fdc4 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fdec:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fdee:	6800      	ldr	r0, [r0, #0]
   1fdf0:	e7db      	b.n	1fdaa <cancel_async_locked+0x1e>

0001fdf2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1fdf2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1fdf6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1fdfa:	4283      	cmp	r3, r0
		return b2 - b1;
   1fdfc:	bf14      	ite	ne
   1fdfe:	1ac0      	subne	r0, r0, r3
	return 0;
   1fe00:	2000      	moveq	r0, #0
}
   1fe02:	4770      	bx	lr

0001fe04 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1fe04:	4603      	mov	r3, r0
   1fe06:	b920      	cbnz	r0, 1fe12 <z_reschedule_irqlock+0xe>
   1fe08:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1fe0c:	b90a      	cbnz	r2, 1fe12 <z_reschedule_irqlock+0xe>
   1fe0e:	f7f1 bb71 	b.w	114f4 <arch_swap>
   1fe12:	f383 8811 	msr	BASEPRI, r3
   1fe16:	f3bf 8f6f 	isb	sy
}
   1fe1a:	4770      	bx	lr

0001fe1c <z_reschedule_unlocked>:
	__asm__ volatile(
   1fe1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe20:	f3ef 8011 	mrs	r0, BASEPRI
   1fe24:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe28:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1fe2c:	f7ff bfea 	b.w	1fe04 <z_reschedule_irqlock>

0001fe30 <z_priq_dumb_best>:
{
   1fe30:	4603      	mov	r3, r0
	return list->head == list;
   1fe32:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fe34:	4283      	cmp	r3, r0
   1fe36:	d003      	beq.n	1fe40 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1fe38:	2800      	cmp	r0, #0
   1fe3a:	bf38      	it	cc
   1fe3c:	2000      	movcc	r0, #0
   1fe3e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1fe40:	2000      	movs	r0, #0
}
   1fe42:	4770      	bx	lr

0001fe44 <z_unpend_all>:
{
   1fe44:	b538      	push	{r3, r4, r5, lr}
   1fe46:	4605      	mov	r5, r0
	int need_sched = 0;
   1fe48:	2000      	movs	r0, #0
	return list->head == list;
   1fe4a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fe4c:	42a5      	cmp	r5, r4
   1fe4e:	d000      	beq.n	1fe52 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1fe50:	b904      	cbnz	r4, 1fe54 <z_unpend_all+0x10>
}
   1fe52:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1fe54:	4620      	mov	r0, r4
   1fe56:	f7fa fea3 	bl	1aba0 <z_unpend_thread>
		z_ready_thread(thread);
   1fe5a:	4620      	mov	r0, r4
   1fe5c:	f7fb f844 	bl	1aee8 <z_ready_thread>
		need_sched = 1;
   1fe60:	2001      	movs	r0, #1
   1fe62:	e7f2      	b.n	1fe4a <z_unpend_all+0x6>

0001fe64 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1fe64:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1fe66:	f7fc f9f9 	bl	1c25c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1fe6a:	bd08      	pop	{r3, pc}

0001fe6c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1fe6c:	b108      	cbz	r0, 1fe72 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1fe6e:	f7f1 bf93 	b.w	11d98 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1fe72:	4770      	bx	lr

0001fe74 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   1fe74:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fe76:	1c4b      	adds	r3, r1, #1
   1fe78:	bf08      	it	eq
   1fe7a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1fe7e:	4604      	mov	r4, r0
   1fe80:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fe82:	d013      	beq.n	1feac <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fe84:	ea54 0105 	orrs.w	r1, r4, r5
   1fe88:	d103      	bne.n	1fe92 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1fe8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1fe8e:	f7fc b9e5 	b.w	1c25c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1fe92:	f06f 0101 	mvn.w	r1, #1
   1fe96:	1a0a      	subs	r2, r1, r0
   1fe98:	f04f 31ff 	mov.w	r1, #4294967295
   1fe9c:	eb61 0305 	sbc.w	r3, r1, r5
   1fea0:	2a00      	cmp	r2, #0
   1fea2:	f173 0100 	sbcs.w	r1, r3, #0
   1fea6:	db02      	blt.n	1feae <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   1fea8:	4610      	mov	r0, r2
   1feaa:	4619      	mov	r1, r3
}
   1feac:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   1feae:	f7fc f9d5 	bl	1c25c <sys_clock_tick_get>
   1feb2:	2c01      	cmp	r4, #1
   1feb4:	f175 0300 	sbcs.w	r3, r5, #0
   1feb8:	bfbc      	itt	lt
   1feba:	2401      	movlt	r4, #1
   1febc:	2500      	movlt	r5, #0
   1febe:	1820      	adds	r0, r4, r0
   1fec0:	eb45 0101 	adc.w	r1, r5, r1
   1fec4:	e7f2      	b.n	1feac <sys_clock_timeout_end_calc+0x38>

0001fec6 <k_timer_init>:
	timer->status = 0U;
   1fec6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1fec8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   1fecc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1fed0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1fed4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1fed8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1feda:	6343      	str	r3, [r0, #52]	; 0x34
}
   1fedc:	4770      	bx	lr

0001fede <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1fede:	b510      	push	{r4, lr}
   1fee0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1fee2:	f7fc f809 	bl	1bef8 <z_abort_timeout>

	if (inactive) {
   1fee6:	b9b0      	cbnz	r0, 1ff16 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1fee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1feea:	b10b      	cbz	r3, 1fef0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1feec:	4620      	mov	r0, r4
   1feee:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1fef0:	f104 0018 	add.w	r0, r4, #24
   1fef4:	f7fb fb5c 	bl	1b5b0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1fef8:	b168      	cbz	r0, 1ff16 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1fefa:	f7fa fff5 	bl	1aee8 <z_ready_thread>
   1fefe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ff02:	f3ef 8011 	mrs	r0, BASEPRI
   1ff06:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff0a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1ff0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ff12:	f7ff bf77 	b.w	1fe04 <z_reschedule_irqlock>
   1ff16:	bd10      	pop	{r4, pc}

0001ff18 <add_event>:
{
   1ff18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff1a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ff1c:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ff20:	4290      	cmp	r0, r2
   1ff22:	4604      	mov	r4, r0
   1ff24:	460d      	mov	r5, r1
   1ff26:	d105      	bne.n	1ff34 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   1ff28:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1ff2a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1ff2e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ff30:	6065      	str	r5, [r4, #4]
}
   1ff32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1ff34:	2b00      	cmp	r3, #0
   1ff36:	d0f7      	beq.n	1ff28 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ff38:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ff3a:	b100      	cbz	r0, 1ff3e <add_event+0x26>
   1ff3c:	3860      	subs	r0, #96	; 0x60
   1ff3e:	b107      	cbz	r7, 1ff42 <add_event+0x2a>
   1ff40:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ff42:	4639      	mov	r1, r7
   1ff44:	f7ff ff55 	bl	1fdf2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1ff48:	2800      	cmp	r0, #0
   1ff4a:	dced      	bgt.n	1ff28 <add_event+0x10>
	return list->head == list;
   1ff4c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff4e:	42b4      	cmp	r4, r6
   1ff50:	d0ea      	beq.n	1ff28 <add_event+0x10>
   1ff52:	2e00      	cmp	r6, #0
   1ff54:	bf38      	it	cc
   1ff56:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ff58:	2e00      	cmp	r6, #0
   1ff5a:	d0e5      	beq.n	1ff28 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   1ff5c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ff5e:	b101      	cbz	r1, 1ff62 <add_event+0x4a>
   1ff60:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1ff62:	4638      	mov	r0, r7
   1ff64:	f7ff ff45 	bl	1fdf2 <z_sched_prio_cmp>
   1ff68:	2800      	cmp	r0, #0
   1ff6a:	dd05      	ble.n	1ff78 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   1ff6c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ff6e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1ff72:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ff74:	6075      	str	r5, [r6, #4]
			return;
   1ff76:	e7dc      	b.n	1ff32 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   1ff78:	6863      	ldr	r3, [r4, #4]
   1ff7a:	42b3      	cmp	r3, r6
   1ff7c:	d0d4      	beq.n	1ff28 <add_event+0x10>
   1ff7e:	6836      	ldr	r6, [r6, #0]
   1ff80:	e7ea      	b.n	1ff58 <add_event+0x40>

0001ff82 <z_handle_obj_poll_events>:
{
   1ff82:	4603      	mov	r3, r0
	return list->head == list;
   1ff84:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1ff86:	4283      	cmp	r3, r0
   1ff88:	d008      	beq.n	1ff9c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1ff8a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1ff8e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1ff90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ff92:	2300      	movs	r3, #0
	node->prev = NULL;
   1ff94:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1ff98:	f7fc bc84 	b.w	1c8a4 <signal_poll_event>
}
   1ff9c:	4770      	bx	lr

0001ff9e <k_free>:
	if (ptr != NULL) {
   1ff9e:	b120      	cbz	r0, 1ffaa <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1ffa0:	1f01      	subs	r1, r0, #4
   1ffa2:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1ffa6:	f7f9 b821 	b.w	18fec <k_heap_free>
}
   1ffaa:	4770      	bx	lr

0001ffac <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1ffac:	4770      	bx	lr

0001ffae <memcmp>:
   1ffae:	b530      	push	{r4, r5, lr}
   1ffb0:	3901      	subs	r1, #1
   1ffb2:	2400      	movs	r4, #0
   1ffb4:	42a2      	cmp	r2, r4
   1ffb6:	d101      	bne.n	1ffbc <memcmp+0xe>
   1ffb8:	2000      	movs	r0, #0
   1ffba:	e005      	b.n	1ffc8 <memcmp+0x1a>
   1ffbc:	5d03      	ldrb	r3, [r0, r4]
   1ffbe:	3401      	adds	r4, #1
   1ffc0:	5d0d      	ldrb	r5, [r1, r4]
   1ffc2:	42ab      	cmp	r3, r5
   1ffc4:	d0f6      	beq.n	1ffb4 <memcmp+0x6>
   1ffc6:	1b58      	subs	r0, r3, r5
   1ffc8:	bd30      	pop	{r4, r5, pc}

0001ffca <memcpy>:
   1ffca:	440a      	add	r2, r1
   1ffcc:	4291      	cmp	r1, r2
   1ffce:	f100 33ff 	add.w	r3, r0, #4294967295
   1ffd2:	d100      	bne.n	1ffd6 <memcpy+0xc>
   1ffd4:	4770      	bx	lr
   1ffd6:	b510      	push	{r4, lr}
   1ffd8:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ffdc:	f803 4f01 	strb.w	r4, [r3, #1]!
   1ffe0:	4291      	cmp	r1, r2
   1ffe2:	d1f9      	bne.n	1ffd8 <memcpy+0xe>
   1ffe4:	bd10      	pop	{r4, pc}

0001ffe6 <__memcpy_chk>:
   1ffe6:	429a      	cmp	r2, r3
   1ffe8:	b508      	push	{r3, lr}
   1ffea:	d901      	bls.n	1fff0 <__memcpy_chk+0xa>
   1ffec:	f7f1 fe98 	bl	11d20 <__chk_fail>
   1fff0:	4281      	cmp	r1, r0
   1fff2:	d804      	bhi.n	1fffe <__memcpy_chk+0x18>
   1fff4:	188b      	adds	r3, r1, r2
   1fff6:	4298      	cmp	r0, r3
   1fff8:	d3f8      	bcc.n	1ffec <__memcpy_chk+0x6>
   1fffa:	4281      	cmp	r1, r0
   1fffc:	d102      	bne.n	20004 <CONFIG_PM_SRAM_SIZE+0x4>
   1fffe:	1883      	adds	r3, r0, r2
   20000:	4299      	cmp	r1, r3
   20002:	d3f3      	bcc.n	1ffec <__memcpy_chk+0x6>
   20004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20008:	f7ff bfdf 	b.w	1ffca <memcpy>

0002000c <memset>:
   2000c:	4402      	add	r2, r0
   2000e:	4603      	mov	r3, r0
   20010:	4293      	cmp	r3, r2
   20012:	d100      	bne.n	20016 <memset+0xa>
   20014:	4770      	bx	lr
   20016:	f803 1b01 	strb.w	r1, [r3], #1
   2001a:	e7f9      	b.n	20010 <memset+0x4>

0002001c <strcpy>:
   2001c:	4603      	mov	r3, r0
   2001e:	f811 2b01 	ldrb.w	r2, [r1], #1
   20022:	f803 2b01 	strb.w	r2, [r3], #1
   20026:	2a00      	cmp	r2, #0
   20028:	d1f9      	bne.n	2001e <strcpy+0x2>
   2002a:	4770      	bx	lr

0002002c <strncmp>:
   2002c:	b510      	push	{r4, lr}
   2002e:	b16a      	cbz	r2, 2004c <strncmp+0x20>
   20030:	3901      	subs	r1, #1
   20032:	1884      	adds	r4, r0, r2
   20034:	f810 3b01 	ldrb.w	r3, [r0], #1
   20038:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2003c:	4293      	cmp	r3, r2
   2003e:	d103      	bne.n	20048 <strncmp+0x1c>
   20040:	42a0      	cmp	r0, r4
   20042:	d001      	beq.n	20048 <strncmp+0x1c>
   20044:	2b00      	cmp	r3, #0
   20046:	d1f5      	bne.n	20034 <strncmp+0x8>
   20048:	1a98      	subs	r0, r3, r2
   2004a:	bd10      	pop	{r4, pc}
   2004c:	4610      	mov	r0, r2
   2004e:	e7fc      	b.n	2004a <strncmp+0x1e>

00020050 <strnlen>:
   20050:	b510      	push	{r4, lr}
   20052:	4602      	mov	r2, r0
   20054:	4401      	add	r1, r0
   20056:	428a      	cmp	r2, r1
   20058:	4613      	mov	r3, r2
   2005a:	d101      	bne.n	20060 <strnlen+0x10>
   2005c:	1a18      	subs	r0, r3, r0
   2005e:	bd10      	pop	{r4, pc}
   20060:	781c      	ldrb	r4, [r3, #0]
   20062:	3201      	adds	r2, #1
   20064:	2c00      	cmp	r4, #0
   20066:	d1f6      	bne.n	20056 <strnlen+0x6>
   20068:	e7f8      	b.n	2005c <strnlen+0xc>
	...

0002006c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2006c:	f7f8 bc1c 	b.w	188a8 <SystemInit>
